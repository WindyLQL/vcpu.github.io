<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>i博客</title>
  <subtitle>仰望星空前，还需脚踏实地。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vcpu.me/"/>
  <updated>2018-03-01T03:27:34.000Z</updated>
  <id>http://vcpu.me/</id>
  
  <author>
    <name>vcpu.me</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OSX Fusion ubuntu16.04.2 虚拟机安装dpdk ovs</title>
    <link href="http://vcpu.me/dpdk-ovs-vhost-user-kvm/"/>
    <id>http://vcpu.me/dpdk-ovs-vhost-user-kvm/</id>
    <published>2018-02-28T10:00:00.000Z</published>
    <updated>2018-03-01T03:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么会有这篇文章：</p>
<p>笔者想体验下ovs dpdk情况下，云主机使用最高网络io性能的vhostuser方式，可是却没有空闲的物理机器，且在物理机器调试也没有在虚拟机调试方便；于是笔者花了一些时间探究如何在虚拟机中完成dpdk vhostuser运行工作；本文涉及到kvm安装、ovs编译、dpdk编译、虚拟机中以kvm方式启动新的虚拟机、ovs流表等信息，以实践为主，先跑起来是更加理解的基础。因为环境差异，你参考这篇可能会遇到新的问题，请google解决吧。</p>
<p>注意：<br>1.为了虚拟机内也支持硬件虚拟化，笔者选择fusion8 安装ubuntu16.04操作系统（fusion下载要注册，说实话很麻烦），勾选Intel VT-x/EPT<br>2.本人笔记本mac pro16款的，不需要设置，就可以在虚拟机中支持硬件虚拟化；不要拿virtual box跑，因为其建立虚拟机中不支持kvm</p>
<a id="more"></a>
<h1 id="安装调试平台介绍"><a href="#安装调试平台介绍" class="headerlink" title="安装调试平台介绍"></a>安装调试平台介绍</h1><p><img src="/myimages/5DE0601BA3767FF80D4DAB7C91C1693B.jpg" alt=""></p>
<p>osx操作系统VMware Fusion 8安装Ubuntu 16.04.2，中安装dpdk和ovs</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span># lsb_release  -a</div><div class="line">No LSB modules are available.</div><div class="line">Distributor ID:	Ubuntu</div><div class="line">Description:	Ubuntu <span class="number">16.04</span><span class="number">.2</span> LTS</div><div class="line">Release:	<span class="number">16.04</span></div><div class="line">Codename:	xenial</div></pre></td></tr></table></figure>
<p>开启4个虚拟机网卡：</p>
<p><img src="/myimages/3D8ED0FF1AC2A35C64C477B203CE0EBA.jpg" alt=""></p>
<h1 id="KVM安装启动虚拟机"><a href="#KVM安装启动虚拟机" class="headerlink" title="KVM安装启动虚拟机"></a>KVM安装启动虚拟机</h1><h2 id="是否支持硬件计算资源虚拟话？"><a href="#是否支持硬件计算资源虚拟话？" class="headerlink" title="是否支持硬件计算资源虚拟话？"></a>是否支持硬件计算资源虚拟话？</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">egrep -c '(svm|vmx)' /proc/cpuinfo</div></pre></td></tr></table></figure>
<p>如果得到结果大于0就代表所在host主机是支持虚拟话的</p>
<h2 id="安装kvm相关依赖"><a href="#安装kvm相关依赖" class="headerlink" title="安装kvm相关依赖"></a>安装kvm相关依赖</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install kvm qemu-kvm libvirt-bin virtinst bridge-utils</div></pre></td></tr></table></figure>
<h2 id="安装完成后尝试启动已经制作好的带有操作系统的硬盘"><a href="#安装完成后尝试启动已经制作好的带有操作系统的硬盘" class="headerlink" title="安装完成后尝试启动已经制作好的带有操作系统的硬盘"></a>安装完成后尝试启动已经制作好的带有操作系统的硬盘</h2><p>/root/ubuntu-16.04-root-1.img 为带有操作系统的硬盘</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-system-x86_64 -m <span class="number">1024</span> -smp <span class="number">2</span> -cpu host -hda /root/ubuntu<span class="number">-16.04</span>-root<span class="number">-1.</span>img -boot c -enable-kvm -no-reboot -net none -nographic   -boot c -vnc :<span class="number">0</span></div></pre></td></tr></table></figure>
<h1 id="DPDK编译安装"><a href="#DPDK编译安装" class="headerlink" title="DPDK编译安装"></a>DPDK编译安装</h1><h2 id="基础库安装"><a href="#基础库安装" class="headerlink" title="基础库安装"></a>基础库安装</h2><p>sudo apt-get install m4 bison flex</p>
<p>wget <a href="http://dpdk.org/browse/dpdk/snapshot/dpdk-16.11.tar.gz" target="_blank" rel="external">http://dpdk.org/browse/dpdk/snapshot/dpdk-16.11.tar.gz</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zxvf dpdk<span class="number">-16.11</span>.tar.gz</div><div class="line">cd dpdk<span class="number">-16.11</span>/</div></pre></td></tr></table></figure>
<h2 id="修改一处代码：否则后续会报错"><a href="#修改一处代码：否则后续会报错" class="headerlink" title="修改一处代码：否则后续会报错"></a>修改一处代码：否则后续会报错</h2><p>EAL: Error reading from file descriptor 23: Input/output error</p>
<p>vim lib/librte_eal/linuxapp/igb_uio/igb_uio.c</p>
<p><img src="/myimages/7E8D0EC4B3C748BEB0A999D978500484.jpg" alt=""></p>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/src/dpdk</div><div class="line">make config T=x86_64-native-linuxapp-gcc</div><div class="line">make install T=x86_64-native-linuxapp-gcc DESTDIR=/usr/src/dpdk</div><div class="line">make install T=x86_64-native-linuxapp-gcc DESTDIR=/usr</div></pre></td></tr></table></figure>
<p>说明：/usr/src/dpdk /usr 路径安装ovs用到</p>
<h1 id="ovs编译安装"><a href="#ovs编译安装" class="headerlink" title="ovs编译安装"></a>ovs编译安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="comment">//openvswitch.org/releases/openvswitch-2.7.0.tar.gz</span></div></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">tar -zxvf openvswitch<span class="number">-2.7</span><span class="number">.0</span>.tar.gz</div><div class="line">cd openvswitch<span class="number">-2.7</span><span class="number">.0</span>/ </div><div class="line">./boot.sh</div><div class="line">./configure \</div><div class="line">--with-dpdk=/usr/src/dpdk \</div><div class="line">--prefix=/usr \</div><div class="line">--exec-prefix=/usr \</div><div class="line">--sysconfdir=/etc \</div><div class="line">--localstatedir=/var</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<h1 id="运行ovs"><a href="#运行ovs" class="headerlink" title="运行ovs"></a>运行ovs</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>步骤1:</p>
<p>/etc/default/grub</p>
<p>添加iommu=pt intel_iommu=on</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"iommu=pt intel_iommu=on"</span></div></pre></td></tr></table></figure>
<p>步骤2:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update-grub</div></pre></td></tr></table></figure>
<p>步骤3:重启</p>
<p>步骤4:查看是否配置完成</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~/openvswitch<span class="number">-2.7</span><span class="number">.0</span><span class="meta"># cat /proc/cmdline</span></div><div class="line">BOOT_IMAGE=/vmlinuz<span class="number">-4.4</span><span class="number">.0</span><span class="number">-62</span>-generic root=/dev/mapper/qinlong--vg-root ro iommu=pt intel_iommu=on</div></pre></td></tr></table></figure>
<h2 id="绑定网卡"><a href="#绑定网卡" class="headerlink" title="绑定网卡"></a>绑定网卡</h2><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">modprobe uio</div><div class="line">insmod dpdk<span class="number">-16.11</span>/x86_64-native-linuxapp-gcc/kmod/igb_uio.ko</div></pre></td></tr></table></figure>
<h3 id="查看是否加载成功："><a href="#查看是否加载成功：" class="headerlink" title="查看是否加载成功："></a>查看是否加载成功：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~<span class="meta"># lsmod |grep uio</span></div><div class="line">igb_uio                <span class="number">16384</span>  <span class="number">0</span></div><div class="line">uio                    <span class="number">20480</span>  <span class="number">1</span> igb_uio</div></pre></td></tr></table></figure>
<h3 id="查看当前网卡状态"><a href="#查看当前网卡状态" class="headerlink" title="查看当前网卡状态"></a>查看当前网卡状态</h3><p><img src="/myimages/F1A08E2C497EC280C38ABF5BC98B69A3.jpg" alt=""></p>
<h2 id="配置大页"><a href="#配置大页" class="headerlink" title="配置大页"></a>配置大页</h2><h3 id="修改大页占4G内存"><a href="#修改大页占4G内存" class="headerlink" title="修改大页占4G内存"></a>修改大页占4G内存</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo 2048 &gt; /proc/sys/vm/nr_hugepages</div><div class="line">echo 'vm.nr_hugepages=2048' &gt; /etc/sysctl.d/hugepages.conf</div></pre></td></tr></table></figure>
<p>说明：2048*2M =4G，你要注意你系统内存是否有这么大，否则大页内存会分配失败，笔者虚拟机是8G内存</p>
<h3 id="查看当前大页"><a href="#查看当前大页" class="headerlink" title="查看当前大页"></a>查看当前大页</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># grep HugePages_ /proc/meminfo</span></div><div class="line">HugePages_Total:    <span class="number">2048</span></div><div class="line">HugePages_Free:     <span class="number">2048</span></div><div class="line">HugePages_Rsvd:        <span class="number">0</span></div><div class="line">HugePages_Surp:        <span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="挂载大页"><a href="#挂载大页" class="headerlink" title="挂载大页"></a>挂载大页</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -t hugetlbfs none /dev/hugepages</div></pre></td></tr></table></figure>
<p><img src="/myimages/FAC99B0891372747F42790827D7D2798.jpg" alt=""></p>
<h2 id="启动ovs进程"><a href="#启动ovs进程" class="headerlink" title="启动ovs进程"></a>启动ovs进程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># mkdir -p /etc/openvswitch</span></div><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># mkdir -p /var/run/openvswitch</span></div><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># ovsdb-server /etc/openvswitch/conf.db \</span></div><div class="line">-vconsole:emer -vsyslog:err -vfile:info \</div><div class="line">--remote=punix:/var/run/openvswitch/db.sock \</div><div class="line">--private-key=db:Open_vSwitch,SSL,private_key \</div><div class="line">--certificate=db:Open_vSwitch,SSL,certificate \</div><div class="line">--bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert --no-chdir \</div><div class="line">--log-file=/var/log/openvswitch/ovsdb-server.log \</div><div class="line">--pidfile=/var/run/openvswitch/ovsdb-server.pid \</div><div class="line">--detach --monitor</div></pre></td></tr></table></figure>
<h3 id="第一次运行"><a href="#第一次运行" class="headerlink" title="第一次运行"></a>第一次运行</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --no-wait init</div></pre></td></tr></table></figure>
<h2 id="初始化dpdk"><a href="#初始化dpdk" class="headerlink" title="初始化dpdk"></a>初始化dpdk</h2><h3 id="ovs-启用dpdk"><a href="#ovs-启用dpdk" class="headerlink" title="ovs 启用dpdk"></a>ovs 启用dpdk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --no-wait <span class="built_in">set</span> Open_vSwitch . other_config:dpdk-init=<span class="literal">true</span></div></pre></td></tr></table></figure>
<h3 id="自定义dpdk的参数"><a href="#自定义dpdk的参数" class="headerlink" title="自定义dpdk的参数"></a>自定义dpdk的参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --no-wait <span class="built_in">set</span> Open_vSwitch . other_config:dpdk-socket-mem=<span class="string">"1024,0"</span></div></pre></td></tr></table></figure>
<h3 id="指定dpdk运行的core"><a href="#指定dpdk运行的core" class="headerlink" title="指定dpdk运行的core"></a>指定dpdk运行的core</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl <span class="built_in">set</span> Open_vSwitch . other_config:pmd-cpu-mask=<span class="number">0x03</span></div></pre></td></tr></table></figure>
<h3 id="查看确认dpdk设置"><a href="#查看确认dpdk设置" class="headerlink" title="查看确认dpdk设置"></a>查看确认dpdk设置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># ovs-vsctl get Open_vSwitch . other_config:dpdk-socket-mem</span></div><div class="line"><span class="string">"1024,0"</span></div><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># ovs-vsctl get Open_vSwitch . other_config:pmd-cpu-mask</span></div><div class="line"><span class="string">"0x03"</span></div><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta">#  ovs-vsctl get Open_vSwitch . other_config:dpdk-init</span></div><div class="line"><span class="string">"true"</span></div></pre></td></tr></table></figure>
<h2 id="启动vswitchd进程"><a href="#启动vswitchd进程" class="headerlink" title="启动vswitchd进程"></a>启动vswitchd进程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ovs-vswitchd unix:/var/run/openvswitch/db.sock \</div><div class="line">-vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir \</div><div class="line">--<span class="built_in">log</span>-file=/var/<span class="built_in">log</span>/openvswitch/ovs-vswitchd.<span class="built_in">log</span> \</div><div class="line">--pidfile=/var/run/openvswitch/ovs-vswitchd.pid \</div><div class="line">--detach --monitor</div></pre></td></tr></table></figure>
<h3 id="启动过程记录如下："><a href="#启动过程记录如下：" class="headerlink" title="启动过程记录如下："></a>启动过程记录如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~/dpdk<span class="number">-16.11</span><span class="meta"># ovs-vswitchd unix:/var/run/openvswitch/db.sock \</span></div><div class="line">&gt; -vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir \</div><div class="line">&gt; --log-file=/var/log/openvswitch/ovs-vswitchd.log \</div><div class="line">&gt; --pidfile=/var/run/openvswitch/ovs-vswitchd.pid \</div><div class="line">&gt; --detach --monitor</div><div class="line">EAL: Detected <span class="number">8</span> lcore(s)</div><div class="line">EAL: No <span class="built_in">free</span> hugepages reported in hugepages<span class="number">-1048576</span>kB</div><div class="line">EAL: Probing VFIO support...</div><div class="line">EAL: PCI device <span class="number">0000</span>:<span class="number">02</span>:<span class="number">01.0</span> on NUMA socket <span class="number">-1</span></div><div class="line">EAL:   probe driver: <span class="number">8086</span>:<span class="number">100f</span> net_e1000_em</div><div class="line">EAL: PCI device <span class="number">0000</span>:<span class="number">02</span>:<span class="number">02.0</span> on NUMA socket <span class="number">-1</span></div><div class="line">EAL:   probe driver: <span class="number">8086</span>:<span class="number">100f</span> net_e1000_em</div><div class="line">EAL: PCI device <span class="number">0000</span>:<span class="number">02</span>:<span class="number">03.0</span> on NUMA socket <span class="number">-1</span></div><div class="line">EAL:   probe driver: <span class="number">8086</span>:<span class="number">100f</span> net_e1000_em</div><div class="line">EAL: PCI device <span class="number">0000</span>:<span class="number">02</span>:<span class="number">04.0</span> on NUMA socket <span class="number">-1</span></div><div class="line">EAL:   probe driver: <span class="number">8086</span>:<span class="number">100f</span> net_e1000_em</div><div class="line">VHOST_CONFIG: vhost-user server: socket created, fd: <span class="number">35</span></div><div class="line">VHOST_CONFIG: bind to /var/run/openvswitch/vhost-user2</div><div class="line">VHOST_CONFIG: vhost-user server: socket created, fd: <span class="number">45</span></div><div class="line">VHOST_CONFIG: bind to /var/run/openvswitch/vhost-user1</div></pre></td></tr></table></figure>
<p>启动成功后，ovs-vswitchd进程占用率200%</p>
<p><img src="/myimages/0F78528DFEBB28E599C80886D718D0BE.jpg" alt=""></p>
<h1 id="ovs使用跑vhost-user并连通虚拟机"><a href="#ovs使用跑vhost-user并连通虚拟机" class="headerlink" title="ovs使用跑vhost-user并连通虚拟机"></a>ovs使用跑vhost-user并连通虚拟机</h1><p><img src="/myimages/EAF6A10695FF1BA9EB54D5D841244E37.png" alt="dd.png"></p>
<h2 id="建立bridge-br0和两个云主机对应的dpdkvhostuser接口"><a href="#建立bridge-br0和两个云主机对应的dpdkvhostuser接口" class="headerlink" title="建立bridge br0和两个云主机对应的dpdkvhostuser接口"></a>建立bridge br0和两个云主机对应的dpdkvhostuser接口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo ovs-vsctl add-br br0 -- <span class="built_in">set</span> bridge br0 datapath_type=netdev</div><div class="line">sudo ovs-vsctl add-port br0 vhost-user1 -- <span class="built_in">set</span> Interface vhost-user1 type=dpdkvhostuser</div><div class="line">sudo ovs-vsctl add-port br0 vhost-user2 -- <span class="built_in">set</span> Interface vhost-user2 type=dpdkvhostuser</div></pre></td></tr></table></figure>
<h2 id="查看是否bridge桥是否建立成功"><a href="#查看是否bridge桥是否建立成功" class="headerlink" title="查看是否bridge桥是否建立成功"></a>查看是否bridge桥是否建立成功</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@qinlong:~<span class="meta"># ovs-vsctl show</span></div><div class="line"><span class="number">280e45</span>c6<span class="number">-9143</span><span class="number">-4</span>aad-ac4b<span class="number">-2</span>c2305a96d0f</div><div class="line">    Bridge <span class="string">"br0"</span></div><div class="line">        Port <span class="string">"vhost-user2"</span></div><div class="line">            Interface <span class="string">"vhost-user2"</span></div><div class="line">                type: dpdkvhostuser</div><div class="line">        Port <span class="string">"vhost-user1"</span></div><div class="line">            Interface <span class="string">"vhost-user1"</span></div><div class="line">                type: dpdkvhostuser</div><div class="line">        Port <span class="string">"br0"</span></div><div class="line">            Interface <span class="string">"br0"</span></div><div class="line">                type: internal</div></pre></td></tr></table></figure>
<h2 id="启动虚拟机1："><a href="#启动虚拟机1：" class="headerlink" title="启动虚拟机1："></a>启动虚拟机1：</h2><h3 id="设置vnc-登录号，设置vhost-user-io，启动虚拟机，ubuntu-16-04-root-1-img为装有ubuntu操作系统的硬盘"><a href="#设置vnc-登录号，设置vhost-user-io，启动虚拟机，ubuntu-16-04-root-1-img为装有ubuntu操作系统的硬盘" class="headerlink" title="设置vnc 登录号，设置vhost-user io，启动虚拟机，ubuntu-16.04-root-1.img为装有ubuntu操作系统的硬盘"></a>设置vnc 登录号，设置vhost-user io，启动虚拟机，ubuntu-16.04-root-1.img为装有ubuntu操作系统的硬盘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">qemu-system-x86_64 -m <span class="number">1024</span> -smp <span class="number">4</span> -cpu host -hda ~/ubuntu<span class="number">-16.04</span>-root<span class="number">-1.</span>img -boot c -enable-kvm -no-reboot -nographic -net none -vnc :<span class="number">0</span> \</div><div class="line">-chardev socket,id=char1,path=/var/run/openvswitch/vhost-user1 \</div><div class="line">-netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce \</div><div class="line">-device virtio-net-pci,mac=<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span>,netdev=mynet1 \</div><div class="line">-object memory-backend-file,id=mem,size=<span class="number">1024</span>M,mem-path=/dev/hugepages,share=on \</div><div class="line">-numa node,memdev=mem -mem-prealloc</div></pre></td></tr></table></figure>
<h2 id="启动虚拟机2"><a href="#启动虚拟机2" class="headerlink" title="启动虚拟机2:"></a>启动虚拟机2:</h2><h3 id="设置vnc-登录号，设置vhost-user-io，启动虚拟机，ubuntu-16-04-root-2-img为装有ubuntu操作系统的硬盘"><a href="#设置vnc-登录号，设置vhost-user-io，启动虚拟机，ubuntu-16-04-root-2-img为装有ubuntu操作系统的硬盘" class="headerlink" title="设置vnc 登录号，设置vhost-user io，启动虚拟机，ubuntu-16.04-root-2.img为装有ubuntu操作系统的硬盘"></a>设置vnc 登录号，设置vhost-user io，启动虚拟机，ubuntu-16.04-root-2.img为装有ubuntu操作系统的硬盘</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">qemu-system-x86_64 -m <span class="number">1024</span> -smp <span class="number">4</span> -cpu host -hda /root/ubuntu<span class="number">-16.04</span>-root<span class="number">-2.</span>img -boot c -enable-kvm -no-reboot -nographic -net none -vnc :<span class="number">1</span> \</div><div class="line">-chardev socket,id=char2,path=/var/run/openvswitch/vhost-user2 \</div><div class="line">-netdev type=vhost-user,id=mynet2,chardev=char2,vhostforce \</div><div class="line">-device virtio-net-pci,mac=<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">02</span>,netdev=mynet2 \</div><div class="line">-object memory-backend-file,id=mem,size=<span class="number">1024</span>M,mem-path=/dev/hugepages,share=on \</div><div class="line">-numa node,memdev=mem -mem-prealloc</div></pre></td></tr></table></figure>
<h2 id="虚拟机1和虚拟机2连通性测试"><a href="#虚拟机1和虚拟机2连通性测试" class="headerlink" title="虚拟机1和虚拟机2连通性测试"></a>虚拟机1和虚拟机2连通性测试</h2><p><img src="/myimages/9B17189E3DFAF552359749643F95374B.jpg" alt=""></p>
<p>通过vnc登录后，给云主机配置上一个网段的地址，就可以互通了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么会有这篇文章：&lt;/p&gt;
&lt;p&gt;笔者想体验下ovs dpdk情况下，云主机使用最高网络io性能的vhostuser方式，可是却没有空闲的物理机器，且在物理机器调试也没有在虚拟机调试方便；于是笔者花了一些时间探究如何在虚拟机中完成dpdk vhostuser运行工作；本文涉及到kvm安装、ovs编译、dpdk编译、虚拟机中以kvm方式启动新的虚拟机、ovs流表等信息，以实践为主，先跑起来是更加理解的基础。因为环境差异，你参考这篇可能会遇到新的问题，请google解决吧。&lt;/p&gt;
&lt;p&gt;注意：&lt;br&gt;1.为了虚拟机内也支持硬件虚拟化，笔者选择fusion8 安装ubuntu16.04操作系统（fusion下载要注册，说实话很麻烦），勾选Intel VT-x/EPT&lt;br&gt;2.本人笔记本mac pro16款的，不需要设置，就可以在虚拟机中支持硬件虚拟化；不要拿virtual box跑，因为其建立虚拟机中不支持kvm&lt;/p&gt;
    
    </summary>
    
      <category term="DPDK" scheme="http://vcpu.me/categories/DPDK/"/>
    
    
      <category term="osx操作系统" scheme="http://vcpu.me/tags/osx%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="VMware Fusion 8" scheme="http://vcpu.me/tags/VMware-Fusion-8/"/>
    
      <category term="kvm" scheme="http://vcpu.me/tags/kvm/"/>
    
      <category term="dpdk" scheme="http://vcpu.me/tags/dpdk/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="vhost-user" scheme="http://vcpu.me/tags/vhost-user/"/>
    
  </entry>
  
  <entry>
    <title>openstack SDN vlan多外网fip环路问题解决</title>
    <link href="http://vcpu.me/vlan-muti-external-fip-porb/"/>
    <id>http://vcpu.me/vlan-muti-external-fip-porb/</id>
    <published>2018-02-26T10:00:00.000Z</published>
    <updated>2018-02-26T10:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/myimages/D5F79DE34BDF57EFE2659F53463C635C.png" alt="环路问题.png"></p>
<h2 id="组网环境基本介绍："><a href="#组网环境基本介绍：" class="headerlink" title="组网环境基本介绍："></a>组网环境基本介绍：</h2><p>br-int是ovs交换机，qg和qr是router的两个接口，qg连接外网，qr连接内网vcp网络</p>
<p>云主机位于计算节点2的br-int上</p>
<p>leaf1、leaf2、spine、tor为物理交换机，其中外网的网关在spine上</p>
<h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><p>配置vlan外网，申请fip，最后将fip和云主机绑定后，整个openstack网络环境出现大量的新绑定的免费arp数据包，网络瘫痪。从tor交换机无法连接到网络节点和计算节点的管理地址了。</p>
<p>在qg、en02、网络节点bond0和计算节点bond0均可以抓去到arp大量相同的广播数据包</p>
<a id="more"></a>
<p>tcpdump抓取数据包如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">listening on eno2, link-type EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</div><div class="line"></div><div class="line"><span class="number">10</span>:<span class="number">05</span>:<span class="number">51.683389</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">05</span>:<span class="number">56.683999</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">10.206737</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">10.206798</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">10.668474</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">11.207019</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">12.207518</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">13.208169</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">14.208618</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">15.209293</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">15.669295</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">16.209833</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">17.210238</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">18.210944</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">19.211400</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">20.670044</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">25.670549</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">30.671149</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">35.671731</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">40.672288</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">45.672828</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">50.673608</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div><div class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">55.674214</span> fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span> &gt; ff:ff:ff:ff:ff:ff, ethertype <span class="number">802.1</span>Q (<span class="number">0x8100</span>), length <span class="number">64</span>: vlan <span class="number">209</span>, p <span class="number">0</span>, ethertype ARP, Request who-has <span class="number">192.168</span><span class="number">.209</span><span class="number">.254</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>, length <span class="number">46</span></div></pre></td></tr></table></figure>
<p>大量的192.168.209.167免费arp情况。</p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>fip的免费arp广播报文在vlan209广播域内出现环路</p>
<h1 id="环路可能性分析"><a href="#环路可能性分析" class="headerlink" title="环路可能性分析"></a>环路可能性分析</h1><h2 id="环路可能性1"><a href="#环路可能性1" class="headerlink" title="环路可能性1:"></a>环路可能性1:</h2><p><img src="/myimages/BEF8A7A77EA633E67FC6872FD7831BCE.png" alt="环路问题.png"></p>
<p><strong>环路描述</strong>：环路方向入上红色虚线所指，发生在网络节点上的vlan209广播域内，环路方向从br-public的eno2 到qg到bond0 最后到交换机1</p>
<p><strong>验证</strong>：网络节点bond0口不允许tag209，查看qg和bond0是否可以抓去到数据包，如果可以抓到数据包，代表此推理正确</p>
<p><strong>验证结果</strong>：eno2可以抓取到fip免费arp广播数据包，但是qg和bond0均不能抓取到fip免费arp广播数据包</p>
<p><strong>结论</strong>：此种可能性不成立</p>
<h2 id="环路可能性2"><a href="#环路可能性2" class="headerlink" title="环路可能性2:"></a>环路可能性2:</h2><p><img src="/myimages/1B9DCB3D2A522490F979A88A6ED8236F.png" alt="未命名.png"></p>
<p><strong>环路方向</strong>：交换机1 -> 网络节点bond0 -> 虚拟交换机br-int -> 虚拟交换机br-public -> eno2</p>
<p><strong>验证：</strong>配置交换机1和交换机2 连接网络节点bond0 口，允许tag209通过，且配置交换机1 连接eno2口交换机口不允许tag209</p>
<p>验证结果：在qg 和 eno2 bond0可以抓取到数据包，此环路成立</p>
<h1 id="精细验证过程"><a href="#精细验证过程" class="headerlink" title="精细验证过程"></a>精细验证过程</h1><p>因为数据包环路路径为，交换机1 -> 网络节点bond0 -> 虚拟交换机br-int -> 虚拟交换机br-public -> eno2</p>
<p>那么为什么数据包从bond0过来后经过虚拟机ovs交换机br-int可以转发给qg和eno2 ？</p>
<p>我们尝试产生相同arp广播数据包进行尝试：</p>
<p>ovs-appctl ofproto/trace br-int in_port=22,dl_src=fa:16:3e:e8:a3:36,dl_dst=ff:ff:ff:ff:ff:ff,arp,arp_spa=192.168.209.167,dl_vlan=209 -generate</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root@neutron:~<span class="comment"># ovs-appctl ofproto/trace br-int in_port=22,dl_src=fa:16:3e:e8:a3:36,dl_dst=ff:ff:ff:ff:ff:ff,arp,arp_spa=192.168.209.167,dl_vlan=209 -generate</span></div><div class="line">Bridge: br-int</div><div class="line">Flow: arp,in_port=<span class="number">22</span>,dl_vlan=<span class="number">209</span>,dl_vlan_pcp=<span class="number">0</span>,dl_src=fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span>,dl_dst=ff:ff:ff:ff:ff:ff,arp_spa=<span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>,arp_tpa=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>,arp_op=<span class="number">0</span>,arp_sha=<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>,arp_tha=<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></div><div class="line"></div><div class="line">Rule: table=<span class="number">0</span> cookie=<span class="number">0x1</span> priority=<span class="number">100</span>,in_port=<span class="number">22</span></div><div class="line">OpenFlow actions=goto_table:<span class="number">31</span></div><div class="line"></div><div class="line">	Resubmitted flow: arp,in_port=<span class="number">22</span>,dl_vlan=<span class="number">209</span>,dl_vlan_pcp=<span class="number">0</span>,dl_src=fa:<span class="number">16</span>:<span class="number">3</span>e:e8:a3:<span class="number">36</span>,dl_dst=ff:ff:ff:ff:ff:ff,arp_spa=<span class="number">192.168</span><span class="number">.209</span><span class="number">.167</span>,arp_tpa=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>,arp_op=<span class="number">0</span>,arp_sha=<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>,arp_tha=<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></div><div class="line">	Resubmitted regs: reg0=<span class="number">0x0</span> reg1=<span class="number">0x0</span> reg2=<span class="number">0x0</span> reg3=<span class="number">0x0</span> reg4=<span class="number">0x0</span> reg5=<span class="number">0x0</span> reg6=<span class="number">0x0</span> reg7=<span class="number">0x0</span> reg8=<span class="number">0x0</span> reg9=<span class="number">0x0</span> reg10=<span class="number">0x0</span> reg11=<span class="number">0x0</span> reg12=<span class="number">0x0</span> reg13=<span class="number">0x0</span> reg14=<span class="number">0x0</span> reg15=<span class="number">0x0</span></div><div class="line">	Resubmitted  odp: drop</div><div class="line">	Resubmitted megaflow: recirc_id=<span class="number">0</span>,arp,in_port=<span class="number">22</span></div><div class="line">	Rule: table=<span class="number">31</span> cookie=<span class="number">0x1</span> priority=<span class="number">1</span></div><div class="line">	OpenFlow actions=goto_table:<span class="number">43</span></div><div class="line"></div><div class="line">		Resubmitted flow: unchanged</div><div class="line">		Resubmitted regs: reg0=<span class="number">0x0</span> reg1=<span class="number">0x0</span> reg2=<span class="number">0x0</span> reg3=<span class="number">0x0</span> reg4=<span class="number">0x0</span> reg5=<span class="number">0x0</span> reg6=<span class="number">0x0</span> reg7=<span class="number">0x0</span> reg8=<span class="number">0x0</span> reg9=<span class="number">0x0</span> reg10=<span class="number">0x0</span> reg11=<span class="number">0x0</span> reg12=<span class="number">0x0</span> reg13=<span class="number">0x0</span> reg14=<span class="number">0x0</span> reg15=<span class="number">0x0</span></div><div class="line">		Resubmitted  odp: drop</div><div class="line">		Resubmitted megaflow: recirc_id=<span class="number">0</span>,arp,in_port=<span class="number">22</span>,dl_vlan=<span class="number">209</span>,dl_dst=ff:ff:ff:ff:ff:ff</div><div class="line">		Rule: table=<span class="number">43</span> cookie=<span class="number">0x1</span> priority=<span class="number">1</span>,arp</div><div class="line">		OpenFlow actions=CONTROLLER:<span class="number">65535</span></div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=<span class="number">0</span>,arp,in_port=<span class="number">22</span>,dl_vlan=<span class="number">209</span>,dl_dst=ff:ff:ff:ff:ff:ff</div><div class="line">Datapath actions: drop</div><div class="line">This flow <span class="keyword">is</span> handled by the userspace slow path because it:</div><div class="line">	- Sends <span class="string">"packet-in"</span> messages to the OpenFlow controller.</div></pre></td></tr></table></figure>
<p>发现免费arp广播数据包最后交给ovs 虚拟机交换机br-int的控制器处理了，于是查看代码，发现，该控制器会查找回复该arp，如果没有查找到后，会进vlan范围内进行广播，我们这种情况就属于后者</p>
<p>因此qg 和 br-public 上的eno2可以抓取到该广播数据包，这也就是环路产生的根本原因了。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>因流量特性，具体不多说了，可在交换机连接网络节点bond0口上不允许tag209通过。或者修改控制器转发方法。一种是工程实施方法，一种需要开发。</p>
<h1 id="问题解决过程中不足之处"><a href="#问题解决过程中不足之处" class="headerlink" title="问题解决过程中不足之处"></a>问题解决过程中不足之处</h1><p>如果已经熟练使用ovs-appctl ofproto/trace产生数据包，就不用再花费更多时间去配置交换机验证了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/myimages/D5F79DE34BDF57EFE2659F53463C635C.png&quot; alt=&quot;环路问题.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;组网环境基本介绍：&quot;&gt;&lt;a href=&quot;#组网环境基本介绍：&quot; class=&quot;headerlink&quot; title=&quot;组网环境基本介绍：&quot;&gt;&lt;/a&gt;组网环境基本介绍：&lt;/h2&gt;&lt;p&gt;br-int是ovs交换机，qg和qr是router的两个接口，qg连接外网，qr连接内网vcp网络&lt;/p&gt;
&lt;p&gt;云主机位于计算节点2的br-int上&lt;/p&gt;
&lt;p&gt;leaf1、leaf2、spine、tor为物理交换机，其中外网的网关在spine上&lt;/p&gt;
&lt;h2 id=&quot;现象描述&quot;&gt;&lt;a href=&quot;#现象描述&quot; class=&quot;headerlink&quot; title=&quot;现象描述&quot;&gt;&lt;/a&gt;现象描述&lt;/h2&gt;&lt;p&gt;配置vlan外网，申请fip，最后将fip和云主机绑定后，整个openstack网络环境出现大量的新绑定的免费arp数据包，网络瘫痪。从tor交换机无法连接到网络节点和计算节点的管理地址了。&lt;/p&gt;
&lt;p&gt;在qg、en02、网络节点bond0和计算节点bond0均可以抓去到arp大量相同的广播数据包&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="SDN" scheme="http://vcpu.me/tags/SDN/"/>
    
      <category term="问题分析过程" scheme="http://vcpu.me/tags/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    
      <category term="网络节点环路" scheme="http://vcpu.me/tags/%E7%BD%91%E7%BB%9C%E8%8A%82%E7%82%B9%E7%8E%AF%E8%B7%AF/"/>
    
      <category term="免费aro广播" scheme="http://vcpu.me/tags/%E5%85%8D%E8%B4%B9aro%E5%B9%BF%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>我的数据包丢在那里之一场iptables旅行</title>
    <link href="http://vcpu.me/dropwatch/"/>
    <id>http://vcpu.me/dropwatch/</id>
    <published>2018-02-07T10:00:00.000Z</published>
    <updated>2018-02-11T14:48:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般来搭建虚拟网络，或者其他业务情形，linux主机内部出现网络不通时候，有时候思路会断掉，因为内核协议栈对于专注于应用的开发者来说，属于黑盒子，看不到里面具体发生了什么，为什么丢包？</p>
<p>当然大部分原因是由于我们使用方法和配置有误导致，但是从如果从上层看下层，从下层也反证上层，问题可以提前找到和快解决。</p>
<p>本文重点举例，说明虚拟网络应用场景下出现iptables策略问题，并且通过工具反查和反证问题过程。属于一场iptables稍微深层次点的旅行吧，与君共勉。</p>
<a id="more"></a>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># lsb_release -a</span></div><div class="line">No LSB modules are available.</div><div class="line">Distributor ID:	Ubuntu</div><div class="line">Description:	Ubuntu <span class="number">16.04</span><span class="number">.3</span> LTS</div><div class="line">Release:	<span class="number">16.04</span></div><div class="line">Codename:	xenial</div></pre></td></tr></table></figure>
<p>系统镜像名称</p>
<p>ubuntu-16.04.3-server-amd64.iso</p>
<h2 id="组网环境："><a href="#组网环境：" class="headerlink" title="组网环境："></a>组网环境：</h2><p><img src="/myimages/E1DB0D6BC841614F3D154EA4E125E5D4.png" alt="x.png"></p>
<ul>
<li>1.1.1.1和1.1.1.2位namespace net0和net1内部地址</li>
<li>net0和net1经过linux bridge br0连接起来</li>
</ul>
<h2 id="基本组网组成脚本"><a href="#基本组网组成脚本" class="headerlink" title="基本组网组成脚本"></a>基本组网组成脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">brctl addbr br0 </div><div class="line">ifconfig br0 <span class="number">1.1</span><span class="number">.2</span><span class="number">.254</span>/<span class="number">24</span> up</div><div class="line">ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.254</span>/<span class="number">24</span> dev br0</div><div class="line"></div><div class="line">ip link add net0_eth0 type veth peer name tap0</div><div class="line">ip netns add net0</div><div class="line">ip link set dev net0_eth0 netns net0</div><div class="line">ip netns <span class="keyword">exec</span> net0 ip link set dev net0_eth0 name eth0</div><div class="line">ip netns <span class="keyword">exec</span> net0 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">24</span> dev eth0</div><div class="line">ip netns <span class="keyword">exec</span> net0 ip link set dev eth0 up</div><div class="line">ip link set dev tap0 master br0</div><div class="line">ip link set dev tap0 up</div><div class="line"></div><div class="line"></div><div class="line">ip link add net1_eth0 type veth peer name tap1</div><div class="line">ip netns add net1</div><div class="line">ip link set dev net1_eth0 netns net1</div><div class="line">ip netns <span class="keyword">exec</span> net1 ip link set dev net1_eth0 name eth0</div><div class="line">ip netns <span class="keyword">exec</span> net1 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> dev eth0</div><div class="line">ip netns <span class="keyword">exec</span> net1 ip link set dev eth0 up</div><div class="line">ip link set dev tap1 master br0</div><div class="line">ip link set dev tap1 up</div></pre></td></tr></table></figure>
<h2 id="iptable默认策略"><a href="#iptable默认策略" class="headerlink" title="iptable默认策略"></a>iptable默认策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p icmp -m physdev --physdev-in tap0 -j LOG</div><div class="line"></div><div class="line">iptables -A FORWARD -p icmp -m physdev --physdev-in tap0 --physdev-out tap1 -j LOG</div><div class="line"></div><div class="line">iptables -A FORWARD -p icmp -m physdev --physdev-is-out</div><div class="line"></div><div class="line">iptables -A FORWARD -p icmp -m physdev --physdev-is-out --physdev-is-in --physdev-is-bridged</div></pre></td></tr></table></figure>
<h2 id="环境验证"><a href="#环境验证" class="headerlink" title="环境验证"></a>环境验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># ip netns</span></div><div class="line">net1 (id: <span class="number">1</span>)</div><div class="line">net0 (id: <span class="number">0</span>)</div><div class="line">root@ubuntu:~<span class="comment"># ip netns exec net0 bash</span></div><div class="line">root@ubuntu:~<span class="comment"># ip r</span></div><div class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> dev eth0  proto kernel  scope link  src <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></div><div class="line">root@ubuntu:~<span class="comment"># ping 1.1.1.2</span></div><div class="line">PING <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> (<span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: icmp_seq=<span class="number">8</span> ttl=<span class="number">64</span> time=<span class="number">0.061</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: icmp_seq=<span class="number">9</span> ttl=<span class="number">64</span> time=<span class="number">0.055</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: icmp_seq=<span class="number">10</span> ttl=<span class="number">64</span> time=<span class="number">0.057</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: icmp_seq=<span class="number">11</span> ttl=<span class="number">64</span> time=<span class="number">0.057</span> ms</div></pre></td></tr></table></figure>
<p>环境搭建完成后，在net0中ping net1 地址，可达</p>
<p>自此基本环境组建完毕，然后do something （其实是在主机侧执行了iptables -P FORWARD DROP）后，发现上述环境无法连通了，what happened！下面开启问题定位。</p>
<h2 id="问题定位过程"><a href="#问题定位过程" class="headerlink" title="问题定位过程"></a>问题定位过程</h2><h2 id="步骤1-在net0-中ping-net1-，发现不通，查看arp表项"><a href="#步骤1-在net0-中ping-net1-，发现不通，查看arp表项" class="headerlink" title="步骤1: 在net0 中ping net1 ，发现不通，查看arp表项"></a>步骤1: 在net0 中ping net1 ，发现不通，查看arp表项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># ip netns exec net0 arp -n</span></div><div class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</div><div class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>                  ether   <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>   C                     eth0</div><div class="line">root@ubuntu:~<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>可学到arp表项，代表arp数据包相互可达，但是ping包仍然不通。</p>
<p>ip协议属于更上层协议，icmp不通可能性有两种：</p>
<p>1:对方不支持ping</p>
<p>2:中间被阻隔了</p>
<p>对于可能性1，很显然可能性不大，因为一开始还是好的，而且还没有听说关闭ping有什么意义</p>
<p>对于可能性2，是有可能发生的</p>
<h2 id="步骤2-可能性2验证"><a href="#步骤2-可能性2验证" class="headerlink" title="步骤2: 可能性2验证"></a>步骤2: 可能性2验证</h2><p><img src="/myimages/4F2E729ACE5B29ACB305D7E3622492B7.png" alt="ii.png"></p>
<p>上述1 、2 、3、4定义为4个数据包抓取点</p>
<h3 id="4点抓包"><a href="#4点抓包" class="headerlink" title="4点抓包"></a>4点抓包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tcpdump: verbose output suppressed, use -v <span class="keyword">or</span> -vv <span class="keyword">for</span> full protocol decode</div><div class="line">listening on eth0, link-type EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</div><div class="line">^C13:<span class="number">54</span>:<span class="number">32.427376</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> tell <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>, length <span class="number">28</span></div><div class="line"><span class="number">13</span>:<span class="number">54</span>:<span class="number">32.427392</span> <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span> &gt; c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span>, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Reply <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> <span class="keyword">is</span>-at <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, length <span class="number">28</span></div></pre></td></tr></table></figure>
<p>未收到icmp，收到了arp</p>
<h3 id="2点抓包"><a href="#2点抓包" class="headerlink" title="2点抓包"></a>2点抓包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">oot@ubuntu:~/drop_watch/src<span class="comment"># tcpdump -i tap0 -ne</span></div><div class="line">tcpdump: verbose output suppressed, use -v <span class="keyword">or</span> -vv <span class="keyword">for</span> full protocol decode</div><div class="line">listening on tap0, link-type EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</div><div class="line"><span class="number">14</span>:<span class="number">05</span>:<span class="number">55.104561</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5357</span>, seq <span class="number">1</span>, length <span class="number">64</span></div><div class="line"><span class="number">14</span>:<span class="number">05</span>:<span class="number">56.103918</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5357</span>, seq <span class="number">2</span>, length <span class="number">64</span></div><div class="line"><span class="number">14</span>:<span class="number">05</span>:<span class="number">57.103702</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5357</span>, seq <span class="number">3</span>, length <span class="number">64</span></div><div class="line"><span class="number">14</span>:<span class="number">05</span>:<span class="number">59.454076</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5358</span>, seq <span class="number">1</span>, length <span class="number">64</span></div><div class="line"><span class="number">14</span>:<span class="number">06</span>:<span class="number">00.461847</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5358</span>, seq <span class="number">2</span>, length <span class="number">64</span></div><div class="line"><span class="number">14</span>:<span class="number">06</span>:<span class="number">09.373442</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; ff:ff:ff:ff:ff:ff, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> tell <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>, length <span class="number">28</span></div><div class="line"><span class="number">14</span>:<span class="number">06</span>:<span class="number">09.373461</span> <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span> &gt; c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span>, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Reply <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> <span class="keyword">is</span>-at <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, length <span class="number">28</span></div><div class="line"><span class="number">14</span>:<span class="number">06</span>:<span class="number">09.373463</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5361</span>, seq <span class="number">1</span>, length <span class="number">64</span></div><div class="line"><span class="number">14</span>:<span class="number">06</span>:<span class="number">10.381635</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype IPv4 (<span class="number">0x0800</span>), length <span class="number">98</span>: <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> &gt; <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>: ICMP echo request, id <span class="number">5361</span>, seq <span class="number">2</span>, length <span class="number">64</span></div></pre></td></tr></table></figure>
<p>收到了icmp和arp</p>
<h3 id="3点抓包"><a href="#3点抓包" class="headerlink" title="3点抓包"></a>3点抓包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~/drop_watch/src<span class="comment"># tcpdump -i tap1 -ne</span></div><div class="line">tcpdump: verbose output suppressed, use -v <span class="keyword">or</span> -vv <span class="keyword">for</span> full protocol decode</div><div class="line">listening on tap1, link-type EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</div><div class="line"><span class="number">14</span>:<span class="number">05</span>:<span class="number">25.067625</span> c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span> &gt; <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> tell <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>, length <span class="number">28</span></div><div class="line"><span class="number">14</span>:<span class="number">05</span>:<span class="number">25.067636</span> <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span> &gt; c2:a3:<span class="number">10</span>:<span class="number">45</span>:e4:<span class="number">65</span>, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Reply <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> <span class="keyword">is</span>-at <span class="number">26</span>:<span class="number">4</span>c:<span class="number">48</span>:<span class="number">39</span>:<span class="number">09</span>:<span class="number">21</span>, length <span class="number">28</span></div></pre></td></tr></table></figure>
<p>未收到icmp，收到了arp</p>
<h3 id="分析结论：-数据包经过br0被丢弃了，可能和转发策略iptables有关系"><a href="#分析结论：-数据包经过br0被丢弃了，可能和转发策略iptables有关系" class="headerlink" title="分析结论： 数据包经过br0被丢弃了，可能和转发策略iptables有关系"></a>分析结论： 数据包经过br0被丢弃了，可能和转发策略iptables有关系</h3><h2 id="查看br0的转发控制策略"><a href="#查看br0的转发控制策略" class="headerlink" title="查看br0的转发控制策略"></a>查看br0的转发控制策略</h2><p>iptables -nL -v</p>
<p><img src="/myimages/95ACA56BF5A0920001687D88F17A78C5.jpg" alt=""></p>
<p>发现FORWARD链有丢包,且和ping数据包的行为完全吻合，停止ping包，该丢包计数也不再增长</p>
<p>Chain FORWARD (<strong>policy DROP</strong> 813 packets, 68292 bytes)</p>
<p>policy DROP为关键词规则链的默认策略丢包,通过iptables -S查看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~/drop_watch/src<span class="comment"># iptables -S</span></div><div class="line">-P INPUT ACCEPT</div><div class="line">-P FORWARD DROP</div><div class="line">-P OUTPUT ACCEPT</div><div class="line">-A INPUT -p icmp -m physdev --physdev-<span class="keyword">in</span> tap0 -j LOG</div><div class="line">-A FORWARD -p icmp -m physdev --physdev-<span class="keyword">in</span> tap0 --physdev-out tap1 -j LOG</div><div class="line">-A FORWARD -p icmp -m physdev --physdev-<span class="keyword">is</span>-out</div><div class="line">-A FORWARD -p icmp -m physdev --physdev-<span class="keyword">is</span>-<span class="keyword">in</span> --physdev-<span class="keyword">is</span>-out --physdev-<span class="keyword">is</span>-bridged</div><div class="line">root@ubuntu:~/drop_watch/src<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>我们知道，如下-P FORWARD DROP 默认情况下，转发链设置为丢包，也就是说如果不配置通过策略，此数据包会被丢弃，但是这是再懂的问题原因以后才知道的，在未定为问题以前我是这样思考的，我的天哪，明明没有任何丢弃数据包策略，数据包却被丢弃了，而且默认情况下没有策略情况数据包应该被放通才对！外加真实环境比较复杂未免想的更复杂，是不是缺驱动？…等等</p>
<p>本来问题定位到此就要结束了，但是真实环境下我是如下折腾的</p>
<h2 id="难道是少了什么驱动等配置选项？-看起来并没有其他策略阻隔数据包，难道是内核问题，我做了什么？"><a href="#难道是少了什么驱动等配置选项？-看起来并没有其他策略阻隔数据包，难道是内核问题，我做了什么？" class="headerlink" title="难道是少了什么驱动等配置选项？ 看起来并没有其他策略阻隔数据包，难道是内核问题，我做了什么？"></a>难道是少了什么驱动等配置选项？ 看起来并没有其他策略阻隔数据包，难道是内核问题，我做了什么？</h2><p><strong>drop watch查看丢包点，调用栈，确认丢包位置</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get install -y libnl<span class="number">-3</span>-dev libnl-genl<span class="number">-3</span>-dev binutils-dev libreadline6-dev</div><div class="line">sudo apt-get install -y libnl<span class="number">-3</span>-dev libnl-genl<span class="number">-3</span>-dev binutils-dev libreadline6-dev gcc</div><div class="line">git clone https://github.com/pavel-odintsov/drop_watch</div><div class="line">cd drop_watch/src</div><div class="line">make</div></pre></td></tr></table></figure>
<p><strong>ping数据包继续走起来，使用dropwatch</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~/drop_watch/src<span class="comment"># ./dropwatch -l kas</span></div><div class="line">Initalizing kallsyms db</div><div class="line">dropwatch&gt; start</div><div class="line">Enabling monitoring...</div><div class="line">Kernel monitoring activated.</div><div class="line">Issue Ctrl-C to stop monitoring</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">1</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">2</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line"><span class="number">2</span> drops at nf_hook_slow+b0 (<span class="number">0xffffffff8176d2e0</span>)</div><div class="line">^CGot a stop message</div><div class="line">dropwatch&gt; Terminating dropwatch...</div><div class="line">Shutting down ...</div></pre></td></tr></table></figure>
<p>到此问题基本定位nf_hook_slow查看，属于forward钩子处理部分（如果不确定你可以看内核源码，或者打印出更详细的调用栈），说明数据包被丢在了钩子策略上，是我想多了…，思路转回对iptables的研究上，直到找出默认FORWARD丢包策略-P FORWARD DROP</p>
<h3 id="额外说明：如果你想看到更为详细的丢包调用栈，你可以用下面方法（当然systemtap也可以做到，但是这里不再赘述）"><a href="#额外说明：如果你想看到更为详细的丢包调用栈，你可以用下面方法（当然systemtap也可以做到，但是这里不再赘述）" class="headerlink" title="额外说明：如果你想看到更为详细的丢包调用栈，你可以用下面方法（当然systemtap也可以做到，但是这里不再赘述）"></a>额外说明：如果你想看到更为详细的丢包调用栈，你可以用下面方法（当然systemtap也可以做到，但是这里不再赘述）</h3><p>perf查看协议栈丢包点位置，并打印出调用栈</p>
<p><strong>安装方法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt install linux-tools-common -y</div><div class="line">apt install linux-tools<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic linux-cloud-tools-generic -y</div></pre></td></tr></table></figure>
<p><strong>使用方法：</strong></p>
<p>步骤1:抓取：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo perf record -g -a -e skb:kfree_skb</div></pre></td></tr></table></figure>
<p>步骤2:分析：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo perf script</div></pre></td></tr></table></figure>
<p><strong>eg：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">root@ubuntu:~/drop_watch/src<span class="comment"># sudo perf record -g -a -e skb:kfree_skb</span></div><div class="line"></div><div class="line">^C[ perf record: Woken up <span class="number">1</span> times to write data ]</div><div class="line">[ perf record: Captured <span class="keyword">and</span> wrote <span class="number">0.143</span> MB perf.data (<span class="number">12</span> samples) ]</div><div class="line"></div><div class="line">root@ubuntu:~/drop_watch/src<span class="comment"># sudo perf script</span></div><div class="line">ping  <span class="number">1811</span> [<span class="number">000</span>]   <span class="number">301.864213</span>: skb:kfree_skb: skbaddr=<span class="number">0xffff8800d59bb400</span> protocol=<span class="number">2048</span> location=<span class="number">0xffffffff8176d2e0</span></div><div class="line">                  <span class="number">921</span>b1a kfree_skb (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">96</span>d2e0 nf_hook_slow (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                     f7c br_nf_forward_ip ([br_netfilter])</div><div class="line">                  <span class="number">96</span>d212 nf_iterate (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">96</span>d2a3 nf_hook_slow (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                    <span class="number">3264</span> __br_forward ([bridge])</div><div class="line">                    <span class="number">3797</span> br_forward ([bridge])</div><div class="line">                    <span class="number">48</span>d0 br_handle_frame_finish ([bridge])</div><div class="line">                     <span class="number">347</span> NF_HOOK_THRESH ([br_netfilter])</div><div class="line">                    <span class="number">1239</span> br_nf_pre_routing_finish ([br_netfilter])</div><div class="line">                    <span class="number">1</span>fd1 br_nf_pre_routing ([br_netfilter])</div><div class="line">                  <span class="number">96</span>d212 nf_iterate (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">96</span>d2a3 nf_hook_slow (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                    <span class="number">4</span>d2a br_handle_frame ([bridge])</div><div class="line">                  <span class="number">936424</span> __netif_receive_skb_core (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">936</span>b38 __netif_receive_skb (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">937938</span> process_backlog (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">93707</span>e net_rx_action (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">285e11</span> __do_softirq (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  a43bcc do_softirq_own_stack (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">285858</span> do_softirq.part<span class="number">.19</span> (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">2858</span>dd __local_bh_enable_ip (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">978</span>c89 ip_finish_output2 (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">979</span>c16 ip_finish_output (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">97</span>a61e ip_output (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">979</span>de5 ip_local_out (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">97</span>afe9 ip_send_skb (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">97</span>b043 ip_push_pending_frames (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">9</span>a16b3 raw_sendmsg (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">9</span>b14c5 inet_sendmsg (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">919</span>ad8 sock_sendmsg (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">91</span>a581 ___sys_sendmsg (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">91</span>aed1 __sys_sendmsg (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">91</span>af22 sys_sendmsg (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  a41eb2 entry_SYSCALL_64_fastpath (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">108490</span> sendmsg (/lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so)</div><div class="line">                       <span class="number">0</span> [unknown] ([unknown])</div><div class="line"></div><div class="line">ping  <span class="number">1811</span> [<span class="number">000</span>]   <span class="number">302.863683</span>: skb:kfree_skb: skbaddr=<span class="number">0xffff8800d59bb400</span> protocol=<span class="number">2048</span> location=<span class="number">0xffffffff8176d2e0</span></div><div class="line">                  <span class="number">921</span>b1a kfree_skb (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">96</span>d2e0 nf_hook_slow (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                     f7c br_nf_forward_ip ([br_netfilter])</div><div class="line">                  <span class="number">96</span>d212 nf_iterate (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">96</span>d2a3 nf_hook_slow (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                    <span class="number">3264</span> __br_forward ([bridge])</div><div class="line">                    <span class="number">3797</span> br_forward ([bridge])</div><div class="line">                    <span class="number">48</span>d0 br_handle_frame_finish ([bridge])</div><div class="line">                     <span class="number">347</span> NF_HOOK_THRESH ([br_netfilter])</div><div class="line">                    <span class="number">1239</span> br_nf_pre_routing_finish ([br_netfilter])</div><div class="line">                    <span class="number">1</span>fd1 br_nf_pre_routing ([br_netfilter])</div><div class="line">                  <span class="number">96</span>d212 nf_iterate (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">96</span>d2a3 nf_hook_slow (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                    <span class="number">4</span>d2a br_handle_frame ([bridge])</div><div class="line">                  <span class="number">936424</span> __netif_receive_skb_core (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">936</span>b38 __netif_receive_skb (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">937938</span> process_backlog (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">93707</span>e net_rx_action (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">285e11</span> __do_softirq (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  a43bcc do_softirq_own_stack (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">                  <span class="number">285858</span> do_softirq.part<span class="number">.19</span> (/usr/lib/debug/boot/vmlinux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-87</span>-generic)</div><div class="line">root@ubuntu:~/drop_watch/src<span class="comment">#</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般来搭建虚拟网络，或者其他业务情形，linux主机内部出现网络不通时候，有时候思路会断掉，因为内核协议栈对于专注于应用的开发者来说，属于黑盒子，看不到里面具体发生了什么，为什么丢包？&lt;/p&gt;
&lt;p&gt;当然大部分原因是由于我们使用方法和配置有误导致，但是从如果从上层看下层，从下层也反证上层，问题可以提前找到和快解决。&lt;/p&gt;
&lt;p&gt;本文重点举例，说明虚拟网络应用场景下出现iptables策略问题，并且通过工具反查和反证问题过程。属于一场iptables稍微深层次点的旅行吧，与君共勉。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iptables" scheme="http://vcpu.me/tags/iptables/"/>
    
      <category term="linuxbridge" scheme="http://vcpu.me/tags/linuxbridge/"/>
    
      <category term="dropwatch" scheme="http://vcpu.me/tags/dropwatch/"/>
    
      <category term="perf" scheme="http://vcpu.me/tags/perf/"/>
    
      <category term="ubuntun16.04.3" scheme="http://vcpu.me/tags/ubuntun16-04-3/"/>
    
  </entry>
  
  <entry>
    <title>addr2line如何根据地址找到行号？</title>
    <link href="http://vcpu.me/addr2line/"/>
    <id>http://vcpu.me/addr2line/</id>
    <published>2018-01-23T10:00:00.000Z</published>
    <updated>2018-02-14T09:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="针对于linux平台-下，c程序使用场景举例："><a href="#针对于linux平台-下，c程序使用场景举例：" class="headerlink" title="针对于linux平台 下，c程序使用场景举例："></a>针对于linux平台 下，c程序使用场景举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat ./mem_test.c</span></div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    char *p1;</div><div class="line">    char *p2;</div><div class="line">    char *p3;</div><div class="line">    char *p4;</div><div class="line"></div><div class="line">    sleep(<span class="number">20</span>);//让程序sleep <span class="number">20</span>s是因为我们程序先起来之后，等待SystemTap启动设置探测点</div><div class="line">    p1 = malloc(<span class="number">500</span>);</div><div class="line">    p2 = malloc(<span class="number">200</span>);</div><div class="line">    p3 = malloc(<span class="number">300</span>);</div><div class="line">    p4 = malloc(<span class="number">300</span>);//泄漏</div><div class="line">    free(p1);</div><div class="line">    free(p2);</div><div class="line">    free(p3);</div><div class="line">    free(p2);//重复释放</div><div class="line">    printf(<span class="string">"p1: %p, p2: %p, p3: %p, p4: %p\n"</span>, p1, p2, p3, p4);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc -g mem_test.c -o main</div><div class="line">./main&amp;</div></pre></td></tr></table></figure>
<h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# *** Error in `./main&apos;: double free or corruption (!prev): 0x0000000000b71210 ***</div><div class="line"></div><div class="line">======= Backtrace: =========</div><div class="line"></div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f1cebfee7e5]</div><div class="line"></div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7f1cebff737a]</div><div class="line"></div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7f1cebffb53c]</div><div class="line"></div><div class="line">./main[0x400677]</div><div class="line"></div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f1cebf97830]</div><div class="line"></div><div class="line">./main[0x400529]</div><div class="line"></div><div class="line">======= Memory map: ========</div><div class="line"></div><div class="line">00400000-00401000 r-xp 00000000 fc:00 526710 /root/main</div><div class="line"></div><div class="line">00600000-00601000 r--p 00000000 fc:00 526710 /root/main</div><div class="line"></div><div class="line">00601000-00602000 rw-p 00001000 fc:00 526710 /root/main</div><div class="line"></div><div class="line">00b71000-00b92000 rw-p 00000000 00:00 0 [heap]</div><div class="line"></div><div class="line">7f1ce4000000-7f1ce4021000 rw-p 00000000 00:00 0</div><div class="line"></div><div class="line">7f1ce4021000-7f1ce8000000 ---p 00000000 00:00 0</div><div class="line"></div><div class="line">7f1cebd61000-7f1cebd77000 r-xp 00000000 fc:00 786953 /lib/x86_64-linux-gnu/libgcc_s.so.1</div><div class="line">7f1cebd77000-7f1cebf76000 ---p 00016000 fc:00 786953 /lib/x86_64-linux-gnu/libgcc_s.so.1</div><div class="line">7f1cebf76000-7f1cebf77000 rw-p 00015000 fc:00 786953 /lib/x86_64-linux-gnu/libgcc_s.so.1</div><div class="line">7f1cebf77000-7f1cec137000 r-xp 00000000 fc:00 791185 /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1cec137000-7f1cec337000 ---p 001c0000 fc:00 791185 /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1cec337000-7f1cec33b000 r--p 001c0000 fc:00 791185 /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1cec33b000-7f1cec33d000 rw-p 001c4000 fc:00 791185 /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1cec33d000-7f1cec341000 rw-p 00000000 00:00 0</div><div class="line">7f1cec341000-7f1cec367000 r-xp 00000000 fc:00 791163 /lib/x86_64-linux-gnu/ld-2.23.so</div><div class="line">7f1cec557000-7f1cec55a000 rw-p 00000000 00:00 0</div><div class="line">7f1cec563000-7f1cec566000 rw-p 00000000 00:00 0</div><div class="line">7f1cec566000-7f1cec567000 r--p 00025000 fc:00 791163 /lib/x86_64-linux-gnu/ld-2.23.so</div><div class="line">7f1cec567000-7f1cec568000 rw-p 00026000 fc:00 791163 /lib/x86_64-linux-gnu/ld-2.23.so</div><div class="line">7f1cec568000-7f1cec569000 rw-p 00000000 00:00 0</div><div class="line">7fff0e000000-7fff0e021000 rw-p 00000000 00:00 0 [stack]</div><div class="line">7fff0e09b000-7fff0e09d000 r--p 00000000 00:00 0 [vvar]</div><div class="line">7fff0e09d000-7fff0e09f000 r-xp 00000000 00:00 0 [vdso]</div><div class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall]</div><div class="line"></div><div class="line">[1]+ Aborted (core dumped) ./main</div></pre></td></tr></table></figure>
<p>0x400677有问题，那么它对应那一行？</p>
<h3 id="如何查找0x400677对应哪一行"><a href="#如何查找0x400677对应哪一行" class="headerlink" title="如何查找0x400677对应哪一行"></a>如何查找0x400677对应哪一行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# addr2line -e main 0x400677</div><div class="line"></div><div class="line">/root/mem_test.c:21</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>如上我们发现21行是重复释放导致</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;针对于linux平台-下，c程序使用场景举例：&quot;&gt;&lt;a href=&quot;#针对于linux平台-下，c程序使用场景举例：&quot; class=&quot;headerlink&quot; title=&quot;针对于linux平台 下，c程序使用场景举例：&quot;&gt;&lt;/a&gt;针对于linux平台 下，c程序使用场景举例：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@ubuntu:~&lt;span class=&quot;comment&quot;&gt;# cat ./mem_test.c&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int main(int argc, char *argv[])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char *p1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char *p2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char *p3;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char *p4;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);//让程序sleep &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;s是因为我们程序先起来之后，等待SystemTap启动设置探测点&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p1 = malloc(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p2 = malloc(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p3 = malloc(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p4 = malloc(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;);//泄漏&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    free(p1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    free(p2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    free(p3);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    free(p2);//重复释放&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;p1: %p, p2: %p, p3: %p, p4: %p\n&quot;&lt;/span&gt;, p1, p2, p3, p4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="addr2line" scheme="http://vcpu.me/tags/addr2line/"/>
    
      <category term="反汇编" scheme="http://vcpu.me/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>valgrind打印程序调用栈</title>
    <link href="http://vcpu.me/valgrind/"/>
    <id>http://vcpu.me/valgrind/</id>
    <published>2018-01-15T10:00:00.000Z</published>
    <updated>2018-02-11T16:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用valgrind调试，他功能有很多，但是真正性能调试时候，外加valgrind运行程序时，应用程序本身性能发挥不全,目前对于我来讲还是调用栈打印最实用</p>
<p>通过多次打调用栈，可得知应用程序忙在哪里，确认优化的方向</p>
<a id="more"></a>
<h1 id="使用valgrind开启程序"><a href="#使用valgrind开启程序" class="headerlink" title="使用valgrind开启程序"></a>使用valgrind开启程序</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# valgrind --tool=callgrind  ./server</div><div class="line">==1789== Callgrind, a call-graph generating cache profiler</div><div class="line">==1789== Copyright (C) 2002-2015, and GNU GPL'd, by Josef Weidendorfer et al.</div><div class="line">==1789== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info</div><div class="line">==1789== Command: ./server</div><div class="line">==1789==</div><div class="line">==1789== For interactive control, run 'callgrind_control -h'.</div><div class="line">listening...</div></pre></td></tr></table></figure>
<h1 id="打印调用栈"><a href="#打印调用栈" class="headerlink" title="打印调用栈"></a>打印调用栈</h1><p>callgrind_control -e -b</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># callgrind_control -e -b</span></div><div class="line">PID <span class="number">1789</span>: ./server</div><div class="line">sending command status internal to pid <span class="number">1789</span></div><div class="line"></div><div class="line">  Totals:     Ir</div><div class="line">   Th <span class="number">1</span>  <span class="number">159</span>,<span class="number">440</span></div><div class="line"></div><div class="line">  Frame:     Ir Backtrace <span class="keyword">for</span> Thread <span class="number">1</span></div><div class="line">   [ <span class="number">0</span>]   <span class="number">2</span>,<span class="number">538</span> __select_nocancel (<span class="number">424</span> x)</div><div class="line">   [ <span class="number">1</span>]   <span class="number">3</span>,<span class="number">378</span> select (<span class="number">423</span> x)</div><div class="line">   [ <span class="number">2</span>]  <span class="number">64</span>,<span class="number">731</span> main (<span class="number">1</span> x)</div><div class="line">   [ <span class="number">3</span>]  <span class="number">64</span>,<span class="number">937</span> (below main) (<span class="number">1</span> x)</div><div class="line">   [ <span class="number">4</span>]  <span class="number">65</span>,<span class="number">876</span> _dl_runtime_resolve_sse_vex (<span class="number">1</span> x)</div><div class="line">   [ <span class="number">5</span>]  <span class="number">65</span>,<span class="number">888</span> _dl_runtime_resolve_avx_slow (<span class="number">1</span> x)</div><div class="line">   [ <span class="number">6</span>]  <span class="number">65</span>,<span class="number">904</span> <span class="number">0x0000000000400710</span> (<span class="number">1</span> x)</div><div class="line">   [ <span class="number">7</span>]       . <span class="number">0x0000000000001170</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用valgrind调试，他功能有很多，但是真正性能调试时候，外加valgrind运行程序时，应用程序本身性能发挥不全,目前对于我来讲还是调用栈打印最实用&lt;/p&gt;
&lt;p&gt;通过多次打调用栈，可得知应用程序忙在哪里，确认优化的方向&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="valgrind" scheme="http://vcpu.me/tags/valgrind/"/>
    
      <category term="性能点找寻方法" scheme="http://vcpu.me/tags/%E6%80%A7%E8%83%BD%E7%82%B9%E6%89%BE%E5%AF%BB%E6%96%B9%E6%B3%95/"/>
    
      <category term="c程序服务端用户态程序调用栈打印" scheme="http://vcpu.me/tags/c%E7%A8%8B%E5%BA%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%94%A8%E6%88%B7%E6%80%81%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8%E6%A0%88%E6%89%93%E5%8D%B0/"/>
    
      <category term="一个强大的用户态程序调优方法" scheme="http://vcpu.me/tags/%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E7%9A%84%E7%94%A8%E6%88%B7%E6%80%81%E7%A8%8B%E5%BA%8F%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>strace跟踪程序执行时间</title>
    <link href="http://vcpu.me/exectime_for_c_proess/"/>
    <id>http://vcpu.me/exectime_for_c_proess/</id>
    <published>2018-01-13T10:00:00.000Z</published>
    <updated>2018-02-11T16:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>strace可以帮助你打印函数执行时间，帮助你查看程序消耗，针对于复杂的工作进程例如nginx或者janus，我暂且没有尝试，但是对复杂程序性能调整作用不大。</p>
<p>遇到复杂程序你可以考虑valgrind –tool=callgrind工具</p>
<p><a href="http://valgrind.org/docs/manual/cl-manual.html#cl-manual.options.separation" target="_blank" rel="external">http://valgrind.org/docs/manual/cl-manual.html#cl-manual.options.separation</a></p>
<a id="more"></a>
<h1 id="服务端程序执行"><a href="#服务端程序执行" class="headerlink" title="服务端程序执行"></a>服务端程序执行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ./server</span></div><div class="line">listening...</div><div class="line">hello</div><div class="line">hello</div><div class="line">hello</div><div class="line">hello</div><div class="line">hello</div><div class="line">hello</div><div class="line">hello</div></pre></td></tr></table></figure>
<h1 id="客户端程序执行"><a href="#客户端程序执行" class="headerlink" title="客户端程序执行"></a>客户端程序执行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ./client</span></div></pre></td></tr></table></figure>
<h1 id="打印用户程序调用时间"><a href="#打印用户程序调用时间" class="headerlink" title="打印用户程序调用时间"></a>打印用户程序调用时间</h1><h2 id="查找进程id"><a href="#查找进程id" class="headerlink" title="查找进程id"></a>查找进程id</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ps aux|grep server</span></div><div class="line">root      <span class="number">1636</span>  <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">4168</span>   <span class="number">344</span> pts/<span class="number">1</span>    S+   <span class="number">07</span>:<span class="number">34</span>   <span class="number">0</span>:<span class="number">00</span> ./server</div><div class="line">root      <span class="number">1642</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">112660</span>   <span class="number">972</span> pts/<span class="number">2</span>    S+   <span class="number">07</span>:<span class="number">34</span>   <span class="number">0</span>:<span class="number">00</span> grep --color=auto server</div></pre></td></tr></table></figure>
<h2 id="strace跟踪应用程序打印出应用程序调用时间"><a href="#strace跟踪应用程序打印出应用程序调用时间" class="headerlink" title="strace跟踪应用程序打印出应用程序调用时间"></a>strace跟踪应用程序打印出应用程序调用时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># strace -o server.strace -Ttt -p 1636</span></div><div class="line">strace: Process <span class="number">1636</span> attached</div></pre></td></tr></table></figure>
<h2 id="查看函数结果"><a href="#查看函数结果" class="headerlink" title="查看函数结果"></a>查看函数结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat server.strace</span></div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">29.195639</span> select(<span class="number">8</span>, [<span class="number">3</span> <span class="number">4</span>], NULL, NULL, &#123;<span class="number">0</span>, <span class="number">894993</span>&#125;) = <span class="number">1</span> (<span class="keyword">in</span> [<span class="number">4</span>], left &#123;<span class="number">0</span>, <span class="number">3979</span>&#125;) &lt;<span class="number">0.891038</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">30.086907</span> recvfrom(<span class="number">4</span>, <span class="string">"hello"</span>, <span class="number">6</span>, <span class="number">0</span>, NULL, NULL) = <span class="number">5</span> &lt;<span class="number">0.000009</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">30.086970</span> write(<span class="number">1</span>, <span class="string">"hello\n"</span>, <span class="number">6</span>)  = <span class="number">6</span> &lt;<span class="number">0.000033</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">30.087027</span> rt_sigprocmask(SIG_BLOCK, [CHLD], [], <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000007</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">30.087066</span> rt_sigaction(SIGCHLD, NULL, &#123;SIG_DFL, [], <span class="number">0</span>&#125;, <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000007</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">30.087091</span> rt_sigprocmask(SIG_SETMASK, [], NULL, <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000006</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">30.087112</span> nanosleep(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, <span class="number">0x7fff50f89b90</span>) = <span class="number">0</span> &lt;<span class="number">1.000453</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">31.087646</span> sendto(<span class="number">4</span>, <span class="string">"hello\0"</span>, <span class="number">6</span>, <span class="number">0</span>, NULL, <span class="number">0</span>) = <span class="number">6</span> &lt;<span class="number">0.000099</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">31.087817</span> select(<span class="number">8</span>, [<span class="number">3</span> <span class="number">4</span>], NULL, NULL, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;) = <span class="number">1</span> (<span class="keyword">in</span> [<span class="number">4</span>], left &#123;<span class="number">0</span>, <span class="number">0</span>&#125;) &lt;<span class="number">1.004789</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">32.092709</span> recvfrom(<span class="number">4</span>, <span class="string">"hello"</span>, <span class="number">6</span>, <span class="number">0</span>, NULL, NULL) = <span class="number">5</span> &lt;<span class="number">0.000015</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">32.092786</span> write(<span class="number">1</span>, <span class="string">"hello\n"</span>, <span class="number">6</span>)  = <span class="number">6</span> &lt;<span class="number">0.000050</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">32.092869</span> rt_sigprocmask(SIG_BLOCK, [CHLD], [], <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000026</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">32.092924</span> rt_sigaction(SIGCHLD, NULL, &#123;SIG_DFL, [], <span class="number">0</span>&#125;, <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000006</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">32.092948</span> rt_sigprocmask(SIG_SETMASK, [], NULL, <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000010</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">32.093035</span> nanosleep(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, <span class="number">0x7fff50f89b90</span>) = <span class="number">0</span> &lt;<span class="number">1.000253</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">33.093365</span> sendto(<span class="number">4</span>, <span class="string">"hello\0"</span>, <span class="number">6</span>, <span class="number">0</span>, NULL, <span class="number">0</span>) = <span class="number">6</span> &lt;<span class="number">0.000062</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">33.093471</span> select(<span class="number">8</span>, [<span class="number">3</span> <span class="number">4</span>], NULL, NULL, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;) = <span class="number">1</span> (<span class="keyword">in</span> [<span class="number">4</span>], left &#123;<span class="number">0</span>, <span class="number">554</span>&#125;) &lt;<span class="number">0.999464</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">34.092994</span> recvfrom(<span class="number">4</span>, <span class="string">"hello"</span>, <span class="number">6</span>, <span class="number">0</span>, NULL, NULL) = <span class="number">5</span> &lt;<span class="number">0.000007</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">34.093038</span> write(<span class="number">1</span>, <span class="string">"hello\n"</span>, <span class="number">6</span>)  = <span class="number">6</span> &lt;<span class="number">0.000025</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">34.093078</span> rt_sigprocmask(SIG_BLOCK, [CHLD], [], <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000005</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">34.093099</span> rt_sigaction(SIGCHLD, NULL, &#123;SIG_DFL, [], <span class="number">0</span>&#125;, <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000004</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">34.093116</span> rt_sigprocmask(SIG_SETMASK, [], NULL, <span class="number">8</span>) = <span class="number">0</span> &lt;<span class="number">0.000005</span>&gt;</div><div class="line"><span class="number">07</span>:<span class="number">35</span>:<span class="number">34.093132</span> nanosleep(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,  &lt;detached ...&gt;</div></pre></td></tr></table></figure>
<p><strong>结果分析</strong></p>
<p>如上得知07:35:30.087112 nanosleep({1, 0}, 0x7fff50f89b90) = 0 \<1.000453\> 耗费了1.000453 s时间</1.000453\></p>
<h1 id="服务端程序"><a href="#服务端程序" class="headerlink" title="服务端程序"></a>服务端程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat server.c</span></div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></div><div class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">#define BACKLOG 5</span></div><div class="line"><span class="comment">#define BUFF_SIZE 6</span></div><div class="line"><span class="comment">#define PORT 9999</span></div><div class="line"></div><div class="line">int fd[BACKLOG];</div><div class="line">int con_num;</div><div class="line"></div><div class="line">void ha_ha(void)</div><div class="line">&#123;</div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char** argv)</div><div class="line">&#123;</div><div class="line">        int sock_fd, new_fd;</div><div class="line">        struct sockaddr_in server_addr;</div><div class="line">        struct sockaddr_in client_addr;</div><div class="line">        socklen_t sin_size;</div><div class="line"></div><div class="line">        fd_set fdsr;</div><div class="line">        struct timeval tv;</div><div class="line">        char buf[BUFF_SIZE+<span class="number">1</span>];</div><div class="line"></div><div class="line">        int ret = <span class="number">0</span>;</div><div class="line">        int i = <span class="number">0</span>;</div><div class="line"></div><div class="line">        sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line"></div><div class="line">        server_addr.sin_family = AF_INET;</div><div class="line">        server_addr.sin_port = htons(PORT);</div><div class="line">        server_addr.sin_addr.s_addr = INADDR_ANY;</div><div class="line"></div><div class="line">        memset(server_addr.sin_zero, <span class="number">0</span>, sizeof(server_addr.sin_zero));</div><div class="line"></div><div class="line">        bind(sock_fd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));</div><div class="line"></div><div class="line">        listen(sock_fd, BACKLOG);</div><div class="line"></div><div class="line">        printf(<span class="string">"listening...\n"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">                FD_ZERO(&amp;fdsr);</div><div class="line">                FD_SET(sock_fd, &amp;fdsr);</div><div class="line"></div><div class="line">                tv.tv_sec = <span class="number">1</span>;</div><div class="line">                tv.tv_usec = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; BACKLOG; i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span>(fd[i] != <span class="number">0</span>)</div><div class="line">                        &#123;</div><div class="line">                                FD_SET(fd[i], &amp;fdsr);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                select(sock_fd+BACKLOG, &amp;fdsr, NULL, NULL, &amp;tv);</div><div class="line"></div><div class="line">               <span class="keyword">if</span>(FD_ISSET(sock_fd, &amp;fdsr))</div><div class="line">                &#123;</div><div class="line">                        new_fd = accept(sock_fd, (struct sockaddr*)&amp;client_addr, &amp;sin_size);</div><div class="line">                        <span class="keyword">if</span>(con_num &lt; BACKLOG)</div><div class="line">                        &#123;</div><div class="line">                                fd[con_num++] = new_fd;</div><div class="line">			&#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; con_num; i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span>(FD_ISSET(fd[i], &amp;fdsr))</div><div class="line">                        &#123;</div><div class="line">                                ret = recv(fd[i], buf, BUFF_SIZE*sizeof(char), <span class="number">0</span>);</div><div class="line">                                memset(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);</div><div class="line">				printf(<span class="string">"%s\n"</span>, buf);</div><div class="line">                                ha_ha();</div><div class="line">                                send(fd[i], buf, BUFF_SIZE, <span class="number">0</span>);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h1 id="客户端程序"><a href="#客户端程序" class="headerlink" title="客户端程序"></a>客户端程序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat client.c</span></div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></div><div class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></div><div class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></div><div class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#define DEST_IP "127.0.0.1"</span></div><div class="line"><span class="comment">#define DEST_PORT 9999</span></div><div class="line"></div><div class="line">int main(int argc, char** argv)</div><div class="line">&#123;</div><div class="line">        int sockfd = <span class="number">0</span>;</div><div class="line">	int len = <span class="number">0</span>;</div><div class="line">        struct sockaddr_in dest_addr;</div><div class="line"></div><div class="line">	char* msg = <span class="string">"hello"</span>;</div><div class="line"></div><div class="line">        sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line"></div><div class="line">        dest_addr.sin_family = AF_INET;</div><div class="line">        dest_addr.sin_port = htons(DEST_PORT);</div><div class="line">        dest_addr.sin_addr.s_addr = inet_addr(DEST_IP);</div><div class="line"></div><div class="line"></div><div class="line">        memset(dest_addr.sin_zero, <span class="number">0</span>, sizeof(dest_addr.sin_zero));</div><div class="line"></div><div class="line">        connect(sockfd, (struct sockaddr*)&amp;dest_addr, sizeof(struct sockaddr_in));</div><div class="line"> 	len = strlen(msg);</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">                sleep(<span class="number">2</span>);</div><div class="line"> 		send(sockfd, msg, len, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;strace可以帮助你打印函数执行时间，帮助你查看程序消耗，针对于复杂的工作进程例如nginx或者janus，我暂且没有尝试，但是对复杂程序性能调整作用不大。&lt;/p&gt;
&lt;p&gt;遇到复杂程序你可以考虑valgrind –tool=callgrind工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://valgrind.org/docs/manual/cl-manual.html#cl-manual.options.separation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://valgrind.org/docs/manual/cl-manual.html#cl-manual.options.separation&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="strace" scheme="http://vcpu.me/tags/strace/"/>
    
      <category term="性能点找寻" scheme="http://vcpu.me/tags/%E6%80%A7%E8%83%BD%E7%82%B9%E6%89%BE%E5%AF%BB/"/>
    
      <category term="程序执行时间细化" scheme="http://vcpu.me/tags/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E7%BB%86%E5%8C%96/"/>
    
      <category term="strace使用方法" scheme="http://vcpu.me/tags/strace%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
      <category term="你可以使用的用户程序性能优化找寻仿佛之一" scheme="http://vcpu.me/tags/%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%9A%84%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%89%BE%E5%AF%BB%E4%BB%BF%E4%BD%9B%E4%B9%8B%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>gdb工具打印函数调用栈</title>
    <link href="http://vcpu.me/print_stack/"/>
    <id>http://vcpu.me/print_stack/</id>
    <published>2018-01-10T10:00:00.000Z</published>
    <updated>2018-02-11T16:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>可以使用该脚本打印出当前进程的调用栈，当CPU使用率100%时候，你可以使用此脚本得知应用程序在忙什么，对应用程序进程调试</p>
<p>当然如果你应用程序性能不足，你正无助时，可以多次使用此脚本，你可以大概得知程序调用栈所耗损的地方，找到性能调试的关键点</p>
<p>我曾经遇到过CPU使用率不高，服务端程序性能严重不足情况，我使用了此脚本找到了io处理的一个全局锁，在修改优化此全局锁后，大大提升了服务端程序的性能</p>
<a id="more"></a>
<h1 id="调用栈打印脚本"><a href="#调用栈打印脚本" class="headerlink" title="调用栈打印脚本"></a>调用栈打印脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat pstack.sh</span></div><div class="line"><span class="comment">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> test $<span class="comment"># -ne 1; then</span></div><div class="line">    echo <span class="string">"Usage: `basename $0 .sh` &lt;process-id&gt;"</span> <span class="number">1</span>&gt;&amp;<span class="number">2</span></div><div class="line">    exit <span class="number">1</span></div><div class="line">fi</div><div class="line"></div><div class="line"><span class="keyword">if</span> test ! -r /proc/$<span class="number">1</span>; then</div><div class="line">    echo <span class="string">"Process $1 not found."</span> <span class="number">1</span>&gt;&amp;<span class="number">2</span></div><div class="line">    exit <span class="number">1</span></div><div class="line">fi</div><div class="line"></div><div class="line"><span class="comment"># GDB doesn't allow "thread apply all bt" when the process isn't</span></div><div class="line"><span class="comment"># threaded; need to peek at the process to determine if that or the</span></div><div class="line"><span class="comment"># simpler "bt" should be used.</span></div><div class="line"></div><div class="line">backtrace=<span class="string">"bt"</span></div><div class="line"><span class="keyword">if</span> test -d /proc/$<span class="number">1</span>/task ; then</div><div class="line">    <span class="comment"># Newer kernel; has a task/ directory.</span></div><div class="line">    <span class="keyword">if</span> test `/bin/ls /proc/$<span class="number">1</span>/task | /usr/bin/wc -l` -gt <span class="number">1</span> <span class="number">2</span>&gt;/dev/null ; then</div><div class="line">        backtrace=<span class="string">"thread apply all bt"</span></div><div class="line">    fi</div><div class="line"><span class="keyword">elif</span> test -f /proc/$<span class="number">1</span>/maps ; then</div><div class="line">    <span class="comment"># Older kernel; go by it loading libpthread.</span></div><div class="line">    <span class="keyword">if</span> /bin/grep -e libpthread /proc/$<span class="number">1</span>/maps &gt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span> ; then</div><div class="line">        backtrace=<span class="string">"thread apply all bt"</span></div><div class="line">    fi</div><div class="line">fi</div><div class="line"></div><div class="line">GDB=$&#123;GDB:-/usr/bin/gdb&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> $GDB -nx --quiet --batch --readnever &gt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span>; then</div><div class="line">    readnever=--readnever</div><div class="line"><span class="keyword">else</span></div><div class="line">    readnever=</div><div class="line">fi</div><div class="line"></div><div class="line"><span class="comment"># Run GDB, strip out unwanted noise.</span></div><div class="line">$GDB --quiet $readnever -nx /proc/$<span class="number">1</span>/exe $<span class="number">1</span> &lt;&lt;EOF <span class="number">2</span>&gt;&amp;<span class="number">1</span> |</div><div class="line">$backtrace</div><div class="line">EOF</div><div class="line">/bin/sed -n \</div><div class="line">    -e <span class="string">'s/^(gdb) //'</span> \</div><div class="line">    -e <span class="string">'/^#/p'</span> \</div><div class="line">    -e <span class="string">'/^Thread/p'</span></div></pre></td></tr></table></figure>
<h1 id="脚本使用方法"><a href="#脚本使用方法" class="headerlink" title="脚本使用方法"></a>脚本使用方法</h1><p>sh pstack.sh \<pid\></pid\></p>
<p>使用例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># sh pstack.sh 1471</span></div><div class="line"><span class="comment">#0  0x00007f9de5afe190 in __nanosleep_nocancel () from /lib64/libc.so.6</span></div><div class="line"><span class="comment">#1  0x00007f9de5afe044 in sleep () from /lib64/libc.so.6</span></div><div class="line"><span class="comment">#2  0x0000000000400810 in ha_ha ()</span></div><div class="line"><span class="comment">#3  0x0000000000400ae7 in main ()</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以使用该脚本打印出当前进程的调用栈，当CPU使用率100%时候，你可以使用此脚本得知应用程序在忙什么，对应用程序进程调试&lt;/p&gt;
&lt;p&gt;当然如果你应用程序性能不足，你正无助时，可以多次使用此脚本，你可以大概得知程序调用栈所耗损的地方，找到性能调试的关键点&lt;/p&gt;
&lt;p&gt;我曾经遇到过CPU使用率不高，服务端程序性能严重不足情况，我使用了此脚本找到了io处理的一个全局锁，在修改优化此全局锁后，大大提升了服务端程序的性能&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="gdb" scheme="http://vcpu.me/tags/gdb/"/>
    
      <category term="函数调用栈" scheme="http://vcpu.me/tags/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/"/>
    
      <category term="性能点找寻方法之一" scheme="http://vcpu.me/tags/%E6%80%A7%E8%83%BD%E7%82%B9%E6%89%BE%E5%AF%BB%E6%96%B9%E6%B3%95%E4%B9%8B%E4%B8%80/"/>
    
      <category term="用户态进程性能调整方法" scheme="http://vcpu.me/tags/%E7%94%A8%E6%88%B7%E6%80%81%E8%BF%9B%E7%A8%8B%E6%80%A7%E8%83%BD%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用mac pro 使用ansible自动监控服务器进程状态</title>
    <link href="http://vcpu.me/osx-ensible/"/>
    <id>http://vcpu.me/osx-ensible/</id>
    <published>2018-01-07T10:00:00.000Z</published>
    <updated>2018-02-11T14:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文目的，因为笔者有需要观察云开发环境相关服务进程需求，因为该开发环境并没有部署相关运行监控程序，因此笔者想通过一个脚本，在使用环境前做一个基本检查</p>
<p>如果服务不满足使用条件，对其进行一定调整，使用该脚本只需要花费不到1s时间，既可以达到使用目标。当然也可以通过ssh命令到具体服务器一个个观察服务进程，但需要耗费大量重复劳动时间。</p>
<h1 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h1><p>mac pro osx 系统想远程登录控制controller服务器(ubuntu16.04)，并且执行相关命令</p>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="本地controller域名解析配置"><a href="#本地controller域名解析配置" class="headerlink" title="本地controller域名解析配置"></a>本地controller域名解析配置</h2><p>cat /private/etc/hosts</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">192.168</span><span class="number">.4</span><span class="number">.101</span> controller</div><div class="line"><span class="number">192.168</span><span class="number">.4</span><span class="number">.102</span> compute</div><div class="line"><span class="number">192.168</span><span class="number">.4</span><span class="number">.104</span> compute02</div><div class="line"><span class="number">192.168</span><span class="number">.4</span><span class="number">.103</span> network</div></pre></td></tr></table></figure>
<h2 id="controller服务器支持免密登录"><a href="#controller服务器支持免密登录" class="headerlink" title="controller服务器支持免密登录"></a>controller服务器支持免密登录</h2><p>步骤1:在controller服务器中如果不存在authorized_keys将其创建出，创建命令如下</p>
<p>touch /root/.ssh/authorized_keys</p>
<p>步骤2:找出mac pro osx系统公钥</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ cat ~/.ssh/id_rsa.pub</div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDH7uxw50HQG0SwvLCcHAgcCarLw5DP4gDqDDki/+E85STu5Di++u4F8SeHLphkMiuvqsDWZzzOwx7+H32JXDu+aev/A2a8vQ9TRnH257+n4SOjWQD07QsyDQ+U0A4I3oofXY2kul3KBeQ9f8z/<span class="number">2l</span>W7yAN1AEeJ/SW+TFeNqvLlkHfGNOUsw6NmfH5uujxbhxIREB0T7kH9q+gjLVcyMgRYdCKk8fvdzWZ99w/+xuUhCkhs1kLdqgRWuqQ6iI9ZPmcZU7pJD3DDQPqIUUxzgGFRkb3SJ7ewczdKm0XV3BupmwRlEXvuS2o26zoVui7X1ndqahLdjQSH6ZGggn/w6KJX qinlong@QinlongdeMacBook-Pro.local</div></pre></td></tr></table></figure>
<p>步骤3:将mac pro公钥放入controller服务器的root/.ssh/authorized_keys</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@controller:~<span class="meta"># cat /root/.ssh/authorized_keys</span></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDH7uxw50HQG0SwvLCcHAgcCarLw5DP4gDqDDki/+E85STu5Di++u4F8SeHLphkMiuvqsDWZzzOwx7+H32JXDu+aev/A2a8vQ9TRnH257+n4SOjWQD07QsyDQ+U0A4I3oofXY2kul3KBeQ9f8z/<span class="number">2l</span>W7yAN1AEeJ/SW+TFeNqvLlkHfGNOUsw6NmfH5uujxbhxIREB0T7kH9q+gjLVcyMgRYdCKk8fvdzWZ99w/+xuUhCkhs1kLdqgRWuqQ6iI9ZPmcZU7pJD3DDQPqIUUxzgGFRkb3SJ7ewczdKm0XV3BupmwRlEXvuS2o26zoVui7X1ndqahLdjQSH6ZGggn/w6KJX qinlong@QinlongdeMacBook-Pro.local</div></pre></td></tr></table></figure>
<h1 id="osx安装ansible"><a href="#osx安装ansible" class="headerlink" title="osx安装ansible"></a>osx安装ansible</h1><p><strong>安装：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ansible</div></pre></td></tr></table></figure>
<p><strong>安装验证:</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  ~ ansible --version</div><div class="line">ansible <span class="number">2.3</span><span class="number">.0</span><span class="number">.0</span></div><div class="line">  config file =</div><div class="line">  configured <span class="keyword">module</span> search path = Default w/o overrides</div><div class="line">  python version = <span class="number">2.7</span><span class="number">.13</span> (<span class="keyword">default</span>, Dec <span class="number">18</span> <span class="number">2016</span>, <span class="number">07</span>:<span class="number">03</span>:<span class="number">39</span>) [GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">8.0</span><span class="number">.0</span> (clang<span class="number">-800.0</span><span class="number">.42</span><span class="number">.1</span>)]</div><div class="line">➜  ~</div><div class="line">➜  ~</div></pre></td></tr></table></figure>
<p><strong>配置想要访问的hosts ansible：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ~ cat /usr/local/etc/ansible/hosts</div><div class="line">[controller]</div><div class="line">controller</div></pre></td></tr></table></figure>
<h1 id="ensible以root方式登录controller执行命令ls"><a href="#ensible以root方式登录controller执行命令ls" class="headerlink" title="ensible以root方式登录controller执行命令ls"></a>ensible以root方式登录controller执行命令ls</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">➜  ~ ansible controller  -u root  -m command -a <span class="string">"ls"</span></div><div class="line"> [WARNING]: Found both group <span class="keyword">and</span> host with same name: controller</div><div class="line"></div><div class="line"> [WARNING]: Found both group <span class="keyword">and</span> host with same name: network</div><div class="line"></div><div class="line">controller | SUCCESS | rc=<span class="number">0</span> &gt;&gt;</div><div class="line"><span class="number">1.</span>sh</div><div class="line">a</div><div class="line">admin-openrc</div><div class="line">arxan_0916</div><div class="line">arxan_0916.tar.gz</div><div class="line">arxan-manager_1<span class="number">.0</span><span class="number">.0</span><span class="number">-7</span>_all.deb</div><div class="line">a.tar.gz</div><div class="line">br-sw-<span class="built_in">set</span>.sh</div><div class="line">b.tar.gz</div><div class="line">centec_driver.py</div><div class="line">cirros<span class="number">-0.3</span><span class="number">.4</span>-x86_64-disk.img</div><div class="line">demo</div><div class="line">demo-openrc</div><div class="line">etcd_2<span class="number">.2</span><span class="number">.2</span>_amd64.deb</div><div class="line">id_rsa.pub</div><div class="line">neutron-l2-arxan-agent_2<span class="number">.1</span><span class="number">.1</span><span class="number">-14</span>_all.deb</div><div class="line">neutron-local-controller_2<span class="number">.1</span><span class="number">.1</span><span class="number">-14</span>_all.deb</div><div class="line">p.tar.gz</div><div class="line">python-arxan_1<span class="number">.0</span><span class="number">.0</span><span class="number">-7</span>_all.deb</div><div class="line">python-dragonflow_2<span class="number">.1</span><span class="number">.1</span><span class="number">-14</span>_all.deb</div><div class="line">python-etcd_0<span class="number">.4</span><span class="number">.5</span><span class="number">-1</span>_all.deb</div><div class="line">python-ovsdbapp_0<span class="number">.4</span><span class="number">.0</span><span class="number">-0u</span>buntu2_all.deb</div><div class="line">q.tar.gz</div><div class="line">xcmdb.py</div></pre></td></tr></table></figure>
<h1 id="在云主机执行shell脚本程序"><a href="#在云主机执行shell脚本程序" class="headerlink" title="在云主机执行shell脚本程序"></a>在云主机执行shell脚本程序</h1><h2 id="云主机中的脚本"><a href="#云主机中的脚本" class="headerlink" title="云主机中的脚本"></a>云主机中的脚本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@controller:~<span class="meta"># cat 1.sh</span></div><div class="line">#!/bin/bash</div><div class="line">echo $HOSTNAME</div><div class="line">echo <span class="string">"-----------------------------------------"</span></div><div class="line">arr_string=(<span class="string">"rabbitmq-server"</span> <span class="string">"etcd"</span> )</div><div class="line"></div><div class="line"><span class="keyword">for</span> var in  $&#123;arr_string[@]&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line">    echo $var</div><div class="line">    wc_rab=`systemctl status $var |grep active|grep running|wc -l`</div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ $wc_rab -ne <span class="number">1</span> ]</div><div class="line">    then</div><div class="line">        echo <span class="string">" $var  is down ,Now restart it"</span></div><div class="line">        systemctl restart $var</div><div class="line">    <span class="keyword">else</span></div><div class="line">        echo <span class="string">"ok"</span></div><div class="line">    fi</div><div class="line">done</div></pre></td></tr></table></figure>
<p>该脚本主要观察进程状态，如果进程非开启状态并将其重启，它观察的进程是rabbitmq-server, etcd</p>
<h2 id="mac-pro-osx执行云主机的脚本"><a href="#mac-pro-osx执行云主机的脚本" class="headerlink" title="mac pro osx执行云主机的脚本"></a>mac pro osx执行云主机的脚本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible check  -u root  -m command -a <span class="string">"bash ./1.sh"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文目的，因为笔者有需要观察云开发环境相关服务进程需求，因为该开发环境并没有部署相关运行监控程序，因此笔者想通过一个脚本，在使用环境前做一个基本检查&lt;/p&gt;
&lt;p&gt;如果服务不满足使用条件，对其进行一定调整，使用该脚本只需要花费不到1s时间，既可以达到使用目标。当然也可以通过ssh命令到具体服务器一个个观察服务进程，但需要耗费大量重复劳动时间。&lt;/p&gt;
&lt;h1 id=&quot;场景描述&quot;&gt;&lt;a href=&quot;#场景描述&quot; class=&quot;headerlink&quot; title=&quot;场景描述&quot;&gt;&lt;/a&gt;场景描述&lt;/h1&gt;&lt;p&gt;mac pro osx 系统想远程登录控制controller服务器(ubuntu16.04)，并且执行相关命令&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="dropwatch" scheme="http://vcpu.me/tags/dropwatch/"/>
    
      <category term="osx" scheme="http://vcpu.me/tags/osx/"/>
    
      <category term="ensible" scheme="http://vcpu.me/tags/ensible/"/>
    
      <category term="云主机" scheme="http://vcpu.me/tags/%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    
      <category term="自动化控制许多台远程主机" scheme="http://vcpu.me/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A7%E5%88%B6%E8%AE%B8%E5%A4%9A%E5%8F%B0%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>云主机发包性能提升方法</title>
    <link href="http://vcpu.me/guest_tx_pps_performance/"/>
    <id>http://vcpu.me/guest_tx_pps_performance/</id>
    <published>2017-12-29T10:00:00.000Z</published>
    <updated>2018-02-11T16:12:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h1><p>1.vhost-net io不差，只是我们没有用对<br>目前云主机采用网络io方式为vhost-net，相比较于virtio和全虚拟化网卡，其数据包延迟和pps要好太多，且还存在较大优化空间。</p>
<p>2.去除linux bridge，让云主机直接接入br-int可提升2倍发包pps<br>云主机发包经过linux bridge （安全组功能使用）到br-int虚拟交换机，发包极限性能16w左右，<br>如果采用ovs流表实现安全组，云主机直接和br-int相连，云主机包性能则有可能到27-30wpps。</p>
<p>下文主要是对细节描述</p>
<a id="more"></a>
<h1 id="细节描述"><a href="#细节描述" class="headerlink" title="细节描述"></a>细节描述</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p><img src="/myimages/1841AEC90F4317CD6FB44B0848F94D61.png" alt="x.png"></p>
<ul>
<li>br-int为ovs交换机</li>
<li>172.16.1.3经过linux bridge连接到br-int，主要用来当客户端测试发包能力</li>
<li>172.16.1.12直接接入br-int，主要用来当客户端测试发包能力</li>
<li>172.16.1.5经过linux bridge连接到br-int，主要用来当服务端</li>
<li>所有云主机都是centos7.3操作系统</li>
<li>172.16.1.3/12位于计算节点1</li>
<li>172.16.1.5位于计算节点2</li>
<li>计算节点1和计算节点2接入到同一个物理交换机</li>
<li>计算节点1主机的CPU型号是Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>经过测试16*vcpu 单队列情况下tx 16wpps、rx 56wpps。</p>
<p>单队列情况下tx发包性能还是很低的，于是采用iperf3和hping3进行tx pps测试，并采用ftrace和perf工具找出性能瓶颈。</p>
<p><strong>采用iperf3测试情况下</strong>：</p>
<ul>
<li>发包经过linux bridge，云主机的发包性能目前为15w-17w（不能再向上了，因为云主机对应的内核vhost线程CPU近%100）</li>
<li>去除发包节点的linux bridge后，云主机发包性能可被优化到24w-27w（应该还能向上，因为此时vhost所占用CPU还剩余至少10%）</li>
</ul>
<p><strong>使用hping3命令测试</strong></p>
<ul>
<li>发包经过linux bridge的安全组,发包性能15wpps（此时主机侧vhost内核进程100%）</li>
<li>去除发包节点的linux bridge后,去除bridge后发包性能可达40wpps</li>
</ul>
<p>经过测试可知，单队列情况下，去除linux bridge，在ovs上实现安全组功能，也许可以提升云主机的发包pps到30w-40w pps。</p>
<p>我们知道host主机CPU资源是很珍贵的，多队列可以提升云主机发包能力但是会占用和耗损主机CPU，所以能不开尽量不要开启多队列，因此使用ovs实现安全组+去除linuxbridge是合适的方案。</p>
<h1 id="调试过程关键参数分析"><a href="#调试过程关键参数分析" class="headerlink" title="调试过程关键参数分析"></a>调试过程关键参数分析</h1><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p><strong>iperf3测试方法</strong>：</p>
<p><strong>服务端</strong>：iperf3 -s -p 16001</p>
<p><strong>客户端</strong>：iperf3 -u -l 16 -b 100m -t 1200 -c 172.16.1.5 -p 16001 -A 2</p>
<p><strong>hping测试方法</strong>：</p>
<p><strong>客户端</strong>：hping3 -c 100000000 –flood 172.16.1.5</p>
<h2 id="经过linux-bridge-云主机发包pps测试情况下"><a href="#经过linux-bridge-云主机发包pps测试情况下" class="headerlink" title="经过linux bridge 云主机发包pps测试情况下"></a>经过linux bridge 云主机发包pps测试情况下</h2><h3 id="发包云主机所在服务器-perf-top记录"><a href="#发包云主机所在服务器-perf-top记录" class="headerlink" title="发包云主机所在服务器 perf top记录"></a>发包云主机所在服务器 perf top记录</h3><p><img src="/myimages/145981C24AC90AF98AE4E9B581E098A8.jpg" alt=""></p>
<p>如上图ipt_do_table占用率较高，这部分是遍历iptable规则链的函数，做linux bridge安全组功能使用，如上图可以看到，其发包瓶颈在安全组功能。</p>
<p>perftop帮助我们及时发现性能瓶颈点，为我们性能优化提供非常大的便利。</p>
<h3 id="此时记录vhost线程CPU占用情况"><a href="#此时记录vhost线程CPU占用情况" class="headerlink" title="此时记录vhost线程CPU占用情况"></a>此时记录vhost线程CPU占用情况</h3><p><img src="/myimages/D38FA269541BA82A1E5FFDF39FB813E4.jpg" alt=""></p>
<h2 id="去除linux-bridge"><a href="#去除linux-bridge" class="headerlink" title="去除linux bridge"></a>去除linux bridge</h2><h3 id="发包perf-top记录"><a href="#发包perf-top记录" class="headerlink" title="发包perf top记录"></a>发包perf top记录</h3><p><img src="/myimages/C37FAA27CE8827E7AFC8ADF0F3E41690.jpg" alt=""></p>
<p>如上我们可以看到，去除linux bridge后性能点已经从linux bridge转移到其它位置，在此不做再详细的分析了。</p>
<h3 id="此时vhost线程CPU占用情况"><a href="#此时vhost线程CPU占用情况" class="headerlink" title="此时vhost线程CPU占用情况"></a>此时vhost线程CPU占用情况</h3><p><img src="/myimages/85F11C494A7B5E514D06F0E9A641A0A8.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本文主要内容&quot;&gt;&lt;a href=&quot;#本文主要内容&quot; class=&quot;headerlink&quot; title=&quot;本文主要内容&quot;&gt;&lt;/a&gt;本文主要内容&lt;/h1&gt;&lt;p&gt;1.vhost-net io不差，只是我们没有用对&lt;br&gt;目前云主机采用网络io方式为vhost-net，相比较于virtio和全虚拟化网卡，其数据包延迟和pps要好太多，且还存在较大优化空间。&lt;/p&gt;
&lt;p&gt;2.去除linux bridge，让云主机直接接入br-int可提升2倍发包pps&lt;br&gt;云主机发包经过linux bridge （安全组功能使用）到br-int虚拟交换机，发包极限性能16w左右，&lt;br&gt;如果采用ovs流表实现安全组，云主机直接和br-int相连，云主机包性能则有可能到27-30wpps。&lt;/p&gt;
&lt;p&gt;下文主要是对细节描述&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="虚拟云主机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    
      <category term="vhost-net" scheme="http://vcpu.me/tags/vhost-net/"/>
    
      <category term="tx pps" scheme="http://vcpu.me/tags/tx-pps/"/>
    
      <category term="hping3" scheme="http://vcpu.me/tags/hping3/"/>
    
      <category term="iperf3" scheme="http://vcpu.me/tags/iperf3/"/>
    
      <category term="perftop分析性能瓶颈" scheme="http://vcpu.me/tags/perftop%E5%88%86%E6%9E%90%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/"/>
    
      <category term="云主机tx性能提升两倍方法" scheme="http://vcpu.me/tags/%E4%BA%91%E4%B8%BB%E6%9C%BAtx%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E4%B8%A4%E5%80%8D%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ftrace一个系统含有的工具</title>
    <link href="http://vcpu.me/ftrace/"/>
    <id>http://vcpu.me/ftrace/</id>
    <published>2017-12-25T10:00:00.000Z</published>
    <updated>2018-02-11T15:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>你可以用它分析性能，还是很强大的！！</p>
<h1 id="ftrace是什么？"><a href="#ftrace是什么？" class="headerlink" title="ftrace是什么？"></a>ftrace是什么？</h1><p>一个用来跟踪的缓冲区（内存）称为一个instance，缓冲区的大小由文件buffer_size_kb和buffer_total_size_kb文件指定。有了缓冲区，你就可以启动行为跟踪，跟踪的结果会分CPU写到缓冲区中。缓冲区的数据可以通过trace和trace_pipe两个接口读出。前者通常用于事后读，后者是个pipe，可以让你动态读。为了不影响执行过程，我更推荐前一个接口。<br><a id="more"></a><br>trace等文件的输出是综合所有CPU的，如果你关心单个CPU可以进入per_cpu目录，里面有这些文件的分CPU版本。</p>
<p>所以读者应该已经明白了/sys/kernel/debug/tracing这个目录本身就代表一个instance。如果你需要更多的instance，你可以进入到这个目录下面的instances目录中，创建一个任意名字的目录，那个目录中就也会有另一套buffer_size_kb啦，trace啦这些文件，那里就是另一个instance了。通过多instance，你可以隔离多个独立的跟踪任务。当然，这也很浪费内存。</p>
<p>向set_ftrace_pid写pid可以限制只根据某个pid的事件等。</p>
<p>启动事件跟踪的方法很简单：</p>
<p>1. 先查<strong>available_events</strong>中有哪些可以用的事件（查events目录也可以）。</p>
<p>2. 把那个事件的名称写进set_event，可以写多个，可以写sched:*这样的通配符</p>
<p>3. 通过trace_on文件启动跟踪。启动之前可以通过比如tracing_cpumask这样的文件限制跟踪的CPU，通过set_event_pid设置跟踪的pid，或者通过其他属性进行更深入的设定。</p>
<p>剩下的事情就是执行跟踪程序和分析跟踪结果了</p>
<p>对于性能分析，我用得最多的是这个线程switch事件（还有softirq的一组事件）。因为从考量通量的角度，主业务CPU要不idle，它要不在处理业务，要不在调度。一个“不折腾”的系统，主业务进程应该每次都用完自己的时间片，如果它总用不完，要不是它实时性要求很高（主业务这种情况很少），要不是线程调度设计有问题。我们常常看到的一种模型是，由于业务在线程上安排不合理，导致一个线程刚执行一步，马上要等下一个线程完成，那个线程又执行一步，又要回来等前一个线程完成，这样CPU的时间都在切换上，整个通量就很低了。</p>
<h1 id="你可以用它干什么？"><a href="#你可以用它干什么？" class="headerlink" title="你可以用它干什么？"></a>你可以用它干什么？</h1><p>Function tracer 和 Function graph tracer: 跟踪函数调用。</p>
<p>Schedule switch tracer: 跟踪进程调度情况。</p>
<p>Wakeup tracer：跟踪进程的调度延迟，即高优先级进程从进入 ready 状态到获得 CPU 的延迟时间。该 tracer 只针对实时进程。</p>
<p>Irqsoff tracer：当中断被禁止时，系统无法相应外部事件，比如键盘和鼠标，时钟也无法产生 tick 中断。这意味着系统响应延迟，irqsoff 这个 tracer 能够跟踪并记录内核中哪些函数禁止了中断，对于其中中断禁止时间最长的，irqsoff 将在 log 文件的第一行标示出来，从而使开发人员可以迅速定位造成响应延迟的罪魁祸首。</p>
<p>Preemptoff tracer：和前一个 tracer 类似，preemptoff tracer 跟踪并记录禁止内核抢占的函数，并清晰地显示出禁止抢占时间最长的内核函数。</p>
<p>Preemptirqsoff tracer: 同上，跟踪和记录禁止中断或者禁止抢占的内核函数，以及禁止时间最长的函数。</p>
<p>Branch tracer: 跟踪内核程序中的 likely/unlikely 分支预测命中率情况。 Branch tracer 能够记录这些分支语句有多少次预测成功。从而为优化程序提供线索。</p>
<p>Hardware branch tracer：利用处理器的分支跟踪能力，实现硬件级别的指令跳转记录。在 x86 上，主要利用了 BTS 这个特性。</p>
<p>Initcall tracer：记录系统在 boot 阶段所调用的 init call 。</p>
<p>Mmiotrace tracer：记录 memory map IO 的相关信息。</p>
<p>Power tracer：记录系统电源管理相关的信息。</p>
<p>Sysprof tracer：缺省情况下，sysprof tracer 每隔 1 msec 对内核进行一次采样，记录函数调用和堆栈信息。</p>
<p>Kernel memory tracer: 内存 tracer 主要用来跟踪 slab allocator 的分配情况。包括 kfree，kmem_cache_alloc 等 API 的调用情况，用户程序可以根据 tracer 收集到的信息分析内部碎片情况，找出内存分配最频繁的代码片断，等等。</p>
<p>Workqueue statistical tracer：这是一个 statistic tracer，统计系统中所有的 workqueue 的工作情况，比如有多少个 work 被插入 workqueue，多少个已经被执行等。开发人员可以以此来决定具体的 workqueue 实现，比如是使用 single threaded workqueue 还是 per cpu workqueue.</p>
<p>Event tracer: 跟踪系统事件，比如 timer，系统调用，中断等。</p>
<h1 id="查看sshd进程的CPU调度情况"><a href="#查看sshd进程的CPU调度情况" class="headerlink" title="查看sshd进程的CPU调度情况"></a>查看sshd进程的CPU调度情况</h1><p>进入ftrace目录</p>
<p>cd /sys/kernel/debug/tracing</p>
<p>关闭ftrace开关，清除历史结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo <span class="number">0</span> &gt; tracing_on</div><div class="line">echo &gt; trace</div></pre></td></tr></table></figure>
<p>开启sched_switch CPU调度监听事件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo <span class="string">'next_comm ~ "sshd"'</span> &gt; events/sched/sched_switch/filter</div><div class="line">echo sched:sched_switch &gt; set_event</div></pre></td></tr></table></figure>
<p>开始分析</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo <span class="number">1</span> &gt; tracing_on</div></pre></td></tr></table></figure>
<p>实时查看结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat trace_pipe</div></pre></td></tr></table></figure>
<p>查看最终结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat trace</div></pre></td></tr></table></figure>
<h1 id="查看当前系统的中断事件情况"><a href="#查看当前系统的中断事件情况" class="headerlink" title="查看当前系统的中断事件情况"></a>查看当前系统的中断事件情况</h1><p>关闭ftrace开关，清除历史结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo <span class="number">0</span> &gt; tracing_on</div><div class="line">echo &gt; trace</div></pre></td></tr></table></figure>
<p>开启ftrace irq监听事件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo nop &gt; current_tracer </div><div class="line">echo irq &gt; set_event </div><div class="line">echo <span class="number">1</span> &gt; tracing_on</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat trace_pipe</div></pre></td></tr></table></figure>
<p>查看最终结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat trace</div></pre></td></tr></table></figure>
<h2 id="查看当前内核函数的调用情况"><a href="#查看当前内核函数的调用情况" class="headerlink" title="查看当前内核函数的调用情况"></a>查看当前内核函数的调用情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo &gt; set_event </div><div class="line">echo 0 &gt; tracing\_on </div><div class="line">echo &gt; trace </div><div class="line">echo function_graph &gt; current_tracer </div><div class="line">echo 1 &gt; tracing_on </div><div class="line">cat trace_pipe</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你可以用它分析性能，还是很强大的！！&lt;/p&gt;
&lt;h1 id=&quot;ftrace是什么？&quot;&gt;&lt;a href=&quot;#ftrace是什么？&quot; class=&quot;headerlink&quot; title=&quot;ftrace是什么？&quot;&gt;&lt;/a&gt;ftrace是什么？&lt;/h1&gt;&lt;p&gt;一个用来跟踪的缓冲区（内存）称为一个instance，缓冲区的大小由文件buffer_size_kb和buffer_total_size_kb文件指定。有了缓冲区，你就可以启动行为跟踪，跟踪的结果会分CPU写到缓冲区中。缓冲区的数据可以通过trace和trace_pipe两个接口读出。前者通常用于事后读，后者是个pipe，可以让你动态读。为了不影响执行过程，我更推荐前一个接口。&lt;br&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="ftrace" scheme="http://vcpu.me/tags/ftrace/"/>
    
      <category term="cpu调度情况查看" scheme="http://vcpu.me/tags/cpu%E8%B0%83%E5%BA%A6%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B/"/>
    
      <category term="内核函数调用" scheme="http://vcpu.me/tags/%E5%86%85%E6%A0%B8%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04内核代码编译升级步骤</title>
    <link href="http://vcpu.me/ubuntu_soure_make/"/>
    <id>http://vcpu.me/ubuntu_soure_make/</id>
    <published>2017-12-22T10:00:00.000Z</published>
    <updated>2018-02-26T10:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔者最近在ubuntu基础平台上做开发，因此对于基础平台的探究再从新来一遍吧，下面是基础平台编译升级内核的方法。<br><a id="more"></a></p>
<h1 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># apt-cache search linux-source</span></div><div class="line">linux-source - Linux kernel source   with Ubuntu patches</div><div class="line">linux-source-<span class="number">4.4</span>.<span class="number">0</span> - Linux kernel source <span class="keyword">for</span> version <span class="number">4.4</span>.<span class="number">0</span> with Ubuntu patches</div><div class="line">linux-source-<span class="number">4.10</span>.<span class="number">0</span> - Linux kernel source <span class="keyword">for</span> version <span class="number">4.10</span>.<span class="number">0</span> with Ubuntu patches</div><div class="line">linux-source-<span class="number">4.11</span>.<span class="number">0</span> - Linux kernel source <span class="keyword">for</span> version <span class="number">4.11</span>.<span class="number">0</span> with Ubuntu patches</div><div class="line">linux-source-<span class="number">4.13</span>.<span class="number">0</span> - Linux kernel source <span class="keyword">for</span> version <span class="number">4.13</span>.<span class="number">0</span> with Ubuntu patches</div><div class="line">linux-source-<span class="number">4.8</span>.<span class="number">0</span> - Linux kernel source <span class="keyword">for</span> version <span class="number">4.8</span>.<span class="number">0</span> with Ubuntu patches</div><div class="line">root@ubuntu:~<span class="comment">#</span></div><div class="line">root@ubuntu:~<span class="comment">#</span></div><div class="line">root@ubuntu:~<span class="comment">#</span></div><div class="line">root@ubuntu:~<span class="comment"># uname -r</span></div><div class="line"><span class="number">4.4</span>.<span class="number">0</span>-<span class="number">62</span>-generic</div><div class="line">root@ubuntu:~<span class="comment">#</span></div><div class="line">root@ubuntu:~<span class="comment"># apt-get install linux-source-4.4.0</span></div><div class="line">Reading <span class="keyword">package</span> lists... Done</div><div class="line">Building dependency tree</div><div class="line">Reading <span class="keyword">state</span> information... Done</div><div class="line">The following packages were automatically installed <span class="keyword">and</span> are <span class="keyword">no</span> longer required:</div><div class="line">  systemtap-common systemtap-runtime</div><div class="line">Use <span class="string">'apt autoremove'</span> to remove them.</div><div class="line">Suggested packages:</div><div class="line">  libncurses-dev | ncurses-dev kernel-<span class="keyword">package</span> libqt3-dev</div><div class="line">The following NEW packages will be installed:</div><div class="line">  linux-source-<span class="number">4.4</span>.<span class="number">0</span></div><div class="line"><span class="number">0</span> upgraded, <span class="number">1</span> newly installed, <span class="number">0</span> to remove <span class="keyword">and</span> <span class="number">153</span> <span class="keyword">not</span> upgraded.</div><div class="line">Need to get <span class="number">112</span> MB of archives.</div><div class="line">After this operation, <span class="number">130</span> MB of additional disk space will be used.</div><div class="line">Get:<span class="number">1</span> http:<span class="regexp">//mirrors</span>.aliyun.com/ubuntu xenial-updates/main amd64 linux-source-<span class="number">4.4</span>.<span class="number">0</span> all <span class="number">4.4</span>.<span class="number">0</span>-<span class="number">109.132</span> [<span class="number">112</span> MB]</div><div class="line">Fetched <span class="number">112</span> MB in <span class="number">5</span>min <span class="number">2</span><span class="keyword">s</span> (<span class="number">371</span> kB/<span class="keyword">s</span>)</div><div class="line">Selecting previously unselected <span class="keyword">package</span> linux-source-<span class="number">4.4</span>.<span class="number">0</span>.</div><div class="line">(Reading database ... <span class="number">113915</span> files <span class="keyword">and</span> directories currently installed.)</div><div class="line">Preparing to <span class="keyword">unpack</span> .../linux-source-<span class="number">4.4</span>.<span class="number">0_4</span>.<span class="number">4.0</span>-<span class="number">109.132_</span>all.deb ...</div><div class="line">Unpacking linux-source-<span class="number">4.4</span>.<span class="number">0</span> (<span class="number">4.4</span>.<span class="number">0</span>-<span class="number">109.132</span>) ...</div><div class="line">Setting up linux-source-<span class="number">4.4</span>.<span class="number">0</span> (<span class="number">4.4</span>.<span class="number">0</span>-<span class="number">109.132</span>) ...</div><div class="line">root@ubuntu:~<span class="comment">#</span></div></pre></td></tr></table></figure>
<h1 id="源代码下载目录"><a href="#源代码下载目录" class="headerlink" title="源代码下载目录"></a>源代码下载目录</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:<span class="regexp">/usr/src</span><span class="comment"># ls /usr/src/linux-source-4.4.0</span></div><div class="line">debian  debian.master  linux-source-<span class="number">4.4</span>.<span class="number">0</span>.tar.bz2</div><div class="line">root@ubuntu:<span class="regexp">/usr/src</span><span class="comment">#</span></div></pre></td></tr></table></figure>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>apt-get install libncurses5-dev libncursesw5-dev</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">make menuconfig</div><div class="line">make -j4</div><div class="line">make modules_install</div><div class="line">make install</div></pre></td></tr></table></figure>
<h1 id="更新引导项"><a href="#更新引导项" class="headerlink" title="更新引导项"></a>更新引导项</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:<span class="regexp">/usr/src</span><span class="comment"># cd /boot/grub/</span></div><div class="line">root@ubuntu:<span class="regexp">/boot/grub</span><span class="comment"># update-grub2</span></div><div class="line">Generating grub configuration file ...</div><div class="line">Found linux image: <span class="regexp">/boot/vmlinuz</span>-<span class="number">4.4</span>.<span class="number">0</span>-<span class="number">62</span>-generic</div><div class="line">Found initrd image: <span class="regexp">/boot/initrd</span>.img-<span class="number">4.4</span>.<span class="number">0</span>-<span class="number">62</span>-generic</div><div class="line">done</div></pre></td></tr></table></figure>
<h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reboot</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者最近在ubuntu基础平台上做开发，因此对于基础平台的探究再从新来一遍吧，下面是基础平台编译升级内核的方法。&lt;br&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="ubuntu16.04.2" scheme="http://vcpu.me/tags/ubuntu16-04-2/"/>
    
      <category term="内核代码获取" scheme="http://vcpu.me/tags/%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E8%8E%B7%E5%8F%96/"/>
    
      <category term="内核代码编译" scheme="http://vcpu.me/tags/%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>systemtap能做什么？第一篇</title>
    <link href="http://vcpu.me/systemtap-skills/"/>
    <id>http://vcpu.me/systemtap-skills/</id>
    <published>2017-12-10T10:00:00.000Z</published>
    <updated>2018-02-11T15:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>systemtap是一个强大的工具，笔者本次主要是发现其能力，为后续操作使用做下积淀积累。请见下文。</p>
<p><strong>probe</strong></p>
<p>“probe” \&lt;=> “探测”, 是SystemTap进行具体地收集数据的关键字。<br>“probe point” 是probe动作的时机，也称探测点。也就是probe程序监视的某事件点，一旦侦测的事件触发了，则probe将从此处插入内核或者用户进程中。</p>
<h2 id="探测点语法"><a href="#探测点语法" class="headerlink" title="探测点语法"></a>探测点语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">kernel.function(PATTERN)</div><div class="line">kernel.function(PATTERN).call</div><div class="line">kernel.function(PATTERN).<span class="keyword">return</span></div><div class="line">kernel.function(PATTERN).retutrn.maxactive(VALUE)</div><div class="line">kernel.function(PATTERN).inline</div><div class="line">kernel.function(PATTERN).label(PATTERN)</div></pre></td></tr></table></figure>
<ul>
<li>return 返回点探测</li>
<li>return.maxactive(VALUE)修饰return，控制同时探测多少个实例，默认足够一搬不用，如果出现了跳过探测现象且很多，可以使用此参数，提升探测效果</li>
<li>.call 函数被调用时触发此调用点</li>
<li>.inline 内联函数需要展示时候用此参数</li>
<li>.label 内核常常用到goto函数，用此标签可以探测出具体的goto返回点</li>
</ul>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module(MPATTERN).function(PATTERN)</div><div class="line">moudle(MPATTERN).function(PATTERN).call</div><div class="line">moudle(MPATTERN).function(PATTERN).<span class="keyword">return</span>.maxactive(VALUE)</div><div class="line">moudle(MPATTERN).function(PATTERN).inline</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kernel.statement(PATTERN)</div><div class="line">kernel.statement(ADDRESS).absolute</div></pre></td></tr></table></figure>
<ul>
<li>statement定位到具体的line或者函数，将这些定位点作为跟踪点</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">moudle(MPATTERN).statement(PATTERN)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">process(PROCESSPATH).function(PATTERN)</div><div class="line">process(PROCESSPATH).function(PATTERN).call</div><div class="line">process(PROCESSPATH).function(PATTERN).<span class="keyword">return</span></div><div class="line">process(PROCESSPATH).function(PATTERN).inline</div><div class="line">process(PROCESSPATH).statement(PATTERN)</div></pre></td></tr></table></figure>
<h2 id="PATTERN"><a href="#PATTERN" class="headerlink" title="PATTERN"></a>PATTERN</h2><p>func[@file]</p>
<p>func@file:linenumber</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kernel.function(<span class="string">"*int*"</span>)</div><div class="line">kernel.function(<span class="string">"*"</span>)</div><div class="line">kernel.function(<span class="string">"__netif_receive_skb_core"</span>)</div></pre></td></tr></table></figure>
<h2 id="我当前内核有哪些函数？"><a href="#我当前内核有哪些函数？" class="headerlink" title="我当前内核有哪些函数？"></a>我当前内核有哪些函数？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -l 'kernel.function("*")'|grep __netif_receive_skb_core</span></div><div class="line">kernel.function(<span class="string">"__netif_receive_skb_core@/build/linux-W6HB68/linux-4.4.0/net/core/dev.c:3828"</span>)</div></pre></td></tr></table></figure>
<h2 id="我当前内核有哪些变量？"><a href="#我当前内核有哪些变量？" class="headerlink" title="我当前内核有哪些变量？"></a>我当前内核有哪些变量？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -L 'kernel.function("__netif_receive_skb_core")'</span></div><div class="line">kernel.function(<span class="string">"__netif_receive_skb_core@/build/linux-W6HB68/linux-4.4.0/net/core/dev.c:3828"</span>) $skb:struct sk_buff* $pfmemalloc:bool</div></pre></td></tr></table></figure>
<h2 id="我想知道-netif-receive-skb-core被调用了几次？"><a href="#我想知道-netif-receive-skb-core被调用了几次？" class="headerlink" title="我想知道__netif_receive_skb_core被调用了几次？"></a>我想知道__netif_receive_skb_core被调用了几次？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat tanche.stp</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">global</span> count=<span class="number">0</span></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"__netif_receive_skb_core"</span>) &#123;</div><div class="line">  count++</div><div class="line">  <span class="keyword">if</span> (count % <span class="number">5</span> == <span class="number">0</span>)</div><div class="line">     printf( <span class="string">"sys_sync called %d times\n"</span>, count);</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe timer.ms(<span class="number">10000</span>)&#123;</div><div class="line">   printf(<span class="string">" %d times\n\n"</span>,count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每收5个数据包，打印一次，如果没有收到5个数据包，且时间过了约10s，也打印一次</p>
<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap tanche.stp</span></div><div class="line"> <span class="number">0</span> times</div><div class="line">sys_sync called <span class="number">5</span> times</div><div class="line">sys_sync called <span class="number">10</span> times</div><div class="line">sys_sync called <span class="number">15</span> times</div><div class="line">^Croot@ubuntu:~<span class="comment">#</span></div></pre></td></tr></table></figure>
<h2 id="如何打印内核函数的返回值？"><a href="#如何打印内核函数的返回值？" class="headerlink" title="如何打印内核函数的返回值？"></a>如何打印内核函数的返回值？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -e 'probe kernel.function("__netif_receive_skb_core").return &#123; printf("__netif_receive_skb_core return: :%d\n",$return) exit() &#125;'</span></div><div class="line">__netif_receive_skb_core <span class="keyword">return</span>: :<span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="如何使用stap知晓当前函数在哪丢包的？"><a href="#如何使用stap知晓当前函数在哪丢包的？" class="headerlink" title="如何使用stap知晓当前函数在哪丢包的？"></a>如何使用stap知晓当前函数在哪丢包的？</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">int__netif_receive_skb_core</span><span class="params">(struct sk_buff *skb, <span class="keyword">bool</span> pfmemalloc)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">packet_type</span> *<span class="title">ptype</span>, *<span class="title">pt_prev</span>;</span></div><div class="line">...</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NET_CLS_ACT</span></div><div class="line">	<span class="keyword">if</span> (skb-&gt;tc_verd &amp; TC_NCLS) &#123;</div><div class="line">		skb-&gt;tc_verd = CLR_TC_NCLS(skb-&gt;tc_verd);</div><div class="line">		<span class="keyword">goto</span> ncls;</div><div class="line">	&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pfmemalloc)</div><div class="line">		<span class="keyword">goto</span> skip_taps;</div><div class="line"></div><div class="line">	list_for_each_entry_rcu(ptype, &amp;ptype_all, <span class="built_in">list</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (pt_prev)</div><div class="line">			ret = deliver_skb(skb, pt_prev, orig_dev);</div><div class="line">		pt_prev = ptype;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (pt_prev) &#123;</div><div class="line">		<span class="keyword">if</span> (unlikely(skb_orphan_frags(skb, GFP_ATOMIC)))</div><div class="line">			<span class="keyword">goto</span> drop;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			ret = pt_prev-&gt;func(skb, skb-&gt;dev, pt_prev, orig_dev);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">drop:</div><div class="line">		atomic_long_inc(&amp;skb-&gt;dev-&gt;rx_dropped);</div><div class="line">		kfree_skb(skb);</div><div class="line">		<span class="comment">/* Jamal, now you will not able to escape explaining</span></div><div class="line">		 * me how you were going to use this. :-)</div><div class="line">		 */</div><div class="line">		ret = NET_RX_DROP;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stap -e 'probe kernel.function("__netif_receive_skb_core").label("drop") &#123; printf("__netif_receive_skb_core drop\n")  &#125;’</div><div class="line">stap -e 'probe kernel.function("__netif_receive_skb_core").label("out") &#123; printf("__netif_receive_skb_core out\n")  &#125;'</div></pre></td></tr></table></figure>
<p>linux函数使用goto处理函数返回点再正常不过了，此时如果你使用return探测丢包点，难达预期效果。只有将丢包点精准到goto语句的label标签，才可以发现丢包位置。</p>
<p>（之前对stap 的probe理解不深刻，也不会这样用，也不知曾为找具体丢包点挠过多少回头皮）</p>
<h2 id="谁调用了-netif-receive-skb-core-收了我的数据包？"><a href="#谁调用了-netif-receive-skb-core-收了我的数据包？" class="headerlink" title="谁调用了__netif_receive_skb_core 收了我的数据包？"></a>谁调用了__netif_receive_skb_core 收了我的数据包？</h2><p>首先列出__netif_receive_skb_core所在的代码位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -L  'kernel.function("__netif_receive_skb_core")'</span></div><div class="line">kernel.function(<span class="string">"__netif_receive_skb_core@/build/linux-W6HB68/linux-4.4.0/net/core/dev.c:3828"</span>) $skb:struct sk_buff* $pfmemalloc:bool</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stap -e <span class="string">'probe kernel.statement("*@net/core/dev.c:3829") &#123;printf(" : %s\n", execname()) &#125;'</span></div></pre></td></tr></table></figure>
<h2 id="qume虚拟机进程创建出了错，该怎么办？"><a href="#qume虚拟机进程创建出了错，该怎么办？" class="headerlink" title="qume虚拟机进程创建出了错，该怎么办？"></a>qume虚拟机进程创建出了错，该怎么办？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">root@compute<span class="number">-001</span>:~<span class="comment"># cat qumetanche.stp</span></div><div class="line">probe begin &#123;</div><div class="line">    printf(<span class="string">"start moniting qemu clone syscall...\n"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sys_clone"</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (execname() == <span class="string">"qemu-system-x86"</span>) &#123;</div><div class="line">        printf(<span class="string">"sys_clone : %s\n"</span>, execname())</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sys_clone"</span>).<span class="keyword">return</span> &#123;</div><div class="line">    <span class="keyword">if</span> (execname() == <span class="string">"qemu-system-x86"</span>) &#123;</div><div class="line">        printf(<span class="string">"sys_clone_return : %s, %d\n"</span>, execname(), $<span class="keyword">return</span>)</div><div class="line">        <span class="keyword">if</span> ($<span class="keyword">return</span> &lt; <span class="number">0</span>)</div><div class="line">            printf(<span class="string">"[error]sys_clone_return : %s, %d\n"</span>, execname(), $<span class="keyword">return</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进程在创建时候，会调用sys_clone，通过过滤调用该函数的执行者，可以定位到qemu-system-x86服务建立的进程，然后跟踪建立过程中返回值确认创建失败原因</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@compute<span class="number">-001</span>:~<span class="comment"># stap qumetanche.stp</span></div><div class="line">start moniting qemu clone syscall...</div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29946</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29947</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29948</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29949</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29950</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29951</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">29952</span></div><div class="line">sys_clone : qemu-system-x86</div><div class="line">sys_clone_return : qemu-system-x86, <span class="number">30088</span></div><div class="line">sys_clone : qemu-system-x86</div></pre></td></tr></table></figure>
<h2 id="我想研究一个内核（信号处理过程）过程该怎么做？"><a href="#我想研究一个内核（信号处理过程）过程该怎么做？" class="headerlink" title="我想研究一个内核（信号处理过程）过程该怎么做？"></a>我想研究一个内核（信号处理过程）过程该怎么做？</h2><h3 id="步骤1-找到sys-kill函数所在的源文件"><a href="#步骤1-找到sys-kill函数所在的源文件" class="headerlink" title="步骤1:找到sys_kill函数所在的源文件"></a>步骤1:找到sys_kill函数所在的源文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -l 'kernel.function("sys_kill")'</span></div><div class="line">kernel.function(<span class="string">"SyS_kill@/build/linux-W6HB68/linux-4.4.0/kernel/signal.c:2847"</span>)</div></pre></td></tr></table></figure>
<p>得知信号处理函数所在的内核源代码路径为：/build/linux-W6HB68/linux-4.4.0/kernel/signal.c</p>
<p>因为不同平台会有不同的内核路径，首先要做的事情就是，先找到具体内核路径</p>
<h3 id="步骤2-根据步骤1找到的内核路径，探测该路径下所有的函数的调用和返回并打出结果"><a href="#步骤2-根据步骤1找到的内核路径，探测该路径下所有的函数的调用和返回并打出结果" class="headerlink" title="步骤2:根据步骤1找到的内核路径，探测该路径下所有的函数的调用和返回并打出结果"></a>步骤2:根据步骤1找到的内核路径，探测该路径下所有的函数的调用和返回并打出结果</h3><p>-x -x PID sets target() to PID, 脚本里会用到此参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# stap -x 15365 signal.stp</div><div class="line">WARNING: function signals_init is in blacklisted section: keyword at signal.stp:5:1</div><div class="line"> source: probe kernel.function("*@/build/linux-W6HB68/linux-4.4.0/kernel/signal.c").call &#123;</div><div class="line">         ^</div><div class="line">WARNING: function setup_print_fatal_signals is in blacklisted section: keyword at :5:1</div><div class="line"> source: probe kernel.function("*@/build/linux-W6HB68/linux-4.4.0/kernel/signal.c").call &#123;</div><div class="line">         ^</div><div class="line">begin</div><div class="line"></div><div class="line">     0 bash(15365):    -&gt; get_signal,pid() 15365 target() 15365</div><div class="line">     5 bash(15365):        -&gt; get_signal,pid() 15365 target() 15365</div><div class="line">     8 bash(15365):            -&gt; dequeue_signal,pid() 15365 target() 15365</div><div class="line">     9 bash(15365):                -&gt; dequeue_signal,pid() 15365 target() 15365</div><div class="line">    11 bash(15365):                    -&gt; __dequeue_signal,pid() 15365 target() 15365</div><div class="line">    13 bash(15365):                        -&gt; __dequeue_signal,pid() 15365 target() 15365</div><div class="line">    14 bash(15365):                            -&gt; __dequeue_signal,pid() 15365 target() 15365</div><div class="line">    16 bash(15365):                                -&gt; __dequeue_signal,pid() 15365 target() 15365</div><div class="line">    18 bash(15365):                                    -&gt; __sigqueue_free,pid() 15365 target() 15365</div><div class="line">    19 bash(15365):                                        -&gt; __sigqueue_free,pid() 15365 target() 15365</div><div class="line">    22 bash(15365):                                            -&gt; recalc_sigpending,pid() 15365 target() 15365</div><div class="line">    23 bash(15365):                                                -&gt; recalc_sigpending,pid() 15365 target() 15365</div><div class="line">    25 bash(15365):                                                    -&gt; recalc_sigpending_tsk,pid() 15365 target() 15365</div><div class="line">    27 bash(15365):                                                        -&gt; recalc_sigpending_tsk,pid() 15365 target() 15365</div><div class="line">    31 bash(15365):                                                            -&gt; signal_setup_done,pid() 15365 target() 15365</div><div class="line">    33 bash(15365):                                                                -&gt; signal_setup_done,pid() 15365 target() 15365</div><div class="line">    34 bash(15365):                                                                    -&gt; __set_current_blocked,pid() 15365 target() 15365</div><div class="line">    36 bash(15365):                                                                        -&gt; __set_current_blocked,pid() 15365 target() 15365</div><div class="line">    38 bash(15365):                                                                            -&gt; __set_task_blocked,pid() 15365 target() 15365</div><div class="line">    39 bash(15365):                                                                                -&gt; __set_task_blocked,pid() 15365 target() 15365</div><div class="line">    41 bash(15365):                                                                                    -&gt; recalc_sigpending,pid() 15365 target() 15365</div></pre></td></tr></table></figure>
<h2 id="有人用stap分析内存泄漏和重复释放，记录下来吧"><a href="#有人用stap分析内存泄漏和重复释放，记录下来吧" class="headerlink" title="有人用stap分析内存泄漏和重复释放，记录下来吧"></a>有人用stap分析内存泄漏和重复释放，记录下来吧</h2><h3 id="步骤1-分析要要用的c语言源码，并编译"><a href="#步骤1-分析要要用的c语言源码，并编译" class="headerlink" title="步骤1:分析要要用的c语言源码，并编译"></a>步骤1:分析要要用的c语言源码，并编译</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat mem_test.c</span></div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    char *p1;</div><div class="line">    char *p2;</div><div class="line">    char *p3;</div><div class="line">    char *p4;</div><div class="line"></div><div class="line">    <span class="keyword">sleep</span>(<span class="number">20</span>);<span class="regexp">//</span>让程序<span class="keyword">sleep</span> <span class="number">20</span><span class="keyword">s</span>是因为我们程序先起来之后，等待SystemTap启动设置探测点</div><div class="line">    p1 = malloc(<span class="number">500</span>);</div><div class="line">    p2 = malloc(<span class="number">200</span>);</div><div class="line">    p3 = malloc(<span class="number">300</span>);</div><div class="line">    p4 = malloc(<span class="number">300</span>);<span class="regexp">//</span>泄漏</div><div class="line">    free(p1);</div><div class="line">    free(p2);</div><div class="line">    free(p3);</div><div class="line">    free(p2);<span class="regexp">//</span>重复释放</div><div class="line">    <span class="keyword">printf</span>(<span class="string">"p1: %p, p2: %p, p3: %p, p4: %p\n"</span>, p1, p2, p3, p4);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>编译：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -g mem_test.c -o main</div></pre></td></tr></table></figure>
<h3 id="步骤2-探测内存泄漏和重复释放的脚本"><a href="#步骤2-探测内存泄漏和重复释放的脚本" class="headerlink" title="步骤2: 探测内存泄漏和重复释放的脚本"></a>步骤2: 探测内存泄漏和重复释放的脚本</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat mem.stp</span></div><div class="line">probe begin &#123;</div><div class="line">    <span class="keyword">printf</span>(<span class="string">"=============begin============\n"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//记录内存分配和释放的计数关联数组</div><div class="line">global g_mem_ref_tbl</div><div class="line">//记录内存分配和释放的调用堆栈关联数组</div><div class="line">global g_mem_bt_tbl</div><div class="line"></div><div class="line">probe process(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>).function(<span class="string">"__libc_malloc"</span>).<span class="keyword">return</span>, process(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>).function(<span class="string">"__libc_calloc"</span>).<span class="keyword">return</span> &#123;</div><div class="line">    <span class="keyword">if</span> (target() == pid()) &#123;</div><div class="line">        <span class="keyword">if</span> (g_mem_ref_tbl[$return] == <span class="number">0</span>) &#123;</div><div class="line">            g_mem_ref_tbl[$return]++</div><div class="line">            g_mem_bt_tbl[$return] = sprint_ubacktrace()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe process(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>).function(<span class="string">"__libc_free"</span>).call &#123;</div><div class="line">    <span class="keyword">if</span> (target() == pid()) &#123;</div><div class="line">        g_mem_ref_tbl[$mem]--</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (g_mem_ref_tbl[$mem] == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> ($mem != <span class="number">0</span>) &#123;</div><div class="line">                <span class="regexp">//</span>记录上次释放的调用堆栈</div><div class="line">                g_mem_bt_tbl[$mem] = sprint_ubacktrace()</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g_mem_ref_tbl[$mem] &lt; <span class="number">0</span> &amp;&amp; $mem != <span class="number">0</span>) &#123;</div><div class="line">            <span class="regexp">//</span>如果调用free已经失衡，那就出现了重复释放内存的问题，这里输出当前调用堆栈，以及这个地址上次释放的调用堆栈</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"----------------------------------------------\n"</span>)</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"[%p] has been freed : %d\n"</span>, $mem, g_mem_ref_tbl[$mem])</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"who free this memory  at  error moment ? you can see the stack "</span>)</div><div class="line">            print_ubacktrace()</div><div class="line"></div><div class="line">            <span class="keyword">printf</span>(<span class="string">"haha,The memory has been freed by : \n"</span>)</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"%s\n"</span>, g_mem_bt_tbl[$mem])</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"----------------------------------------------\n"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe end &#123;</div><div class="line">    <span class="regexp">//</span>最后输出产生泄漏的内存是在哪里分配的</div><div class="line">    <span class="keyword">printf</span>(<span class="string">"=============end============\n"</span>)</div><div class="line">    <span class="keyword">foreach</span>(mem in g_mem_ref_tbl) &#123;</div><div class="line">        <span class="keyword">if</span> (g_mem_ref_tbl[mem] &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"[%p] is not free ,but you malloc it in %s ,so This is memory Loss!!!!\n"</span>, mem, g_mem_bt_tbl[mem])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>脚本分析：脚本主要记录下内存申请点和释放点，这样就可以很容易找到内存重复释放和泄漏点了</strong></p>
<h3 id="步骤3-探测过程"><a href="#步骤3-探测过程" class="headerlink" title="步骤3: 探测过程"></a>步骤3: 探测过程</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># vim mem.stp</span></div><div class="line">root@ubuntu:~<span class="comment"># ./main &amp;</span></div><div class="line">[<span class="number">1</span>] <span class="number">18904</span></div><div class="line">root@ubuntu:~<span class="comment"># stap -x 18904 mem.stp</span></div><div class="line">=============begin============</div><div class="line">p1: <span class="number">0xa28010</span>, p2: <span class="number">0xa28210</span>, p3: <span class="number">0xa282e0</span>, p4: <span class="number">0xa28420</span></div><div class="line">*** Error in <span class="string">`./main': double free or corruption (!prev): 0x0000000000a28210 ***</span></div><div class="line">======= Backtrace: =========</div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f1d146897e5]</div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7f1d1469237a]</div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7f1d1469653c]</div><div class="line">./main[0x40069c]</div><div class="line">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f1d14632830]</div><div class="line">./main[0x400529]</div><div class="line">======= Memory map: ========</div><div class="line">00400000-00401000 r-xp 00000000 fc:00 526710                             /root/main</div><div class="line">00600000-00601000 r--p 00000000 fc:00 526710                             /root/main</div><div class="line">00601000-00602000 rw-p 00001000 fc:00 526710                             /root/main</div><div class="line">00a28000-00a49000 rw-p 00000000 00:00 0                                  [heap]</div><div class="line">7f1d10000000-7f1d10021000 rw-p 00000000 00:00 0</div><div class="line">7f1d10021000-7f1d14000000 ---p 00000000 00:00 0</div><div class="line">7f1d143fc000-7f1d14412000 r-xp 00000000 fc:00 786953                     /lib/x86_64-linux-gnu/libgcc_s.so.1</div><div class="line">7f1d14412000-7f1d14611000 ---p 00016000 fc:00 786953                     /lib/x86_64-linux-gnu/libgcc_s.so.1</div><div class="line">7f1d14611000-7f1d14612000 rw-p 00015000 fc:00 786953                     /lib/x86_64-linux-gnu/libgcc_s.so.1</div><div class="line">7f1d14612000-7f1d147d2000 r-xp 00000000 fc:00 791185                     /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1d147d2000-7f1d149d2000 ---p 001c0000 fc:00 791185                     /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1d149d2000-7f1d149d6000 r--p 001c0000 fc:00 791185                     /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1d149d6000-7f1d149d8000 rw-p 001c4000 fc:00 791185                     /lib/x86_64-linux-gnu/libc-2.23.so</div><div class="line">7f1d149d8000-7f1d149dc000 rw-p 00000000 00:00 0</div><div class="line">7f1d149dc000-7f1d14a02000 r-xp 00000000 fc:00 791163                     /lib/x86_64-linux-gnu/ld-2.23.so</div><div class="line">7f1d14bf2000-7f1d14bf5000 rw-p 00000000 00:00 0</div><div class="line">7f1d14bfe000-7f1d14c01000 rw-p 00000000 00:00 0</div><div class="line">7f1d14c01000-7f1d14c02000 r--p 00025000 fc:00 791163                     /lib/x86_64-linux-gnu/ld-2.23.so</div><div class="line">7f1d14c02000-7f1d14c03000 rw-p 00026000 fc:00 791163                     /lib/x86_64-linux-gnu/ld-2.23.so</div><div class="line">7f1d14c03000-7f1d14c04000 rw-p 00000000 00:00 0</div><div class="line">7ffc8d97f000-7ffc8d9a0000 rw-p 00000000 00:00 0                          [stack]</div><div class="line">7ffc8d9d3000-7ffc8d9d5000 r--p 00000000 00:00 0                          [vvar]</div><div class="line">7ffc8d9d5000-7ffc8d9d7000 r-xp 00000000 00:00 0                          [vdso]</div><div class="line">7fffffffe000-7ffffffff000 --xp 00000000 00:00 0                          [uprobes]</div><div class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</div><div class="line">WARNING: Missing unwind data for a module, rerun with 'stap -d /root/main'</div><div class="line">WARNING: Missing unwind data for a module, rerun with 'stap -d /lib/x86_64-linux-gnu/ld-2.23.so'</div><div class="line">----------------------------------------------</div><div class="line">[0xa28210] has been freed : -1</div><div class="line">who free this memory  at  error moment ? you can see the stack  0x7f1d146964f0 : free+0x0/0x1d0 [/lib/x86_64-linux-gnu/libc-2.23.so]</div><div class="line"> 0x40069c [/root/main+0x69c/0x1000]</div><div class="line">haha,The memory has been freed by :</div><div class="line">free+0x0 [libc-2.23.so]</div><div class="line">0x400684 [main+0x684]</div><div class="line">----------------------------------------------</div><div class="line"></div><div class="line">^C=============end============</div><div class="line">[0xa28420] is not free ,but you malloc it in 0x400643 [main+0x643] ,so This is memory Loss!!!!</div><div class="line">[0xa28560] is not free ,but you malloc it in _IO_file_doallocate+0x55 [libc-2.23.so]</div><div class="line">_IO_doallocbuf+0x34 [libc-2.23.so]</div><div class="line">_IO_file_overflow@@GLIBC_2.2.5+0x1c8 [libc-2.23.so]</div><div class="line">_IO_file_xsputn@@GLIBC_2.2.5+0xad [libc-2.23.so]</div><div class="line">_IO_vfprintf+0xd1 [libc-2.23.so]</div><div class="line">printf+0x99 [libc-2.23.so]</div><div class="line">0x40066c [main+0x66c] ,so This is memory Loss!!!!</div><div class="line">[0x7f1d100008c0] is not free ,but you malloc it in 0x7f1d149f8f5a [ld-2.23.so+0x1cf5a] ,so This is memory Loss!!!!</div><div class="line">[0x7f1d100008f0] is not free ,but you malloc it in 0x7f1d149e7bf6 [ld-2.23.so+0xbbf6] ,so This is memory Loss!!!!</div><div class="line">[0x7f1d10000da0] is not free ,but you malloc it in 0x7f1d149e7ef4 [ld-2.23.so+0xbef4] ,so This is memory Loss!!!!</div><div class="line">[0x7f1d10000dd0] is not free ,but you malloc it in 0x7f1d149ea737 [ld-2.23.so+0xe737] ,so This is memory Loss!!!!</div><div class="line">[0x7f1d10000e10] is not free ,but you malloc it in 0x7f1d149ee0be [ld-2.23.so+0x120be] ,so This is memory Loss!!!!</div><div class="line">[1]+  Aborted                 (core dumped) ./main</div></pre></td></tr></table></figure>
<h3 id="步骤4-结果分析："><a href="#步骤4-结果分析：" class="headerlink" title="步骤4:结果分析："></a>步骤4:结果分析：</h3><h4 id="a-申请内存地址如下"><a href="#a-申请内存地址如下" class="headerlink" title="a. 申请内存地址如下"></a>a. 申请内存地址如下</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1: <span class="number">0xa28010</span>, p2: <span class="number">0xa28210</span>, p3: <span class="number">0xa282e0</span>, p4: <span class="number">0xa28420</span></div></pre></td></tr></table></figure>
<h4 id="b-0xa28210-p2-重复释放，重复释放位置-0x40069c-root-main-0x69c-0x1000-，因为它已经在0x400684-main-0x684-释放过了"><a href="#b-0xa28210-p2-重复释放，重复释放位置-0x40069c-root-main-0x69c-0x1000-，因为它已经在0x400684-main-0x684-释放过了" class="headerlink" title="b. 0xa28210 p2 重复释放，重复释放位置 0x40069c [/root/main+0x69c/0x1000] ，因为它已经在0x400684 [main+0x684] 释放过了"></a>b. 0xa28210 p2 重复释放，重复释放位置 0x40069c [/root/main+0x69c/0x1000] ，因为它已经在0x400684 [main+0x684] 释放过了</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0xa28210</span>] has been freed : -<span class="number">1</span></div><div class="line">who free this memory  at  error moment ? you can see the stack  <span class="number">0x7f1d146964f0</span> : free+<span class="number">0x0</span>/<span class="number">0x1d0</span> [<span class="regexp">/lib/x</span>86_64-linux-gnu/libc-<span class="number">2.23</span>.so]</div><div class="line"> <span class="number">0x40069c</span> [<span class="regexp">/root/main</span>+<span class="number">0x69c</span>/<span class="number">0x1000</span>]</div><div class="line">haha,The memory has been freed by :</div><div class="line">free+<span class="number">0x0</span> [libc-<span class="number">2.23</span>.so]</div><div class="line"><span class="number">0x400684</span> [main+<span class="number">0x684</span>]</div></pre></td></tr></table></figure>
<h4 id="c-0xa28420-p4内存泄漏，你在0x400643-main-0x643-申请了它，但是没有释放"><a href="#c-0xa28420-p4内存泄漏，你在0x400643-main-0x643-申请了它，但是没有释放" class="headerlink" title="c. 0xa28420 p4内存泄漏，你在0x400643 [main+0x643] 申请了它，但是没有释放"></a>c. 0xa28420 p4内存泄漏，你在0x400643 [main+0x643] 申请了它，但是没有释放</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0xa28420</span>] is <span class="keyword">not</span> free ,but you malloc it in <span class="number">0x400643</span> [main+<span class="number">0x643</span>] ,so This is memory Loss!!!!</div></pre></td></tr></table></figure>
<h2 id="我可以获取哪些函数和系统状态并打印出来？"><a href="#我可以获取哪些函数和系统状态并打印出来？" class="headerlink" title="我可以获取哪些函数和系统状态并打印出来？"></a>我可以获取哪些函数和系统状态并打印出来？</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat test_all_func.stp</span></div><div class="line"> probe begin &#123;</div><div class="line">    <span class="keyword">printf</span>(<span class="string">"SystemTap scrits start\n"</span>);&#125;</div><div class="line">    probe kernel.function(<span class="string">"tcp_v4_rcv"</span>)&#123;</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"skb-&gt;len = %d\n "</span>,$skb-&gt;len);</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"cpu %d \n"</span>,cpu())</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"execname %s pid %d tid %d \n"</span>,execname(),pid(),tid());</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"pp %s probefunc %s\n"</span>,pp(),probefunc());</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"gettimeofday_s %d get_cycles %d \n"</span>,gettimeofday_s(),get_cycles());</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"ppfunc %s \n  target  %d\n "</span>,ppfunc(),target());</div><div class="line">       print_backtrace();</div><div class="line">        <span class="keyword">exit</span>()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：具体含义自己体会和尝试</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -d e1000 -x 1000  test_all_func.stp</span></div><div class="line">SystemTap scrits start</div><div class="line">skb-&gt;len = <span class="number">32</span></div><div class="line"> cpu <span class="number">3</span></div><div class="line">execname sshd pid <span class="number">14479</span> tid <span class="number">14479</span></div><div class="line">pp kernel.function(<span class="string">"tcp_v4_rcv@/build/linux-W6HB68/linux-4.4.0/net/ipv4/tcp_ipv4.c:1555"</span>) probefunc tcp_v4_rcv</div><div class="line">gettimeofday_s <span class="number">1516860301</span> get_cycles <span class="number">127888015890393</span></div><div class="line">ppfunc tcp_v4_rcv</div><div class="line">  target  <span class="number">1000</span></div><div class="line">  <span class="number">0xffffffff81791250</span> : tcp_v4_rcv+<span class="number">0x0</span>/<span class="number">0xa20</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8176b414</span> : ip_local_deliver_finish+<span class="number">0x94</span>/<span class="number">0x1e0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8176b71f</span> : ip_local_deliver+<span class="number">0x6f</span>/<span class="number">0xe0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8176b0f2</span> : ip_rcv_finish+<span class="number">0x92</span>/<span class="number">0x320</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8176ba21</span> : ip_rcv+<span class="number">0x291</span>/<span class="number">0x3a0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172c634</span> : __netif_receive_skb_core+<span class="number">0x704</span>/<span class="number">0xa60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172c9a8</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172ca22</span> : netif_receive_skb_internal+<span class="number">0x32</span>/<span class="number">0xa0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172d6a3</span> : napi_gro_receive+<span class="number">0xc3</span>/<span class="number">0x120</span> [kernel]</div><div class="line"> <span class="number">0xffffffffc00400d2</span> : e1000_clean_rx_irq+<span class="number">0x152</span>/<span class="number">0x4c0</span> [e100<span class="number">0</span>]</div><div class="line"> <span class="number">0xffffffffc0040722</span> : e1000_clean+<span class="number">0x262</span>/<span class="number">0x8c0</span> [e100<span class="number">0</span>]</div><div class="line"> <span class="number">0xffffffff8172ceee</span> : net_rx_action+<span class="number">0x21e</span>/<span class="number">0x360</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81085db1</span> : __do_softirq+<span class="number">0x101</span>/<span class="number">0x290</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8183a30c</span> : do_softirq_own_stack+<span class="number">0x1c</span>/<span class="number">0x30</span> [kernel]</div></pre></td></tr></table></figure>
<p>获取当前调用栈，probe的探测点代码位置，触发进程名称、进程id和线程id、执行cpu id，当然时间相关函数也可以打出来；</p>
<p>这些函数基本可以帮助你了解定位该probe点所处于位置和系统进程运行和调用情况；可谓强大之极。</p>
<h2 id="我想了解用户态程序成员变量在某一行的值，我该怎么做？"><a href="#我想了解用户态程序成员变量在某一行的值，我该怎么做？" class="headerlink" title="我想了解用户态程序成员变量在某一行的值，我该怎么做？"></a>我想了解用户态程序成员变量在某一行的值，我该怎么做？</h2><p>使用statement定位到具体某一行，然后打印出你关注的变量即可。</p>
<p>eg: 用户态程序如下</p>
<p>root@ubuntu:~# cat test.c</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line">typedef struct str &#123;</div><div class="line">    <span class="keyword">int</span>    len;</div><div class="line">    char *data;</div><div class="line">&#125; str_t;</div><div class="line"></div><div class="line">typedef struct policy &#123;</div><div class="line">    str_t    name;</div><div class="line">    <span class="keyword">int</span>     id;</div><div class="line">&#125; policy_t;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    policy_t policy;</div><div class="line">    policy_t *p = &amp;policy;</div><div class="line">    p-&gt;id = <span class="number">111</span>;</div><div class="line">    p-&gt;name.data = <span class="string">"test"</span>;</div><div class="line">    p-&gt;name.len = sizeof(<span class="string">"test"</span>)-<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">printf</span>(<span class="string">" p-&gt;id: %d, p-&gt;name.data:[%p] %s, p-&gt;name.len: %d\n"</span>, p-&gt;id, p-&gt;name.data, p-&gt;name.data, p-&gt;name.len);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>gcc -Wall -g -o test ./test.c</p>
<p>stap 脚本如下：</p>
<p>root@ubuntu:~# cat test.stp</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">probe process(<span class="string">"./test"</span>).statement(<span class="string">"main@./test.c:20"</span>)</div><div class="line">&#123;</div><div class="line">     <span class="keyword">printf</span>(<span class="string">"p-&gt;name-&gt;data pointer[%p]  policy name: p-&gt;name-&gt;data %s :  p-&gt;name-&gt;len %d  p-&gt;id %d \n"</span>, $p-&gt;name-&gt;data,$p-&gt;name-&gt;data$,$p-&gt;name-&gt;len,$p-&gt;id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何探测：</p>
<p>步骤1:开启脚本监听</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap test.stp</span></div><div class="line">p-&gt;name-&gt;data pointer[<span class="number">0x4006b8</span>]  policy name: p-&gt;name-&gt;data <span class="string">"test"</span> :  p-&gt;name-&gt;len <span class="number">4</span>  p-&gt;id <span class="number">111</span></div></pre></td></tr></table></figure>
<p>步骤2:运行用户态进程</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap test.stp</span></div><div class="line">p-&gt;name-&gt;data pointer[<span class="number">0x4006b8</span>]  policy name: p-&gt;name-&gt;data <span class="string">"test"</span> :  p-&gt;name-&gt;len <span class="number">4</span>  p-&gt;id <span class="number">111</span></div></pre></td></tr></table></figure>
<h2 id="我用户态的函数是void-类型，脚本一直报类型不对，我想通过void-指针拿出具体成员，该怎么做？"><a href="#我用户态的函数是void-类型，脚本一直报类型不对，我想通过void-指针拿出具体成员，该怎么做？" class="headerlink" title="我用户态的函数是void * 类型，脚本一直报类型不对，我想通过void *指针拿出具体成员，该怎么做？"></a>我用户态的函数是void * 类型，脚本一直报类型不对，我想通过void *指针拿出具体成员，该怎么做？</h2><p>eg:</p>
<p>如下： 我定义了一个void * 类型的变量q,想在stap脚本中通过q打印出成员变量的值，该怎么做？</p>
<p>root@ubuntu:~# cat test.c</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line">typedef struct str &#123;</div><div class="line">    <span class="keyword">int</span>    len;</div><div class="line">    char *data;</div><div class="line">&#125; str_t;</div><div class="line"></div><div class="line">typedef struct policy &#123;</div><div class="line">    str_t    name;</div><div class="line">    <span class="keyword">int</span>     id;</div><div class="line">&#125; policy_t;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    policy_t policy;</div><div class="line">    policy_t *p = &amp;policy;</div><div class="line">    void *<span class="keyword">q</span>=(void*)p;</div><div class="line">    p-&gt;id = <span class="number">111</span>;</div><div class="line">    p-&gt;name.data = <span class="string">"test"</span>;</div><div class="line">    p-&gt;name.len = sizeof(<span class="string">"test"</span>)-<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"[p:%p] [q:%p] p-&gt;id: %d, p-&gt;name.data:[%p] %s, p-&gt;name.len: %d\n"</span>, p,<span class="keyword">q</span>,p-&gt;id, p-&gt;name.data, p-&gt;name.data, p-&gt;name.len);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>脚本：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat test.stp</span></div><div class="line">probe process(<span class="string">"./test"</span>).statement(<span class="string">"main@./test.c:21"</span>)</div><div class="line">&#123;</div><div class="line">     d =&amp;@cast($q,<span class="string">"policy_t"</span>)</div><div class="line">     <span class="keyword">printf</span>(<span class="string">"policy name: p-&gt;name-&gt;data %s  \n"</span>, d-&gt;name-&gt;data$);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>脚本解释：d变量为转换后的指针，是脚本的局部变量 ；@cast($q,”policy_t”) 方法可以转换指针类型</p>
<p>探测脚本运行:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap test.stp</span></div><div class="line">policy name: p-&gt;name-&gt;data <span class="string">"test"</span></div></pre></td></tr></table></figure>
<p>编译运行:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gcc -Wall -g -o test ./test.c</div><div class="line">root@ubuntu:~<span class="comment"># ./test</span></div><div class="line">[p:<span class="number">0x7ffc5202b240</span>] [<span class="keyword">q</span>:<span class="number">0x7ffc5202b240</span>] p-&gt;id: <span class="number">111</span>, p-&gt;name.data:[<span class="number">0x4006d8</span>] test, p-&gt;name.len: <span class="number">4</span></div></pre></td></tr></table></figure>
<p>怎么做到的？ 通过@cast($q,”policy_t”)将void * 类型的指针转换为policy_t *类型的指针，即可</p>
<h2 id="如果存在二级指针，如果通过stap脚本监控其值？"><a href="#如果存在二级指针，如果通过stap脚本监控其值？" class="headerlink" title="如果存在二级指针，如果通过stap脚本监控其值？"></a>如果存在二级指针，如果通过stap脚本监控其值？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat test1.c</span></div></pre></td></tr></table></figure>
<p>c用户程序</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">struct test &#123;</div><div class="line">    int count;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    struct test t = &#123;.count = 5566&#125;;</div><div class="line">    struct test *pt = &amp;t;</div><div class="line">    struct test **ppt = &amp;pt;</div><div class="line"></div><div class="line">    printf("t.count: %d, pt-&gt;count: %d, ppt-&gt;count: %d\n", t.count, pt-&gt;count, (*ppt)-&gt;count);</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>stap监控脚本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# cat test1.stp</div><div class="line">probe process("./test1").statement("main@./test1.c:13")</div><div class="line">&#123;</div><div class="line">    printf("$t-&gt;count: %d, $pt-&gt;count: %d, $ppt-&gt;count: %d", $t-&gt;count, $pt-&gt;count, $ppt[0]-&gt;count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>脚本运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# stap test1.stp</div><div class="line">$t-&gt;count: 5566, $pt-&gt;count: 5566, $ppt-&gt;count: 5566</div></pre></td></tr></table></figure>
<p>程序运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# ./test1</div><div class="line">t.count: 5566, pt-&gt;count: 5566, ppt-&gt;count: 5566</div></pre></td></tr></table></figure>
<p>总结：ppt是二级指针，(*ppt)->count 在stap脚本中表现形式是 $ppt[0]->count</p>
<h2 id="如何嵌入c语言？"><a href="#如何嵌入c语言？" class="headerlink" title="如何嵌入c语言？"></a>如何嵌入c语言？</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat copy_process.stp</span></div><div class="line">function getprocname:string(task:long)</div><div class="line">%&#123;</div><div class="line">    struct task_struct *task = (struct task_struct *)STAP_ARG_task;</div><div class="line">    snprintf(STAP_RETVALUE, MAXSTRINGLEN, <span class="string">"pid: %d, comm: %s"</span>, task-&gt;pid, task-&gt;comm);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function getprocid:long(task:long)</div><div class="line">%&#123;</div><div class="line">    struct task_struct *task = (struct task_struct *)STAP_ARG_task;</div><div class="line">    STAP_RETURN(task-&gt;pid);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"copy_process"</span>).<span class="keyword">return</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">printf</span>(<span class="string">"copy_process return: %p, pid: %d, getprocname: %s, getprocid: %d\n"</span>, $return, $return-&gt;pid, getprocname($return), getprocid($return));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<p>窗口1:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -g copy_process.stp</span></div><div class="line">copy_process <span class="keyword">return</span>: <span class="number">0xffff88030ff3aa00</span>, pid: <span class="number">11976</span>, getprocname: pid: <span class="number">11976</span>, comm: bash, getprocid: <span class="number">11976</span></div></pre></td></tr></table></figure>
<p>窗口2</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls</div></pre></td></tr></table></figure>
<ul>
<li>stap脚本要在花括号前加上% 号</li>
<li>获取参数STAP_ARG_前缀</li>
<li>返回值用STAP_RETVALUE ，其它情况使用snprintf or strncat将返回值拼进来</li>
<li>上述task是指针类型为long</li>
</ul>
<h2 id="如何修改进程中的变量？"><a href="#如何修改进程中的变量？" class="headerlink" title="如何修改进程中的变量？"></a>如何修改进程中的变量？</h2><p>root@ubuntu:~# cat test3.c</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line">typedef struct policy&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">&#125;policy_t;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">   policy_t policy;</div><div class="line">   policy_t *p = &amp;policy;</div><div class="line">   policy_t **pp ;</div><div class="line">   p-&gt;id =<span class="number">111</span>;</div><div class="line">   <span class="keyword">printf</span>(<span class="string">"before stap set value,p-&gt;id:%d\n"</span>,p-&gt;id);</div><div class="line">   pp = &amp;p;</div><div class="line">   <span class="keyword">printf</span>(<span class="string">"after stap set value,p-&gt;id : %d ,(*pp)-&gt;id : %d\n"</span>,p-&gt;id,(*pp)-&gt;id);</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改进程中结构变了policy_t中的id</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">probe process(<span class="string">"./test3"</span>).statement(<span class="string">"main@./test3.c:13"</span>)</div><div class="line">&#123;</div><div class="line">  $p-&gt;id=<span class="number">222</span>;</div><div class="line">  <span class="keyword">printf</span>(<span class="string">"$p$: %s\n"</span>,$p$)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行stap脚本</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap -g test3.stap</span></div><div class="line">$p$: &#123;.id=<span class="number">222</span>&#125;</div></pre></td></tr></table></figure>
<p>运行进程程序</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># ./test3</span></div><div class="line">before stap set value,p-&gt;id:<span class="number">111</span></div><div class="line">after stap set value,p-&gt;id : <span class="number">222</span> ,(*pp)-&gt;id : <span class="number">222</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;systemtap是一个强大的工具，笔者本次主要是发现其能力，为后续操作使用做下积淀积累。请见下文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;probe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“probe” \&amp;lt;=&gt; “探测”, 是SystemTap进行具体地收集数据的关键字。&lt;br&gt;“probe point” 是probe动作的时机，也称探测点。也就是probe程序监视的某事件点，一旦侦测的事件触发了，则probe将从此处插入内核或者用户进程中。&lt;/p&gt;
&lt;h2 id=&quot;探测点语法&quot;&gt;&lt;a href=&quot;#探测点语法&quot; class=&quot;headerlink&quot; title=&quot;探测点语法&quot;&gt;&lt;/a&gt;探测点语法&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;kernel.function(PATTERN)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kernel.function(PATTERN).call&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kernel.function(PATTERN).&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kernel.function(PATTERN).retutrn.maxactive(VALUE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kernel.function(PATTERN).inline&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kernel.function(PATTERN).label(PATTERN)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;return 返回点探测&lt;/li&gt;
&lt;li&gt;return.maxactive(VALUE)修饰return，控制同时探测多少个实例，默认足够一搬不用，如果出现了跳过探测现象且很多，可以使用此参数，提升探测效果&lt;/li&gt;
&lt;li&gt;.call 函数被调用时触发此调用点&lt;/li&gt;
&lt;li&gt;.inline 内联函数需要展示时候用此参数&lt;/li&gt;
&lt;li&gt;.label 内核常常用到goto函数，用此标签可以探测出具体的goto返回点&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="systemtap" scheme="http://vcpu.me/tags/systemtap/"/>
    
      <category term="ubuntu16.04.2" scheme="http://vcpu.me/tags/ubuntu16-04-2/"/>
    
      <category term="probe" scheme="http://vcpu.me/tags/probe/"/>
    
      <category term="内存泄漏探测" scheme="http://vcpu.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%A2%E6%B5%8B/"/>
    
      <category term="嵌入c" scheme="http://vcpu.me/tags/%E5%B5%8C%E5%85%A5c/"/>
    
      <category term="打印二级指针" scheme="http://vcpu.me/tags/%E6%89%93%E5%8D%B0%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    
      <category term="qemu进程创建失败" scheme="http://vcpu.me/tags/qemu%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%A4%B1%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04.2 systemtap安装以及工作原理和协议栈调用栈不全解决方法</title>
    <link href="http://vcpu.me/systemtap3.1/"/>
    <id>http://vcpu.me/systemtap3.1/</id>
    <published>2017-12-02T10:00:00.000Z</published>
    <updated>2018-02-11T15:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>openstack环境常常也使用ubuntu16.04.2作为host主机镜像构建私有云。systemtap可以帮助笔者探测host主机内核态的真实运行状态，外加内核代码阅读及时定位看是系统底层的问题。解决一些系统难题、扩展思路、排除一些因为不了解内核而造成的不必要的猜测。下面是笔者使用systemtap环境安装过程和基本原理描述。</p>
<p>关于跨模块和kernel 符号显示不全是笔者遇到的第一个问题，找到了解决方法，也记录下来，请看下文。</p>
<h1 id="如何安装systemtap？"><a href="#如何安装systemtap？" class="headerlink" title="如何安装systemtap？"></a>如何安装systemtap？</h1><p>步骤1:下载ubuntu16.04.2调试数据包</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">linux-image<span class="number">-4.4</span><span class="number">.0</span><span class="number">-62</span>-generic-dbgsym_4<span class="number">.4</span><span class="number">.0</span><span class="number">-62</span>_amd64.ddeb</div></pre></td></tr></table></figure>
<p>调试目录数据包下载路径 <a href="http://ddebs.ubuntu.com/pool/main/l/linux/?C=M;O=D" target="_blank" rel="external">http://ddebs.ubuntu.com/pool/main/l/linux/?C=M;O=D</a></p>
<p>步骤2:安装ubuntu16.04.2调试包</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg -i linux-image<span class="number">-4.4</span><span class="number">.0</span><span class="number">-62</span>-generic-dbgsym_4<span class="number">.4</span><span class="number">.0</span><span class="number">-62</span>_amd64.ddeb</div></pre></td></tr></table></figure>
<p>步骤3: 编译安装systemtap程序</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apt-get update &amp;&amp; \</div><div class="line">        apt-get install -y build-essential gettext elfutils libdw-dev python wget tar &amp;&amp; \</div><div class="line"></div><div class="line">wget https:<span class="comment">//sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz</span></div><div class="line">tar xzvf systemtap<span class="number">-3.1</span>.tar.gz</div><div class="line"></div><div class="line">cd systemtap<span class="number">-3.1</span>/ &amp;&amp; \</div><div class="line">         ./configure &amp;&amp; \</div><div class="line">         make all &amp;&amp; \</div><div class="line">         make install ;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="systemtap-测试"><a href="#systemtap-测试" class="headerlink" title="systemtap 测试"></a>systemtap 测试</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# stap -ve 'probe begin &#123; log("hello systemtap!") exit() &#125;'</div><div class="line">Pass 1: parsed user script and 465 library scripts using 110724virt/47744res/6432shr/41544data kb, in 120usr/40sys/374real ms.</div><div class="line">Pass 2: analyzed script: 1 probe, 2 functions, 0 embeds, 0 globals using 111648virt/48956res/6620shr/42468data kb, in 0usr/0sys/7real ms.</div><div class="line">Pass 3: translated to C into "/tmp/staps7ieJA/stap_294bb69fb17d36571b970bddbffa5bd9_1172_src.c" using 111648virt/48956res/6620shr/42468data kb, in 0usr/0sys/0real ms.</div><div class="line">Pass 4: compiled C into "stap_294bb69fb17d36571b970bddbffa5bd9_1172.ko" in 990usr/220sys/2162real ms.</div><div class="line">Pass 5: starting run.</div><div class="line">hello systemtap!</div><div class="line">Pass 5: run completed in 0usr/10sys/392real ms.</div></pre></td></tr></table></figure>
<h2 id="打印4s内所有open系统调用的信息"><a href="#打印4s内所有open系统调用的信息" class="headerlink" title="打印4s内所有open系统调用的信息"></a>打印4s内所有open系统调用的信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat test2.stp</span></div><div class="line"><span class="comment">#!/usr/bin/stap</span></div><div class="line"></div><div class="line">probe begin</div><div class="line">&#123;</div><div class="line">    log(<span class="string">"begin to probe"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe syscall.open</div><div class="line">&#123;</div><div class="line">    printf (<span class="string">"%s(%d) open (%s)\n"</span>, execname(), pid(), argstr)</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe timer.ms(<span class="number">4000</span>) <span class="comment"># after 4 seconds</span></div><div class="line">&#123;</div><div class="line">    exit ()</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe end</div><div class="line">&#123;</div><div class="line">    log(<span class="string">"end to probe"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="meta"># cp /root/systemtap/systemtap-3.1/stap /usr/bin/</span></div><div class="line">root@ubuntu:~# ./test2.<span class="function">stp</span></div><div class="line">begin to probe</div><div class="line"><span class="title">irqbalance</span><span class="params">(<span class="number">1686</span>)</span> <span class="title">open</span> <span class="params">(<span class="string">"/proc/interrupts"</span>, O_RDONLY)</span></div><div class="line"><span class="title">irqbalance</span><span class="params">(<span class="number">1686</span>)</span> <span class="title">open</span> <span class="params">(<span class="string">"/proc/stat"</span>, O_RDONLY)</span></div><div class="line">end to probe</div></pre></td></tr></table></figure>
<h1 id="systemtap-工作原理"><a href="#systemtap-工作原理" class="headerlink" title="systemtap 工作原理"></a>systemtap 工作原理</h1><p>systemtap 的核心思想是定义一个事件（event），以及给出处理该事件的句柄（Handler）。当一个特定的事件发生时，内核运行该处理句柄，就像快速调用一个子函数一样，处理完之后恢复到内核原始状态。这里有两个概念：</p>
<ul>
<li>事件（Event）：systemtap 定义了很多种事件，例如进入或退出某个内核函数、定时器时间到、整个systemtap会话启动或退出等等。</li>
<li><p>句柄（Handler）：就是一些脚本语句，描述了当事件发生时要完成的工作，通常是从事件的上下文提取数据，将它们存入内部变量中，或者打印出来。</p>
<p>Systemtap 工作原理是通过将脚本语句翻译成C语句，编译成内核模块。模块加载之后，将所有探测的事件以钩子的方式挂到内核上，当任何处理器上的某个事件发生时，相应钩子上句柄就会被执行。最后，当systemtap会话结束之后，钩子从内核上取下，移除模块。整个过程用一个命令 stap 就可以完成。</p>
</li>
</ul>
<p><img src="/myimages/2B639CFB803EB975AF906558E593A7C4.png" alt="hah.png"></p>
<h1 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h1><p>linux basic kernl和加载进去的ko文件共同组成linux 内核态，支撑起linux操作系统的运行；linux有不同的驱动选择，这些驱动往往走不同内核分支，它们很相像，在梳理协议栈时候，往往很费解，stap可以帮助解决此问题，很简单的一个运用是打印调用关系栈，来最终总结出linux运行函数路径。分为打印kernel函数调用栈和加载ko模块的调用栈，来最终实现所有linux运行路径拓扑图。（这里只提讲解调用栈相关使用）</p>
<p><a href="https://zhuanlan.zhihu.com/p/28680568" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/28680568</a></p>
<h2 id="kenel调用栈"><a href="#kenel调用栈" class="headerlink" title="kenel调用栈"></a>kenel调用栈</h2><p>步骤1:列出kernel符号</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~/openvswitch-2.7.0# stap -l 'kernel.function("*")'|grep __netif_receive_skb_core</div><div class="line">kernel.function("__netif_receive_skb_core@/build/linux-W6HB68/linux-4.4.0/net/core/dev.c:3828")</div></pre></td></tr></table></figure>
<h2 id="内核ko模块调用栈"><a href="#内核ko模块调用栈" class="headerlink" title="内核ko模块调用栈"></a>内核ko模块调用栈</h2><p>步骤1:列出模块函数符号</p>
<p>stap -l ‘module(“openvswitch”).function(“*“)’|grep ovs_vport_receive</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0xffffffffc0586ac0</span>    br_handle_frame</div><div class="line"><span class="number">0xffffffffc05864a0</span>   br_handle_frame_finish</div></pre></td></tr></table></figure>
<h1 id="解决stap函数栈解析不全问题"><a href="#解决stap函数栈解析不全问题" class="headerlink" title="解决stap函数栈解析不全问题"></a>解决stap函数栈解析不全问题</h1><h2 id="问题举例1：vethpair口调用函数调用栈打印"><a href="#问题举例1：vethpair口调用函数调用栈打印" class="headerlink" title="问题举例1：vethpair口调用函数调用栈打印"></a>问题举例1：vethpair口调用函数调用栈打印</h2><p>打印协议栈脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># cat btveth.stp</span></div><div class="line">	probe   module(<span class="string">"veth"</span>).function(@<span class="number">1</span>)&#123;</div><div class="line">	    print(<span class="string">"----------------START-------------------------\n"</span>)</div><div class="line">	    printf(<span class="string">"In process [%s]\n"</span>, execname())</div><div class="line">	    print_backtrace()</div><div class="line">	    print(<span class="string">"----------------END-------------------------\n"</span>)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>执行上述脚本后，出现资源无法解析到情况，可以看到stack函数打印时只有指针没有函数名称，且出现inexact字样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap  btveth.stp veth_xmit</span></div><div class="line">WARNING: Missing unwind data <span class="keyword">for</span> a module, rerun <span class="keyword">with</span> <span class="string">'stap -d kernel'</span></div><div class="line">----------------START-------------------------</div><div class="line">In process [ping]</div><div class="line"> <span class="number">0xffffffffc046c550</span> : veth_xmit+<span class="number">0x0</span>/<span class="number">0x70</span> [veth]</div><div class="line"> <span class="number">0xffffffff8172e959</span></div><div class="line"> <span class="number">0xffffffff8172f0e6</span> (inexact)</div><div class="line"> <span class="number">0xffffffff8172f160</span> (inexact)</div><div class="line"> <span class="number">0xffffffff817383f8</span> (inexact)</div><div class="line"> <span class="number">0xffffffff8176fab6</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81770a56</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81764133</span> (inexact)</div><div class="line"> <span class="number">0xffffffff8177145e</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81770920</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81770c25</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81771e29</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81771e83</span> (inexact)</div><div class="line"> <span class="number">0xffffffff817983a9</span> (inexact)</div><div class="line"> <span class="number">0xffffffff8139ebc1</span> (inexact)</div><div class="line"> <span class="number">0xffffffff817a8175</span> (inexact)</div><div class="line"> <span class="number">0xffffffff8170fae8</span> (inexact)</div><div class="line"> <span class="number">0xffffffff81710591</span> (inexact)</div><div class="line"> <span class="number">0xffffffff8106f31f</span> (inexact)</div><div class="line"> <span class="number">0xffffffff810caeb1</span> (inexact)</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<h3 id="解决办法1：stap探测时候加上-d-kernel选项，这样在解析时候就会调用kernel的符号了，将指针变成我们能认识的函数符号"><a href="#解决办法1：stap探测时候加上-d-kernel选项，这样在解析时候就会调用kernel的符号了，将指针变成我们能认识的函数符号" class="headerlink" title="解决办法1：stap探测时候加上-d kernel选项，这样在解析时候就会调用kernel的符号了，将指针变成我们能认识的函数符号"></a>解决办法1：stap探测时候加上-d kernel选项，这样在解析时候就会调用kernel的符号了，将指针变成我们能认识的函数符号</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~# stap  -d kernel btveth.stp veth_xmit</div><div class="line">WARNING: Missing unwind data for a module, rerun with 'stap -d openvswitch'</div><div class="line">WARNING: Missing unwind data for a module, rerun with 'stap -d bridge'</div><div class="line">----------------START-------------------------</div><div class="line">In process [ping]</div><div class="line"> 0xffffffffc046c550 : veth_xmit+0x0/0x70 [veth]</div><div class="line"> 0xffffffff8172e959 : dev_hard_start_xmit+0x249/0x3d0 [kernel]</div><div class="line"> 0xffffffff8172f0e6 : __dev_queue_xmit+0x526/0x590 [kernel]</div><div class="line"> 0xffffffff8172f160 : dev_queue_xmit+0x10/0x20 [kernel]</div><div class="line"> 0xffffffff8176fc02 : ip_finish_output2+0x292/0x380 [kernel]</div><div class="line"> 0xffffffff81770a56 : ip_finish_output+0x136/0x1f0 [kernel]</div><div class="line"> 0xffffffff8177145e : ip_output+0x6e/0xe0 [kernel]</div><div class="line"> 0xffffffff81770c25 : ip_local_out+0x35/0x40 [kernel]</div><div class="line"> 0xffffffff81771e29 : ip_send_skb+0x19/0x40 [kernel]</div><div class="line"> 0xffffffff81771e83 : ip_push_pending_frames+0x33/0x40 [kernel]</div><div class="line"> 0xffffffff817983a9 : raw_sendmsg+0x7e9/0xb20 [kernel]</div><div class="line"> 0xffffffff817a8175 : inet_sendmsg+0x65/0xa0 [kernel]</div><div class="line"> 0xffffffff8170fae8 : sock_sendmsg+0x38/0x50 [kernel]</div><div class="line"> 0xffffffff81710591 : ___sys_sendmsg+0x281/0x290 [kernel]</div><div class="line"> 0xffffffff81710ee1 : __sys_sendmsg+0x51/0x90 [kernel]</div><div class="line"> 0xffffffff81710f32 : sys_sendmsg+0x12/0x20 [kernel]</div><div class="line"> 0xffffffff818385f2 : entry_SYSCALL_64_fastpath+0x16/0x71 [kernel]</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<h3 id="解决办法2-加上–all-modules选项-（非常适合懒人）"><a href="#解决办法2-加上–all-modules选项-（非常适合懒人）" class="headerlink" title="解决办法2:加上–all-modules选项 （非常适合懒人）"></a>解决办法2:加上–all-modules选项 （非常适合懒人）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="meta"># stap --all-modules btbr.stp br_handle_frame</span></div><div class="line"></div><div class="line">----------------START-------------------------</div><div class="line">In process [ping]</div><div class="line"> <span class="number">0xffffffffc0583ac0</span> : br_handle_frame+<span class="number">0x0</span>/<span class="number">0x2b0</span> [bridge]</div><div class="line"> <span class="number">0xffffffff8172c294</span> : __netif_receive_skb_core+<span class="number">0x364</span>/<span class="number">0xa60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172c9a8</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172d7a8</span> : process_backlog+<span class="number">0xa8</span>/<span class="number">0x150</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172ceee</span> : net_rx_action+<span class="number">0x21e</span>/<span class="number">0x360</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81085db1</span> : __do_softirq+<span class="number">0x101</span>/<span class="number">0x290</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8183a30c</span> : do_softirq_own_stack+<span class="number">0x1c</span>/<span class="number">0x30</span> [kernel]</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<h2 id="问题举例2-linux-bridge发包函数调用栈打印"><a href="#问题举例2-linux-bridge发包函数调用栈打印" class="headerlink" title="问题举例2: linux bridge发包函数调用栈打印"></a>问题举例2: linux bridge发包函数调用栈打印</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">probe   module(<span class="string">"bridge"</span>).function(@<span class="number">1</span>)&#123;</div><div class="line">    print(<span class="string">"----------------START-------------------------\n"</span>)</div><div class="line">    printf(<span class="string">"In process [%s]\n"</span>, execname())</div><div class="line">    print_backtrace()</div><div class="line">    print(<span class="string">"----------------END-------------------------\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行上述脚本后，出现资源无法解析到情况，可以看到stack函数打印时只有指针没有函数名称，很可能也漏了一部分关键函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="comment"># stap btbr.stp br_handle_frame</span></div><div class="line">WARNING: Missing unwind data <span class="keyword">for</span> a module, rerun <span class="keyword">with</span> <span class="string">'stap -d kernel'</span></div><div class="line">----------------START-------------------------</div><div class="line">In process [ping]</div><div class="line"> <span class="number">0xffffffffc0583ac0</span> : br_handle_frame+<span class="number">0x0</span>/<span class="number">0x2b0</span> [bridge]</div><div class="line"> <span class="number">0xffffffff8172c294</span></div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<h3 id="解决办法1：加上-d-kernel-如下即可以看见调用栈全貌"><a href="#解决办法1：加上-d-kernel-如下即可以看见调用栈全貌" class="headerlink" title="解决办法1：加上-d kernel 如下即可以看见调用栈全貌"></a>解决办法1：加上-d kernel 如下即可以看见调用栈全貌</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="meta"># stap -d kernel btbr.stp br_handle_frame</span></div><div class="line">----------------START-------------------------</div><div class="line">In process [ping]</div><div class="line"> <span class="number">0xffffffffc0583ac0</span> : br_handle_frame+<span class="number">0x0</span>/<span class="number">0x2b0</span> [bridge]</div><div class="line"> <span class="number">0xffffffff8172c294</span> : __netif_receive_skb_core+<span class="number">0x364</span>/<span class="number">0xa60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172c9a8</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172d7a8</span> : process_backlog+<span class="number">0xa8</span>/<span class="number">0x150</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172ceee</span> : net_rx_action+<span class="number">0x21e</span>/<span class="number">0x360</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81085db1</span> : __do_softirq+<span class="number">0x101</span>/<span class="number">0x290</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8183a30c</span> : do_softirq_own_stack+<span class="number">0x1c</span>/<span class="number">0x30</span> [kernel]</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<h3 id="解决办法2-加上–all-modules选项（非常适合懒人）"><a href="#解决办法2-加上–all-modules选项（非常适合懒人）" class="headerlink" title="解决办法2: 加上–all-modules选项（非常适合懒人）"></a>解决办法2: 加上–all-modules选项（非常适合懒人）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:~<span class="meta"># stap --all-modules btbr.stp br_handle_frame</span></div><div class="line"></div><div class="line">----------------START-------------------------</div><div class="line">In process [ping]</div><div class="line"> <span class="number">0xffffffffc0583ac0</span> : br_handle_frame+<span class="number">0x0</span>/<span class="number">0x2b0</span> [bridge]</div><div class="line"> <span class="number">0xffffffff8172c294</span> : __netif_receive_skb_core+<span class="number">0x364</span>/<span class="number">0xa60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172c9a8</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172d7a8</span> : process_backlog+<span class="number">0xa8</span>/<span class="number">0x150</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8172ceee</span> : net_rx_action+<span class="number">0x21e</span>/<span class="number">0x360</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81085db1</span> : __do_softirq+<span class="number">0x101</span>/<span class="number">0x290</span> [kernel]</div><div class="line"> <span class="number">0xffffffff8183a30c</span> : do_softirq_own_stack+<span class="number">0x1c</span>/<span class="number">0x30</span> [kernel]</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;openstack环境常常也使用ubuntu16.04.2作为host主机镜像构建私有云。systemtap可以帮助笔者探测host主机内核态的真实运行状态，外加内核代码阅读及时定位看是系统底层的问题。解决一些系统难题、扩展思路、排除一些因为不了解内核而造成的不必要的猜测。下面是笔者使用systemtap环境安装过程和基本原理描述。&lt;/p&gt;
&lt;p&gt;关于跨模块和kernel 符号显示不全是笔者遇到的第一个问题，找到了解决方法，也记录下来，请看下文。&lt;/p&gt;
&lt;h1 id=&quot;如何安装systemtap？&quot;&gt;&lt;a href=&quot;#如何安装systemtap？&quot; class=&quot;headerlink&quot; title=&quot;如何安装systemtap？&quot;&gt;&lt;/a&gt;如何安装systemtap？&lt;/h1&gt;&lt;p&gt;步骤1:下载ubuntu16.04.2调试数据包&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;linux-image&lt;span class=&quot;number&quot;&gt;-4.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-62&lt;/span&gt;-generic-dbgsym_4&lt;span class=&quot;number&quot;&gt;.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-62&lt;/span&gt;_amd64.ddeb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调试目录数据包下载路径 &lt;a href=&quot;http://ddebs.ubuntu.com/pool/main/l/linux/?C=M;O=D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ddebs.ubuntu.com/pool/main/l/linux/?C=M;O=D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;步骤2:安装ubuntu16.04.2调试包&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dpkg -i linux-image&lt;span class=&quot;number&quot;&gt;-4.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-62&lt;/span&gt;-generic-dbgsym_4&lt;span class=&quot;number&quot;&gt;.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-62&lt;/span&gt;_amd64.ddeb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;步骤3: 编译安装systemtap程序&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get update &amp;amp;&amp;amp; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        apt-get install -y build-essential gettext elfutils libdw-dev python wget tar &amp;amp;&amp;amp; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget https:&lt;span class=&quot;comment&quot;&gt;//sourceware.org/systemtap/ftp/releases/systemtap-3.1.tar.gz&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar xzvf systemtap&lt;span class=&quot;number&quot;&gt;-3.1&lt;/span&gt;.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd systemtap&lt;span class=&quot;number&quot;&gt;-3.1&lt;/span&gt;/ &amp;amp;&amp;amp; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         ./configure &amp;amp;&amp;amp; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         make all &amp;amp;&amp;amp; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         make install ;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="ubuntu16.04.2" scheme="http://vcpu.me/tags/ubuntu16-04-2/"/>
    
      <category term="systemtap编译安装" scheme="http://vcpu.me/tags/systemtap%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    
      <category term="systemtap运行原理" scheme="http://vcpu.me/tags/systemtap%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    
      <category term="systemtap符号不全解决方法" scheme="http://vcpu.me/tags/systemtap%E7%AC%A6%E5%8F%B7%E4%B8%8D%E5%85%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    
      <category term="stap运行举例" scheme="http://vcpu.me/tags/stap%E8%BF%90%E8%A1%8C%E4%B8%BE%E4%BE%8B/"/>
    
      <category term="veth pair和linux bridge函数调用栈打印" scheme="http://vcpu.me/tags/veth-pair%E5%92%8Clinux-bridge%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88%E6%89%93%E5%8D%B0/"/>
    
      <category term="虚拟网络" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>ovs 发包限速</title>
    <link href="http://vcpu.me/ovs-limit/"/>
    <id>http://vcpu.me/ovs-limit/</id>
    <published>2017-11-08T10:00:00.000Z</published>
    <updated>2017-11-08T10:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="netperf吞吐测试方法"><a href="#netperf吞吐测试方法" class="headerlink" title="netperf吞吐测试方法"></a>netperf吞吐测试方法</h1><h2 id="步骤1-在ns4-namespace中运行netserver"><a href="#步骤1-在ns4-namespace中运行netserver" class="headerlink" title="步骤1:在ns4 namespace中运行netserver"></a>步骤1:在ns4 namespace中运行netserver</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Starting netserver with host &apos;IN(6)ADDR_ANY&apos; port &apos;12865&apos; and family AF_UNSPEC</div></pre></td></tr></table></figure>
<h2 id="步骤2-在ns1-namespace中运行-netperf-H-1-1-1-4-t-UDP-STREAM"><a href="#步骤2-在ns1-namespace中运行-netperf-H-1-1-1-4-t-UDP-STREAM" class="headerlink" title="步骤2:在ns1 namespace中运行 netperf -H 1.1.1.4 -t UDP_STREAM"></a>步骤2:在ns1 namespace中运行 netperf -H 1.1.1.4 -t UDP_STREAM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@compute:~# netperf -H 1.1.1.4 -t UDP_STREAM</div><div class="line">MIGRATED UDP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 1.1.1.4 (1.1.1.4) port 0 AF_INET : demo</div><div class="line">Socket Message Elapsed Messages</div><div class="line">Size Size Time Okay Errors Throughput</div><div class="line">bytes bytes secs # # 10^6bits/sec</div><div class="line">212992 65507 10.01 795007 0 41640.99</div><div class="line">212992 10.01 794006 41588.56</div></pre></td></tr></table></figure>
<p>测速结果：41.58856Gbps</p>
<a id="more"></a>
<h1 id="ovs限速操作方法"><a href="#ovs限速操作方法" class="headerlink" title="ovs限速操作方法"></a>ovs限速操作方法</h1><h2 id="添加限速策略"><a href="#添加限速策略" class="headerlink" title="添加限速策略"></a>添加限速策略</h2><hr>
<h3 id="步骤1-添加qos"><a href="#步骤1-添加qos" class="headerlink" title="步骤1:添加qos"></a>步骤1:添加qos</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --timeout=<span class="number">10</span> -- set Port firstbr qos=@newqos -- --id=@newqos create QoS type=linux-htb  other-config:max-rate=<span class="number">60000000000</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong>：该命令限速60G，即使重复执行上述命令，也是最后一条命令生效</p>
<p><strong>额外说明</strong>：qos有默认最大吞吐限制，如果超过最大吞吐限制，限制速度直接采用最大吞吐限制，如果没有超过最大吞吐限制，配置的max-rate才会起作用</p>
<p><strong>举例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@compute:~# tc -s -d class show dev firstbr</div><div class="line">class htb 1:1 parent 1:fffe prio 0 quantum 1500 rate 12Kbit ceil 25640Mbit linklayer ethernet burst 1563b/1 mpu 0b overhead 0b cburst 0b/1 mpu 0b overhead 0b level 0</div><div class="line"> Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)</div><div class="line"> backlog 0b 0p requeues 0</div><div class="line"> lended: 0 borrowed: 0 giants: 0</div><div class="line"> tokens: 16291666 ctokens: 7</div></pre></td></tr></table></figure></p>
<p>限速60G，实际无法达到该速率，qos取默认最大速率为25640Mbit </p>
<p><strong>其它说明</strong>：如果没有设置other-config:max-rate ，就按照接口速率设置qos吞吐</p>
<p><strong>举例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ethtool firstbr</div><div class="line">Settings for firstbr:</div><div class="line"> Supported ports: [ ]</div><div class="line"> Supported link modes: Not reported</div><div class="line"> Supported pause frame use: No</div><div class="line"> Supports auto-negotiation: No</div><div class="line"> Advertised link modes: Not reported</div><div class="line"> Advertised pause frame use: No</div><div class="line"> Advertised auto-negotiation: No</div><div class="line"> Speed: 10000Mb/s</div><div class="line"> Duplex: Full</div><div class="line"> Port: Twisted Pair</div><div class="line"> PHYAD: 0</div><div class="line"> Transceiver: internal</div><div class="line"> Auto-negotiation: off</div><div class="line"> MDI-X: Unknown</div><div class="line"> Link detected: yes</div></pre></td></tr></table></figure></p>
<p>如果没有陪着max-rate就按照 <strong>10000Mb</strong>/s进行qos限速</p>
<hr>
<h3 id="步骤2-添加queue，限速10G"><a href="#步骤2-添加queue，限速10G" class="headerlink" title="步骤2:添加queue，限速10G"></a>步骤2:添加queue，限速10G</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --timeout=<span class="number">10</span> create Queue other-config:max-rate=<span class="number">10000000000</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="步骤3-绑定queue到具体的qos"><a href="#步骤3-绑定queue到具体的qos" class="headerlink" title="步骤3:绑定queue到具体的qos"></a>步骤3:绑定queue到具体的qos</h3><p>ovs-vsctl –timeout=10 add qos 7cf6a845-ce22-4aa4-886f-1ad76e2914bc queues 0=826c230d-3f28-4ab6-b0d1-794f7e2a0602</p>
<p>注意：7cf6a845-ce22-4aa4-886f-1ad76e2914bc 为qos id，826c230d-3f28-4ab6-b0d1-794f7e2a0602为queue id，</p>
<p> 0 为ID具体代号且有特殊含义，默认数据包均走0号ID（不明确指定queue队列，如果存在0号限速策略所有经过firstbr发出的流量均会被限速10G）</p>
<h3 id="步骤4-通过流表引导流量到queue"><a href="#步骤4-通过流表引导流量到queue" class="headerlink" title="步骤4:通过流表引导流量到queue"></a>步骤4:通过流表引导流量到queue</h3><h2 id="删除限速策略"><a href="#删除限速策略" class="headerlink" title="删除限速策略"></a>删除限速策略</h2><h3 id="清除接口上qos"><a href="#清除接口上qos" class="headerlink" title="清除接口上qos"></a>清除接口上qos</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl clear port firstbr qos</div></pre></td></tr></table></figure>
<h3 id="清除所有的qos和queue策略"><a href="#清除所有的qos和queue策略" class="headerlink" title="清除所有的qos和queue策略"></a>清除所有的qos和queue策略</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl -- --all destroy QoS -- --all destroy Queue</div></pre></td></tr></table></figure>
<h3 id="清除接口上的6e8b837c-2386-410e-a430-1ee319f25b01-qos策略"><a href="#清除接口上的6e8b837c-2386-410e-a430-1ee319f25b01-qos策略" class="headerlink" title="清除接口上的6e8b837c-2386-410e-a430-1ee319f25b01 qos策略"></a>清除接口上的6e8b837c-2386-410e-a430-1ee319f25b01 qos策略</h3><p>ovs-vsctl – destroy Qos 6e8b837c-2386-410e-a430-1ee319f25b01</p>
<p>该命令如果对已经应用到具体接口qos则会报错如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-vsctl -- destroy Qos 6e8b837c-2386-410e-a430-1ee319f25b01</div><div class="line">ovs-vsctl: transaction error: &#123;&quot;details&quot;:&quot;cannot delete QoS row 6e8b837c-2386-410e-a430-1ee319f25b01 because of 1 remaining reference(s)&quot;,&quot;error&quot;:&quot;referential integrity violation”&#125;</div></pre></td></tr></table></figure></p>
<p>要解决报错问题，需要清除接口的Qos策略</p>
<h1 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h1><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p><img src="/myimages/9786C404838BFF52EAF2688A82519E0A.png" alt="y.png"></p>
<h2 id="拓扑实现脚本"><a href="#拓扑实现脚本" class="headerlink" title="拓扑实现脚本"></a>拓扑实现脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line">ip netns add ns3</div><div class="line">ip netns add ns4</div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">24</span> dev tap1</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ip link set tap1 up</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ip link set lo up</div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns <span class="keyword">exec</span> ns2 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> dev tap2</div><div class="line">ip netns <span class="keyword">exec</span> ns2 ip link set tap2 up</div><div class="line">ip netns <span class="keyword">exec</span> ns2 ip link set lo up</div><div class="line">ovs-vsctl add-port br0 tap3 -- set Interface tap3 type=internal</div><div class="line">ip link set tap3 netns ns3</div><div class="line">ip netns <span class="keyword">exec</span> ns3 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.3</span>/<span class="number">24</span> dev tap3</div><div class="line">ip netns <span class="keyword">exec</span> ns3 ip link set tap3 up</div><div class="line">ip netns <span class="keyword">exec</span> ns3 ip link set lo up</div><div class="line">ip link add firstbr type veth peer name firstif</div><div class="line">ovs-vsctl add-port br0 firstbr</div><div class="line">ovs-vsctl add-port br1 firstif</div><div class="line">ip link set firstbr up</div><div class="line">ip link set firstif up</div><div class="line">ovs-vsctl add-port br1 tap4 -- set Interface tap4 type=internal</div><div class="line">ip link set tap4 netns ns4</div><div class="line">ip netns <span class="keyword">exec</span> ns4 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.4</span>/<span class="number">24</span> dev tap4</div><div class="line">ip netns <span class="keyword">exec</span> ns4 ip link set tap4 up</div><div class="line">ip netns <span class="keyword">exec</span> ns4 ip link set lo up</div></pre></td></tr></table></figure>
<h2 id="Qos策略添加"><a href="#Qos策略添加" class="headerlink" title="Qos策略添加"></a>Qos策略添加</h2><ul>
<li>添加qos和queue</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --timeout=<span class="number">10</span> -- set Port firstbr qos=@newqos -- --id=@newqos create QoS type=linux-htb  other-config:max-rate=<span class="number">60000000000</span></div><div class="line">ovs-vsctl --timeout=<span class="number">10</span> create Queue other-config:max-rate=<span class="number">10000000000</span></div><div class="line">ovs-vsctl --timeout=<span class="number">10</span> create Queue other-config:max-rate=<span class="number">5000000000</span></div></pre></td></tr></table></figure>
<ul>
<li>将queue和qos绑定</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl --timeout=<span class="number">10</span> add qos <span class="number">418</span>d3c99<span class="number">-073</span>c<span class="number">-4509</span>-b5cd-fa928423f47f queues <span class="number">1</span>=<span class="number">25831471</span><span class="number">-552</span>b<span class="number">-4</span>d5a<span class="number">-83</span>b0<span class="number">-179</span>f8f8e8991</div><div class="line">ovs-vsctl --timeout=<span class="number">10</span> add qos <span class="number">418</span>d3c99<span class="number">-073</span>c<span class="number">-4509</span>-b5cd-fa928423f47f queues <span class="number">2</span>=<span class="number">70001227</span><span class="number">-95</span>ae<span class="number">-469</span>f-aa25-c93d6b876650</div></pre></td></tr></table></figure>
<ul>
<li>将流量导向具体的queue</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl --timeout=<span class="number">5</span> add-flow br0 hard_timeout=<span class="number">0</span>,idle_timeout=<span class="number">0</span>,priority=<span class="number">50</span>,ip,ip_src=<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>,actions=set_queue:<span class="number">1</span>,NORMAL</div><div class="line">ovs-ofctl --timeout=<span class="number">5</span> add-flow br0 hard_timeout=<span class="number">0</span>,idle_timeout=<span class="number">0</span>,priority=<span class="number">50</span>,ip,ip_src=<span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>,actions=set_queue:<span class="number">2</span>,NORMAL</div></pre></td></tr></table></figure>
<h2 id="网络速度测试"><a href="#网络速度测试" class="headerlink" title="网络速度测试"></a>网络速度测试</h2><ul>
<li><strong>ns1 -> ns4 UDP传输速率为9.217Gbits &lt; 10G(</strong>queue1<strong>)</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@compute:~<span class="comment"># netperf -H 1.1.1.4 -t UDP_STREAM</span></div><div class="line">MIGRATED UDP STREAM TEST <span class="keyword">from</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>) port <span class="number">0</span> AF_INET to <span class="number">1.1</span><span class="number">.1</span><span class="number">.4</span> (<span class="number">1.1</span><span class="number">.1</span><span class="number">.4</span>) port <span class="number">0</span> AF_INET : demo</div><div class="line">Socket  Message  Elapsed      Messages</div><div class="line">Size    Size     Time         Okay Errors   Throughput</div><div class="line">bytes   bytes    secs            <span class="comment">#      #   10^6bits/sec</span></div><div class="line"></div><div class="line"><span class="number">212992</span>   <span class="number">65507</span>   <span class="number">10.00</span>      <span class="number">570032</span>      <span class="number">0</span>    <span class="number">29871.54</span></div><div class="line"><span class="number">212992</span>           <span class="number">10.00</span>      <span class="number">175900</span>           <span class="number">9217.74</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>ns2 -> ns4 UDP传输速率为4.949Gbits &lt; 5G(queue2)</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@compute:~<span class="comment"># netperf -H 1.1.1.4 -t UDP_STREAM</span></div><div class="line">MIGRATED UDP STREAM TEST <span class="keyword">from</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>) port <span class="number">0</span> AF_INET to <span class="number">1.1</span><span class="number">.1</span><span class="number">.4</span> (<span class="number">1.1</span><span class="number">.1</span><span class="number">.4</span>) port <span class="number">0</span> AF_INET : demo</div><div class="line">Socket  Message  Elapsed      Messages</div><div class="line">Size    Size     Time         Okay Errors   Throughput</div><div class="line">bytes   bytes    secs            <span class="comment">#      #   10^6bits/sec</span></div><div class="line"></div><div class="line"><span class="number">212992</span>   <span class="number">65507</span>   <span class="number">10.01</span>     <span class="number">1379035</span>      <span class="number">0</span>    <span class="number">72220.42</span></div><div class="line"><span class="number">212992</span>           <span class="number">10.01</span>       <span class="number">94505</span>           <span class="number">4949.25</span></div></pre></td></tr></table></figure>
<h2 id="观察策略结果"><a href="#观察策略结果" class="headerlink" title="观察策略结果"></a>观察策略结果</h2><h3 id="查看br0的流表策略"><a href="#查看br0的流表策略" class="headerlink" title="查看br0的流表策略"></a>查看br0的流表策略</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@compute:~<span class="comment"># ovs-ofctl dump-flows br0</span></div><div class="line">NXST_FLOW reply (xid=<span class="number">0x4</span>):</div><div class="line"> cookie=<span class="number">0x0</span>, duration=<span class="number">519.507</span>s, table=<span class="number">0</span>, n_packets=<span class="number">1271232</span>, n_bytes=<span class="number">83320651952</span>, idle_age=<span class="number">238</span>, priority=<span class="number">50</span>,ip,nw_src=<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> actions=set_queue:<span class="number">1</span>,NORMAL</div><div class="line"> cookie=<span class="number">0x0</span>, duration=<span class="number">519.197</span>s, table=<span class="number">0</span>, n_packets=<span class="number">2130362</span>, n_bytes=<span class="number">139571241079</span>, idle_age=<span class="number">247</span>, priority=<span class="number">50</span>,ip,nw_src=<span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span> actions=set_queue:<span class="number">2</span>,NORMAL</div><div class="line"> cookie=<span class="number">0x0</span>, duration=<span class="number">5773.205</span>s, table=<span class="number">0</span>, n_packets=<span class="number">12914956</span>, n_bytes=<span class="number">736062122789</span>, idle_age=<span class="number">238</span>, priority=<span class="number">0</span> actions=NORMAL</div></pre></td></tr></table></figure>
<h3 id="查看限速TC-queue"><a href="#查看限速TC-queue" class="headerlink" title="查看限速TC queue"></a>查看限速TC queue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">oot@compute:~<span class="comment"># tc -s -d class show dev firstbr</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">htb</span> 1:</span>fffe root rate <span class="number">25640</span>Mbit ceil <span class="number">25640</span>Mbit linklayer ethernet burst <span class="number">0</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b cburst <span class="number">0</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b level <span class="number">7</span></div><div class="line"> Sent <span class="number">17715662461</span> bytes <span class="number">340</span> pkt (dropped <span class="number">0</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>)</div><div class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span></div><div class="line"> lended: <span class="number">270756</span> borrowed: <span class="number">0</span> giants: <span class="number">0</span></div><div class="line"> tokens: <span class="number">6</span> ctokens: <span class="number">6</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">htb</span> 1:</span><span class="number">1</span> parent <span class="number">1</span>:fffe prio <span class="number">0</span> quantum <span class="number">1500</span> rate <span class="number">12</span>Kbit ceil <span class="number">25640</span>Mbit linklayer ethernet burst <span class="number">1563</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b cburst <span class="number">0</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b level <span class="number">0</span></div><div class="line"> Sent <span class="number">168</span> bytes <span class="number">4</span> pkt (dropped <span class="number">0</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>)</div><div class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span></div><div class="line"> lended: <span class="number">4</span> borrowed: <span class="number">0</span> giants: <span class="number">0</span></div><div class="line"> tokens: <span class="number">15417840</span> ctokens: <span class="number">6</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">htb</span> 1:</span><span class="number">2</span> parent <span class="number">1</span>:fffe prio <span class="number">0</span> quantum <span class="number">1500</span> rate <span class="number">12</span>Kbit ceil <span class="number">10</span>Gbit linklayer ethernet burst <span class="number">1563</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b cburst <span class="number">1250</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b level <span class="number">0</span></div><div class="line"> Sent <span class="number">11523732906</span> bytes <span class="number">55</span> pkt (dropped <span class="number">394118</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>)</div><div class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span></div><div class="line"> lended: <span class="number">6</span> borrowed: <span class="number">175964</span> giants: <span class="number">0</span></div><div class="line"> tokens: <span class="number">-525916978</span> ctokens: <span class="number">18</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">htb</span> 1:</span><span class="number">3</span> parent <span class="number">1</span>:fffe prio <span class="number">0</span> quantum <span class="number">1500</span> rate <span class="number">12</span>Kbit ceil <span class="number">5</span>Gbit linklayer ethernet burst <span class="number">1563</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b cburst <span class="number">1250</span>b/<span class="number">1</span> mpu <span class="number">0</span>b overhead <span class="number">0</span>b level <span class="number">0</span></div><div class="line"> Sent <span class="number">6191929387</span> bytes <span class="number">281</span> pkt (dropped <span class="number">1284513</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>)</div><div class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span></div><div class="line"> lended: <span class="number">6</span> borrowed: <span class="number">94792</span> giants: <span class="number">0</span></div><div class="line"> tokens: <span class="number">-524514101</span> ctokens: <span class="number">37</span></div></pre></td></tr></table></figure>
<h3 id="打印队列发送速度脚本"><a href="#打印队列发送速度脚本" class="headerlink" title="打印队列发送速度脚本"></a>打印队列发送速度脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">cmds=<span class="string">"tc -s -d class show dev bond1|tail -n 6|grep Sent|awk '&#123;print $2&#125;'"</span></div><div class="line"><span class="keyword">print</span> <span class="number">4</span>*<span class="string">'start'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"></div><div class="line">	result1=os.popen(cmds).readlines()</div><div class="line">	time.sleep(<span class="number">1</span>)</div><div class="line">	result2=os.popen(cmds).readlines()</div><div class="line">	<span class="keyword">print</span> <span class="string">"queue tx speed:"</span>, (int(result2[<span class="number">0</span>])-int(result1[<span class="number">0</span>]))/<span class="number">1000</span></div></pre></td></tr></table></figure>
<p>打印bond1口，tc queue，定位到具体class，单位Kbyte/s</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;netperf吞吐测试方法&quot;&gt;&lt;a href=&quot;#netperf吞吐测试方法&quot; class=&quot;headerlink&quot; title=&quot;netperf吞吐测试方法&quot;&gt;&lt;/a&gt;netperf吞吐测试方法&lt;/h1&gt;&lt;h2 id=&quot;步骤1-在ns4-namespace中运行netserver&quot;&gt;&lt;a href=&quot;#步骤1-在ns4-namespace中运行netserver&quot; class=&quot;headerlink&quot; title=&quot;步骤1:在ns4 namespace中运行netserver&quot;&gt;&lt;/a&gt;步骤1:在ns4 namespace中运行netserver&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Starting netserver with host &amp;apos;IN(6)ADDR_ANY&amp;apos; port &amp;apos;12865&amp;apos; and family AF_UNSPEC&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;步骤2-在ns1-namespace中运行-netperf-H-1-1-1-4-t-UDP-STREAM&quot;&gt;&lt;a href=&quot;#步骤2-在ns1-namespace中运行-netperf-H-1-1-1-4-t-UDP-STREAM&quot; class=&quot;headerlink&quot; title=&quot;步骤2:在ns1 namespace中运行 netperf -H 1.1.1.4 -t UDP_STREAM&quot;&gt;&lt;/a&gt;步骤2:在ns1 namespace中运行 netperf -H 1.1.1.4 -t UDP_STREAM&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@compute:~# netperf -H 1.1.1.4 -t UDP_STREAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MIGRATED UDP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 1.1.1.4 (1.1.1.4) port 0 AF_INET : demo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Socket Message Elapsed Messages&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Size Size Time Okay Errors Throughput&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bytes bytes secs # # 10^6bits/sec&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212992 65507 10.01 795007 0 41640.99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212992 10.01 794006 41588.56&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测速结果：41.58856Gbps&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="tc" scheme="http://vcpu.me/tags/tc/"/>
    
      <category term="netperf" scheme="http://vcpu.me/tags/netperf/"/>
    
      <category term="发包限速" scheme="http://vcpu.me/tags/%E5%8F%91%E5%8C%85%E9%99%90%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>小说官神经典语录</title>
    <link href="http://vcpu.me/guanshen/"/>
    <id>http://vcpu.me/guanshen/</id>
    <published>2017-11-02T10:00:00.000Z</published>
    <updated>2017-11-02T11:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>“苟利国家生死以，岂因祸福趋避之​。”</p>
<a id="more"></a>
<p>为官者达到举重若轻、点石成金、出神入化的境界，是为官神​。​</p>
<p>“渡尽劫波兄弟在，相逢一笑泯恩仇。​”</p>
<p>但留一线，也好相见。​​​​</p>
<p>“俯仰无愧天地，褒贬自有春秋！”</p>
<p>世界上有两样东西最震憾人心，一个是寄托了一生追求的理想，一个是现实中必须承担的责任。因为有理想，我们对未来充满了希望。因为有责任，我们负重前行，义无反顾。</p>
<p>一个国家真正富强的标志不是GDP排名第几，不是有没有世界排名前几的富翁。也不是穷兵黩武拥有多少核武器，而是在于这个国家有没有利用文化来向世界各地输出自己的文化理念和价值观！</p>
<p>“十年磨一剑，霜刃未曾试，今日把示君，谁有不平事？”</p>
<p>世界上化解痛苦的最好的办法，莫过于看到自己的对手受到比自己更大的伤害，失去比自己更多的利益。​</p>
<p>“中岁颇好道，晚家南山陲。兴来每独往，胜事空自知。行到水穷处，坐看云起时。偶然值林叟，谈笑无还期。”</p>
<p>听弦歌而知雅意。​</p>
<p>政治上的团结是全然不分党政的。</p>
<hr>
<p>官场上的争斗，除了政治智慧之外，比拼就是谁的后台够硬。</p>
<p>有时候，境界的高低就决定了眼界的不同，出身的不同，往往就直接决定了命运的不同。</p>
<p>傲慢不仅仅可以表现为嚣张和不可一世，也可以表现为淡定从容的风度，居高临下的微笑，以及一切尽在掌握的自信。</p>
<p>有时候也许你级别不够高，权力不够大，但如果你有足够影响到关键人物的能力，你就会成为一个至关重要的支点，是所有目光的焦点，这个时候，你就有了决定性的影响力。</p>
<p>越在百姓面前趾高气扬不可一世的人，其实越是官不大钱不多素质不高本事不大的人，正是因为没有足够的跻身上流社会的资本，才会在普通人面前耀武扬威，炫耀自己的并不多的本钱，其实也是一种无能加自卑的变态表现。</p>
<p>最聪明的人从来不将利益挂在嘴边放在眼前，他们只做不说，表面只帮别人得到利益，实际上在帮助别人的同时，所有受过他的恩惠的人，都会将他的帮助记在心间。让别人记住你的好，是做人的最大成功，远比让别人记住你多有能量多重要要强上许多。人都是感情动物，在感情上接受一个人会记得十分长久。</p>
<p>许多时候，我们和人交道，尊重的不是他本人，是他的背景。现在看来，用在狗身上也同样合适。有什么样的主人，就有什么样的狗仗人势的狗！</p>
<p>没做过好事的人，是永远体会不到做好事之时的温暖和美好，是永远无法感受被人感谢时的幸福和快乐。</p>
<p>有时候越是事关自己的切身利益，就越要耐住性子，不能露怯。否则，同事轻视你，领导看不上你，你的前途就完了。</p>
<hr>
<p>法治建设之所以任重而道远，就是因为国内人治的现象太过严重，一些领导人权力欲望高涨，亲者近远者疏，不站在公平客观的立场上看待问题，而是从个人感情出发，迁就纵容身边人，对许多丑陋现象视而不见，只因为违法乱纪者有后台有背景，就不予追究。</p>
<p>人事一说，可以理解为先做人后做事，也可以理解为先用人后成事。</p>
<p>领导站着听你的工作汇报，有双重含义，一是他可以随时结束，如果你没有说到领导心里，他一抬手看时间，你就得马上结束汇报。二是给你施加压力，站着，可以当成是对你的重视，也可以当成随时准备走人的准备。抬手腕就可以走人，但同时又可以一屁股坐下，全看你的表现是不是让领导满意了。</p>
<p>领导的话总是含义丰富，猜不对的话，不但办不成事情，还会在领导心目中留下不好的印象，以后再想重新建立好感，就很难了。</p>
<p>同流合污和孤胆英雄之间，有一个灰色的中间地带，就叫和光同尘。</p>
<p>你和谁有仇，你就生一个女儿，从小不教好她，让她爱虚荣乱花钱，然后将你的女儿嫁给仇人的儿子，然后仇人的全家就完了。</p>
<p>有些人，你退一步，他进两步。你以大局为重，你以为你软弱可欺。稍有风吹草动，他就以为你会失势，就想趁机在你的头上踩上几脚。</p>
<p>不该问的问题绝对不要问，不该知道的问题千万不要想法去知道，是官场守则的第一要旨。</p>
<hr>
<p>没领结婚证之前，所有的恋爱都算耍流氓。</p>
<p>上联：赤条条来，深入裙中，海棠树上梨花颤。 下联：光溜溜去，牡丹花下，嫩草尚绿老牛归。 横批：畜生入死。</p>
<p>在官场之上，你挡了别人的路，坐了别人的座位，比夺妻之恨还严重。</p>
<p>厅级干部，尤其是实职正厅，因为经济问题下台的，多半是政治斗争的牺牲品。</p>
<p>认为天下太平，形势一片大好的人，都不过被新闻媒体愚弄了，或是头脑过于简单。严防死守记者是为了什么，还不是为了继续推行愚民政策。</p>
<p>力量掌握在坏人手中，就是土匪。如果土匪的头头改邪归正，土匪就成了官兵。</p>
<p>让一个人最痛苦的不是将他一棍子打死，而是让他看不到希望，但又必须强颜欢笑，假装一切都好</p>
<p>领导随便和平和，是领导风范，是平易近人的表现。下级要是随便和平和，是不懂规矩，是目无尊长的不成熟。规矩一定要遵守，不管领导对你多看重，任何时候都不要忘了领导就是领导，不是你可以随便说笑的朋友。把领导当朋友的人，早晚会被领导弃置一边。</p>
<p>有些人，你拿他当人，他拿你当鸟。你拿他当鸟，他就立刻软了腰，拿你当人了。</p>
<p>开拓一说，本来就没有一个明确的说法，什么叫开拓？大刀阔斧叫开拓，但也可以叫蛮干。轰轰烈烈叫开拓，但也可以叫沽名钓誉。</p>
<p>政治上，玩的是权术，但比的也是谁更有理有据。在后台同样强硬的情况下，谁更有主动权，谁更大义凛然，谁就是最后的胜利者。</p>
<p>新手开车，总是喜欢左冲右突，似乎多有身手一样。真正有了经历几后，车都开得平稳了，宁停三分，不抢一秒。</p>
<hr>
<p>领导拉拢下级，手法高超或直接，其实目的都一样，领导是想让下级听话，惟命是从，平常认真落实领导意图，关键时刻当枪，危机时刻当炮灰。而下级向领导靠拢，用意也很明显，是想借上级之手，为升迁创造条件，想要步步高升。说白了，上下级之间，也是互相利用的关系，就看谁利用谁的手段更高明罢了。</p>
<p>你不坏，别人未必会认为你不坏。你很好，别人也许认为你假装清高。</p>
<p>人生是一次旅行，所有人的目的地都相同，所不同的是沿途的风景。</p>
<p>政治就是最大的冒险，向小里说，赌的就是人生和前途，向大里说，赌的就是性命。</p>
<p>伟人都是被神化的，在我们需要仰视才见的伟人的光辉的形象背后，也是一样有七情六欲有喜怒哀乐，会震怒会失态也会骂人的凡人。</p>
<p>奋斗之前，是天道酬勤。奋斗之后，是希言自然。</p>
<p>官场之上最不缺少的就是人才，就是接任者，说句不好听的话，如果将全国各地市的一二把手全部拿下，不出三天，就会有后备力量全部接替，不会出现有位置而缺人顶替的尴尬。</p>
<p>聪明人往往都会讲信誉，并且目光长远，一旦认准目标，轻易不会改变初衷。</p>
<p>咄咄逼人的性格，因为心气过于外露，精力外泄，所以易伤肝。人一老，最先由脚冷开始，肝火不旺，寒气入体就长驱直入，身体的抵抗力就每况愈下。</p>
<p>国人都溺爱自己的孩子，认为自己的孩子就是全世界一样，但说句不好听的实话，你的全世界不是别人的全世界。</p>
<p>社会是一个大家庭，个人拥有再多的财富，再高的社会地位，如果不能建立在和百姓同分享共欢乐的基础之上，就和建造在沙滩上的高楼大厦一样，早晚倒塌。</p>
<p>一个真正的政治家，在提高自身素质的同时，在引导百姓正确的方向的同时，更要有心系苍生敢为天下先的勇气和决心，在其位谋其政，愿为国家的未来、民族的振兴和百姓的幸福，奉献毕生的心血。</p>
<p>政治之上，你永远不知道你的朋友或对手的后面，到底站着的人是谁。</p>
<hr>
<p>人生无非过场，总有落幕的一刻，与其刻意逃避已经发生的事实，不如坦然面对，或许还能多一些开朗。</p>
<p>人无品不立，没有品德的人，能力越大，反而越是社会的危害。</p>
<p>想要达到心中的理想，有时候，你必须学会伪装。伪装不是虚伪，是必要的弯路。</p>
<p>不怕狼一样穷凶极恶的对手，就怕猪一样无所事事的队友。</p>
<p>最可喜的是身临绝境而不绝望，能惊而不慌，急而不措。最可悲的是首战告捷先庆功，孤芳而自赏，得意而忘形。</p>
<p>问题不在于是谁发起，而是在谁的手中出现了问题。就如每一个末代皇帝，都有一个将家底耗光的爹，留给他的是一个千疮百孔无论如何也缝补不过来的烂摊子，而且气数已尽，无力回天。</p>
<p>红颜祸水，其实祸水的不是红颜，而是男人的贪婪和占有之心。</p>
<p>酒鬼就认为世界上人人好酒，色鬼就觉得所有男人见到女人就会走不动，阴谋家见到一出碾压小孩的车祸事件，也会猜疑是不是有人为制造的可能……</p>
<p>人应该有自知之明，既然不在其位了，就应该不谋其政，不要上蹿下跳地像一个跳梁小丑一样，拿着鸡毛当令箭。</p>
<p>将欲取之，必先予之，用人之道，也要讲究一个平衡和制衡，养虎未必会成患，也许将可以吃人的老虎养大之后，再放虎归山，必有猎人猎杀之。</p>
<p>政治上最大的惩罚不是免职，也不是一免到低，而是先晾后晒，然后再处理的先扬后抑。反正就将你放在原有的位置，可以上新闻媒体，可以出风头，可以说可以报道的话，但你自己却心里清楚，手中无权，而且前方无路，在前方等待你的是一个大大的囚笼。你想走，走不了。想不干，也撂不下担子。就是说，明明知道快死了，还得强颜欢笑，还得以饱满的热情和满腔的激情来迎接死亡——换了谁，都受不了这样的煎熬。</p>
<hr>
<p>有时候，卸磨杀驴不是主人无情，而是驴自恃劳苦劳高，产生了不切实际的幻想。</p>
<p>大凡双眼犀利、为人处事咄咄逼人之人，因为精气外泄过多，大多不会长寿。</p>
<p>对事不对人的说法是很高尚的说法，实际上，人都是情感动物，谁也做不到真正的对事不对人。</p>
<p>将复杂问题简单化，是人才。将简单问题复杂化，是官僚。</p>
<p>精明不是坏事，但凡事要看长远，在大局观的统筹之下，不计较一时得失才是大将之风，凡事斤斤计较，吃一点亏就要还回来，精明过头就显得小气了。</p>
<p>不管黑狗白狗，能看门的狗就是好狗。</p>
<p>无知者不是无畏，而是自我沉醉。</p>
<p>对于大部分油盐酱醋的市民来说，生活就是日出而作日落而息，就是赚点钱吃点肉喝点酒，然后老婆孩子热坑头，然后打打麻将吹吹牛，然后拉灯睡觉，感觉日子如流水，却天下太平，就算地震，也震不到自己的头上。</p>
<p>有时候，无知也是一种愚蠢的幸福。</p>
<hr>
<p>太多人都生活在真相的大门之外，甚至打酱油也打的是劣质酱油。</p>
<p>一个人只有在失而复得之后才会感受到平常忽视的珍贵。</p>
<p>每个人都有作茧自缚的一面，只是自己不知道罢了。</p>
<p>有时候赖帐不是因为脸皮厚，而是因为心照不宣。</p>
<p>敲山是为震虎，打狗，是为了让狗主人看清形势。</p>
<p>许多时候，高高在上的一类人见到百姓的疾苦不会同情，是因为没有感同身受。</p>
<p>任何改革，都是向既得利益者叫板，不拿既得利益集团开刀的改革，就不是改革。</p>
<p>圈养贪官然后等其养肥之后再杀之取财，也不失为增加税收的一条捷径……</p>
<p>身上不干净的人，最怕深化改革，一改革，许多事情就得摆到阳光之下。问题是，身上不见光的事情太多了，不能晒，一晒就化了。</p>
<p>历史的公正在于，任何逆历史潮流而动的人物都会被冲得七零八落，历史从来不讲情面，只按照既定的轨道向前冷漠地推动。</p>
<p>历史上历来每次改革，都会出现许多反对的声音，甚至还有暴力事件发生。改革就是触动既得利益集团的利益，没有利益重新分配的改革不叫改革，叫空头支票。</p>
<p>官场之上，站队是每个人都必须面临的重大选择，不站队，就不会融入团队，不融入团队，就没有盟友。没有盟友的官场中人，是可悲的独行者，肯定走不远。</p>
<hr>
<p>腐败不除，不仅是道德的沦丧，也是文化的悲哀，更是信仰的缺失和制度的漏洞，在现在的腐败形势日盖严峻的情形之下，如果真要推行一种所谓的允许适度腐败的模式，夏想断言，不出二十年，必有亡党亡国之忧。</p>
<p>古往今来，几千年的泱泱大国，有记载的只有一人家世永昌，传承了七十多代一孔子。</p>
<p>中国人生活累，一小半缘于生存，一大半缘于攀比。</p>
<p>美国的忧患意识极强，做事情一般都谋划长远，甚至长达20年。美国不但不允许世界上出现一个可以挑战美国权威的超级大国，同样也不允许中国出现一位有胆魄有开拓精神的领导人</p>
<p>美国作为世界上最霸权的国家，又是世界警察，除非飞出地球，否则哪里都会有美国的影子。</p>
<p>离开生存谈人权，就是扯淡的事情。同样，离开民众素质的提高谈民主，也一样是扯谈。</p>
<p>人，如果不摆正自己的位置，早晚会被自己的傲慢所累。</p>
<p>每个国家都有自己独特的技术或资源，就和一个人一样，只有拥有了独立的人格和技能，才能赢得别人的尊重。如果将自己的独门绝技拱手让人，不顾自身的安危和由此有可能造成的严重的后果，那不是活雷锋，是活宝。</p>
<p>想要保持神秘有两种办法，一是沉默。但越沉默反而越容易让外界众说纷纭，还容易让对方判断失误。另一种就是夸大，在夸夸其谈之下，同样也让对方摸不透虚实。</p>
<hr>
<p>中国外交策略过于保守，凡事喜欢一个腔调说话，其实反而容易让外界摸清底细。而美国的手法通常是两面手法，外交部是一套说辞，国防部是一套说辞，一方含糊其词，一方措辞强硬，就很容易让外界分不清美国的真实意图。</p>
<p>对老人来讲，有点事情做是好事，人不能闲，一闲，心思就淡，心思一淡，生命力就弱了。</p>
<p>人生所有的努力和奋斗，怕就怕突然双眼睁开，原来是黄粱一梦。</p>
<p>人生是粒种，落地就会生根。同样。一个人的所作所为也是一粒种子，种下善良，收获的也是善良，种下仇恨，收获的也是仇恨。</p>
<p>有关部门正在研究拟将退休年龄提高5岁，提出65岁退休以缓解养老金缺口的压力，其实是昏招。中国人的平均寿命72岁，65岁退休，最多领7年退休金就会告别人世，而想要领取退休后的退休金，必须退休之前先交满15年养老保险。用15年付出换回7年的回报，为什么还填不满养老金的巨大缺口？而机关事业单位的职工无需交纳养老金，退休后的收入是企业职工的两倍到数倍！有关部门还解释说机关事业单位的退休金不占社会养老金的份额，但不要忘了一个大提前是，机关事业单位全靠企业养活，他们的工资和养老金全是纳税人的钱。</p>
<p>在摸着石头过河的改革过程中，国家其实走了许多弯路，但在弥补弯路带来的损失时，往往只损害百姓的利益，同时各个利益集团不但不付出，反而还要变相盘剥百姓并且借机壮大自己的实力。不可否认的是，利益集团在任何时代都会出现，只要有国家存在，就会有利益集团的存在，只是如果能少一些对百姓的压榨，还富于民，才是国家基石稳定的保证。利益集团永远是少数，是船，广大百姓就是承载大船小船的水。水的承载能力有限，利益集团造船的野心无限，久而久之，要么是船翻水枯，要么就是水能载舟亦能覆舟。</p>
<p>普普通通的中国人、踏踏实实的中国人、不畏艰难的中国人、侠肝义胆的中国人！</p>
<p>在岁月的流逝中，许多人离去，许多人到来，人生就是一场聚散不定的盛宴，有开始，必然有结束，不管是喜剧还是悲剧，结束的一刻，总会如期到来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“苟利国家生死以，岂因祸福趋避之​。”&lt;/p&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://vcpu.me/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="经典语录" scheme="http://vcpu.me/tags/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>linux bridge</title>
    <link href="http://vcpu.me/linux-bridge1/"/>
    <id>http://vcpu.me/linux-bridge1/</id>
    <published>2017-11-02T10:00:00.000Z</published>
    <updated>2017-11-02T10:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-bridge处理原理"><a href="#linux-bridge处理原理" class="headerlink" title="linux bridge处理原理"></a>linux bridge处理原理</h2><p>进入桥的数据报文分为几个类型，桥对应的处理方法也不同：<br>1. 报文是本机发送给自己的，桥不处理，交给上层协议栈；<br>2. 接收报文的物理接口不是网桥接口，桥不处理，交给上层协议栈；<br>3. 进入网桥后，如果网桥的状态为Disable，则将包丢弃不处理；<br>4. 报文源地址无效（广播，多播，以及00:00:00:00:00:00），丢包；<br>5. 如果是STP的BPDU包，进入STP处理，处理后不再转发，也不再交给上层协议栈；<br>6. 如果是发给本机的报文，桥直接返回，交给上层协议栈，不转发；<br>7. 需要转发的报文分三种情况：<br>1） 广播或多播，则除接收端口外的所有端口都需要转发一份；<br>2） 单播并且在CAM表中能找到端口映射的，只需要网映射端口转发一份即可；<br>3） 单播但找不到端口映射的，则除了接收端口外其余端口都需要转发；<br>(1) bridge 网络帧，如果帧的目的 MAC 地址是在桥的另一侧的某个网络设备上。<br>(2) 泛洪该网络帧，如果帧的目的 MAC 对网桥是不认识的。<br>(3) 转到更高一层的三层IP协议栈代码处理，如果帧的目的地址是桥本身的或者它的某个端口的。<br>忽略它，如果帧的目的地址是位于它来自的桥的方向的同一侧。</p>
<p> 对 （1）和 （2）来说，接下来该数据帧被 filter 的 FORWARD 链处理。对（3）来说，它会被 filter 的 INPUT 链处理。发生这种情况时，该 bridge 其实是被用作一个路由器（一个对比例子是现实世界中的带路由的交换机设备）。包含 IP 包的以太帧的目的 MAC 地址是桥的MAC地址，但是目的 IP 地址不是桥的IP地址。</p>
 <a id="more"></a>
<h2 id="iptable-linux-bridge网络包匹配条件"><a href="#iptable-linux-bridge网络包匹配条件" class="headerlink" title="iptable linux bridge网络包匹配条件"></a>iptable linux bridge网络包匹配条件</h2><p><img src="/myimages/WX20171102-151131.png" alt="x1.png"></p>
<h2 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p><img src="/myimages/E1DB0D6BC841614F3D154EA4E125E5D4.png" alt="x.png"></p>
<h3 id="实验脚本"><a href="#实验脚本" class="headerlink" title="实验脚本"></a>实验脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">brctl addbr br0 </div><div class="line">ifconfig br0 <span class="number">1.1</span><span class="number">.2</span><span class="number">.254</span>/<span class="number">24</span> up</div><div class="line">ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.254</span>/<span class="number">24</span> dev br0</div><div class="line"></div><div class="line">ip link add net0_eth0 type veth peer name tap0</div><div class="line">ip netns add net0</div><div class="line">ip link set dev net0_eth0 netns net0</div><div class="line">ip netns <span class="keyword">exec</span> net0 ip link set dev net0_eth0 name eth0</div><div class="line">ip netns <span class="keyword">exec</span> net0 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">24</span> dev eth0</div><div class="line">ip netns <span class="keyword">exec</span> net0 ip link set dev eth0 up</div><div class="line">ip link set dev tap0 master br0</div><div class="line">ip link set dev tap0 up</div><div class="line"></div><div class="line"></div><div class="line">ip link add net1_eth0 type veth peer name tap1</div><div class="line">ip netns add net1</div><div class="line">ip link set dev net1_eth0 netns net1</div><div class="line">ip netns <span class="keyword">exec</span> net1 ip link set dev net1_eth0 name eth0</div><div class="line">ip netns <span class="keyword">exec</span> net1 ip addr add <span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>/<span class="number">24</span> dev eth0</div><div class="line">ip netns <span class="keyword">exec</span> net1 ip link set dev eth0 up</div><div class="line">ip link set dev tap1 master br0</div><div class="line">ip link set dev tap1 up</div></pre></td></tr></table></figure>
<h3 id="匹配linux网络数据包"><a href="#匹配linux网络数据包" class="headerlink" title="匹配linux网络数据包"></a>匹配linux网络数据包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p icmp -m physdev --physdev-<span class="keyword">in</span> tap0 -j LOG</div><div class="line">iptables -A FORWARD -p icmp -m physdev --physdev-<span class="keyword">in</span> tap0 --physdev-out tap1 -j LOG</div><div class="line">iptables -A FORWARD -p icmp -m physdev --physdev-<span class="keyword">is</span>-out</div><div class="line">iptables -A FORWARD -p icmp -m physdev --physdev-<span class="keyword">is</span>-out  --physdev-<span class="keyword">is</span>-<span class="keyword">in</span> --physdev-<span class="keyword">is</span>-bridged</div></pre></td></tr></table></figure>
<h3 id="查看数据包"><a href="#查看数据包" class="headerlink" title="查看数据包"></a>查看数据包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Chain INPUT (policy ACCEPT <span class="number">122</span> packets, <span class="number">8044</span> bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</div><div class="line">    <span class="number">5</span>   <span class="number">420</span> LOG        icmp --  *      *       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            PHYSDEV match --physdev-<span class="keyword">in</span> tap0 LOG flags <span class="number">0</span> level <span class="number">4</span></div><div class="line"></div><div class="line">Chain FORWARD (policy ACCEPT <span class="number">12</span> packets, <span class="number">1008</span> bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</div><div class="line">    <span class="number">6</span>   <span class="number">504</span> LOG        icmp --  *      *       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            PHYSDEV match --physdev-<span class="keyword">in</span> tap0 --physdev-out tap1 LOG flags <span class="number">0</span> level <span class="number">4</span></div><div class="line">   <span class="number">12</span>  <span class="number">1008</span>            icmp --  *      *       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            PHYSDEV match --physdev-<span class="keyword">is</span>-out</div><div class="line">   <span class="number">12</span>  <span class="number">1008</span>            icmp --  *      *       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>            PHYSDEV match --physdev-<span class="keyword">is</span>-<span class="keyword">in</span> --physdev-<span class="keyword">is</span>-out --physdev-<span class="keyword">is</span>-bridged</div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT <span class="number">85</span> packets, <span class="number">20092</span> bytes)</div><div class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     source               destination</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux-bridge处理原理&quot;&gt;&lt;a href=&quot;#linux-bridge处理原理&quot; class=&quot;headerlink&quot; title=&quot;linux bridge处理原理&quot;&gt;&lt;/a&gt;linux bridge处理原理&lt;/h2&gt;&lt;p&gt;进入桥的数据报文分为几个类型，桥对应的处理方法也不同：&lt;br&gt;1. 报文是本机发送给自己的，桥不处理，交给上层协议栈；&lt;br&gt;2. 接收报文的物理接口不是网桥接口，桥不处理，交给上层协议栈；&lt;br&gt;3. 进入网桥后，如果网桥的状态为Disable，则将包丢弃不处理；&lt;br&gt;4. 报文源地址无效（广播，多播，以及00:00:00:00:00:00），丢包；&lt;br&gt;5. 如果是STP的BPDU包，进入STP处理，处理后不再转发，也不再交给上层协议栈；&lt;br&gt;6. 如果是发给本机的报文，桥直接返回，交给上层协议栈，不转发；&lt;br&gt;7. 需要转发的报文分三种情况：&lt;br&gt;1） 广播或多播，则除接收端口外的所有端口都需要转发一份；&lt;br&gt;2） 单播并且在CAM表中能找到端口映射的，只需要网映射端口转发一份即可；&lt;br&gt;3） 单播但找不到端口映射的，则除了接收端口外其余端口都需要转发；&lt;br&gt;(1) bridge 网络帧，如果帧的目的 MAC 地址是在桥的另一侧的某个网络设备上。&lt;br&gt;(2) 泛洪该网络帧，如果帧的目的 MAC 对网桥是不认识的。&lt;br&gt;(3) 转到更高一层的三层IP协议栈代码处理，如果帧的目的地址是桥本身的或者它的某个端口的。&lt;br&gt;忽略它，如果帧的目的地址是位于它来自的桥的方向的同一侧。&lt;/p&gt;
&lt;p&gt; 对 （1）和 （2）来说，接下来该数据帧被 filter 的 FORWARD 链处理。对（3）来说，它会被 filter 的 INPUT 链处理。发生这种情况时，该 bridge 其实是被用作一个路由器（一个对比例子是现实世界中的带路由的交换机设备）。包含 IP 包的以太帧的目的 MAC 地址是桥的MAC地址，但是目的 IP 地址不是桥的IP地址。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="iptables" scheme="http://vcpu.me/tags/iptables/"/>
    
      <category term="linux bridge" scheme="http://vcpu.me/tags/linux-bridge/"/>
    
  </entry>
  
  <entry>
    <title>ovs snat</title>
    <link href="http://vcpu.me/ovs-snat/"/>
    <id>http://vcpu.me/ovs-snat/</id>
    <published>2017-10-31T10:00:00.000Z</published>
    <updated>2017-11-02T10:52:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境背景"><a href="#环境背景" class="headerlink" title="环境背景"></a>环境背景</h1><p><img src="/myimages/7C7B89E506BC9F0693B0E808E9473162.png" alt="Untitled Diagram"><br><a id="more"></a></p>
<h1 id="脚本配置"><a href="#脚本配置" class="headerlink" title="脚本配置"></a>脚本配置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br-sw</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ip link set dev tap1 up</div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns <span class="keyword">exec</span> ns2 ip link set dev tap2 up</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ip addr add <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span>/<span class="number">24</span> dev tap1</div><div class="line">ip netns <span class="keyword">exec</span> ns2 ip addr add <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">24</span> dev tap2</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ip link set lo up</div><div class="line">ip netns <span class="keyword">exec</span> ns2 ip link set lo up</div><div class="line">ip netns <span class="keyword">exec</span> ns1 ping -c <span class="number">4</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span></div><div class="line">ip netns <span class="keyword">exec</span> ns1 ping -c <span class="number">4</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br0 patch-ovs<span class="number">-0</span> -- set Interface patch-ovs<span class="number">-0</span> type=patch options:peer=patch-sw<span class="number">-1</span></div><div class="line">ovs-vsctl add-port br-sw patch-sw<span class="number">-1</span> -- set Interface patch-sw<span class="number">-1</span> type=patch options:peer=patch-ovs<span class="number">-0</span></div></pre></td></tr></table></figure>
<p>把外网接口加入到br-sw</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ip addr flush dev enp0s3</div><div class="line"></div><div class="line">ovs-vsctl add-port br-sw enp0s3</div><div class="line"></div><div class="line">ifconfig br-sw <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>/<span class="number">24</span> up</div><div class="line"></div><div class="line">route add default gw <span class="number">10.30</span><span class="number">.10</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<h1 id="配置访问同网段流表10-30-10-175"><a href="#配置访问同网段流表10-30-10-175" class="headerlink" title="配置访问同网段流表10.30.10.175"></a>配置访问同网段流表10.30.10.175</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果进入trk可以直接查找连接，如果没有执行相应action</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=0,priority=10,ip,ct_state=-trk,action=ct(nat,table=1)'</span> </div><div class="line"></div><div class="line"><span class="comment">#新建连接，执行ct commit；创建链接，执行nat规则</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=1,in_port=1,ip,ct_state=+trk+new,action=ct(nat(src=10.30.10.141-10.30.10.141:5000-50000),commit),mod_dl_src:08:00:27:99:81:b7,mod_dl_dst:00:0e:c6:cf:da:c7,3'</span></div><div class="line"><span class="comment">#到外网流量，已经建立号连接，直接发给3口</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=1,in_port=1,ip,ct_state=+trk+est,action=mod_dl_src:08:00:27:99:81:b7,mod_dl_dst:00:0e:c6:cf:da:c7,3'</span></div><div class="line"><span class="comment">#回来流量，已经建立连接，直接发给1口</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=1,in_port=3,ip,ct_state=+trk+est,action=mod_dl_src:1e:33:f9:73:48:d0,mod_dl_dst:92:25:03:9d:0f:34,1'</span></div></pre></td></tr></table></figure>
<h1 id="配置访问外网114-114-114-114"><a href="#配置访问外网114-114-114-114" class="headerlink" title="配置访问外网114.114.114.114"></a>配置访问外网114.114.114.114</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果进入trk可以直接查找连接，如果没有执行相应action</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=0,priority=10,ip,ct_state=-trk,action=ct(nat,table=1)'</span></div><div class="line"></div><div class="line"><span class="comment">#新建连接，执行ct commit；创建链接，执行nat规则</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=1,in_port=1,ip,ct_state=+trk+new,action=ct(nat(src=10.30.10.141-10.30.10.141:5000-50000),commit),mod_dl_src:08:00:27:99:81:b7,mod_dl_dst:d4:ee:7:50:78:c2,3'</span></div><div class="line"></div><div class="line"><span class="comment">#到外网流量，已经建立号连接，直接发给3口</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=1,in_port=1,ip,ct_state=+trk+est,action=mod_dl_src:08:00:27:99:81:b7,mod_dl_dst:d4:ee:7:50:78:c2,3'</span></div><div class="line"><span class="comment">#回来流量，已经建立连接，直接发给1口</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">'table=1,in_port=3,ip,ct_state=+trk+est,action=mod_dl_src:1e:33:f9:73:48:d0,mod_dl_dst:92:25:03:9d:0f:34,1'</span></div></pre></td></tr></table></figure>
<h1 id="流表删除"><a href="#流表删除" class="headerlink" title="流表删除"></a>流表删除</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl del-flows br0 &apos;table=0,ip,ct_state=-trk&apos;</div><div class="line"></div><div class="line">ovs-ofctl del-flows br0 &apos;table=1,in_port=1,ip,ct_state=+trk+new&apos;</div><div class="line"></div><div class="line">ovs-ofctl del-flows br0 &apos;table=1,in_port=1,ip,ct_state=+trk+est&apos;</div><div class="line"></div><div class="line">ovs-ofctl del-flows br0 &apos;table=1,in_port=3,ip,ct_state=+trk+est&apos;</div></pre></td></tr></table></figure>
<h1 id="按照dragonflow社区想法实现snat"><a href="#按照dragonflow社区想法实现snat" class="headerlink" title="按照dragonflow社区想法实现snat"></a>按照dragonflow社区想法实现snat</h1><h2 id="snat社区实现流量原理"><a href="#snat社区实现流量原理" class="headerlink" title="snat社区实现流量原理"></a>snat社区实现流量原理</h2><p>流量从br0流出后，修改源mac为已设定 80:88:88:88:88:99，目的mac修改为出口网桥的mac 08:00:27:99:81:b7</p>
<p>流量从br0流到br-sw后，br-sw收到上述流量后，查看目的mac为桥的mac，属于三层转发流量，br-sw将上述流量源mac变为br-sw mac ，目的mac变为具体地址活着网关的mac。</p>
<h2 id="snat社区实现要点"><a href="#snat社区实现要点" class="headerlink" title="snat社区实现要点"></a>snat社区实现要点</h2><p>通过将snat发出流量直接发给出口网桥，通过网桥三层转发给具体的目的地址，这样实现从br0中流表不用关心snat访问的具体目标mac地址（访问的具体目标br-sw会主动学习具体mac地址），只需要关注外网网桥的mac即可。</p>
<h2 id="SNAT-的ARP被动回复流表"><a href="#SNAT-的ARP被动回复流表" class="headerlink" title="SNAT 的ARP被动回复流表"></a>SNAT 的ARP被动回复流表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 <span class="string">"priority=100 arp arp_op=1 arp_tpa=10.30.10.111 action=move:OXM_OF_ARP_TPA[]-&gt;NXM_NX_REG2[],resubmit(,8),goto_table:10"</span></div><div class="line"></div><div class="line">ovs-ofctl add-flow br0 <span class="string">"table=8,reg2=0x0a1e0a6f/0xffffffff,action=load:0x808888888888-&gt;OXM_OF_PKT_REG0[]"</span></div><div class="line"></div><div class="line">ovs-ofctl add-flow br0 <span class="string">"table=10 priority=10,arp,arp_op=1,action=load:2-&gt;OXM_OF_ARP_OP[],move:OXM_OF_ARP_SHA[]-&gt;OXM_OF_ARP_THA[],move:OXM_OF_PKT_REG0[0..47]-&gt;OXM_OF_ARP_SHA[],move:OXM_OF_ARP_SPA[]-&gt;OXM_OF_ARP_TPA[],move:NXM_NX_REG2[]-&gt;OXM_OF_ARP_SPA[],move:NXM_OF_ETH_SRC[]-&gt;NXM_OF_ETH_DST[],move:OXM_OF_PKT_REG0[0..47]-&gt;NXM_OF_ETH_SRC[],move:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG3[0..15],load:0-&gt;NXM_OF_IN_PORT[],output:NXM_NX_REG3[0..15]"</span></div></pre></td></tr></table></figure>
<h2 id="SNAT流表"><a href="#SNAT流表" class="headerlink" title="SNAT流表"></a>SNAT流表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 <span class="string">"in_port=1,ip,action=ct(commit,zone=1,nat(src=10.30.10.111-10.30.10.111)),mod_dl_src:80:88:88:88:88:99,mod_dl_dst:08:00:27:99:81:b7,3"</span></div><div class="line">ovs-ofctl add-flow br0 <span class="string">"in_port=3,ct_state=-trk,ip,action=ct(table=0,zone=1,nat)"</span></div><div class="line"></div><div class="line">ovs-ofctl add-flow br0 <span class="string">"in_port=3,ct_state=+trk,ct_zone=1,ip,action=mod_dl_src:80:88:88:88:88:99,mod_dl_dst:92:25:03:9d:0f:34,1"</span></div></pre></td></tr></table></figure>
<h2 id="生成流表"><a href="#生成流表" class="headerlink" title="生成流表"></a>生成流表</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cookie=0x0, duration=881.078s, table=0, n_packets=850, n_bytes=83300, idle_age=0, ip,in_port=1 actions=ct(commit,zone=1,nat(src=10.30.</div><div class="line">10.111)),mod_dl_src:80:88:88:88:88:99,mod_dl_dst:08:00:27:99:81:b7,output:3</div><div class="line"> cookie=0x0, duration=732.960s, table=0, n_packets=1621, n_bytes=421788, idle_age=0, ct_state=-trk,ip,in_port=3 actions=ct(table=0,zone</div><div class="line">=1,nat)</div><div class="line"> cookie=0x0, duration=710.396s, table=0, n_packets=1584, n_bytes=408966, idle_age=0, ct_state=+trk,ct_zone=1,ip,in_port=3 actions=mod_d</div><div class="line">l_src:80:88:88:88:88:99,mod_dl_dst:92:25:03:9d:0f:34,output:1</div><div class="line"> cookie=0x0, duration=2336.028s, table=0, n_packets=18, n_bytes=1026, idle_age=4, priority=100,arp,arp_tpa=10.30.10.111,arp_op=1 action</div><div class="line">s=move:NXM_OF_ARP_TPA[]-&gt;NXM_NX_REG2[],resubmit(,8),resubmit(,10)</div><div class="line"> cookie=0x0, duration=38932.939s, table=0, n_packets=17775, n_bytes=5974547, idle_age=332, priority=0 actions=NORMAL</div><div class="line"> cookie=0x0, duration=2171.189s, table=8, n_packets=18, n_bytes=1026, idle_age=4, reg2=0xa1e0a6f actions=load:0x808888888899-&gt;OXM_OF_PK</div><div class="line">T_REG0[]</div><div class="line"> cookie=0x0, duration=2110.202s, table=10, n_packets=18, n_bytes=1026, idle_age=4, priority=10,arp,arp_op=1 actions=load:0x2-&gt;NXM_OF_AR</div><div class="line">P_OP[],move:NXM_NX_ARP_SHA[]-&gt;NXM_NX_ARP_THA[],move:OXM_OF_PKT_REG0[0..47]-&gt;NXM_NX_ARP_SHA[],move:NXM_OF_ARP_SPA[]-&gt;NXM_OF_ARP_TPA[],mo</div><div class="line">ve:NXM_NX_REG2[]-&gt;NXM_OF_ARP_SPA[],move:NXM_OF_ETH_SRC[]-&gt;NXM_OF_ETH_DST[],move:OXM_OF_PKT_REG0[0..47]-&gt;NXM_OF_ETH_SRC[],move:NXM_OF_IN</div><div class="line">_PORT[]-&gt;NXM_NX_REG3[0..15],load:0-&gt;NXM_OF_IN_PORT[],output:NXM_NX_REG3[0..15]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境背景&quot;&gt;&lt;a href=&quot;#环境背景&quot; class=&quot;headerlink&quot; title=&quot;环境背景&quot;&gt;&lt;/a&gt;环境背景&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/myimages/7C7B89E506BC9F0693B0E808E9473162.png&quot; alt=&quot;Untitled Diagram&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="snat" scheme="http://vcpu.me/tags/snat/"/>
    
  </entry>
  
  <entry>
    <title>RYU连接ovs方法举例</title>
    <link href="http://vcpu.me/ryu-connect-ovs/"/>
    <id>http://vcpu.me/ryu-connect-ovs/</id>
    <published>2017-10-25T10:00:00.000Z</published>
    <updated>2017-11-02T07:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念介绍"><a href="#基本概念介绍" class="headerlink" title="基本概念介绍"></a>基本概念介绍</h1><h2 id="执行mn命令后，主机监听6633和6634端口"><a href="#执行mn命令后，主机监听6633和6634端口" class="headerlink" title="执行mn命令后，主机监听6633和6634端口"></a>执行mn命令后，主机监听6633和6634端口</h2><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</div><div class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">6633</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">23871</span>/controller</div><div class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">6634</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">1131</span>/ovs-vswitchd</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="命令执行记录如下："><a href="#命令执行记录如下：" class="headerlink" title="命令执行记录如下："></a>命令执行记录如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~<span class="comment"># mn</span></div><div class="line">*** Creating network</div><div class="line">*** Adding controller</div><div class="line">*** Adding hosts:</div><div class="line">h1 h2</div><div class="line">*** Adding switches:</div><div class="line">s1</div><div class="line">*** Adding links:</div><div class="line">(h1, s1) (h2, s1)</div><div class="line">*** Configuring hosts</div><div class="line">h1 h2</div><div class="line">*** Starting controller</div><div class="line">c0</div><div class="line">*** Starting <span class="number">1</span> switches</div><div class="line">s1 ...</div><div class="line">*** Starting CLI:</div><div class="line">mininet&gt;</div></pre></td></tr></table></figure>
<h2 id="端口6633-是ovs连接的控制器端口，且该端口是mn自己启动的"><a href="#端口6633-是ovs连接的控制器端口，且该端口是mn自己启动的" class="headerlink" title="端口6633 是ovs连接的控制器端口，且该端口是mn自己启动的"></a>端口6633 是ovs连接的控制器端口，且该端口是mn自己启动的</h2><p>端口6634是被动连接端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Bridge &quot;s1&quot;</div><div class="line">        Controller &quot;tcp:127.0.0.1:6633&quot;</div><div class="line">            is_connected: true</div><div class="line">        Controller &quot;ptcp:6634&quot;</div><div class="line">        fail_mode: secure</div><div class="line">        Port &quot;s1&quot;</div><div class="line">            Interface &quot;s1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;s1-eth1&quot;</div><div class="line">            Interface &quot;s1-eth1&quot;</div><div class="line">        Port &quot;s1-eth2&quot;</div><div class="line">            Interface &quot;s1-eth2&quot;</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div></pre></td></tr></table></figure>
<h2 id="端口6634是ovs-vswitchd监听端口是被动连接管理的端口"><a href="#端口6634是ovs-vswitchd监听端口是被动连接管理的端口" class="headerlink" title="端口6634是ovs-vswitchd监听端口是被动连接管理的端口"></a>端口6634是ovs-vswitchd监听端口是被动连接管理的端口</h2><p>所谓的被动连接端口是指，控制器可以主动连接此端口，控制此ovs，下面就是设置被动端口的 方式</p>
<p>ovs-vsctl set-controller s1 ptcp:8888</p>
<p>特别说明：相对应被动端口，主动端口（ovs主动连接并和控制器通信的端口）设置方式如下:</p>
<p>ovs-vsctl set-controller s1 tcp:127.0.0.1:8887</p>
<p>主动连接本地控制器127.0.0.1:8887端口</p>
<h2 id="主动连接也可以设置多个，设置方法如下"><a href="#主动连接也可以设置多个，设置方法如下" class="headerlink" title="主动连接也可以设置多个，设置方法如下"></a>主动连接也可以设置多个，设置方法如下</h2><p>通过通信数据包得知，该ovs会和本地控制器6636和6637通信，如果有packet in事件时候会将该事件分别发一份给这两个控制器，至于两个控制器间的关系协作暂无研究。</p>
<p>ovs-vsctl set-controller s1 tcp:127.0.0.1:6636 tcp:127.0.0.1:6637</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Bridge &quot;s1&quot;</div><div class="line">      Controller &quot;tcp:127.0.0.1:6637&quot;</div><div class="line">      Controller &quot;tcp:127.0.0.1:6636&quot;</div><div class="line">      fail_mode: secure</div><div class="line">      Port &quot;s1-eth1&quot;</div><div class="line">          Interface &quot;s1-eth1&quot;</div><div class="line">      Port &quot;s1-eth2&quot;</div><div class="line">          Interface &quot;s1-eth2&quot;</div><div class="line">      Port &quot;s1&quot;</div><div class="line">          Interface &quot;s1&quot;</div><div class="line">              type: internal</div><div class="line"> ovs_version: &quot;2.5.2&quot;</div></pre></td></tr></table></figure>
<h1 id="RYU控制器连接ovs步骤"><a href="#RYU控制器连接ovs步骤" class="headerlink" title="RYU控制器连接ovs步骤"></a>RYU控制器连接ovs步骤</h1><hr>
<ul>
<li>设置ovs s1 主动连接6666端口</li>
</ul>
<p>ovs-vsctl set-controller s1 tcp:127.0.0.1:6666</p>
<ul>
<li>设置RYU启动服务端口6666</li>
</ul>
<p>root@controller-VirtualBox:/usr/local/lib/python2.7/dist-packages/ryu/app# ryu-manager –ofp-tcp-listen-port 6666 –verbose simple_switch_13.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">6666</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">24665</span>/python</div></pre></td></tr></table></figure>
<p>通过上述设置ovs连接本机127.0.0.1:6666端口走openflow协议连接控制器simple_switch_13.py</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本概念介绍&quot;&gt;&lt;a href=&quot;#基本概念介绍&quot; class=&quot;headerlink&quot; title=&quot;基本概念介绍&quot;&gt;&lt;/a&gt;基本概念介绍&lt;/h1&gt;&lt;h2 id=&quot;执行mn命令后，主机监听6633和6634端口&quot;&gt;&lt;a href=&quot;#执行mn命令后，主机监听6633和6634端口&quot; class=&quot;headerlink&quot; title=&quot;执行mn命令后，主机监听6633和6634端口&quot;&gt;&lt;/a&gt;执行mn命令后，主机监听6633和6634端口&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Active Internet connections (only servers)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tcp        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6633&lt;/span&gt;            &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:*               LISTEN      &lt;span class=&quot;number&quot;&gt;23871&lt;/span&gt;/controller&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tcp        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6634&lt;/span&gt;            &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;:*               LISTEN      &lt;span class=&quot;number&quot;&gt;1131&lt;/span&gt;/ovs-vswitchd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RYU" scheme="http://vcpu.me/categories/RYU/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="实验性质" scheme="http://vcpu.me/tags/%E5%AE%9E%E9%AA%8C%E6%80%A7%E8%B4%A8/"/>
    
      <category term="RYU" scheme="http://vcpu.me/tags/RYU/"/>
    
  </entry>
  
  <entry>
    <title>mininet+RYU环境安装</title>
    <link href="http://vcpu.me/mininet1/"/>
    <id>http://vcpu.me/mininet1/</id>
    <published>2017-10-20T10:00:00.000Z</published>
    <updated>2017-11-02T07:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装mininet"><a href="#安装mininet" class="headerlink" title="安装mininet"></a>安装mininet</h1><hr>
<p>apt-get install mininet</p>
<a id="more"></a>
<h1 id="运行mininet"><a href="#运行mininet" class="headerlink" title="运行mininet"></a>运行mininet</h1><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~<span class="comment"># mn</span></div><div class="line"></div><div class="line">*** No default OpenFlow controller found <span class="keyword">for</span> default switch!</div><div class="line"></div><div class="line">*** Falling back to OVS Bridge</div><div class="line"></div><div class="line">*** Creating network</div><div class="line"></div><div class="line">*** Adding controller</div><div class="line"></div><div class="line">*** Adding hosts:</div><div class="line"></div><div class="line">h1 h2</div><div class="line"></div><div class="line">*** Adding switches:</div><div class="line"></div><div class="line">s1</div><div class="line"></div><div class="line">*** Adding links:</div><div class="line"></div><div class="line">(h1, s1) (h2, s1)</div><div class="line"></div><div class="line">*** Configuring hosts</div><div class="line"></div><div class="line">h1 h2</div><div class="line"></div><div class="line">*** Starting controller</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">*** Starting <span class="number">1</span> switches</div><div class="line"></div><div class="line">s1 ...</div><div class="line"></div><div class="line">*** Starting CLI:</div><div class="line"></div><div class="line">mininet&gt; nodes</div><div class="line"></div><div class="line">available nodes are:</div><div class="line"></div><div class="line">h1 h2 s1</div><div class="line"></div><div class="line">mininet&gt; net</div><div class="line"></div><div class="line">h1 h1-eth0:s1-eth1</div><div class="line"></div><div class="line">h2 h2-eth0:s1-eth2</div><div class="line"></div><div class="line">s1 lo:  s1-eth1:h1-eth0 s1-eth2:h2-eth0</div><div class="line"></div><div class="line">mininet&gt; dump</div><div class="line"></div><div class="line">&lt;Host h1: h1-eth0:<span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> pid=<span class="number">1961</span>&gt;</div><div class="line"></div><div class="line">&lt;Host h2: h2-eth0:<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> pid=<span class="number">1963</span>&gt;</div><div class="line"></div><div class="line">&lt;OVSBridge s1: lo:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,s1-eth1:<span class="keyword">None</span>,s1-eth2:<span class="keyword">None</span> pid=<span class="number">1968</span>&gt;</div><div class="line"></div><div class="line">mininet&gt; h1 ping h2</div><div class="line"></div><div class="line">PING <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> (<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"></div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">1.81</span> ms</div><div class="line"></div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.072</span> ms</div><div class="line"></div><div class="line">^C</div><div class="line"></div><div class="line">--- <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> ping statistics ---</div><div class="line"></div><div class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1002</span>ms</div><div class="line"></div><div class="line">rtt min/avg/max/mdev = <span class="number">0.072</span>/<span class="number">0.942</span>/<span class="number">1.812</span>/<span class="number">0.870</span> ms</div><div class="line"></div><div class="line">mininet&gt;</div></pre></td></tr></table></figure>
<p><img src="/myimages/22C5BBBE88326E6E91EA7C86BAA8E05A.jpg" alt="ryu1"></p>
<h1 id="下载安装RYU"><a href="#下载安装RYU" class="headerlink" title="下载安装RYU"></a>下载安装RYU</h1><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/osrg/ryu.git</div><div class="line">cd ryu</div><div class="line">sudo pip install -r tools/pip-requires</div><div class="line">sudo python setup.py install</div></pre></td></tr></table></figure>
<h2 id="开启默认mininet环境，启动controller控制ip和端口"><a href="#开启默认mininet环境，启动controller控制ip和端口" class="headerlink" title="开启默认mininet环境，启动controller控制ip和端口"></a>开启默认mininet环境，启动controller控制ip和端口</h2><p>mn –controller remote,ip=127.0.0.1,port=6633</p>
<p>执行外上述命令后，在一个窗口执行ovs-vsctl show 命令，查看配置情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/ryu<span class="comment"># ovs-vsctl show</span></div><div class="line"><span class="number">73065536</span>-d00b<span class="number">-440</span>c-a02f-b8d33ef05ee1</div><div class="line">    Bridge <span class="string">"s1"</span></div><div class="line">        Controller <span class="string">"ptcp:6634"</span></div><div class="line">        Controller <span class="string">"tcp:127.0.0.1:6633"</span></div><div class="line">        fail_mode: secure</div><div class="line">        Port <span class="string">"s1"</span></div><div class="line">            Interface <span class="string">"s1"</span></div><div class="line">                type: internal</div><div class="line">        Port <span class="string">"s1-eth1"</span></div><div class="line">            Interface <span class="string">"s1-eth1"</span></div><div class="line">        Port <span class="string">"s1-eth2"</span></div><div class="line">            Interface <span class="string">"s1-eth2"</span></div><div class="line">    ovs_version: <span class="string">"2.5.2"</span></div><div class="line">root@controller-VirtualBox:~/ryu<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>如上显示，controller控制ip：port信息如上，默认mininet环境启动了两个客户端分别通过s1-eth1和s1-eth2接入到ovs s1上，二层相连</p>
<h2 id="未执行任何ping动作时候查查看默认流表"><a href="#未执行任何ping动作时候查查看默认流表" class="headerlink" title="未执行任何ping动作时候查查看默认流表"></a>未执行任何ping动作时候查查看默认流表</h2><p>root@controller-VirtualBox:~/ryu# ovs-ofctl dump-flows s1 -O openflow13</p>
<p>OFPST_FLOW reply (OF1.3) (xid=0x2):</p>
<h2 id="开启simple-switch-13-py-RYU控制器demo"><a href="#开启simple-switch-13-py-RYU控制器demo" class="headerlink" title="开启simple_switch_13.py RYU控制器demo"></a>开启simple_switch_13.py RYU控制器demo</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/usr/local/lib/python2.7/dist-packages/ryu/app#  ryu-manager --verbose simple_switch_13.py </div><div class="line">loading app simple_switch_13.py</div><div class="line">loading app ryu.controller.ofp_handler</div><div class="line">instantiating app simple_switch_13.py of SimpleSwitch13</div><div class="line">instantiating app ryu.controller.ofp_handler of OFPHandler</div><div class="line">BRICK SimpleSwitch13</div><div class="line">  CONSUMES EventOFPPacketIn</div><div class="line">  CONSUMES EventOFPSwitchFeatures</div><div class="line">BRICK ofp_event</div><div class="line">  PROVIDES EventOFPPacketIn TO &#123;'SimpleSwitch13': set(['main'])&#125;</div><div class="line">  PROVIDES EventOFPSwitchFeatures TO &#123;'SimpleSwitch13': set(['config'])&#125;</div><div class="line">  CONSUMES EventOFPPortStatus</div><div class="line">  CONSUMES EventOFPSwitchFeatures</div><div class="line">  CONSUMES EventOFPHello</div><div class="line">  CONSUMES EventOFPErrorMsg</div><div class="line">  CONSUMES EventOFPEchoRequest</div><div class="line">  CONSUMES EventOFPPortDescStatsReply</div><div class="line">  CONSUMES EventOFPEchoReply</div><div class="line"></div><div class="line">connected socket:&lt;eventlet.greenio.base.GreenSocket object at 0x7fcef67e5cd0&gt; address:('127.0.0.1', 53604)</div><div class="line">hello ev &lt;ryu.controller.ofp_event.EventOFPHello object at 0x7fcef67e56d0&gt;</div><div class="line">move onto config mode</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPSwitchFeatures</div><div class="line">switch features ev version=0x4,msg_type=0x6,msg_len=0x20,xid=0xc20757d2,OFPSwitchFeatures(auxiliary_id=0,capabilities=79,datapath_id=1,n_buffers=256,n_tables=254)</div><div class="line">move onto main mode</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 82:06:4f:42:09:6c 33:33:00:00:00:02 1</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 82:06:4f:42:09:6c ff:ff:ff:ff:ff:ff 1</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 76:db:0f:62:67:5e 82:06:4f:42:09:6c 2</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 82:06:4f:42:09:6c 76:db:0f:62:67:5e 1</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 76:db:0f:62:67:5e 33:33:00:00:00:02 2</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 82:06:4f:42:09:6c 33:33:00:00:00:02 1</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 76:db:0f:62:67:5e 33:33:00:00:00:02 2</div></pre></td></tr></table></figure>
<h2 id="开启完simple-switch-13-py-后查看流表项，经过s1所有的流量都会通过127-0-0-1-6633发给控制器，交给simple-switch-13-py-处理"><a href="#开启完simple-switch-13-py-后查看流表项，经过s1所有的流量都会通过127-0-0-1-6633发给控制器，交给simple-switch-13-py-处理" class="headerlink" title="开启完simple_switch_13.py 后查看流表项，经过s1所有的流量都会通过127.0.0.1:6633发给控制器，交给simple_switch_13.py 处理"></a>开启完simple_switch_13.py 后查看流表项，经过s1所有的流量都会通过127.0.0.1:6633发给控制器，交给simple_switch_13.py 处理</h2><p>root@controller-VirtualBox:~/ryu# ovs-ofctl dump-flows s1 -O openflow13</p>
<p>OFPST_FLOW reply (OF1.3) (xid=0x2):</p>
<p> cookie=0x0, duration=2.782s, table=0, n_packets=0, n_bytes=0, priority=0 actions=CONTROLLER:65535</p>
<h2 id="h1-ping-h2，流表新增两条"><a href="#h1-ping-h2，流表新增两条" class="headerlink" title="h1 ping h2，流表新增两条"></a>h1 ping h2，流表新增两条</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mininet&gt; h1 ping h2</div><div class="line">PING <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> (<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">6.59</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.228</span> ms</div><div class="line">^C</div><div class="line">--- <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> ping statistics ---</div><div class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1002</span>ms</div><div class="line">rtt min/avg/max/mdev = <span class="number">0.228</span>/<span class="number">3.412</span>/<span class="number">6.597</span>/<span class="number">3.185</span> ms</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/ryu<span class="comment"># ovs-ofctl dump-flows s1 -O openflow13</span></div><div class="line">OFPST_FLOW reply (OF1<span class="number">.3</span>) (xid=<span class="number">0x2</span>):</div><div class="line"> cookie=<span class="number">0x0</span>, duration=<span class="number">12.970</span>s, table=<span class="number">0</span>, n_packets=<span class="number">4</span>, n_bytes=<span class="number">280</span>, priority=<span class="number">1</span>,in_port=<span class="number">2</span>,dl_dst=<span class="number">0</span>a:<span class="number">30</span>:ba:ff:<span class="number">9</span>b:<span class="number">80</span> actions=output:<span class="number">1</span></div><div class="line"> cookie=<span class="number">0x0</span>, duration=<span class="number">12.967</span>s, table=<span class="number">0</span>, n_packets=<span class="number">3</span>, n_bytes=<span class="number">238</span>, priority=<span class="number">1</span>,in_port=<span class="number">1</span>,dl_dst=ee:<span class="number">78</span>:<span class="number">58</span>:<span class="number">36</span>:<span class="number">2</span>b:<span class="number">06</span> actions=output:<span class="number">2</span></div><div class="line"> cookie=<span class="number">0x0</span>, duration=<span class="number">224.026</span>s, table=<span class="number">0</span>, n_packets=<span class="number">5</span>, n_bytes=<span class="number">322</span>, priority=<span class="number">0</span> actions=CONTROLLER:<span class="number">65535</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">packet in 1 ee:78:58:36:2b:06 33:33:00:00:00:02 2</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line"></div><div class="line">packet in 1 0a:30:ba:ff:9b:80 ff:ff:ff:ff:ff:ff 1</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line"></div><div class="line">packet in 1 ee:78:58:36:2b:06 0a:30:ba:ff:9b:80 2</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line"></div><div class="line">packet in 1 0a:30:ba:ff:9b:80 ee:78:58:36:2b:06 1</div><div class="line">EVENT ofp_event-&gt;SimpleSwitch13 EventOFPPacketIn</div><div class="line">packet in 1 0a:30:ba:ff:9b:80 33:33:00:00:00:02 1</div></pre></td></tr></table></figure>
<h2 id="通过rest-api查找相关信息"><a href="#通过rest-api查找相关信息" class="headerlink" title="通过rest api查找相关信息"></a>通过rest api查找相关信息</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">进入：/usr/local/lib/python2.7/dist-packages/ryu/app</div></pre></td></tr></table></figure>
<p>ryu-manager –verbose simple_switch_13.py ofctl_rest.py rest_topology.py</p>
<p>rest-api查看ovs流表</p>
<p><img src="/myimages/28F9DECD6C9B32F83242D2DC3B1114AB.jpg" alt="ryu2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装mininet&quot;&gt;&lt;a href=&quot;#安装mininet&quot; class=&quot;headerlink&quot; title=&quot;安装mininet&quot;&gt;&lt;/a&gt;安装mininet&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;apt-get install mininet&lt;/p&gt;
    
    </summary>
    
      <category term="RYU" scheme="http://vcpu.me/categories/RYU/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="SDN控制器" scheme="http://vcpu.me/tags/SDN%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>mininet界面配置拓扑方法</title>
    <link href="http://vcpu.me/mininet-jiemian/"/>
    <id>http://vcpu.me/mininet-jiemian/</id>
    <published>2017-10-20T10:00:00.000Z</published>
    <updated>2017-11-02T07:04:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在ubuntun系统中执行如下命令"><a href="#在ubuntun系统中执行如下命令" class="headerlink" title="在ubuntun系统中执行如下命令"></a>在ubuntun系统中执行如下命令</h1><hr>
<p>/usr/lib/python2.7/dist-packages/mininet/examples/miniedit.py</p>
<p><img src="/myimages/CF775C3AE535EE1763BF0BEC704D5FB5.jpg" alt=""><br><a id="more"></a></p>
<h1 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h1><hr>
<p>在设置控制器时候，点击run时候，miniedit退出并报错如下c0 cannot find required executable controller</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get install openvswitch-testcontroller</div><div class="line"> cp /usr/bin/ovs-testcontroller /usr/bin/ovs-controller</div><div class="line">ln /usr/bin/ovs-controller /usr/bin/controller</div></pre></td></tr></table></figure>
<h1 id="环境搭建过程"><a href="#环境搭建过程" class="headerlink" title="环境搭建过程"></a>环境搭建过程</h1><hr>
<h2 id="步骤1-root模式执行python-usr-lib-python2-7-dist-packages-mininet-examples-miniedit-py"><a href="#步骤1-root模式执行python-usr-lib-python2-7-dist-packages-mininet-examples-miniedit-py" class="headerlink" title="步骤1:root模式执行python /usr/lib/python2.7/dist-packages/mininet/examples/miniedit.py"></a>步骤1:root模式执行python /usr/lib/python2.7/dist-packages/mininet/examples/miniedit.py</h2><p><img src="/myimages/303876CCEBD4BB8D5F7245636AD68AB6.jpg" alt=""></p>
<h2 id="步骤2-设置h1和h2、h3的IP地址分别为10-10-10-1、10-10-10-2、10-10-10-3"><a href="#步骤2-设置h1和h2、h3的IP地址分别为10-10-10-1、10-10-10-2、10-10-10-3" class="headerlink" title="步骤2:设置h1和h2、h3的IP地址分别为10.10.10.1、10.10.10.2、10.10.10.3"></a>步骤2:设置h1和h2、h3的IP地址分别为10.10.10.1、10.10.10.2、10.10.10.3</h2><p><img src="/myimages/F12E3D9369C8DF95997D09E800F46C20.jpg" alt=""><img src="/myimages/AF38E7D6F9D052A0AF6CCA87A21AE23A.jpg" alt=""><img src="/myimages/6B92E1D27701A0B1E72E22D31EE0E626.jpg" alt=""></p>
<h2 id="步骤3-点击run运行"><a href="#步骤3-点击run运行" class="headerlink" title="步骤3:点击run运行"></a>步骤3:点击run运行</h2><h2 id="步骤4-保存该脚本为1-py，下次直接运行"><a href="#步骤4-保存该脚本为1-py，下次直接运行" class="headerlink" title="步骤4:保存该脚本为1.py，下次直接运行"></a>步骤4:保存该脚本为1.py，下次直接运行</h2><p><img src="/myimages/3B561F6AACAC60FE926FD0591D4A69D9.jpg" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~<span class="comment"># cat 1.py</span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> mininet.net <span class="keyword">import</span> Mininet</div><div class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> Controller, RemoteController, OVSController</div><div class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> CPULimitedHost, Host, Node</div><div class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> OVSKernelSwitch, UserSwitch</div><div class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> IVSSwitch</div><div class="line"><span class="keyword">from</span> mininet.cli <span class="keyword">import</span> CLI</div><div class="line"><span class="keyword">from</span> mininet.log <span class="keyword">import</span> setLogLevel, info</div><div class="line"><span class="keyword">from</span> mininet.link <span class="keyword">import</span> TCLink, Intf</div><div class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myNetwork</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    net = Mininet( topo=<span class="keyword">None</span>,</div><div class="line">                   build=<span class="keyword">False</span>,</div><div class="line">                   ipBase=<span class="string">'10.0.0.0/8'</span>)</div><div class="line"></div><div class="line">    info( <span class="string">'*** Adding controller\n'</span> )</div><div class="line">    c0=net.addController(name=<span class="string">'c0'</span>,</div><div class="line">                      controller=Controller,</div><div class="line">                      protocol=<span class="string">'tcp'</span>,</div><div class="line">                      port=<span class="number">6633</span>)</div><div class="line"></div><div class="line">    info( <span class="string">'*** Add switches\n'</span>)</div><div class="line">    s1 = net.addSwitch(<span class="string">'s1'</span>, cls=OVSKernelSwitch, listenPort=<span class="number">6633</span>)</div><div class="line">    s2 = net.addSwitch(<span class="string">'s2'</span>, cls=OVSKernelSwitch, listenPort=<span class="number">6633</span>)</div><div class="line"></div><div class="line">    info( <span class="string">'*** Add hosts\n'</span>)</div><div class="line">    h3 = net.addHost(<span class="string">'h3'</span>, cls=Host, ip=<span class="string">'10.10.10.3'</span>, defaultRoute=<span class="keyword">None</span>)</div><div class="line">    h1 = net.addHost(<span class="string">'h1'</span>, cls=Host, ip=<span class="string">'10.10.10.1'</span>, defaultRoute=<span class="keyword">None</span>)</div><div class="line">    h2 = net.addHost(<span class="string">'h2'</span>, cls=Host, ip=<span class="string">'10.10.10.2'</span>, defaultRoute=<span class="keyword">None</span>)</div><div class="line"></div><div class="line">    info( <span class="string">'*** Add links\n'</span>)</div><div class="line">    net.addLink(h1, s1)</div><div class="line">    net.addLink(s1, h2)</div><div class="line">    net.addLink(s2, h3)</div><div class="line">    net.addLink(s1, s2)</div><div class="line"></div><div class="line">    info( <span class="string">'*** Starting network\n'</span>)</div><div class="line">    net.build()</div><div class="line">    info( <span class="string">'*** Starting controllers\n'</span>)</div><div class="line">    <span class="keyword">for</span> controller <span class="keyword">in</span> net.controllers:</div><div class="line">        controller.start()</div><div class="line"></div><div class="line">    info( <span class="string">'*** Starting switches\n'</span>)</div><div class="line">    net.get(<span class="string">'s1'</span>).start([c0])</div><div class="line">    net.get(<span class="string">'s2'</span>).start([c0])</div><div class="line"></div><div class="line">    info( <span class="string">'*** Post configure switches and hosts\n'</span>)</div><div class="line">    s1.cmd(<span class="string">'ifconfig s1 127.0.0.1'</span>)</div><div class="line">    s2.cmd(<span class="string">'ifconfig s2 127.0.0.1'</span>)</div><div class="line"></div><div class="line">    CLI(net)</div><div class="line">    net.stop()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    setLogLevel( <span class="string">'info'</span> )</div><div class="line">    myNetwork()</div></pre></td></tr></table></figure>
<h2 id="步骤5-直接运行python-1-py恢复环境"><a href="#步骤5-直接运行python-1-py恢复环境" class="headerlink" title="步骤5: 直接运行python 1.py恢复环境"></a>步骤5: 直接运行python 1.py恢复环境</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在ubuntun系统中执行如下命令&quot;&gt;&lt;a href=&quot;#在ubuntun系统中执行如下命令&quot; class=&quot;headerlink&quot; title=&quot;在ubuntun系统中执行如下命令&quot;&gt;&lt;/a&gt;在ubuntun系统中执行如下命令&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;/usr/lib/python2.7/dist-packages/mininet/examples/miniedit.py&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/myimages/CF775C3AE535EE1763BF0BEC704D5FB5.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="RYU" scheme="http://vcpu.me/categories/RYU/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="mininet界面配置" scheme="http://vcpu.me/tags/mininet%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
    
      <category term="实验性质" scheme="http://vcpu.me/tags/%E5%AE%9E%E9%AA%8C%E6%80%A7%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>openstack 网络环境模拟</title>
    <link href="http://vcpu.me/openstackmoni/"/>
    <id>http://vcpu.me/openstackmoni/</id>
    <published>2017-10-15T10:00:00.000Z</published>
    <updated>2017-11-02T07:03:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景环境"><a href="#背景环境" class="headerlink" title="背景环境"></a>背景环境</h1><p><img src="/myimages/moni.png" alt="moni.png"><br><a id="more"></a><br>环境介绍:<br>    上述环境是模拟openstack网络环境，分为外网区域、计算节点区域、网络节点区域；外网区域主要模拟外网的网关和路由，计算节点区域模拟openstack计算节点物理机器，网络节点区域模拟openstack网络节点物理机器<br>    计算节点区域和外网交换机，通过vlan206、vlan1000、vlan2000连接到外网交换机，其中valn206是外网浮动ip网段的ip，vlan1000为私网10.10.10.0/24，vlan2000位私网192.168.16.0/24<br>    网络节点区域和外网交换机，br-int通过vlan1000，vlan2000连接外网交换机连接，br-public通过vlan206连接外网交换机<br>    外网区域是计算节点和网络节点网关所在地，同时该区域连接外网接口enp0s8，计算节点和网络节点通过外围区域上外网<br>    ubuntun操作系统区域，是ubuntu系统安装的系统的机器，上述环境是在一个机器中模拟所有节点情况。</p>
<h1 id="环境搭建脚本"><a href="#环境搭建脚本" class="headerlink" title="环境搭建脚本"></a>环境搭建脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br br-int-1</div><div class="line">ovs-vsctl add-br br-int-2</div><div class="line">ovs-vsctl add-br sw</div><div class="line">ovs-vsctl add-br br-public</div><div class="line"></div><div class="line">ip netns add vm1</div><div class="line">ip netns add vm2</div><div class="line">ip netns add dhcp1</div><div class="line">ip netns add dhcp2</div><div class="line">ip netns add router</div><div class="line">ip netn add gw</div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-1 vm1-eth0 tag=1000 -- set Interface vm1-eth0 type=internal</div><div class="line">ip link set vm1-eth0 netns vm1</div><div class="line">ip netns exec vm1 ifconfig vm1-eth0 10.10.10.10/24 up</div><div class="line">ip netns exec vm1 route add default gw 10.10.10.1</div><div class="line">ip netns exec vm1 ifconfig lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-1 vm2-eth0 tag=2000 -- set Interface vm2-eth0 type=internal</div><div class="line">ip link set vm2-eth0 netns vm2</div><div class="line">ip netns exec vm2 ifconfig vm2-eth0 192.168.16.10/24 up</div><div class="line">ip netns exec vm2 route add default gw 192.168.16.1</div><div class="line">ip netns exec vm2 ifconfig lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-2 dhcp1-tap tag=1000 -- set Interface dhcp1-tap type=internal</div><div class="line">ip link set dhcp1-tap netns dhcp1</div><div class="line">ip netns exec dhcp1 ifconfig dhcp1-tap 10.10.10.2/24 up</div><div class="line">ip netns exec dhcp1 ifconfig lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-2 dhcp2-tap tag=2000 -- set Interface dhcp2-tap type=internal</div><div class="line">ip link set dhcp2-tap netns dhcp2</div><div class="line">ip netns exec dhcp2 ifconfig dhcp2-tap 192.168.16.2/24 up</div><div class="line">ip netns exec dhcp2 ifconfig lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-2 router-tap1 tag=1000 -- set Interface router-tap1 type=internal</div><div class="line">ip link set router-tap1 netns router</div><div class="line">ip netns exec router ifconfig router-tap1 10.10.10.1/24 up</div><div class="line">ip netns exec router ifconfig lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-2 router-tap2 tag=2000 -- set Interface router-tap2 type=internal</div><div class="line">ip link set router-tap2 netns router</div><div class="line">ip netns exec router ifconfig router-tap2 192.168.16.1/24 up</div><div class="line">ip netns exec router ifconfig lo up</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-1 trunk_int1 trunks=1000,2000,206 -- set Interface trunk_int1 type=patch options:peer=trunk_sw1</div><div class="line">ovs-vsctl add-port sw trunk_sw1 trunks=1000,2000,206 -- set Interface trunk_sw1 type=patch options:peer=trunk_int1</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br-int-2 trunk_int2 trunks=1000,2000 -- set Interface trunk_int2 type=patch options:peer=trunk_sw2</div><div class="line">ovs-vsctl add-port sw trunk_sw2 trunks=1000,2000 -- set Interface trunk_sw2 type=patch options:peer=trunk_int2</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br-public router-qg tag=206 -- set Interface router-qg type=internal</div><div class="line">ip link set router-qg netns router</div><div class="line">ip netns exec router ifconfig router-qg 192.168.206.11/24 up</div><div class="line">ip netns exec router ifconfig lo up</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port sw provider-gw tag=206 -- set Interface provider-gw type=internal</div><div class="line">ip link set provider-gw netns gw</div><div class="line">ip netns exec gw ifconfig provider-gw 192.168.206.254/24 up</div><div class="line">ip netns exec gw ifconfig lo up</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br-public trunk_pub trunks=206 -- set Interface trunk_pub type=patch options:peer=trunk_sw3</div><div class="line">ovs-vsctl add-port sw trunk_sw3 trunks=206 -- set Interface trunk_sw3 type=patch options:peer=trunk_pub</div><div class="line"></div><div class="line"></div><div class="line">ifconfig br-public 192.168.206.10/24 up</div><div class="line">ip netns exec router route add default gw 192.168.206.254</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-br br-ex</div><div class="line">ovs-vsctl add-port br-ex ex-gw -- set Interface ex-gw type=internal</div><div class="line">ip link set ex-gw netns gw</div><div class="line">ip netns exec gw ifconfig ex-gw 10.30.10.100/24 up</div><div class="line">ip netns exec gw ifconfig lo up</div><div class="line">ip netns exec gw route add default gw 10.30.10.1</div><div class="line"></div><div class="line"></div><div class="line">ip netns exec gw iptables -t nat -A POSTROUTING -s 192.168.206.0/24 -o ex-gw -j MASQUERADE</div><div class="line"></div><div class="line">ovs-vsctl add-port br-ex enp0s8</div><div class="line">ip addr flush dev enp0s8</div><div class="line">ifconfig br-ex 10.30.10.145/24</div><div class="line">route add default gw 10.30.10.1</div><div class="line"></div><div class="line"></div><div class="line">ip netns exec router sysctl net.ipv4.ip_forward=1</div><div class="line">ip netns exec gw sysctl net.ipv4.ip_forward=1</div><div class="line"></div><div class="line">ip netns exec router iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -o router-qg -j MASQUERADE</div><div class="line">ip netns exec router iptables -t nat -A POSTROUTING -s 192.168.16.0/24 -o router-qg -j MASQUERADE</div></pre></td></tr></table></figure>
<h1 id="环境搭建完成后查看ovs"><a href="#环境搭建完成后查看ovs" class="headerlink" title="环境搭建完成后查看ovs"></a>环境搭建完成后查看ovs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl show</div><div class="line">73065536-d00b-440c-a02f-b8d33ef05ee1</div><div class="line">    Bridge &quot;br-int-1&quot;</div><div class="line">        Port &quot;br-int-1&quot;</div><div class="line">            Interface &quot;br-int-1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;vm2-eth0&quot;</div><div class="line">            tag: 2000</div><div class="line">            Interface &quot;vm2-eth0&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;trunk_int1&quot;</div><div class="line">            trunks: [206, 1000, 2000]</div><div class="line">            Interface &quot;trunk_int1&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;trunk_sw1&quot;&#125;</div><div class="line">        Port &quot;vm1-eth0&quot;</div><div class="line">            tag: 1000</div><div class="line">            Interface &quot;vm1-eth0&quot;</div><div class="line">                type: internal</div><div class="line">    Bridge br-public</div><div class="line">        Port trunk_pub</div><div class="line">            trunks: [206]</div><div class="line">            Interface trunk_pub</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;trunk_sw3&quot;&#125;</div><div class="line">        Port router-qg</div><div class="line">            tag: 206</div><div class="line">            Interface router-qg</div><div class="line">                type: internal</div><div class="line">        Port br-public</div><div class="line">            Interface br-public</div><div class="line">                type: internal</div><div class="line">    Bridge sw</div><div class="line">        Port &quot;trunk_sw3&quot;</div><div class="line">            trunks: [206]</div><div class="line">            Interface &quot;trunk_sw3&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=trunk_pub&#125;</div><div class="line">        Port provider-gw</div><div class="line">            tag: 206</div><div class="line">            Interface provider-gw</div><div class="line">                type: internal</div><div class="line">        Port &quot;trunk_sw2&quot;</div><div class="line">            trunks: [1000, 2000]</div><div class="line">            Interface &quot;trunk_sw2&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;trunk_int2&quot;&#125;</div><div class="line">        Port &quot;trunk_sw1&quot;</div><div class="line">            trunks: [206, 1000, 2000]</div><div class="line">            Interface &quot;trunk_sw1&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;trunk_int1&quot;&#125;</div><div class="line">        Port sw</div><div class="line">            Interface sw</div><div class="line">                type: internal</div><div class="line">    Bridge &quot;br-int-2&quot;</div><div class="line">        Port &quot;br-int-2&quot;</div><div class="line">            Interface &quot;br-int-2&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;dhcp1-tap&quot;</div><div class="line">            tag: 1000</div><div class="line">            Interface &quot;dhcp1-tap&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;router-tap1&quot;</div><div class="line">            tag: 1000</div><div class="line">            Interface &quot;router-tap1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;router-tap2&quot;</div><div class="line">            tag: 2000</div><div class="line">            Interface &quot;router-tap2&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;trunk_int2&quot;</div><div class="line">            trunks: [1000, 2000]</div><div class="line">            Interface &quot;trunk_int2&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;trunk_sw2&quot;&#125;</div><div class="line">        Port &quot;dhcp2-tap&quot;</div><div class="line">            tag: 2000</div><div class="line">            Interface &quot;dhcp2-tap&quot;</div><div class="line">                type: internal</div><div class="line">    Bridge br-ex</div><div class="line">        Port &quot;enp0s8&quot;</div><div class="line">            Interface &quot;enp0s8&quot;</div><div class="line">        Port ex-gw</div><div class="line">            Interface ex-gw</div><div class="line">                type: internal</div><div class="line">        Port br-ex</div><div class="line">            Interface br-ex</div><div class="line">                type: internal</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景环境&quot;&gt;&lt;a href=&quot;#背景环境&quot; class=&quot;headerlink&quot; title=&quot;背景环境&quot;&gt;&lt;/a&gt;背景环境&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/myimages/moni.png&quot; alt=&quot;moni.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="实验性质" scheme="http://vcpu.me/tags/%E5%AE%9E%E9%AA%8C%E6%80%A7%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title>ovs patch port 连接方法</title>
    <link href="http://vcpu.me/ovspatch/"/>
    <id>http://vcpu.me/ovspatch/</id>
    <published>2017-10-11T10:00:00.000Z</published>
    <updated>2017-10-11T03:21:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建patch-port连接ovs两个桥"><a href="#创建patch-port连接ovs两个桥" class="headerlink" title="创建patch port连接ovs两个桥"></a>创建patch port连接ovs两个桥</h1><p>patch port用于连接openvswitch桥</p>
<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">          patch-ovs-1       patch-ovs-2</div><div class="line"></div><div class="line">+-----------------+         +----------------------+</div><div class="line">|                 |         |                      |</div><div class="line">| br1             +----------+              br2    |</div><div class="line">|                 |         |                      |</div><div class="line">+-----------------+         +----------------------+</div><div class="line">       |                                 |</div><div class="line">       |                                 |</div><div class="line"> +-------------+                 +--------------+</div><div class="line"> |             |                 | ns2          |</div><div class="line"> | ns1         |                 |              |</div><div class="line"> |             |                 | 1.1.1.2/24   |</div><div class="line"> | 1.1.1.1/24  |                 | tap2         |</div><div class="line"> | tap1        |                 |              |</div><div class="line"> +-------------+                 +--------------+</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-br br2</div><div class="line"></div><div class="line">ovs-vsctl add-port br1 tap1 -- set Interface tap1 type=internal</div><div class="line">ovs-vsctl add-port br2 tap2 -- set Interface tap2 type=internal</div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line"></div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip link set tap2 netns ns2</div><div class="line"></div><div class="line">ip netns exec ns1 ip addr add 1.1.1.1/24 dev tap1  </div><div class="line">ip netns exec ns1 ip link set tap1 up  </div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line"></div><div class="line">ip netns exec ns2 ip addr add 1.1.1.2/24 dev tap2  </div><div class="line">ip netns exec ns2 ip link set tap2 up  </div><div class="line">ip netns exec ns2 ip link set lo up  </div><div class="line"></div><div class="line">ovs-vsctl add-port br1 patch-ovs-1 -- set Interface patch-ovs-1 type=patch options:peer=patch-ovs-2</div><div class="line"></div><div class="line">ovs-vsctl add-port br2 patch-ovs-2 -- set Interface patch-ovs-2 type=patch options:peer=patch-ovs-1</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip netns exec ns1 ping 1.1.1.2</div></pre></td></tr></table></figure>
<h1 id="实验配置查看"><a href="#实验配置查看" class="headerlink" title="实验配置查看"></a>实验配置查看</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-vsctl show</div><div class="line">0f92aaa0-5385-48f5-a54a-644e05652f59</div><div class="line">    Manager &quot;ptcp:6640:127.0.0.1&quot;</div><div class="line">        is_connected: true</div><div class="line">    Bridge &quot;br2&quot;</div><div class="line">        Port &quot;tap2&quot;</div><div class="line">            Interface &quot;tap2&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;patch-ovs-2&quot;</div><div class="line">            Interface &quot;patch-ovs-2&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;patch-ovs-1&quot;&#125;</div><div class="line">        Port &quot;br2&quot;</div><div class="line">            Interface &quot;br2&quot;</div><div class="line">                type: internal</div><div class="line">    Bridge &quot;br1&quot;</div><div class="line">        Port &quot;br1&quot;</div><div class="line">            Interface &quot;br1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;tap1&quot;</div><div class="line">            Interface &quot;tap1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;patch-ovs-1&quot;</div><div class="line">            Interface &quot;patch-ovs-1&quot;</div><div class="line">                type: patch</div><div class="line">                options: &#123;peer=&quot;patch-ovs-2&quot;&#125;</div></pre></td></tr></table></figure>
<h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>ns1 可以ping 通 ns2 ip</p>
<h1 id="重点解析"><a href="#重点解析" class="headerlink" title="重点解析"></a>重点解析</h1><p>两个ovs bridge间连接分别在两个桥上执行下面命令使用patch port互联<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port br1 patch-ovs-1 -- set Interface patch-ovs-1 type=patch options:peer=patch-ovs-2</div><div class="line"></div><div class="line">ovs-vsctl add-port br2 patch-ovs-2 -- set Interface patch-ovs-2 type=patch options:peer=patch-ovs-1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建patch-port连接ovs两个桥&quot;&gt;&lt;a href=&quot;#创建patch-port连接ovs两个桥&quot; class=&quot;headerlink&quot; title=&quot;创建patch port连接ovs两个桥&quot;&gt;&lt;/a&gt;创建patch port连接ovs两个桥&lt;/h1&gt;&lt;p&gt;patch port用于连接openvswitch桥&lt;/p&gt;
&lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;          patch-ovs-1       patch-ovs-2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-----------------+         +----------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                 |         |                      |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| br1             +----------+              br2    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                 |         |                      |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-----------------+         +----------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       |                                 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       |                                 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; +-------------+                 +--------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; |             |                 | ns2          |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; | ns1         |                 |              |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; |             |                 | 1.1.1.2/24   |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; | 1.1.1.1/24  |                 | tap2         |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; | tap1        |                 |              |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; +-------------+                 +--------------+&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="patch port" scheme="http://vcpu.me/tags/patch-port/"/>
    
  </entry>
  
  <entry>
    <title>linux arp机制解析</title>
    <link href="http://vcpu.me/linuxarp/"/>
    <id>http://vcpu.me/linuxarp/</id>
    <published>2017-10-01T10:00:00.000Z</published>
    <updated>2017-10-30T10:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-问题"><a href="#一-问题" class="headerlink" title="一.问题"></a>一.问题</h2><h3 id="1-使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；"><a href="#1-使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；" class="headerlink" title="1.使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；"></a>1.使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；</h3><h3 id="2-ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？"><a href="#2-ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？" class="headerlink" title="2.ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？"></a>2.ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？</h3><a id="more"></a>
<h2 id="二-解答问题前的说明"><a href="#二-解答问题前的说明" class="headerlink" title="二.解答问题前的说明"></a>二.解答问题前的说明</h2><p>ARP协议的规范只是阐述了地址解析的细节，然而并没有规定协议栈的实现如何去维护ARP缓存。ARP缓存需要有一个到期时间，这是必要的，因为ARP缓存并不维护映射的状态，也不进行认证，因此协议本身不能保证这种映射永远都是正确的，它只能保证该映射在得到arp应答之后的一定时间内是有效的。这也给了ARP欺骗以可乘之机，不过本文不讨论这种欺骗。<br> 像Cisco或者基于VRP的华为设备都有明确的配置来配置arp缓存的到期时间，然而Linux系统中却没有这样的配置，起码可以说没有这样的直接配置。Linux用户都知道如果需要配置什么系统行为，那么使用sysctl工具配置procfs下的sys接口是一个方法，然而当我们google了好久，终于发现关于ARP的配置处在/proc/sys/net/ipv4/neigh/ethX的时候，我们最终又迷茫于该目录下的N多文件，即使去查询Linux内核的Documents也不能清晰的明了这些文件的具体含义。对于Linux这样的成熟系统，一定有办法来配置ARP缓存的到期时间，但是具体到操作上，到底怎么配置呢？这还得从Linux实现的ARP状态机说起。<br> 如果你看过<strong><em>《Understading Linux Networking Internals》</em></strong>并且真的做到深入理解的话，那么本文讲的基本就是废话，但是很多人是没有看过那本书的，因此本文的内容还是有一定价值的。<br> Linux协议栈实现为ARP缓存维护了一个状态机，在理解具体的行为之前，先看一下下面的图(该图基于<strong><em>《Understading Linux Networking Internals》</em></strong>里面的图26-13修改，在第二十六章)：<br><img src="/myimages/arp1.png" alt="arp1"><br>在上图中，我们看到只有arp缓存项的reachable状态对于外发包是可用的，对于stale状态的arp缓存项而言，它实际上是不可用的。如果此时有人要发包，那么需要进行重新解析，对于常规的理解，重新解析意味着要重新发送arp请求，然后事实上却不一定这样，因为Linux为arp增加了一个“事件点”来“不用发送arp请求”而对arp协议生成的缓存维护的优化措施，事实上，这种措施十分有效。这就是arp的“确认”机制，也就是说，如果说从一个邻居主动发来一个数据包到本机，那么就可以确认该包的“上一跳”这个邻居是有效的，然而为何只有到达本机的包才能确认“上一跳”这个邻居的有效性呢？因为Linux并不想为IP层的处理增加负担，也即不想改变IP层的原始语义。<br> Linux维护一个stale状态其实就是为了保留一个neighbour结构体，在其状态改变时只是个别字段得到修改或者填充。如果按照简单的实现，只保存一个reachable状态即可，其到期则删除arp缓存表项。Linux的做法只是做了很多的优化，但是如果你为这些优化而绞尽脑汁，那就悲剧了…</p>
<h2 id="三-Linux如何来维护这个stale状态"><a href="#三-Linux如何来维护这个stale状态" class="headerlink" title="三.Linux如何来维护这个stale状态"></a>三.Linux如何来维护这个stale状态</h2><p>在Linux实现的ARP状态机中，最复杂的就是stale状态了，在此状态中的arp缓存表项面临着生死抉择，抉择者就是本地发出的包，如果本地发出的包使用了这个stale状态的arp缓存表项，那么就将状态机推进到delay状态，如果在“垃圾收集”定时器到期后还没有人使用该邻居，那么就有可能删除这个表项了，到底删除吗？这样看看有木有其它路径使用它，关键是看路由缓存，路由缓存虽然是一个第三层的概念，然而却保留了该路由的下一条的ARP缓存表项，这个意义上，Linux的路由缓存实则一个转发表而不是一个路由表。<br> 如果有外发包使用了这个表项，那么该表项的ARP状态机将进入delay状态，在delay状态中，只要有“本地”确认的到来(本地接收包的上一跳来自该邻居)，linux还是不会发送ARP请求的，但是如果一直都没有本地确认，那么Linux就将发送真正的ARP请求了，进入probe状态。因此可以看到，从stale状态开始，所有的状态只是为一种优化措施而存在的，stale状态的ARP缓存表项就是一个缓存的缓存，如果Linux只是将过期的reachable状态的arp缓存表项删除，语义是一样的，但是实现看起来以及理解起来会简单得多！<br> 再次强调，reachable过期进入stale状态而不是直接删除，是为了保留neighbour结构体，优化内存以及CPU利用，实际上进入stale状态的arp缓存表项时不可用的，要想使其可用，要么在delay状态定时器到期前本地给予了确认，比如tcp收到了一个包，要么delay状态到期进入probe状态后arp请求得到了回应。否则还是会被删除。</p>
<h2 id="四-Linux的ARP缓存实现要点"><a href="#四-Linux的ARP缓存实现要点" class="headerlink" title="四.Linux的ARP缓存实现要点"></a>四.Linux的ARP缓存实现要点</h2><p>在blog中分析源码是儿时的记忆了，现在不再浪费版面了。只要知道Linux在实现arp时维护的几个定时器的要点即可。<br>1.Reachable状态定时器<br>每当有arp回应到达或者其它能证明该ARP表项表示的邻居真的可达时，启动该定时器。到期时根据配置的时间将对应的ARP缓存表项转换到下一个状态。<br>2.垃圾回收定时器<br>定时启动该定时器，具体下一次什么到期，是根据配置的base_reachable_time来决定的，具体见下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">neigh_periodic_timer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (time_after(now, tbl-&gt;last_rand + <span class="number">300</span> * HZ)) &#123; <span class="comment">//内核每5分钟重新进行一次配置</span></div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">neigh_parms</span> *<span class="title">p</span>;</span></div><div class="line">        tbl-&gt;last_rand = now;</div><div class="line">        <span class="keyword">for</span> (p = &amp;tbl-&gt;parms; p; p = p-&gt;next)</div><div class="line">            p-&gt;reachable_time =</div><div class="line">                neigh_rand_reach_time(p-&gt;base_reachable_time);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"></div><div class="line">     <span class="comment">/* Cycle through all hash buckets every base_reachable_time/2 ticks.</span></div><div class="line">      * ARP entry timeouts range from 1/2 base_reachable_time to 3/2</div><div class="line">      * base_reachable_time.</div><div class="line">     */</div><div class="line">    expire = tbl-&gt;parms.base_reachable_time &gt;&gt; <span class="number">1</span>;</div><div class="line">    expire /= (tbl-&gt;hash_mask + <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (!expire)</div><div class="line">        expire = <span class="number">1</span>;</div><div class="line">    <span class="comment">//下次何时到期完全基于base_reachable_time);</span></div><div class="line">     mod_timer(&amp;tbl-&gt;gc_timer, now + expire);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦这个定时器到期，将执行neigh_periodic_timer回调函数，里面有以下的逻辑，也即上面的…省略的部分：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (atomic_read(&amp;n-&gt;refcnt) == <span class="number">1</span> &amp;&amp; <span class="comment">//n-&gt;used可能会因为“本地确认”机制而向前推进</span></div><div class="line">    (state == NUD_FAILED ||    time_after(now, n-&gt;used + n-&gt;parms-&gt;gc_staletime))) &#123;</div><div class="line">    *np = n-&gt;next;</div><div class="line">    n-&gt;dead = <span class="number">1</span>;</div><div class="line">    write_unlock(&amp;n-&gt;lock);</div><div class="line">    neigh_release(n);</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果在实验中，你的处于stale状态的表项没有被及时删除，那么试着执行一下下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip route flush cache</div></pre></td></tr></table></figure>
<p>然后再看看ip neigh ls all的结果，注意，不要指望马上会被删除，因为此时垃圾回收定时器还没有到期呢…但是我敢保证，不长的时间之后，该缓存表项将被删除。</p>
<h2 id="五-第一个问题的解决"><a href="#五-第一个问题的解决" class="headerlink" title="五.第一个问题的解决"></a>五.第一个问题的解决</h2><p>在启用keepalived进行基于vrrp热备份的群组上，很多同学认为根本不需要在进入master状态时重新绑定自己的MAC地址和虚拟IP地址，然而这是根本错误的，如果说没有出现什么问题，那也是侥幸，因为各个路由器上默认配置的arp超时时间一般很短，然而我们不能依赖这种配置。请看下面的图示：<br><img src="/myimages/arp2.png" alt="arp2"><br>如果发生了切换，假设路由器上的arp缓存超时时间为1小时，那么在将近一小时内，单向数据将无法通信(假设群组中的主机不会发送数据通过路由器，排出“本地确认”，毕竟我不知道路由器是不是在运行Linux)，路由器上的数据将持续不断的法往原来的master，然而原始的matser已经不再持有虚拟IP地址。<br> 因此，为了使得数据行为不再依赖路由器的配置，必须在vrrp协议下切换到master时手动绑定虚拟IP地址和自己的MAC地址，在Linux上使用方便的arping则是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arping -i ethX -S 1.1.1.1 -B -c 1</div></pre></td></tr></table></figure>
<p>这样一来，获得1.1.1.1这个IP地址的master主机将IP地址为255.255.255.255的ARP请求广播到全网，假设路由器运行Linux，则路由器接收到该ARP请求后将根据来源IP地址更新其本地的ARP缓存表项(如果有的话)，然而问题是，该表项更新的结果状态却是stale，这只是ARP的规定，具体在代码中体现是这样的，在arp_process函数的最后：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (arp-&gt;ar_op != htons(ARPOP_REPLY) || skb-&gt;pkt_type != PACKET_HOST)</div><div class="line">    state = NUD_STALE;</div><div class="line">neigh_update(n, sha, state, override ? NEIGH_UPDATE_F_OVERRIDE : <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>由此可见，只有实际的外发包的下一跳是1.1.1.1时，才会通过“本地确认”机制或者实际发送ARP请求的方式将对应的MAC地址映射reachable状态。</p>
<p>更正：在看了keepalived的源码之后，发现这个担心是多余的，毕竟keepalived已经很成熟了，不应该犯“如此低级的错误”，keepalived在某主机切换到master之后，会主动发送免费arp，在keepalived中有代码如是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">vrrp_send_update(vrrp_rt * vrrp, ip_address * ipaddress, <span class="keyword">int</span> idx)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *msg;</div><div class="line">    <span class="keyword">char</span> addr_str[<span class="number">41</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!IP_IS6(ipaddress)) &#123;</div><div class="line">        msg = <span class="string">"gratuitous ARPs"</span>;</div><div class="line">        inet_ntop(AF_INET, &amp;ipaddress-&gt;u.<span class="built_in">sin</span>.sin_addr, addr_str, <span class="number">41</span>);</div><div class="line">        send_gratuitous_arp(ipaddress);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        msg = <span class="string">"Unsolicited Neighbour Adverts"</span>;</div><div class="line">        inet_ntop(AF_INET6, &amp;ipaddress-&gt;u.sin6_addr, addr_str, <span class="number">41</span>);</div><div class="line">        ndisc_send_unsolicited_na(ipaddress);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == idx &amp;&amp; debug &amp; <span class="number">32</span>) &#123;</div><div class="line">        log_message(LOG_INFO, <span class="string">"VRRP_Instance(%s) Sending %s on %s for %s"</span>,</div><div class="line">                vrrp-&gt;iname, msg, IF_NAME(ipaddress-&gt;ifp), addr_str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六-第二个问题的解决"><a href="#六-第二个问题的解决" class="headerlink" title="六.第二个问题的解决"></a>六.第二个问题的解决</h2><p>扯了这么多，在Linux上到底怎么设置ARP缓存的老化时间呢？<br>我们看到/proc/sys/net/ipv4/neigh/ethX目录下面有多个文件，到底哪个是ARP缓存的老化时间呢？实际上，直接点说，就是base_reachable_time这个文件。其它的都只是优化行为的措施。比如gc_stale_time这个文件记录的是“ARP缓存表项的缓存”的存活时间，该时间只是一个缓存的缓存的存活时间，在该时间内，如果需要用到该邻居，那么直接使用表项记录的数据作为ARP请求的内容即可，或者得到“本地确认”后直接将其置为reachable状态，而不用再通过路由查找，ARP查找，ARP邻居创建，ARP邻居解析这种慢速的方式。<br> 默认情况下，reachable状态的超时时间是30秒，超过30秒，ARP缓存表项将改为stale状态，此时，你可以认为该表项已经老化到期了，只是Linux的实现中并没有将其删除罢了，再过了gc_stale_time时间，表项才被删除。在ARP缓存表项成为非reachable之后，垃圾回收器负责执行“再过了gc_stale_time时间，表项才被删除”这件事，这个定时器的下次到期时间是根据base_reachable_time计算出来的，具体就是在neigh_periodic_timer中：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (time_after(now, tbl-&gt;last_rand + <span class="number">300</span> * HZ)) &#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">neigh_parms</span> *<span class="title">p</span>;</span></div><div class="line">    tbl-&gt;last_rand = now;</div><div class="line">    <span class="keyword">for</span> (p = &amp;tbl-&gt;parms; p; p = p-&gt;next)</div><div class="line">        <span class="comment">//随计化很重要，防止“共振行为”引发的ARP解析风暴</span></div><div class="line">        p-&gt;reachable_time =　neigh_rand_reach_time(p-&gt;base_reachable_time);</div><div class="line">&#125;</div><div class="line">...</div><div class="line">expire = tbl-&gt;parms.base_reachable_time &gt;&gt; <span class="number">1</span>;</div><div class="line">expire /= (tbl-&gt;hash_mask + <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span> (!expire)</div><div class="line">    expire = <span class="number">1</span>;</div><div class="line">mod_timer(&amp;tbl-&gt;gc_timer, now + expire);</div></pre></td></tr></table></figure>
<p>可见一斑啊！适当地，我们可以通过看代码注释来理解这一点，好心人都会写上注释的。为了实验的条理清晰，我们设计以下两个场景：<br><strong>1.使用iptables禁止一切本地接收，从而屏蔽arp本地确认，使用sysctl将base_reachable_time设置为5秒，将gc_stale_time为5秒。<br>2.关闭iptables的禁止策略，使用TCP下载外部网络一个超大文件或者进行持续短连接，使用sysctl将base_reachable_time设置为5秒，将gc_stale_time为5秒。</strong><br>在两个场景下都使用ping命令来ping本地局域网的默认网关，然后迅速Ctrl-C掉这个ping，用ip neigh show all可以看到默认网关的arp表项，然而在场景1下，大约5秒之内，arp表项将变为stale之后不再改变，再ping的话，表项先变为delay再变为probe，然后为reachable，5秒之内再次成为stale.</p>
<p>而在场景2下，arp表项持续为reachable以及dealy，这说明了Linux中的ARP状态机。那么为何场景1中，当表项成为stale之后很久都不会被删除呢？其实这是因为还有路由缓存项在使用它，此时你删除路由缓存之后，arp表项很快被删除。</p>
<h2 id="七-总结"><a href="#七-总结" class="headerlink" title="七.总结"></a>七.总结</h2><p><strong>1.在Linux上如果你想设置你的ARP缓存老化时间，那么执行sysctl -w net.ipv4.neigh.ethX=Y即可，如果设置别的，只是影响了性能，在Linux中，ARP缓存老化以其变为stale状态为准，而不是以其表项被删除为准，stale状态只是对缓存又进行了缓存；<br>2.永远记住，在将一个IP地址更换到另一台本网段设备时，尽可能快地广播免费ARP，在Linux上可以使用arping来玩小技巧。</strong></p>
<h2 id="八-linux系统默认的ARP老化时间"><a href="#八-linux系统默认的ARP老化时间" class="headerlink" title="八.linux系统默认的ARP老化时间"></a>八.linux系统默认的ARP老化时间</h2><p>root@compute:~# cat /proc/sys/net/ipv4/neigh/enp0s3/gc_stale_time</p>
<p>60</p>
<p>root@compute:~# cat /proc/sys/net/ipv4/neigh/enp0s3/base_reachable_time</p>
<p>30</p>
<p>在没有有路由缓存和别人使用情况下，30 s 维持在reachable状态，然后变更称为STALE状态，再经过60 s 删除此表项。</p>
<p>如果处于STALE状态过期后，主机主动单播ARP确认是否延长表项时间。</p>
<h2 id="九-ARP机制实验验证"><a href="#九-ARP机制实验验证" class="headerlink" title="九.ARP机制实验验证"></a>九.ARP机制实验验证</h2><p>上述涩难懂的ARP机制讲解来自网络，具体博文由谁书写，已经难觅其源，在此引用下作为本博文基础部分，感谢作者奉献；笔者因ARP机制问题困扰了许久，因此下文从实验事实角度探究linux APR状态机的变化和网络连通性的关系，解惑罢了。</p>
<h3 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h3><hr>
<p><img src="/myimages/arp3.png" alt="arp3"></p>
<ul>
<li>两台ubuntu16.04 机器接入交换机二层互联</li>
<li>ubuntun 均安装arptables，用来控制arp流量</li>
<li>ubuntu使用iptables控制ip流量</li>
<li>通过ping和arping产生arp和ip流量</li>
</ul>
<h3 id="实验命令汇总"><a href="#实验命令汇总" class="headerlink" title="实验命令汇总"></a>实验命令汇总</h3><hr>
<ul>
<li>ping 10.30.10.141</li>
<li>arping 10.30.10.141</li>
<li>arptables -A INPUT -s 10.30.10.141 –opcode 1 -j DROP</li>
<li>arptables -D INPUT -s 10.30.10.141 –opcode 1 -j DROP</li>
<li>iptables -I INPUT 1 -s 10.30.10.141 -j DROP</li>
<li>iptables -D INPUT -s 10.30.10.141 -j DROP</li>
<li>cat /proc/sys/net/ipv4/neigh/enp0s3/base_reachable_time</li>
<li>cat /proc/sys/net/ipv4/neigh/enp0s3/gc_stale_time</li>
<li>echo 10 > /proc/sys/net/ipv4/neigh/enp0s3/base_reachable_time</li>
<li>echo 5 > /proc/sys/net/ipv4/neigh/enp0s3/gc_stale_time</li>
<li>watch -d -n 1 ip neigh show</li>
</ul>
<h3 id="实验情况1"><a href="#实验情况1" class="headerlink" title="实验情况1"></a>实验情况1</h3><p>主机B无主机A的ARP表项，主机A 一直arping主机B，查看主机B中主机A arp表项的变化情况</p>
<p>主机A arping 主机 B</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@controller:~<span class="comment"># arping 10.30.10.141 -I enp0s8</span></div><div class="line">ARPING <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> enp0s8</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">1.048</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">1.179</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">1.038</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">1.113</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">1.057</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">0.894</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">3.004</span>ms</div><div class="line">Unicast reply <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> [<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:B7]  <span class="number">0.833</span>ms</div></pre></td></tr></table></figure>
<p>主机B 长时间抓取ARP packet，发现主机B一直收到主机A ARP请求，主机B一直没有主动请求主机A 的ARP</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@compute:~<span class="comment"># tcpdump -i enp0s3 arp -ne  and host 10.30.10.145</span></div><div class="line">tcpdump: verbose output suppressed, use -v <span class="keyword">or</span> -vv <span class="keyword">for</span> full protocol decode</div><div class="line">listening on enp0s3, link-type EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">31.733125</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; ff:ff:ff:ff:ff:ff, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> (ff:ff:ff:ff:ff:ff) tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span>, length <span class="number">46</span></div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">31.733166</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, length <span class="number">28</span></div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">32.734890</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> (<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7) tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span>, length <span class="number">46</span></div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">32.734922</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, length <span class="number">28</span></div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">33.735815</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> (<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7) tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span>, length <span class="number">46</span></div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">33.735838</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, length <span class="number">28</span></div><div class="line"><span class="number">12</span>:<span class="number">12</span>:<span class="number">34.736497</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> (<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7) tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span>, length <span class="number">46</span></div></pre></td></tr></table></figure>
<p>主机B 查询 arp表 arp -n</p>
<p>10.30.10.145 ether 08:00:27:5f:1b:a9 C enp0s3</p>
<p>主机B 查询watch -d -n 1 ip neigh show</p>
<p>10.30.10.145 dev enp0s3 lladdr 08:00:27:5f:1b:a9 STALE</p>
<p><strong>结论：</strong></p>
<ul>
<li>主机B新增主机A的arp表项</li>
<li>主机B中ip neigh show显示主机A 新增表项且一直处于STALE状态</li>
<li>主机B在主机A一直请求ARP给主机B情况下，主机B就不会主动向主机A请求ARP了</li>
</ul>
<h3 id="实验情况2"><a href="#实验情况2" class="headerlink" title="实验情况2"></a>实验情况2</h3><p>主机A 持续ping 主机B，观察主机B ARP表项变化</p>
<p>主机A ping主机B</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller:~<span class="comment"># ping 10.30.10.141</span></div><div class="line">PING <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> (<span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.297</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.402</span> ms</div></pre></td></tr></table></figure>
<p>查看主机B配置时间</p>
<p>root@compute:~# cat /proc/sys/net/ipv4/neigh/enp0s3/gc_stale_time</p>
<p>5</p>
<p>root@compute:~# cat /proc/sys/net/ipv4/neigh/enp0s3/base_reachable_time</p>
<p>10</p>
<p>主机B抓取主动请求主机A的ARP，约每15s发一次</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@compute:~<span class="comment"># tcpdump -i enp0s3 arp -ne  and host 10.30.10.145</span></div><div class="line">tcpdump: verbose output suppressed, use -v <span class="keyword">or</span> -vv <span class="keyword">for</span> full protocol decode</div><div class="line">listening on enp0s3, link-type EN10MB (Ethernet), capture size <span class="number">262144</span> bytes</div><div class="line"></div><div class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">37.286996</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>, length <span class="number">28</span></div><div class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">37.287388</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, length <span class="number">46</span></div><div class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">53.673456</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>, length <span class="number">28</span></div><div class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">53.673875</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, length <span class="number">46</span></div><div class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">10.055035</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>, length <span class="number">28</span></div><div class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">10.055524</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, length <span class="number">46</span></div><div class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">26.439254</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>, length <span class="number">28</span></div><div class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">26.439720</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, length <span class="number">46</span></div><div class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">42.823208</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">42</span>: Request who-has <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> tell <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>, length <span class="number">28</span></div><div class="line"><span class="number">15</span>:<span class="number">04</span>:<span class="number">42.823664</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 &gt; <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">99</span>:<span class="number">81</span>:b7, ethertype ARP (<span class="number">0x0806</span>), length <span class="number">60</span>: Reply <span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> <span class="keyword">is</span>-at <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9, length <span class="number">46</span></div></pre></td></tr></table></figure>
<p>观察现象：主机B 10.30.10.145neigh表项，从建立reachable 10s后到STALE，然后过约5s后，重新变为reachable状态，且循环往复。STALE变为主机reachable状态时，主机B都会主动请求主机A ARP</p>
<p><strong>结论推演：</strong></p>
<ul>
<li>主机A ping 主机B 主机B学习到主机A ARP表项达到reachable状态，约base_reachable_time时间后，变为STALE状态</li>
<li>约gc_stale_time后主机B主动发ARP请求主机A，主机A确认后，表项状态重新回到reachable</li>
</ul>
<h3 id="实验情况3"><a href="#实验情况3" class="headerlink" title="实验情况3"></a>实验情况3</h3><p>主机A 持续ping 主机B，且在主机A禁止主机B的主动ARP请求（arptables -A INPUT -s 10.30.10.141 –opcode 1 -j DROP），观察主机B ARP表项变化</p>
<p><strong>主机A现象1</strong></p>
<p>主机A ping主机B，无法收到主机B的回复数据包，主机B 中 ARP状态从FAILD变更到INCOMPLETE 循环往复</p>
<p><strong>主机A现象2</strong></p>
<p>主机A ping 主机B，ping通约10个数据包后又不通，主机B中ARP状态从DELAY - PROB - FAILD</p>
<p><strong>结论推演：</strong></p>
<p>主机A ping 主机B 不通，因主机A限制主机B ARP请求，导致主机B无法获取到主机A的ARP，主机B无法回复icmp给主机A</p>
<p>主机A 能ping 通主机B，因主机A主的请求主机B 的ARP，使得主机B学习到主机A的ARP，主机B可正常回复主机A数据包，但是主机B收到主机A 主动请求ARP学习到的表项处于DELAY，因DELAY过期后主机B主动请求主机A ARP没有得到回复，因此</p>
<p>主机B中ARP状态从DELAY - PROB - FAILD ，表项最终失效后，主机A又无法ping通主机B了</p>
<h3 id="实验情况4"><a href="#实验情况4" class="headerlink" title="实验情况4"></a>实验情况4</h3><p>主机A 持续ping 主机B，且在主机A禁止主机B的主动ARP请求（arptables -A INPUT -s 10.30.10.141 –opcode 1 -j DROP），主机A 持续arping 主机B，观察主机B ARP表项变化以及连通情况</p>
<p><strong>现象描述：</strong></p>
<ol>
<li>主机A可以一直ping通主机B,没有出现任何丢包</li>
<li>主机B查看主机A 对应ARP表项 arp -n ARP表象一直存在</li>
<li>主机Aping主机B偶尔出现大的延迟</li>
<li>主机B ip neigh show 查看ARP学习状态，主机B学习的主机A表项，一直处于STALE->DELAY->PROBE->FAILED</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@controller:~<span class="comment"># ping 10.30.10.141</span></div><div class="line">PING <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span> (<span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">510</span> ttl=<span class="number">64</span> time=<span class="number">0.304</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">511</span> ttl=<span class="number">64</span> time=<span class="number">61.3</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">512</span> ttl=<span class="number">64</span> time=<span class="number">0.584</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">513</span> ttl=<span class="number">64</span> time=<span class="number">0.330</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">514</span> ttl=<span class="number">64</span> time=<span class="number">0.326</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">515</span> ttl=<span class="number">64</span> time=<span class="number">0.309</span> ms</div><div class="line"><span class="number">64</span> bytes <span class="keyword">from</span> <span class="number">10.30</span><span class="number">.10</span><span class="number">.141</span>: icmp_seq=<span class="number">516</span> ttl=<span class="number">64</span> time=<span class="number">0.317</span> ms</div></pre></td></tr></table></figure>
<p><strong>结论推演:</strong></p>
<p> 实验3和实验4差别在于，实验4的主机A会主动ARPping 主机B，因此主机B可以实时获取到主机A的MAC，因此其通讯是连通的ping服务不会出现丢包</p>
<p>但是主机B在ARP学习时候STALE->DELAY->PROBE->FAILED状态变化幅度较大，会出现回应主机A ping数据包不及时情况，这是ping延迟的根本原因</p>
<p><strong>额外结论：</strong></p>
<p> STALE->DELAY->PROBE->FAILED 主机B ARP表象状态从DELAY->PROBE会连续发送3个ARP单播请求，因为主机A不会回应所以状态可能直接刷新成FAILED；为什么说可能刷新？</p>
<p>因为主机A没有ARPING 主机B或则主动ARP请求主机B时候，主机B被动学习到主机A ARP表现也会导致ARP表项刷新，使主机B记录主机A ARP邻居状态直接落果FAILED状态重新回到STALE状态。</p>
<p><strong>附带发现：</strong></p>
<p> 主机B什么时候发ARP广播请求，什么时候发ARP单播请求？ </p>
<p> FAILED - > incomplete 状态时候发的是广播请求</p>
<p>10:51:54.106151 08:00:27:99:81:b7 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Request who-has 10.30.10.145 tell 10.30.10.141, length 28</p>
<p> DELAY -> PRPBE 状态时候发的是ARP单播请求</p>
<p>10:51:52.258761 08:00:27:99:81:b7 > 08:00:27:5f:1b:a9, ethertype ARP (0x0806), length 42: Request who-has 10.30.10.145 tell 10.30.10.141, length 28</p>
<p> 这其实也很好理解，FAILED - > incomplete属于重新开始状态，因此是广播；DELAY -> PRPBE 是属于已经知道主机A MAC但是要进行老化判断，因此发生ARP单播确认。</p>
<p><strong>感性的推演将来判别网络问题时使用：</strong></p>
<p> 如果主机B中主机A ip neigh show 邻居表处于reachable状态，或则总能及时回到reachable状态，主机B 向主机A的ARP通道时顺畅的（主机B发出的ARP请求主机A可以及时回复）</p>
<p> 如果主机B中主机A ip neigh show邻居表从未处于reachable状态，一直于STALE、PROBE、DELAY、FAILED切换，说明该主机B到主机A的ARP通道有问题（主机A无法回应主机B的ARP请求），主机B可以回应主机A的ARP请求触发被动更新</p>
<h3 id="实验情况5"><a href="#实验情况5" class="headerlink" title="实验情况5"></a>实验情况5</h3><p>主机A 中ARP表项绑定主机B的ARP(arp -s 10.30.10.141 08:00:27:99:81:b7)，主机B 中 ARP表项绑定主机A的ARP( arp -s 10.30.10.145 08:00:27:5f:1b:a9)，主机A ping 主机B，观察连通情况，并在主机B抓取数据包观察是否有ARP交互</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ip neigh show</div><div class="line"><span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span> dev enp0s3 lladdr <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9 PERMANENT</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arp -n</div><div class="line"><span class="number">10.30</span><span class="number">.10</span><span class="number">.145</span>             ether   <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">5</span>f:<span class="number">1</span>b:a9   CM                    enp0s3</div></pre></td></tr></table></figure>
<p><strong>现象描述：</strong></p>
<p>主机A可持续ping通主机B，在主机B上没有抓取到主机A和主机B ARP交互数据包</p>
<p><strong>结论推演：</strong></p>
<p><strong> 经过在主机B查看主机A ip neigh show得知，其ARP状态不在变化而是固定在</strong>PERMANENT状态，所以其不再进行ARP交互就很容易理解了，因为是静态永久地址，因此不需要主动学习。</p>
<p><strong>感性的推演将来判别网络问题时使用：</strong></p>
<p> 可以使用此种方法固定住ARP，排除主机学习ARP的问题，把网络问题聚焦在3层转发路由关系上，待3层转发网络问题解决后再行解决此问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-问题&quot;&gt;&lt;a href=&quot;#一-问题&quot; class=&quot;headerlink&quot; title=&quot;一.问题&quot;&gt;&lt;/a&gt;一.问题&lt;/h2&gt;&lt;h3 id=&quot;1-使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；&quot;&gt;&lt;a href=&quot;#1-使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；&quot; class=&quot;headerlink&quot; title=&quot;1.使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；&quot;&gt;&lt;/a&gt;1.使用keepalived进行热备份的系统需要一个虚拟的IP地址，然而该虚拟IP地址到底属于哪台机器是根据热备群的主备来决定的，因此主机器在获得该虚拟IP的时候，必须要广播一个免费的arp，起初人们认为这没有必要，理由是不这么做，热备群也工作的很好，然而事实证明，这是必须的；&lt;/h3&gt;&lt;h3 id=&quot;2-ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？&quot;&gt;&lt;a href=&quot;#2-ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？&quot; class=&quot;headerlink&quot; title=&quot;2.ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？&quot;&gt;&lt;/a&gt;2.ARP缓存表项都有一个老化时间，然而在linux系统中却没有给出具体如何来设置这个老化时间。那么到底怎么设置这个老化时间呢？&lt;/h3&gt;
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="arp机制实验验证" scheme="http://vcpu.me/tags/arp%E6%9C%BA%E5%88%B6%E5%AE%9E%E9%AA%8C%E9%AA%8C%E8%AF%81/"/>
    
      <category term="arp机制" scheme="http://vcpu.me/tags/arp%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>openstack DVR openvswitch流表分析</title>
    <link href="http://vcpu.me/4node-flowtable/"/>
    <id>http://vcpu.me/4node-flowtable/</id>
    <published>2017-09-04T10:00:00.000Z</published>
    <updated>2017-10-11T03:16:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openstack-DVR环境组网"><a href="#openstack-DVR环境组网" class="headerlink" title="openstack DVR环境组网"></a>openstack DVR环境组网</h1><p><img src="/myimages/4node-twoselfnetwork.png" alt="4node-twoselfnetwork"><br>如上图：</p>
<ul>
<li>2计算节点 + 1 网络节点 +1控制节点</li>
<li>DVR配置计算节点无floating ip</li>
<li>主要分析计算节点的ovs 流表策略</li>
<li>ubuntun 16.04 + openstack newton版本</li>
</ul>
<h1 id="计算节点compute的ovs流表"><a href="#计算节点compute的ovs流表" class="headerlink" title="计算节点compute的ovs流表"></a>计算节点compute的ovs流表</h1><p>在此安装环境下计算节点共有3个ovs bridge(br-ex,br-int,br-tun)</p>
<ul>
<li>br-ex:负责计算节点连接外网使用，需在dvr环境下配置floating ip vm数据流量才走此桥出外网</li>
<li>br-int:负责连接虚拟机所接入的linux bridge、router namespace</li>
<li>br-tun: 隧道所有的虚拟交换机，通过此隧道连接网络节点（dhcp、router、snat）、计算节点（虚拟机、router）；完成大二层的需求</li>
</ul>
<p>在对流表分析前，我们先了解网络拓扑，并获取接口和接口索引对应关系；</p>
<a id="more"></a>
<ul>
<li><p>查看compute br-int接口和接口索引映射关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-ofctl show br-int</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:00005278ead35849</div><div class="line">n_tables:254, n_buffers:256</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 1(patch-tun): addr:8e:c4:54:26:0f:46</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 2(qvo06ec6270-33): addr:0a:7f:a0:b5:1f:b8</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> 3(qr-6474fe2d-84): addr:00:00:00:00:0e:00</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 4(qvo2118dc24-92): addr:6e:1b:a5:df:d7:77</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> 5(int-br-ex): addr:aa:83:f4:ae:aa:41</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 6(qr-d2e6fcc5-c7): addr:00:00:00:00:0e:00</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(br-int): addr:52:78:ea:d3:58:49</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div><div class="line">root@compute:~#</div></pre></td></tr></table></figure>
</li>
<li><p>查看compute br-tun接口和接口索引映射关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-ofctl show br-tun</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:00005222d0a63e4f</div><div class="line">n_tables:254, n_buffers:256</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 1(patch-int): addr:ae:2b:47:4b:15:6a</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 2(vxlan-0a1e0aa0): addr:06:2d:8c:b2:d2:64</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 3(vxlan-0a1e0a9a): addr:4e:7d:65:8d:09:09</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(br-tun): addr:52:22:d0:a6:3e:4f</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div><div class="line">root@compute:~#</div></pre></td></tr></table></figure>
</li>
</ul>
<p>接口对应关系已经标注在openvswitch DVR环境组网图上，见上图</p>
<h1 id="分析-br-int流表"><a href="#分析-br-int流表" class="headerlink" title="分析 br-int流表"></a>分析 br-int流表</h1><h2 id="分析结果如图："><a href="#分析结果如图：" class="headerlink" title="分析结果如图："></a>分析结果如图：</h2><p><img src="/myimages/br-int-flow-table.png" alt="br-int-flow-table"></p>
<h2 id="步骤解析如下："><a href="#步骤解析如下：" class="headerlink" title="步骤解析如下："></a>步骤解析如下：</h2><h3 id="icmp6-协议交给table24处理"><a href="#icmp6-协议交给table24处理" class="headerlink" title="icmp6 协议交给table24处理"></a>icmp6 协议交给table24处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-ofctl dump-flows br-int</div><div class="line">NXST_FLOW reply (xid=0x4):</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2944.223s, table=0, n_packets=0, n_bytes=0, idle_age=2944, priority=10,icmp6,in_port=2,icmp_type=136 actions=resubmit(,24)</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2938.510s, table=0, n_packets=0, n_bytes=0, idle_age=2938, priority=10,icmp6,in_port=4,icmp_type=136 actions=resubmit(,24)</div></pre></td></tr></table></figure>
<h3 id="2和4接口arp交给24表格处理"><a href="#2和4接口arp交给24表格处理" class="headerlink" title="2和4接口arp交给24表格处理"></a>2和4接口arp交给24表格处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2944.215s, table=0, n_packets=15, n_bytes=630, idle_age=547, priority=10,arp,in_port=2 actions=resubmit(,24)</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2938.505s, table=0, n_packets=10, n_bytes=420, idle_age=6, priority=10,arp,in_port=4 actions=resubmit(,24)</div></pre></td></tr></table></figure>
<h3 id="5接口流入的数据包全部丢弃"><a href="#5接口流入的数据包全部丢弃" class="headerlink" title="5接口流入的数据包全部丢弃"></a>5接口流入的数据包全部丢弃</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2968.234s, table=0, n_packets=4699, n_bytes=1348102, idle_age=1, priority=2,in_port=5 actions=drop</div></pre></td></tr></table></figure>
<h3 id="2和4口其它协议数据包统统交给25表格处理"><a href="#2和4口其它协议数据包统统交给25表格处理" class="headerlink" title="2和4口其它协议数据包统统交给25表格处理"></a>2和4口其它协议数据包统统交给25表格处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2944.232s, table=0, n_packets=927, n_bytes=106878, idle_age=1, priority=9,in_port=2 actions=resubmit(,25)</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2938.520s, table=0, n_packets=1022, n_bytes=126940, idle_age=1, priority=9,in_port=4 actions=resubmit(,25)</div></pre></td></tr></table></figure>
<h3 id="其它数据包像正常交换机数据一样转发数据"><a href="#其它数据包像正常交换机数据一样转发数据" class="headerlink" title="其它数据包像正常交换机数据一样转发数据"></a>其它数据包像正常交换机数据一样转发数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2968.576s, table=0, n_packets=2332, n_bytes=240272, idle_age=1, priority=0 actions=NORMAL</div></pre></td></tr></table></figure>
<h3 id="23表格默认全部丢弃数据包"><a href="#23表格默认全部丢弃数据包" class="headerlink" title="23表格默认全部丢弃数据包"></a>23表格默认全部丢弃数据包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2968.580s, table=23, n_packets=0, n_bytes=0, idle_age=2968, priority=0 actions=drop</div></pre></td></tr></table></figure>
<h3 id="表24-处理ipv6-nd"><a href="#表24-处理ipv6-nd" class="headerlink" title="表24 处理ipv6 nd"></a>表24 处理ipv6 nd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2944.226s, table=24, n_packets=0, n_bytes=0, idle_age=2944, priority=2,icmp6,in_port=2,icmp_type=136,nd_target=fe80::f816:3eff:fef3:31f5 actions=NORMAL</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2938.513s, table=24, n_packets=0, n_bytes=0, idle_age=2938, priority=2,icmp6,in_port=4,icmp_type=136,nd_target=fe80::f816:3eff:fe3c:d256 actions=NORMAL</div></pre></td></tr></table></figure>
<h3 id="表24-接口2或4-收到-172-16-1-3-1-1-1-11-的arp信息交给表25处理"><a href="#表24-接口2或4-收到-172-16-1-3-1-1-1-11-的arp信息交给表25处理" class="headerlink" title="表24 接口2或4 收到 172.16.1.3 1.1.1.11 的arp信息交给表25处理"></a>表24 接口2或4 收到 172.16.1.3 1.1.1.11 的arp信息交给表25处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2944.219s, table=24, n_packets=15, n_bytes=630, idle_age=547, priority=2,arp,in_port=2,arp_spa=172.16.1.3 actions=resubmit(,25)</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2938.507s, table=24, n_packets=10, n_bytes=420, idle_age=6, priority=2,arp,in_port=4,arp_spa=1.1.1.11 actions=resubmit(,25)</div></pre></td></tr></table></figure>
<h3 id="表24-如果上述未处理完成，将剩余数据包丢去"><a href="#表24-如果上述未处理完成，将剩余数据包丢去" class="headerlink" title="表24 如果上述未处理完成，将剩余数据包丢去"></a>表24 如果上述未处理完成，将剩余数据包丢去</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2968.573s, table=24, n_packets=0, n_bytes=0, idle_age=2968, priority=0 actions=drop</div></pre></td></tr></table></figure>
<h3 id="表25-接口2或则4-源mac是fa-16-3e-f3-31-f5-fa-16-3e-3c-d2-56-的来的数据包正常处理"><a href="#表25-接口2或则4-源mac是fa-16-3e-f3-31-f5-fa-16-3e-3c-d2-56-的来的数据包正常处理" class="headerlink" title="表25 接口2或则4 源mac是fa:16:3e:f3:31:f5 fa:16:3e:3c:d2:56  的来的数据包正常处理"></a>表25 接口2或则4 源mac是fa:16:3e:f3:31:f5 fa:16:3e:3c:d2:56  的来的数据包正常处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xbc602bf73a053ff8, duration=2944.242s, table=25, n_packets=926, n_bytes=106092, idle_age=1, priority=2,in_port=2,dl_src=fa:16:3e:f3:31:f5 actions=NORMAL</div><div class="line">cookie=0xbc602bf73a053ff8, duration=2938.524s, table=25, n_packets=1016, n_bytes=125944, idle_age=1, priority=2,in_port=4,dl_src=fa:16:3e:3c:d2:56 actions=NORMAL</div></pre></td></tr></table></figure>
<h1 id="分析-br-tun流表"><a href="#分析-br-tun流表" class="headerlink" title="分析 br-tun流表"></a>分析 br-tun流表</h1><h2 id="分析结果如图：-1"><a href="#分析结果如图：-1" class="headerlink" title="分析结果如图："></a>分析结果如图：</h2><p><img src="/myimages/br-tun-flowtabble.png" alt="br-tun-flowtabble"></p>
<h2 id="步骤解析如下：-1"><a href="#步骤解析如下：-1" class="headerlink" title="步骤解析如下："></a>步骤解析如下：</h2><h3 id="内网接口-交给table2处理"><a href="#内网接口-交给table2处理" class="headerlink" title="内网接口 交给table2处理"></a>内网接口 交给table2处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-ofctl dump-flows br-tun</div><div class="line">NXST_FLOW reply (xid=0x4):</div><div class="line"> cookie=0xb9ef2c735af9d49c, duration=2988.059s, table=0, n_packets=299, n_bytes=30921, idle_age=208, priority=1,in_port=1 actions=resubmit(,2)</div></pre></td></tr></table></figure>
<h3 id="外网接口交给table4处理"><a href="#外网接口交给table4处理" class="headerlink" title="外网接口交给table4处理"></a>外网接口交给table4处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2963.688s, table=0, n_packets=154, n_bytes=12924, idle_age=208, priority=1,in_port=2 actions=resubmit(,4)</div><div class="line">cookie=0xb9ef2c735af9d49c, duration=2963.630s, table=0, n_packets=200, n_bytes=19684, idle_age=210, priority=1,in_port=3 actions=resubmit(,4)</div></pre></td></tr></table></figure>
<p>其它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2988.034s, table=0, n_packets=0, n_bytes=0, idle_age=2988, priority=0 actions=drop</div></pre></td></tr></table></figure></p>
<h3 id="单播交给表20处理"><a href="#单播交给表20处理" class="headerlink" title="单播交给表20处理"></a>单播交给表20处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2988.027s, table=2, n_packets=209, n_bytes=20555, idle_age=208, priority=0,dl_dst=00:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,20)</div></pre></td></tr></table></figure>
<h3 id="多播交给表22处理"><a href="#多播交给表22处理" class="headerlink" title="多播交给表22处理"></a>多播交给表22处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2988.009s, table=2, n_packets=90, n_bytes=10366, idle_age=210, priority=0,dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,22)</div></pre></td></tr></table></figure>
<p>其它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2988.006s, table=3, n_packets=0, n_bytes=0, idle_age=2988, priority=0 actions=drop</div></pre></td></tr></table></figure></p>
<h3 id="从外网过来的数据包，去除tunid添加对应的vlanid后将数据包交给table10处理"><a href="#从外网过来的数据包，去除tunid添加对应的vlanid后将数据包交给table10处理" class="headerlink" title="从外网过来的数据包，去除tunid添加对应的vlanid后将数据包交给table10处理"></a>从外网过来的数据包，去除tunid添加对应的vlanid后将数据包交给table10处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2975.899s, table=4, n_packets=206, n_bytes=19127, idle_age=208, priority=1,tun_id=0x44 actions=mod_vlan_vid:1,resubmit(,10)</div><div class="line">cookie=0xb9ef2c735af9d49c, duration=2963.083s, table=4, n_packets=148, n_bytes=13481, idle_age=208, priority=1,tun_id=0x5b actions=mod_vlan_vid:2,resubmit(,10)</div></pre></td></tr></table></figure>
<p>其它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2988.005s, table=4, n_packets=0, n_bytes=0, idle_age=2988, priority=0 actions=drop</div><div class="line">cookie=0xb9ef2c735af9d49c, duration=2987.998s, table=6, n_packets=0, n_bytes=0, idle_age=2987, priority=0 actions=drop</div></pre></td></tr></table></figure></p>
<h3 id="学习mac等相关信息，将信息放到表20，将数据包从pach-int发出交给内网处理"><a href="#学习mac等相关信息，将信息放到表20，将数据包从pach-int发出交给内网处理" class="headerlink" title="学习mac等相关信息，将信息放到表20，将数据包从pach-int发出交给内网处理"></a>学习mac等相关信息，将信息放到表20，将数据包从pach-int发出交给内网处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2987.994s, table=10, n_packets=354, n_bytes=32608, idle_age=208, priority=1 actions=learn(table=20,hard_timeout=300,priority=1,cookie=0xb9ef2c735af9d49c,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:0-&gt;NXM_OF_VLAN_TCI[],load:NXM_NX_TUN_ID[]-&gt;NXM_NX_TUN_ID[],output:OXM_OF_IN_PORT[]),output:1</div></pre></td></tr></table></figure>
<h3 id="发往目的mac为fa-16-3e-3e-69-70-tag为1-（ip为172-16-1-9虚拟机数据包）被去除vlan-加上tunid，交给compute1-连接的隧道接口"><a href="#发往目的mac为fa-16-3e-3e-69-70-tag为1-（ip为172-16-1-9虚拟机数据包）被去除vlan-加上tunid，交给compute1-连接的隧道接口" class="headerlink" title="发往目的mac为fa:16:3e:3e:69:70 tag为1 （ip为172.16.1.9虚拟机数据包）被去除vlan 加上tunid，交给compute1 连接的隧道接口"></a>发往目的mac为fa:16:3e:3e:69:70 tag为1 （ip为172.16.1.9虚拟机数据包）被去除vlan 加上tunid，交给compute1 连接的隧道接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2949.737s, table=20, n_packets=66, n_bytes=6977, idle_age=2871, priority=2,dl_vlan=1,dl_dst=fa:16:3e:3e:69:70 actions=strip_vlan,load:0x44-&gt;NXM_NX_TUN_ID[],output:3</div></pre></td></tr></table></figure>
<h3 id="发给172-16-1-2-dhcp-服务namespace数据包去除vlan后通过隧道交给网络节点"><a href="#发给172-16-1-2-dhcp-服务namespace数据包去除vlan后通过隧道交给网络节点" class="headerlink" title="发给172.16.1.2 dhcp 服务namespace数据包去除vlan后通过隧道交给网络节点"></a>发给172.16.1.2 dhcp 服务namespace数据包去除vlan后通过隧道交给网络节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2937.625s, table=20, n_packets=1, n_bytes=42, idle_age=2886, priority=2,dl_vlan=1,dl_dst=fa:16:3e:cb:c0:9e actions=strip_vlan,load:0x44-&gt;NXM_NX_TUN_ID[],output:2</div></pre></td></tr></table></figure>
<h3 id="发给1-1-1-2-dhcp-服务namespace数据包去除vlan后通过隧道交给网络节点"><a href="#发给1-1-1-2-dhcp-服务namespace数据包去除vlan后通过隧道交给网络节点" class="headerlink" title="发给1.1.1.2 dhcp 服务namespace数据包去除vlan后通过隧道交给网络节点"></a>发给1.1.1.2 dhcp 服务namespace数据包去除vlan后通过隧道交给网络节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2937.136s, table=20, n_packets=1, n_bytes=42, idle_age=2879, priority=2,dl_vlan=2,dl_dst=fa:16:3e:b0:bd:78 actions=strip_vlan,load:0x5b-&gt;NXM_NX_TUN_ID[],output:2</div></pre></td></tr></table></figure>
<h3 id="发给1-1-1-12的snat中网关数据包去除vlan后通过隧道交给网络节点"><a href="#发给1-1-1-12的snat中网关数据包去除vlan后通过隧道交给网络节点" class="headerlink" title="发给1.1.1.12的snat中网关数据包去除vlan后通过隧道交给网络节点"></a>发给1.1.1.12的snat中网关数据包去除vlan后通过隧道交给网络节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2926.229s, table=20, n_packets=0, n_bytes=0, idle_age=2958, priority=2,dl_vlan=2,dl_dst=fa:16:3e:6c:ab:eb actions=strip_vlan,load:0x5b-&gt;NXM_NX_TUN_ID[],output:2</div></pre></td></tr></table></figure>
<h3 id="发往172-16-1-4的snat中网关数据包去除vlan后通过隧道交给网络节点"><a href="#发往172-16-1-4的snat中网关数据包去除vlan后通过隧道交给网络节点" class="headerlink" title="发往172.16.1.4的snat中网关数据包去除vlan后通过隧道交给网络节点"></a>发往172.16.1.4的snat中网关数据包去除vlan后通过隧道交给网络节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2898.976s, table=20, n_packets=1, n_bytes=42, idle_age=2889, priority=2,dl_vlan=1,dl_dst=fa:16:3e:6b:31:95 actions=strip_vlan,load:0x44-&gt;NXM_NX_TUN_ID[],output:2</div></pre></td></tr></table></figure>
<ul>
<li><p>学习到的表项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=210.599s, table=20, n_packets=2, n_bytes=196, hard_timeout=300, idle_age=209, hard_age=208, priority=1,vlan_tci=0x0002/0x0fff,dl_dst=fa:16:3e:1f:95:2c actions=load:0-&gt;NXM_OF_VLAN_TCI[],load:0x5b-&gt;NXM_NX_TUN_ID[],output:2</div><div class="line">cookie=0xb9ef2c735af9d49c, duration=210.597s, table=20, n_packets=2, n_bytes=264, hard_timeout=300, idle_age=208, hard_age=208, priority=1,vlan_tci=0x0001/0x0fff,dl_dst=fa:16:3e:2c:c3:0d actions=load:0-&gt;NXM_OF_VLAN_TCI[],load:0x44-&gt;NXM_NX_TUN_ID[],output:2</div></pre></td></tr></table></figure>
</li>
<li><p>未命中表20其它策略，统统交给流表22处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2987.986s, table=20, n_packets=5, n_bytes=418, idle_age=210, priority=0 actions=resubmit(,22)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="表22去除vlan-附加上tunid将数据包从隧道发出"><a href="#表22去除vlan-附加上tunid将数据包从隧道发出" class="headerlink" title="表22去除vlan 附加上tunid将数据包从隧道发出"></a>表22去除vlan 附加上tunid将数据包从隧道发出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2926.237s, table=22, n_packets=18, n_bytes=2034, idle_age=210, priority=1,dl_vlan=2 actions=strip_vlan,load:0x5b-&gt;NXM_NX_TUN_ID[],output:2,output:3</div><div class="line">cookie=0xb9ef2c735af9d49c, duration=2898.979s, table=22, n_packets=23, n_bytes=2374, idle_age=568, priority=1,dl_vlan=1 actions=strip_vlan,load:0x44-&gt;NXM_NX_TUN_ID[],output:2,output:3</div></pre></td></tr></table></figure>
<p>表22其它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0xb9ef2c735af9d49c, duration=2987.979s, table=22, n_packets=54, n_bytes=6376, idle_age=2959, priority=0 actions=drop</div></pre></td></tr></table></figure></p>
<h1 id="分析br-ex流表"><a href="#分析br-ex流表" class="headerlink" title="分析br-ex流表"></a>分析br-ex流表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-ofctl dump-flows br-ex</div><div class="line">NXST_FLOW reply (xid=0x4):</div><div class="line"> cookie=0x92b626c066ab8e9d, duration=13306.841s, table=0, n_packets=224, n_bytes=20652, idle_age=1596, priority=2,in_port=2 actions=drop</div><div class="line"> cookie=0x92b626c066ab8e9d, duration=13306.862s, table=0, n_packets=277292, n_bytes=89976779, idle_age=0, priority=0 actions=NORMAL</div></pre></td></tr></table></figure>
<p>如上流表：默认2三层转发策略，且丢弃从外网收到的数据包</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;openstack-DVR环境组网&quot;&gt;&lt;a href=&quot;#openstack-DVR环境组网&quot; class=&quot;headerlink&quot; title=&quot;openstack DVR环境组网&quot;&gt;&lt;/a&gt;openstack DVR环境组网&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/myimages/4node-twoselfnetwork.png&quot; alt=&quot;4node-twoselfnetwork&quot;&gt;&lt;br&gt;如上图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2计算节点 + 1 网络节点 +1控制节点&lt;/li&gt;
&lt;li&gt;DVR配置计算节点无floating ip&lt;/li&gt;
&lt;li&gt;主要分析计算节点的ovs 流表策略&lt;/li&gt;
&lt;li&gt;ubuntun 16.04 + openstack newton版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;计算节点compute的ovs流表&quot;&gt;&lt;a href=&quot;#计算节点compute的ovs流表&quot; class=&quot;headerlink&quot; title=&quot;计算节点compute的ovs流表&quot;&gt;&lt;/a&gt;计算节点compute的ovs流表&lt;/h1&gt;&lt;p&gt;在此安装环境下计算节点共有3个ovs bridge(br-ex,br-int,br-tun)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;br-ex:负责计算节点连接外网使用，需在dvr环境下配置floating ip vm数据流量才走此桥出外网&lt;/li&gt;
&lt;li&gt;br-int:负责连接虚拟机所接入的linux bridge、router namespace&lt;/li&gt;
&lt;li&gt;br-tun: 隧道所有的虚拟交换机，通过此隧道连接网络节点（dhcp、router、snat）、计算节点（虚拟机、router）；完成大二层的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在对流表分析前，我们先了解网络拓扑，并获取接口和接口索引对应关系；&lt;/p&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="DVR" scheme="http://vcpu.me/tags/DVR/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="控制节点、网络节点、2个计算节点" scheme="http://vcpu.me/tags/%E6%8E%A7%E5%88%B6%E8%8A%82%E7%82%B9%E3%80%81%E7%BD%91%E7%BB%9C%E8%8A%82%E7%82%B9%E3%80%812%E4%B8%AA%E8%AE%A1%E7%AE%97%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>openstack多种组网环境下组网信息记录和插件组成</title>
    <link href="http://vcpu.me/openstackenv/"/>
    <id>http://vcpu.me/openstackenv/</id>
    <published>2017-08-30T10:00:00.000Z</published>
    <updated>2017-10-11T03:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文章简要介绍"><a href="#本文章简要介绍" class="headerlink" title="本文章简要介绍"></a>本文章简要介绍</h1><p>本文章旨在以图形方式记录已经搭建的实验环境中网络组成。都是实践结果并没有过多的理论解释，通过图形勾画出newton组网。<br>实验环境包含如下：</p>
<ul>
<li>两个服务器节点搭建openstack 环境<br>一个服务器安装controller和network节点；一个服务器安装计算节点</li>
<li>三个服务器节点搭建的openstack环境<br>一个服务器安装controller、一个服务器安装network、一个服务器安装计算节点</li>
<li>四个服务器节点搭建的openstack环境<br>一个服务器安装controller、一个服务器安装network、另外两台服务器分别安装计算节点<a id="more"></a>
</li>
</ul>
<h1 id="两个服务器节点搭建openstack-环境"><a href="#两个服务器节点搭建openstack-环境" class="headerlink" title="两个服务器节点搭建openstack 环境"></a>两个服务器节点搭建openstack 环境</h1><h2 id="openstack官方安装环境，未采用openvswitch的组网"><a href="#openstack官方安装环境，未采用openvswitch的组网" class="headerlink" title="openstack官方安装环境，未采用openvswitch的组网"></a>openstack官方安装环境，未采用openvswitch的组网</h2><p><img src="/myimages/self_service.png" alt="self_service"></p>
<h2 id="替换linuxbridge为openvswitch后的组网"><a href="#替换linuxbridge为openvswitch后的组网" class="headerlink" title="替换linuxbridge为openvswitch后的组网"></a>替换linuxbridge为openvswitch后的组网</h2><p><img src="/myimages/ovs-openstack.png" alt="ovs-openstack"></p>
<h1 id="三个服务器节点搭建openstack环境"><a href="#三个服务器节点搭建openstack环境" class="headerlink" title="三个服务器节点搭建openstack环境"></a>三个服务器节点搭建openstack环境</h1><h2 id="未采用ovs，按照官方环境分离安装的组网和组件关系合图"><a href="#未采用ovs，按照官方环境分离安装的组网和组件关系合图" class="headerlink" title="未采用ovs，按照官方环境分离安装的组网和组件关系合图"></a>未采用ovs，按照官方环境分离安装的组网和组件关系合图</h2><p><img src="/myimages/3node.png" alt="3node.png"></p>
<h2 id="采用ovs-组网信息图和组件合图"><a href="#采用ovs-组网信息图和组件合图" class="headerlink" title="采用ovs,组网信息图和组件合图"></a>采用ovs,组网信息图和组件合图</h2><p><img src="/myimages/3node-openvswitch.png" alt="3node-openvswitch.png"></p>
<h2 id="采用ovs，DVR情况下组件关系图"><a href="#采用ovs，DVR情况下组件关系图" class="headerlink" title="采用ovs，DVR情况下组件关系图"></a>采用ovs，DVR情况下组件关系图</h2><p><img src="/myimages/3node-openvswitch-dvr.png" alt="3node-openvswitch-dvr.png"></p>
<h1 id="四个服务器节点搭建的openstack环境"><a href="#四个服务器节点搭建的openstack环境" class="headerlink" title="四个服务器节点搭建的openstack环境"></a>四个服务器节点搭建的openstack环境</h1><h2 id="采用ovs，两个计算节点组网图"><a href="#采用ovs，两个计算节点组网图" class="headerlink" title="采用ovs，两个计算节点组网图"></a>采用ovs，两个计算节点组网图</h2><p><img src="/myimages/4node-openvswitch-or.png" alt="4node-openvswitch-or"></p>
<h2 id="采用ovs，DVR环境东西流量走向图"><a href="#采用ovs，DVR环境东西流量走向图" class="headerlink" title="采用ovs，DVR环境东西流量走向图"></a>采用ovs，DVR环境东西流量走向图</h2><p><img src="/myimages/4node-dvr-ew-ping.png" alt="4node-dvr-ew-ping"></p>
<h2 id="采用ovs，DVR环境无folating-ip上外网流量走向图"><a href="#采用ovs，DVR环境无folating-ip上外网流量走向图" class="headerlink" title="采用ovs，DVR环境无folating ip上外网流量走向图"></a>采用ovs，DVR环境无folating ip上外网流量走向图</h2><p><img src="/myimages/4node-dvr-nofloatingip-ping8.8.8.8.png" alt="4node-dvr-nofloatingip-ping8.8.8.8"></p>
<h2 id="采用ovs，DVR环境含有floating-ip上外网流量走向图"><a href="#采用ovs，DVR环境含有floating-ip上外网流量走向图" class="headerlink" title="采用ovs，DVR环境含有floating ip上外网流量走向图"></a>采用ovs，DVR环境含有floating ip上外网流量走向图</h2><p><img src="/myimages/4node-dvr-floatingip-sn.png" alt="4node-dvr-floatingip-sn"></p>
<h2 id="采用ovs-DVR环境不同子网东西流量相互ping流量走向图"><a href="#采用ovs-DVR环境不同子网东西流量相互ping流量走向图" class="headerlink" title="采用ovs,DVR环境不同子网东西流量相互ping流量走向图"></a>采用ovs,DVR环境不同子网东西流量相互ping流量走向图</h2><p><img src="/myimages/4node-two-selfnetwork.png" alt="4node-two-selfnetwork"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本文章简要介绍&quot;&gt;&lt;a href=&quot;#本文章简要介绍&quot; class=&quot;headerlink&quot; title=&quot;本文章简要介绍&quot;&gt;&lt;/a&gt;本文章简要介绍&lt;/h1&gt;&lt;p&gt;本文章旨在以图形方式记录已经搭建的实验环境中网络组成。都是实践结果并没有过多的理论解释，通过图形勾画出newton组网。&lt;br&gt;实验环境包含如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个服务器节点搭建openstack 环境&lt;br&gt;一个服务器安装controller和network节点；一个服务器安装计算节点&lt;/li&gt;
&lt;li&gt;三个服务器节点搭建的openstack环境&lt;br&gt;一个服务器安装controller、一个服务器安装network、一个服务器安装计算节点&lt;/li&gt;
&lt;li&gt;四个服务器节点搭建的openstack环境&lt;br&gt;一个服务器安装controller、一个服务器安装network、另外两台服务器分别安装计算节点
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="newton" scheme="http://vcpu.me/tags/newton/"/>
    
  </entry>
  
  <entry>
    <title>metadata</title>
    <link href="http://vcpu.me/metadata/"/>
    <id>http://vcpu.me/metadata/</id>
    <published>2017-08-24T10:00:00.000Z</published>
    <updated>2017-08-25T07:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="metadata基本概念"><a href="#metadata基本概念" class="headerlink" title="metadata基本概念"></a>metadata基本概念</h1><p>在创建虚拟机的时候，用户往往需要对虚拟机进行一些配置，比如：开启一些服务、安装某些包、添加 SSH 秘钥、配置 hostname 等等。</p>
<p>在 OpenStack 中，这些配置信息被分成两类：metadata 和 user data。</p>
<ul>
<li><p>Metadata 主要包括虚拟机自身的一些常用属性，如 hostname、网络配置信息、SSH 登陆秘钥等，主要的形式为键值对。而 user data 主要包括一些命令、脚本等。</p>
</li>
<li><p>User data 通过文件传递，并支持多种文件格式，包括 gzip 压缩文件、shell 脚本、cloud-init 配置文件等。虽然 metadata 和 user data 并不相同，但是 OpenStack 向虚拟机提供这两种信息的机制是一致的，只是虚拟机在获取到信息后，对两者的处理方式不同罢了。所以下文统一用 matadata 来描述。</p>
</li>
</ul>
<p>在 OpenStack 中，虚拟机获取 Metadata 信息的方式有两种：<br>Config drive 和 metadata RESTful 服务。此文只关注解析metadata RESTful 方式<br><a id="more"></a></p>
<h1 id="Metadata-RESTful-工作原理"><a href="#Metadata-RESTful-工作原理" class="headerlink" title="Metadata RESTful 工作原理"></a>Metadata RESTful 工作原理</h1><p><img src="/myimages/metadata.png" alt="metadata"></p>
<h1 id="meta作用"><a href="#meta作用" class="headerlink" title="meta作用"></a>meta作用</h1><p>可以使用metadata技术实现用户个性的配置</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Metadata 服务为用户自定义配置虚拟机提供了有效的解决方案。本文剖析了 OpenStack 提供 metadata 服务的RESTful机制。那么Config drive 和RESTful机制差别在哪？</p>
<ul>
<li>Config drive 机制主要用于配置虚拟机的网络信息，包括 IP、子网掩码、网关等。当虚拟机无法通过 DHCP 正确获取网络信息时，config drive 是获取 metadata 信息的必要方式。</li>
<li>如果虚拟机能够自动正确配置网络，那么可以通过 RESTful 服务的方式获取 metadata 信息。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;metadata基本概念&quot;&gt;&lt;a href=&quot;#metadata基本概念&quot; class=&quot;headerlink&quot; title=&quot;metadata基本概念&quot;&gt;&lt;/a&gt;metadata基本概念&lt;/h1&gt;&lt;p&gt;在创建虚拟机的时候，用户往往需要对虚拟机进行一些配置，比如：开启一些服务、安装某些包、添加 SSH 秘钥、配置 hostname 等等。&lt;/p&gt;
&lt;p&gt;在 OpenStack 中，这些配置信息被分成两类：metadata 和 user data。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Metadata 主要包括虚拟机自身的一些常用属性，如 hostname、网络配置信息、SSH 登陆秘钥等，主要的形式为键值对。而 user data 主要包括一些命令、脚本等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User data 通过文件传递，并支持多种文件格式，包括 gzip 压缩文件、shell 脚本、cloud-init 配置文件等。虽然 metadata 和 user data 并不相同，但是 OpenStack 向虚拟机提供这两种信息的机制是一致的，只是虚拟机在获取到信息后，对两者的处理方式不同罢了。所以下文统一用 matadata 来描述。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 OpenStack 中，虚拟机获取 Metadata 信息的方式有两种：&lt;br&gt;Config drive 和 metadata RESTful 服务。此文只关注解析metadata RESTful 方式&lt;br&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="metadata" scheme="http://vcpu.me/tags/metadata/"/>
    
      <category term="nova-api-metadata" scheme="http://vcpu.me/tags/nova-api-metadata/"/>
    
      <category term="Neutron-ns-metadata-proxy" scheme="http://vcpu.me/tags/Neutron-ns-metadata-proxy/"/>
    
      <category term="Neutron-metadata-agent" scheme="http://vcpu.me/tags/Neutron-metadata-agent/"/>
    
  </entry>
  
  <entry>
    <title>图示openstack -组件间基本关系和虚拟机创建</title>
    <link href="http://vcpu.me/vmcreate/"/>
    <id>http://vcpu.me/vmcreate/</id>
    <published>2017-08-24T10:00:00.000Z</published>
    <updated>2017-08-25T07:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openstack核心组件逻辑关系"><a href="#openstack核心组件逻辑关系" class="headerlink" title="openstack核心组件逻辑关系"></a>openstack核心组件逻辑关系</h2><ul>
<li>horizon控制台<br>提供WEB操作界面，用来创建虚拟机、增加网络、创建fw和负载均衡策略等</li>
<li>nova<br>  响应虚拟机创建请求、调度、销毁云主机</li>
<li>glance<br>  提供虚拟机创建镜像服务</li>
<li>cinyder<br>  虚拟机块存储，供操作系统使用</li>
<li>swift<br>  对象存储，数据备份和镜像存储</li>
<li>neutron<br> 创建管理虚拟网络，供虚拟机使用</li>
<li>keytone<br> 认证授权,属于共享组件</li>
<li><p>ceilometer<br> 监控计费服务<br><img src="/myimages/openstack-plugin.png" alt="openstack-plugin"></p>
<a id="more"></a>
<h2 id="keystone"><a href="#keystone" class="headerlink" title="keystone"></a>keystone</h2></li>
<li><p>User(用户)：<br>  指使用Openstack service的用户，可以是人、服务、系统，但凡使用了Openstack service的对象都可以称为User。</p>
</li>
<li><p>Project(Tenant)：<br>  可以理解为一个人、或服务所拥有的 资源集合 。在一个Project(Tenant)中可以包含多个User，每一个User都会根据权限的划分来使用Project(Tenant)中的资源。比如通过Nova创建虚拟机时要指定到某个Project中，在Cinder创建卷也要指定到某个Project中。User访问Project的资源前，必须要与该Project关联，并且指定User在Project下的Role。</p>
</li>
<li><p>Role(角色)：<br>  用于划分权限。可以通过给User指定Role，使User获得Role对应的操作权限。Keystone返回给User的Token包含了Role列表，被访问的Services会判断访问它的User和User提供的Token中所包含的Role。系统默认使用管理Role admin和成员Role <em>member</em> 。</p>
</li>
<li><p>Policy(规则)：<br>OpenStack对User的验证除了OpenStack的身份验证以外，还需要鉴别User对某个Service是否有访问权限。Policy机制就是用来控制User对Tenant中资源(包括Services)的操作权限。对于Keystone service来说，Policy就是一个JSON文件，默认是/etc/keystone/policy.json。通过配置这个文件，Keystone Service实现了对User基于Role的权限管理。</p>
</li>
<li><p>Token：<br>  是一个字符串表示，作为访问资源的令牌。Token包含了在 指定范围和有效时间内 可以被访问的资源。EG. 在Nova中一个tenant可以是一些虚拟机，在Swift和Glance中一个tenant可以是一些镜像存储，在Network中一个tenant可以是一些网络资源。Token一般被User持有。</p>
</li>
</ul>
<ul>
<li>Endpoint：<br>  一个可以通过网络来访问和定位某个Openstack service的地址，通常是一个URL。比如，当Nova需要访问Glance服务去获取image 时，Nova通过访问Keystone拿到Glance的endpoint，然后通过访问该endpoint去获取Glance服务。我们可以通过Endpoint的region属性去定义多个region。</li>
</ul>
<h3 id="Endpoint-该使用对象分为三类："><a href="#Endpoint-该使用对象分为三类：" class="headerlink" title="Endpoint 该使用对象分为三类："></a>Endpoint 该使用对象分为三类：</h3><p>admin url –&gt; 给admin用户使用，Post：35357  —-&gt;管理员<br>internal url –&gt; OpenStack内部服务使用来跟别的服务通信，Port：5000 —-&gt;内部员工<br>public url –&gt; 其它用户可以访问的地址，Post：5000 —-&gt;外部访问</p>
<p>角色,决定了你的权限.只和role有关.不论你从那个入口进入.你的权限,并不会改变.假如,就算管理员走internal url  ,管理员的权限并不会改变<br>有没有权限和endpoint没有关系</p>
<h3 id="组件之间通信基于rest-api"><a href="#组件之间通信基于rest-api" class="headerlink" title="组件之间通信基于rest api"></a>组件之间通信基于rest api</h3><p>创建完service后创建API EndPoint. 在openstack中，每一个service都有三种end points. Admin, public, internal。 Admin是用作管理用途的，如它能够修改user/tenant(project)。 public 是让客户调用的，比如可以部署在外网上让客户可以管理自己的云。internal是openstack内部调用的。三种endpoints 在网络上开放的权限一般也不同。Admin通常只能对内网开放，public通常可以对外网开放internal通常只能对安装有openstack对服务的机器开放。</p>
<h3 id="V3新增"><a href="#V3新增" class="headerlink" title="V3新增"></a>V3新增</h3><p>Tenant 重命名为 Project<br>添加了 Domain 的概念—-&gt;一堆project的集合<br>添加了 Group 的概念(用户授权针对组来实现)</p>
<h3 id="keystone作用"><a href="#keystone作用" class="headerlink" title="keystone作用:"></a>keystone作用:</h3><p>论证用户权限<br>分发rest api</p>
<h2 id="neutron"><a href="#neutron" class="headerlink" title="neutron"></a>neutron</h2><ul>
<li>neutron-server<br>  Neutron REST API 掌门人</li>
<li>neutron-plugin<br>  不同网络功能实现的入口，各个厂商可以开发自己的plugin </li>
<li>neutron-agent<br>  插件具体动作执行</li>
<li>service-plugin:<br>  实现L3-L7的网络服务(l3 router、firewall、loadbalancer、VPN、metering等) </li>
<li>core-plugin:<br>  负责管理L2的网络连接（Modular Layer 2）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+-------------+        +--------------+        +-----------------+</div><div class="line">|             |        |              |        |                 |</div><div class="line">|neutron server+-----&gt; |neutron plugin+------&gt; |neutron agent    |</div><div class="line">|             |        |              |        |                 |</div><div class="line">+-------------+        +--------------+        +-----------------+</div></pre></td></tr></table></figure>
<h2 id="nova"><a href="#nova" class="headerlink" title="nova"></a>nova</h2><p><img src="/myimages/openstack-nova.png" alt="openstack-nova"></p>
<h2 id="创建虚拟机流程"><a href="#创建虚拟机流程" class="headerlink" title="创建虚拟机流程"></a>创建虚拟机流程</h2><p><img src="/myimages/openstack-create.png" alt="openstack-create"></p>
<p>1.界面或命令行通过RESTful API向keystone获取认证信息。<br>2.keystone通过用户请求认证信息，并生成auth-token返回给对应的认证请求。<br>3.界面或命令行通过RESTful API向nova-api发送一个boot instance的请求（携带auth-token）。<br>4.nova-api接受请求后向keystone发送认证请求，查看token是否为有效用户和token。<br>5.keystone验证token是否有效，如有效则返回有效的认证和对应的角色（注：有些操作需要有角色权限才能操作）。<br>6.通过认证后nova-api和数据库通讯。<br>7.初始化新建虚拟机的数据库记录。<br>8.nova-api通过rpc.call向nova-scheduler请求是否有创建虚拟机的资源(Host ID)。<br>9.nova-scheduler进程侦听消息队列，获取nova-api的请求。<br>10.nova-scheduler通过查询nova数据库中计算资源的情况，并通过调度算法计算符合虚拟机创建需要的主机。<br>11.对于有符合虚拟机创建的主机，nova-scheduler更新数据库中虚拟机对应的物理主机信息。<br>12.nova-scheduler通过rpc.cast向nova-compute发送对应的创建虚拟机请求的消息。<br>13.nova-compute会从对应的消息队列中获取创建虚拟机请求的消息。<br>14.nova-compute通过rpc.call向nova-conductor请求获取虚拟机消息。（Flavor）<br>15.nova-conductor从消息队队列中拿到nova-compute请求消息。<br>16.nova-conductor根据消息查询虚拟机对应的信息。<br>17.nova-conductor从数据库中获得虚拟机对应信息。<br>18nova-conductor把虚拟机信息通过消息的方式发送到消息队列中。<br>19.nova-compute从对应的消息队列中获取虚拟机信息消息。<br>20.nova-compute通过keystone的RESTfull API拿到认证的token，并通过HTTP请求glance-api获取创建虚拟机所需要镜像。<br>21.glance-api向keystone认证token是否有效，并返回验证结果。<br>22.token验证通过，nova-compute获得虚拟机镜像信息(URL)。<br>23.nova-compute通过keystone的RESTfull API拿到认证k的token，并通过HTTP请求neutron-server获取创建虚拟机所需要的网络信息。<br>24.neutron-server向keystone认证token是否有效，并返回验证结果。<br>25.token验证通过，nova-compute获得虚拟机网络信息。<br>26.nova-compute通过keystone的RESTfull API拿到认证的token，并通过HTTP请求cinder-api获取创建虚拟机所需要的持久化存储信息。<br>17.cinder-api向keystone认证token是否有效，并返回验证结果。<br>28.token验证通过，nova-compute获得虚拟机持久化存储信息。<br>29.nova-compute根据instance的信息调用配置的虚拟化驱动来创建虚拟机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;openstack核心组件逻辑关系&quot;&gt;&lt;a href=&quot;#openstack核心组件逻辑关系&quot; class=&quot;headerlink&quot; title=&quot;openstack核心组件逻辑关系&quot;&gt;&lt;/a&gt;openstack核心组件逻辑关系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;horizon控制台&lt;br&gt;提供WEB操作界面，用来创建虚拟机、增加网络、创建fw和负载均衡策略等&lt;/li&gt;
&lt;li&gt;nova&lt;br&gt;  响应虚拟机创建请求、调度、销毁云主机&lt;/li&gt;
&lt;li&gt;glance&lt;br&gt;  提供虚拟机创建镜像服务&lt;/li&gt;
&lt;li&gt;cinyder&lt;br&gt;  虚拟机块存储，供操作系统使用&lt;/li&gt;
&lt;li&gt;swift&lt;br&gt;  对象存储，数据备份和镜像存储&lt;/li&gt;
&lt;li&gt;neutron&lt;br&gt; 创建管理虚拟网络，供虚拟机使用&lt;/li&gt;
&lt;li&gt;keytone&lt;br&gt; 认证授权,属于共享组件&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ceilometer&lt;br&gt; 监控计费服务&lt;br&gt;&lt;img src=&quot;/myimages/openstack-plugin.png&quot; alt=&quot;openstack-plugin&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
  </entry>
  
  <entry>
    <title>fwaas</title>
    <link href="http://vcpu.me/fwaas/"/>
    <id>http://vcpu.me/fwaas/</id>
    <published>2017-08-14T10:00:00.000Z</published>
    <updated>2017-08-25T07:57:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openstack配置安装环境"><a href="#openstack配置安装环境" class="headerlink" title="openstack配置安装环境"></a>openstack配置安装环境</h2><ul>
<li>ubuntun版本<br>root@controller:~# lsb_release -a<br>No LSB modules are available.<br>Distributor ID:    Ubuntu<br>Description:    Ubuntu 16.04.2 LTS<br>Release:    16.04<br>Codename:    xenial</li>
<li><p>openstack newton版本<br>root@controller:~# openstack –version<br>openstack 3.2.0</p>
</li>
<li><p>安装环境<br>osx 下的vbox两台虚拟机（controller和compute）<br>openstack网络节点和控制节点安装到controller机器上，计算节点安装到compute节点上</p>
</li>
<li><p>组网信息<br><img src="/myimages/fwaasnetwork.png" alt="fwaasnetwork"></p>
<a id="more"></a>
<h2 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h2></li>
</ul>
<h3 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h3><p>/etc/neutron/neutron.conf<br>[DEFAULT]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service_plugins = router,firewall</div></pre></td></tr></table></figure></p>
<p>[service_providers]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service_provider = FIREWALL:Iptables:neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver:default</div></pre></td></tr></table></figure></p>
<p>注意：如果没有[service_providers]标签就在配置最后新增<br>[fwaas]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">agent_version = v1</div><div class="line">driver = iptables</div><div class="line">enabled = True</div></pre></td></tr></table></figure></p>
<p>注意：如果没有[service_providers]标签就在配置最后新增</p>
<p>/etc/neutron/fwaas_driver.ini<br>[fwaas]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver = neutron_fwaas.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver</div><div class="line">enabled = True</div></pre></td></tr></table></figure></p>
<p>/etc/neutron/l3_agent.ini<br>[AGENT]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extensions = fwaas</div></pre></td></tr></table></figure></p>
<p>将配置加载到数据库中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">neutron-db-manage --subproject neutron-fwaas upgrade head</div></pre></td></tr></table></figure></p>
<h3 id="配置完成重启neutron-server和neutron-l3-agent服务让配置生效"><a href="#配置完成重启neutron-server和neutron-l3-agent服务让配置生效" class="headerlink" title="配置完成重启neutron-server和neutron-l3-agent服务让配置生效"></a>配置完成重启neutron-server和neutron-l3-agent服务让配置生效</h3><p>service neutron-server restart<br>service neutron-l3-agent restart</p>
<h2 id="添加FW策略默认不含邮rule策略"><a href="#添加FW策略默认不含邮rule策略" class="headerlink" title="添加FW策略默认不含邮rule策略"></a>添加FW策略默认不含邮rule策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">neutron firewall-policy-create  myfwallpolicy</div><div class="line">neutron firewall-create myfwallpolicy --name myfw</div></pre></td></tr></table></figure>
<h3 id="确定fw开启成功"><a href="#确定fw开启成功" class="headerlink" title="确定fw开启成功"></a>确定fw开启成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@controller:~# neutron firewall-show myfw</div><div class="line">+--------------------+--------------------------------------+</div><div class="line">| Field              | Value                                |</div><div class="line">+--------------------+--------------------------------------+</div><div class="line">| admin_state_up     | True                                 |</div><div class="line">| description        |                                      |</div><div class="line">| firewall_policy_id | 4a1e2adb-ac2c-44d2-8622-65bcc9982c05 |</div><div class="line">| id                 | 47e900ef-6baf-4958-902a-77ba20f9791f |</div><div class="line">| name               | myfw                                 |</div><div class="line">| project_id         | 2aba7c0d74a54b9a9acf1e2810ef996e     |</div><div class="line">| router_ids         | 444e3a9e-1011-46fd-af5c-bcad004e236b |</div><div class="line">| status             | ACTIVE                               |</div><div class="line">| tenant_id          | 2aba7c0d74a54b9a9acf1e2810ef996e     |</div><div class="line">+--------------------+--------------------------------------+</div></pre></td></tr></table></figure>
<p>说明：实验中newton版本的openstackPENDING_CREATE状态包含fw没有关联router，也是配置错误或则因为没有重启neutron-l3-agent和neutron-server 而导致的配置没有生效<br>哎，在这里废了很大劲。</p>
<h3 id="查看fwaas-iptables-策略"><a href="#查看fwaas-iptables-策略" class="headerlink" title="查看fwaas iptables 策略"></a>查看fwaas iptables 策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">root@controller:~# ip netns</div><div class="line">qdhcp-0dbb735a-ab82-4658-a544-1e91cc7f68db (id: 3)</div><div class="line">qdhcp-e47041c9-008c-4c1b-8fe5-99120d8765b8 (id: 1)</div><div class="line">qdhcp-0ad9b398-b0ac-476a-b1bc-b1f58bf8eff4 (id: 2)</div><div class="line">qrouter-444e3a9e-1011-46fd-af5c-bcad004e236b (id: 0)</div><div class="line">root@controller:~# ip netns exec qrouter-444e3a9e-1011-46fd-af5c-bcad004e236b iptables -S</div><div class="line">-P INPUT ACCEPT</div><div class="line">-P FORWARD ACCEPT</div><div class="line">-P OUTPUT ACCEPT</div><div class="line">-N neutron-filter-top</div><div class="line">-N neutron-l3-agent-FORWARD</div><div class="line">-N neutron-l3-agent-INPUT</div><div class="line">-N neutron-l3-agent-OUTPUT</div><div class="line">-N neutron-l3-agent-fwaas-defau</div><div class="line">-N neutron-l3-agent-iv4ec95c473</div><div class="line">-N neutron-l3-agent-local</div><div class="line">-N neutron-l3-agent-ov4ec95c473</div><div class="line">-N neutron-l3-agent-scope</div><div class="line">-A INPUT -j neutron-l3-agent-INPUT</div><div class="line">-A FORWARD -j neutron-filter-top</div><div class="line">-A FORWARD -j neutron-l3-agent-FORWARD</div><div class="line">-A OUTPUT -j neutron-filter-top</div><div class="line">-A OUTPUT -j neutron-l3-agent-OUTPUT</div><div class="line">-A neutron-filter-top -j neutron-l3-agent-local</div><div class="line">-A neutron-l3-agent-FORWARD -j neutron-l3-agent-scope</div><div class="line">-A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-iv4ec95c473</div><div class="line">-A neutron-l3-agent-FORWARD -i qr-+ -j neutron-l3-agent-ov4ec95c473</div><div class="line">-A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-fwaas-defau</div><div class="line">-A neutron-l3-agent-FORWARD -i qr-+ -j neutron-l3-agent-fwaas-defau</div><div class="line">-A neutron-l3-agent-INPUT -m mark --mark 0x1/0xffff -j ACCEPT</div><div class="line">-A neutron-l3-agent-INPUT -p tcp -m tcp --dport 9697 -j DROP</div><div class="line">-A neutron-l3-agent-fwaas-defau -j DROP</div><div class="line">-A neutron-l3-agent-iv4ec95c473 -m state --state INVALID -j DROP</div><div class="line">-A neutron-l3-agent-iv4ec95c473 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A neutron-l3-agent-ov4ec95c473 -m state --state INVALID -j DROP</div><div class="line">-A neutron-l3-agent-ov4ec95c473 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A neutron-l3-agent-scope -o qr-4346328d-f4 -m mark ! --mark 0x4000000/0xffff0000 -j DROP</div><div class="line">-A neutron-l3-agent-scope -o qr-d879832c-1e -m mark ! --mark 0x4000000/0xffff0000 -j DROP</div></pre></td></tr></table></figure>
<h3 id="放通两个子网跨网时候icmp"><a href="#放通两个子网跨网时候icmp" class="headerlink" title="放通两个子网跨网时候icmp"></a>放通两个子网跨网时候icmp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@controller:~# neutron firewall-rule-create --protocol icmp --action allow --name myrule</div><div class="line">Created a new firewall_rule:</div><div class="line">+------------------------+--------------------------------------+</div><div class="line">| Field                  | Value                                |</div><div class="line">+------------------------+--------------------------------------+</div><div class="line">| action                 | allow                                |</div><div class="line">| description            |                                      |</div><div class="line">| destination_ip_address |                                      |</div><div class="line">| destination_port       |                                      |</div><div class="line">| enabled                | True                                 |</div><div class="line">| firewall_policy_id     |                                      |</div><div class="line">| id                     | 77e7d0b6-d9b3-453e-a0c1-833faae5cd48 |</div><div class="line">| ip_version             | 4                                    |</div><div class="line">| name                   | myrule                               |</div><div class="line">| position               |                                      |</div><div class="line">| project_id             | 2aba7c0d74a54b9a9acf1e2810ef996e     |</div><div class="line">| protocol               | icmp                                 |</div><div class="line">| shared                 | False                                |</div><div class="line">| source_ip_address      |                                      |</div><div class="line">| source_port            |                                      |</div><div class="line">| tenant_id              | 2aba7c0d74a54b9a9acf1e2810ef996e     |</div><div class="line">+------------------------+--------------------------------------+</div><div class="line">root@controller:~# neutron firewall-policy-insert-rule   myfwallpolicy myrule</div><div class="line">Inserted firewall rule in firewall policy myfwallpolicy</div></pre></td></tr></table></figure>
<h3 id="查看放通icmp后策略"><a href="#查看放通icmp后策略" class="headerlink" title="查看放通icmp后策略"></a>查看放通icmp后策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">root@controller:~# ip netns exec qrouter-444e3a9e-1011-46fd-af5c-bcad004e236b iptables -S</div><div class="line">-P INPUT ACCEPT</div><div class="line">-P FORWARD ACCEPT</div><div class="line">-P OUTPUT ACCEPT</div><div class="line">-N neutron-filter-top</div><div class="line">-N neutron-l3-agent-FORWARD</div><div class="line">-N neutron-l3-agent-INPUT</div><div class="line">-N neutron-l3-agent-OUTPUT</div><div class="line">-N neutron-l3-agent-fwaas-defau</div><div class="line">-N neutron-l3-agent-iv4ec95c473</div><div class="line">-N neutron-l3-agent-local</div><div class="line">-N neutron-l3-agent-ov4ec95c473</div><div class="line">-N neutron-l3-agent-scope</div><div class="line">-A INPUT -j neutron-l3-agent-INPUT</div><div class="line">-A FORWARD -j neutron-filter-top</div><div class="line">-A FORWARD -j neutron-l3-agent-FORWARD</div><div class="line">-A OUTPUT -j neutron-filter-top</div><div class="line">-A OUTPUT -j neutron-l3-agent-OUTPUT</div><div class="line">-A neutron-filter-top -j neutron-l3-agent-local</div><div class="line">-A neutron-l3-agent-FORWARD -j neutron-l3-agent-scope</div><div class="line">-A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-iv4ec95c473</div><div class="line">-A neutron-l3-agent-FORWARD -i qr-+ -j neutron-l3-agent-ov4ec95c473</div><div class="line">-A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-fwaas-defau</div><div class="line">-A neutron-l3-agent-FORWARD -i qr-+ -j neutron-l3-agent-fwaas-defau</div><div class="line">-A neutron-l3-agent-INPUT -m mark --mark 0x1/0xffff -j ACCEPT</div><div class="line">-A neutron-l3-agent-INPUT -p tcp -m tcp --dport 9697 -j DROP</div><div class="line">-A neutron-l3-agent-fwaas-defau -j DROP</div><div class="line">-A neutron-l3-agent-iv4ec95c473 -m state --state INVALID -j DROP</div><div class="line">-A neutron-l3-agent-iv4ec95c473 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A neutron-l3-agent-iv4ec95c473 -p icmp -j ACCEPT</div><div class="line">-A neutron-l3-agent-ov4ec95c473 -m state --state INVALID -j DROP</div><div class="line">-A neutron-l3-agent-ov4ec95c473 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A neutron-l3-agent-ov4ec95c473 -p icmp -j ACCEPT</div><div class="line">-A neutron-l3-agent-scope -o qr-4346328d-f4 -m mark ! --mark 0x4000000/0xffff0000 -j DROP</div><div class="line">-A neutron-l3-agent-scope -o qr-d879832c-1e -m mark ! --mark 0x4000000/0xffff0000 -j DROP</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-A FORWARD -j neutron-l3-agent-FORWARD</div><div class="line">-A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-iv4ec95c473</div><div class="line">-A neutron-l3-agent-FORWARD -i qr-+ -j neutron-l3-agent-ov4ec95c473</div><div class="line">-A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-fwaas-defau</div><div class="line">-A neutron-l3-agent-FORWARD -i qr-+ -j neutron-l3-agent-fwaas-defau</div></pre></td></tr></table></figure>
<p>router namespace转发表处理交给neutron-l3-agent-FORWARD表处理<br>具体策略为：<br>    -A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-iv4ec95c473<br>    -A neutron-l3-agent-FORWARD -o qr-+ -j neutron-l3-agent-fwaas-defau<br>FORWARD最终交给neutron-l3-agent-iv4ec95c473和neutron-l3-agent-fwaas-defau处理<br>-A neutron-l3-agent-iv4ec95c473 -m state –state INVALID -j DROP<br>-A neutron-l3-agent-iv4ec95c473 -m state –state RELATED,ESTABLISHED -j ACCEPT<br>-A neutron-l3-agent-fwaas-defau -j DROP</p>
<p>默认情况下所由经过router qr接口数据包进行转发的全部丢弃</p>
<h3 id="放通规则后新增规则分析"><a href="#放通规则后新增规则分析" class="headerlink" title="放通规则后新增规则分析"></a>放通规则后新增规则分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-A neutron-l3-agent-iv4ec95c473 -p icmp -j ACCEPT</div><div class="line">-A neutron-l3-agent-ov4ec95c473 -p icmp -j ACCEPT</div></pre></td></tr></table></figure>
<p>新增icmp放通策略，此时候跨越router ping流量可放通了</p>
<h2 id="开启fw情况下如何使得vm上网"><a href="#开启fw情况下如何使得vm上网" class="headerlink" title="开启fw情况下如何使得vm上网"></a>开启fw情况下如何使得vm上网</h2><ul>
<li>开通dns限制<br>neutron firewall-rule-create –protocol udp –destination-port 53 –action allow  –name dns</li>
<li>开通tcp协议限制<br>neutron firewall-rule-create –protocol tcp  –action allow  –name myrul</li>
</ul>
<p>如果在未开启fw前可以上外网，开fw后不能上外网后，经过上述策略放通就可以实现vm上外网需求</p>
<h2 id="查看所有策略"><a href="#查看所有策略" class="headerlink" title="查看所有策略"></a>查看所有策略</h2><p>查看rule<br>neutron firewall-rule-list<br>查看pllicy<br>neutron firewall-policy-list<br>查看fw墙<br>neutron firewall-list</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">root@controller:~# neutron firewall-rule-list</div><div class="line"></div><div class="line">+------------------------------------+--------+------------------------------------+----------------------+---------+</div><div class="line">| id                                 | name   | firewall_policy_id                 | summary              | enabled |</div><div class="line">+------------------------------------+--------+------------------------------------+----------------------+---------+</div><div class="line">| 69912a17-e462-40ce-b30e-           | myrule | 7f3539bb-145c-                     | ICMP,                | True    |</div><div class="line">| b547f0673dbd                       |        | 4f59-b374-83abbb9729b0             |  source: none(none), |         |</div><div class="line">|                                    |        |                                    |  dest: none(none),   |         |</div><div class="line">|                                    |        |                                    |  allow               |         |</div><div class="line">+------------------------------------+--------+------------------------------------+----------------------+---------+</div><div class="line">root@controller:~# neutron firewall-policy-list</div><div class="line">+--------------------------------------+---------------+----------------------------------------+</div><div class="line">| id                                   | name          | firewall_rules                         |</div><div class="line">+--------------------------------------+---------------+----------------------------------------+</div><div class="line">| 7f3539bb-145c-4f59-b374-83abbb9729b0 | myfwallpolicy | [69912a17-e462-40ce-b30e-b547f0673dbd] |</div><div class="line">+--------------------------------------+---------------+----------------------------------------+</div><div class="line">root@controller:~# neutron firewall-list</div><div class="line">+--------------------------------------+------+--------------------------------------+</div><div class="line">| id                                   | name | firewall_policy_id                   |</div><div class="line">+--------------------------------------+------+--------------------------------------+</div><div class="line">| 532f3f7a-376d-485a-a8db-2e3598fc9b86 | myfw | 7f3539bb-145c-4f59-b374-83abbb9729b0 |</div><div class="line">+--------------------------------------+------+--------------------------------------+</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;openstack配置安装环境&quot;&gt;&lt;a href=&quot;#openstack配置安装环境&quot; class=&quot;headerlink&quot; title=&quot;openstack配置安装环境&quot;&gt;&lt;/a&gt;openstack配置安装环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ubuntun版本&lt;br&gt;root@controller:~# lsb_release -a&lt;br&gt;No LSB modules are available.&lt;br&gt;Distributor ID:    Ubuntu&lt;br&gt;Description:    Ubuntu 16.04.2 LTS&lt;br&gt;Release:    16.04&lt;br&gt;Codename:    xenial&lt;/li&gt;
&lt;li&gt;&lt;p&gt;openstack newton版本&lt;br&gt;root@controller:~# openstack –version&lt;br&gt;openstack 3.2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装环境&lt;br&gt;osx 下的vbox两台虚拟机（controller和compute）&lt;br&gt;openstack网络节点和控制节点安装到controller机器上，计算节点安装到compute节点上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组网信息&lt;br&gt;&lt;img src=&quot;/myimages/fwaasnetwork.png&quot; alt=&quot;fwaasnetwork&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="openstack" scheme="http://vcpu.me/tags/openstack/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="fwaas" scheme="http://vcpu.me/tags/fwaas/"/>
    
  </entry>
  
  <entry>
    <title>openstack Security group</title>
    <link href="http://vcpu.me/secritygroup/"/>
    <id>http://vcpu.me/secritygroup/</id>
    <published>2017-08-09T10:00:00.000Z</published>
    <updated>2017-08-09T06:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Security-group-安全组-概念"><a href="#Security-group-安全组-概念" class="headerlink" title="Security group(安全组)概念"></a>Security group(安全组)概念</h1><p>安全组是通过Linux IPtables实现的，安全组对象是虚拟网卡，由L2 Agent（neutron_openvswitch_agent、neutron_linuxbridfe_agent）实现,在计算节点上通过iptables规则限制虚拟网卡流量进出。其容易和FW混淆，FW主要是异常流量隔离，一般负责跨子网流量不管虚拟网卡间通讯流量。<br><a id="more"></a></p>
<h2 id="neutron-port-list-列出属于租户的所有接口"><a href="#neutron-port-list-列出属于租户的所有接口" class="headerlink" title="neutron port-list 列出属于租户的所有接口"></a>neutron port-list 列出属于租户的所有接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller:~# . demo-openrc</div><div class="line">root@controller:~# neutron port-list</div><div class="line">+--------------------------------------+------+-------------------+--------------------------------------------+</div><div class="line">| id                                   | name | mac_address       | fixed_ips                                  |</div><div class="line">+--------------------------------------+------+-------------------+--------------------------------------------+</div><div class="line">| 44a3abfa-1203-48d8-b83c-0c8657853db9 |      | fa:16:3e:71:34:ed | &#123;&quot;subnet_id&quot;: &quot;f746bd76-5bb3-4432-8fde-    |</div><div class="line">|                                      |      |                   | 66ccf8c59da9&quot;, &quot;ip_address&quot;: &quot;172.16.1.7&quot;&#125; |</div><div class="line">| d879832c-1ec1-429e-8e4f-2e11506435a4 |      | fa:16:3e:2e:09:4b | &#123;&quot;subnet_id&quot;: &quot;f746bd76-5bb3-4432-8fde-    |</div><div class="line">|                                      |      |                   | 66ccf8c59da9&quot;, &quot;ip_address&quot;: &quot;172.16.1.1&quot;&#125; |</div><div class="line">| f804cbf3-c4e8-4f66-ade5-87661591ecca |      | fa:16:3e:f2:22:5d | &#123;&quot;subnet_id&quot;: &quot;f746bd76-5bb3-4432-8fde-    |</div><div class="line">|                                      |      |                   | 66ccf8c59da9&quot;, &quot;ip_address&quot;: &quot;172.16.1.2&quot;&#125; |</div><div class="line">+--------------------------------------+------+-------------------+--------------------------------------------+</div></pre></td></tr></table></figure>
<h1 id="openstack连接拓扑图（在此基础上研究安全组概念）"><a href="#openstack连接拓扑图（在此基础上研究安全组概念）" class="headerlink" title="openstack连接拓扑图（在此基础上研究安全组概念）"></a>openstack连接拓扑图（在此基础上研究安全组概念）</h1><p><img src="/myimages/self_service.png" alt="self_service"></p>
<h2 id="查看计算节点INPUT链"><a href="#查看计算节点INPUT链" class="headerlink" title="查看计算节点INPUT链"></a>查看计算节点INPUT链</h2><p><strong>总结图：</strong><br><img src="/myimages/compute_input.png" alt="compute_input"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL INPUT</div><div class="line">Chain INPUT (policy ACCEPT 36472 packets, 8475K bytes)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1    33322 7781K nova-compute-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">2    36472 8475K neutron-linuxbri-INPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">3        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:53</div><div class="line">4        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:53</div><div class="line">5        0     0 ACCEPT     udp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            udp dpt:67</div><div class="line">6        0     0 ACCEPT     tcp  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:67</div></pre></td></tr></table></figure>
<p>上述3、4、5、6策略放通dns和dhcp流量使用</p>
<h3 id="根据策略1继续查看-nova-compute-INPUT"><a href="#根据策略1继续查看-nova-compute-INPUT" class="headerlink" title="根据策略1继续查看 nova-compute-INPUT"></a>根据策略1继续查看 nova-compute-INPUT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL nova-compute-INPUT</div><div class="line">Chain nova-compute-INPUT (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div></pre></td></tr></table></figure>
<h3 id="根据策略2继续查看-neutron-linuxbri-INPUT"><a href="#根据策略2继续查看-neutron-linuxbri-INPUT" class="headerlink" title="根据策略2继续查看 neutron-linuxbri-INPUT"></a>根据策略2继续查看 neutron-linuxbri-INPUT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Chain neutron-linuxbri-INPUT (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1        0     0 neutron-linuxbri-o44a3abfa-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0            PHYSDEV match --physdev-in tap44a3abfa-12 --physdev-is-bridged /* Direct incoming traffic from VM to the security group chain. */</div></pre></td></tr></table></figure>
<p>linux桥和vm互联接口为tap44a3abfa-12，vm发出流量，查找INPUT链最终会查找neutron-linuxbri-o44a3abfa-1</p>
<h4 id="根据策略1-继续查看neutron-linuxbri-o44a3abfa-1"><a href="#根据策略1-继续查看neutron-linuxbri-o44a3abfa-1" class="headerlink" title="根据策略1 继续查看neutron-linuxbri-o44a3abfa-1"></a>根据策略1 继续查看neutron-linuxbri-o44a3abfa-1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL  neutron-linuxbri-o44a3abfa-1</div><div class="line">Chain neutron-linuxbri-o44a3abfa-1 (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1        2   648 RETURN     udp  --  *      *       0.0.0.0              255.255.255.255      udp spt:68 dpt:67 /* Allow DHCP client traffic. */</div><div class="line">2      904  106K neutron-linuxbri-s44a3abfa-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">3        0     0 RETURN     udp  --  *      *       0.0.0.0/0            0.0.0.0/0            udp spt:68 dpt:67 /* Allow DHCP client traffic. */</div><div class="line">4        0     0 DROP       udp  --  *      *       0.0.0.0/0            0.0.0.0/0            udp spt:67 udp dpt:68 /* Prevent DHCP Spoofing by VM. */</div><div class="line">5      865  103K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED /* Direct packets associated with a known session to the RETURN chain. */</div><div class="line">6       39  2573 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">7        0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            state INVALID /* Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack. */</div><div class="line">8        0     0 neutron-linuxbri-sg-fallback  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Send unmatched traffic to the fallback chain. */</div></pre></td></tr></table></figure>
<p>DHCP广播地址、vm发包的ip和mac必须是vm分配的</p>
<h4 id="neutron-linuxbri-s44a3abfa-1-检查流量源ip和mac是否为已分配（防止伪装地址攻击）"><a href="#neutron-linuxbri-s44a3abfa-1-检查流量源ip和mac是否为已分配（防止伪装地址攻击）" class="headerlink" title="neutron-linuxbri-s44a3abfa-1 检查流量源ip和mac是否为已分配（防止伪装地址攻击）"></a>neutron-linuxbri-s44a3abfa-1 检查流量源ip和mac是否为已分配（防止伪装地址攻击）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL  neutron-linuxbri-s44a3abfa-1</div><div class="line">Chain neutron-linuxbri-s44a3abfa-1 (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1      904  106K RETURN     all  --  *      *       172.16.1.7           0.0.0.0/0            MAC FA:16:3E:71:34:ED /* Allow traffic from defined IP/MAC pairs. */</div><div class="line">2        0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Drop traffic without an IP/MAC allow rule. */</div><div class="line">root@compute:~#</div></pre></td></tr></table></figure>
<p>该链表主要检查从vm发出来的数据包，是否是openstack所分配的IP和MAC，如果不匹配，禁止通过。此处是为了防止利用VM上进行一些伪装地址的攻击。</p>
<h2 id="查看计算节点OUTPUT链"><a href="#查看计算节点OUTPUT链" class="headerlink" title="查看计算节点OUTPUT链"></a>查看计算节点OUTPUT链</h2><p><strong>总结图：</strong><br><img src="/myimages/compute_output.png" alt="compute_output"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL OUTPUT</div><div class="line">Chain OUTPUT (policy ACCEPT 37285 packets, 8946K bytes)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     140K   33M nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">2    34104 8216K nova-compute-OUTPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">3    37285 8946K neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">4    37285 8946K neutron-linuxbri-OUTPUT  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">5        0     0 ACCEPT     udp  --  *      virbr0  0.0.0.0/0            0.0.0.0/0            udp dpt:68</div></pre></td></tr></table></figure>
<h3 id="策略1从OUTPUT跳转到nova-filter-top跳转nova-compute-local"><a href="#策略1从OUTPUT跳转到nova-filter-top跳转nova-compute-local" class="headerlink" title="策略1从OUTPUT跳转到nova-filter-top跳转nova-compute-local"></a>策略1从OUTPUT跳转到nova-filter-top跳转nova-compute-local</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL  nova-filter-top</div><div class="line">Chain nova-filter-top (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1    39921 9619K nova-compute-local  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">root@compute:~# iptables --line-numbers -vnL  nova-compute-local</div><div class="line">Chain nova-compute-local (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">nova-compute-local 目前没有什么策略</div></pre></td></tr></table></figure>
<h3 id="策略2从OUTPUT跳转到nova-compute-OUTPUT"><a href="#策略2从OUTPUT跳转到nova-compute-OUTPUT" class="headerlink" title="策略2从OUTPUT跳转到nova-compute-OUTPUT"></a>策略2从OUTPUT跳转到nova-compute-OUTPUT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL  nova-compute-OUTPUT</div><div class="line">Chain nova-compute-OUTPUT (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div></pre></td></tr></table></figure>
<p>nova-compute-OUTPUT没有什么策略</p>
<h3 id="策略3从OUTPIUT跳转到neutron-filter-top跳转到neutron-linuxbri-local"><a href="#策略3从OUTPIUT跳转到neutron-filter-top跳转到neutron-linuxbri-local" class="headerlink" title="策略3从OUTPIUT跳转到neutron-filter-top跳转到neutron-linuxbri-local"></a>策略3从OUTPIUT跳转到neutron-filter-top跳转到neutron-linuxbri-local</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL  neutron-filter-top</div><div class="line">Chain neutron-filter-top (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     164K   38M neutron-linuxbri-local  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line"></div><div class="line">root@compute:~# iptables --line-numbers -vnL  neutron-linuxbri-local</div><div class="line">Chain neutron-linuxbri-local (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div></pre></td></tr></table></figure>
<p>neutron-linuxbri-local目前没有什么策略</p>
<h3 id="策略4从OUTPUT跳转到neutron-linuxbri-OUTPUT"><a href="#策略4从OUTPUT跳转到neutron-linuxbri-OUTPUT" class="headerlink" title="策略4从OUTPUT跳转到neutron-linuxbri-OUTPUT"></a>策略4从OUTPUT跳转到neutron-linuxbri-OUTPUT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL  neutron-linuxbri-OUTPUT</div><div class="line">Chain neutron-linuxbri-OUTPUT (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div></pre></td></tr></table></figure>
<p>neutron-linuxbri-OUTPUT目前没有什么策略</p>
<h3 id="策略5"><a href="#策略5" class="headerlink" title="策略5"></a>策略5</h3><p>桥向68端口发udp包策略默认放开</p>
<h2 id="查看计算节点FORWARD链"><a href="#查看计算节点FORWARD链" class="headerlink" title="查看计算节点FORWARD链"></a>查看计算节点FORWARD链</h2><p><strong>总结图：</strong><br><img src="/myimages/compute_forward.png" alt="compute_forward"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL FORWARD</div><div class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1        0     0 neutron-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">2        0     0 neutron-linuxbri-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">3        0     0 nova-filter-top  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">4        0     0 nova-compute-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">5        0     0 ACCEPT     all  --  *      virbr0  0.0.0.0/0            192.168.122.0/24     ctstate RELATED,ESTABLISHED</div><div class="line">6        0     0 ACCEPT     all  --  virbr0 *       192.168.122.0/24     0.0.0.0/0</div><div class="line">7        0     0 ACCEPT     all  --  virbr0 virbr0  0.0.0.0/0            0.0.0.0/0</div><div class="line">8        0     0 REJECT     all  --  *      virbr0  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</div><div class="line">9        0     0 REJECT     all  --  virbr0 *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</div></pre></td></tr></table></figure>
<h3 id="策略1从FORWARD跳转neutron-filter-top跳转到-neutron-linuxbri-local"><a href="#策略1从FORWARD跳转neutron-filter-top跳转到-neutron-linuxbri-local" class="headerlink" title="策略1从FORWARD跳转neutron-filter-top跳转到 neutron-linuxbri-local"></a>策略1从FORWARD跳转neutron-filter-top跳转到 neutron-linuxbri-local</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL neutron-filter-top</div><div class="line">Chain neutron-filter-top (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     165K   38M neutron-linuxbri-local  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">root@compute:~#</div><div class="line">root@compute:~#</div><div class="line">root@compute:~# iptables --line-numbers -vnL neutron-linuxbri-local</div><div class="line">Chain neutron-linuxbri-local (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div></pre></td></tr></table></figure>
<p>nova-compute-local目前没有什么策略</p>
<h3 id="策略2从FORWARD跳转到neutron-linuxbri-FORWARD"><a href="#策略2从FORWARD跳转到neutron-linuxbri-FORWARD" class="headerlink" title="策略2从FORWARD跳转到neutron-linuxbri-FORWARD"></a>策略2从FORWARD跳转到neutron-linuxbri-FORWARD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL neutron-linuxbri-FORWARD</div><div class="line">Chain neutron-linuxbri-FORWARD (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     1212  112K neutron-linuxbri-sg-chain  all  --  *      *       0.0.0.0/0            0.0.0.0/0            PHYSDEV match --physdev-out tap44a3abfa-12 --physdev-is-bridged /* Direct traffic from the VM interface to the security group chain. */</div><div class="line">2      906  106K neutron-linuxbri-sg-chain  all  --  *      *       0.0.0.0/0            0.0.0.0/0            PHYSDEV match --physdev-in tap44a3abfa-12 --physdev-is-bridged /* Direct traffic from the VM interface to the security group chain. */</div><div class="line">root@compute:~#</div></pre></td></tr></table></figure>
<p>经过接口tap44a3abfa-12流量全部交给链表neutron-linuxbri-sg-chain处理</p>
<h4 id="链表neutron-linuxbri-sg-chain策略"><a href="#链表neutron-linuxbri-sg-chain策略" class="headerlink" title="链表neutron-linuxbri-sg-chain策略"></a>链表neutron-linuxbri-sg-chain策略</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL neutron-linuxbri-sg-chain</div><div class="line">Chain neutron-linuxbri-sg-chain (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     1212  112K neutron-linuxbri-i44a3abfa-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0            PHYSDEV match --physdev-out tap44a3abfa-12 --physdev-is-bridged /* Jump to the VM specific chain. */</div><div class="line">2      906  106K neutron-linuxbri-o44a3abfa-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0            PHYSDEV match --physdev-in tap44a3abfa-12 --physdev-is-bridged /* Jump to the VM specific chain. */</div><div class="line">3     2604  267K ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0</div></pre></td></tr></table></figure>
<ul>
<li>策略1:经过tap44a3abfa-12发给vm转发流量均由neutron-linuxbri-i44a3abfa-1 处理</li>
<li>策略2:vm发出到直连桥流量均由neutron-linuxbri-o44a3abfa-1 处理</li>
</ul>
<h5 id="neutron-linuxbri-i44a3abfa-1策略"><a href="#neutron-linuxbri-i44a3abfa-1策略" class="headerlink" title="neutron-linuxbri-i44a3abfa-1策略"></a>neutron-linuxbri-i44a3abfa-1策略</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL neutron-linuxbri-i44a3abfa-1</div><div class="line">Chain neutron-linuxbri-i44a3abfa-1 (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     1194  110K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED /* Direct packets associated with a known session to the RETURN chain. */</div><div class="line">2        2   729 RETURN     udp  --  *      *       172.16.1.2           0.0.0.0/0            udp spt:67 udp dpt:68</div><div class="line">3        8   480 RETURN     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22</div><div class="line">4        0     0 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0            match-set NIPv4d81fb7c3-1083-4203-8d6c- src</div><div class="line">5        6   504 RETURN     icmp --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">6        0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            state INVALID /* Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack. */</div><div class="line">7        2   648 neutron-linuxbri-sg-fallback  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Send unmatched traffic to the fallback chain. */</div></pre></td></tr></table></figure>
<p> DHCP、ssh、icmp、以及已经建立好会话状态的后续连接流量可发给vm，其它流量一律丢弃</p>
<h5 id="neutron-linuxbri-o44a3abfa-1策略"><a href="#neutron-linuxbri-o44a3abfa-1策略" class="headerlink" title="neutron-linuxbri-o44a3abfa-1策略"></a>neutron-linuxbri-o44a3abfa-1策略</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL neutron-linuxbri-o44a3abfa-1</div><div class="line">Chain neutron-linuxbri-o44a3abfa-1 (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1        2   648 RETURN     udp  --  *      *       0.0.0.0              255.255.255.255      udp spt:68 dpt:67 /* Allow DHCP client traffic. */</div><div class="line">2      904  106K neutron-linuxbri-s44a3abfa-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">3        0     0 RETURN     udp  --  *      *       0.0.0.0/0            0.0.0.0/0            udp spt:68 dpt:67 /* Allow DHCP client traffic. */</div><div class="line">4        0     0 DROP       udp  --  *      *       0.0.0.0/0            0.0.0.0/0            udp spt:67 udp dpt:68 /* Prevent DHCP Spoofing by VM. */</div><div class="line">5      865  103K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED /* Direct packets associated with a known session to the RETURN chain. */</div><div class="line">6       39  2573 RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">7        0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            state INVALID /* Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack. */</div><div class="line">8        0     0 neutron-linuxbri-sg-fallback  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Send unmatched traffic to the fallback chain. */</div></pre></td></tr></table></figure>
<p>DHCP返会流量、vm本机发出去流量均可以正常转发</p>
<h3 id="策略3-从FORWARD跳转到neutron-filter-top跳转到nova-compute-local"><a href="#策略3-从FORWARD跳转到neutron-filter-top跳转到nova-compute-local" class="headerlink" title="策略3 从FORWARD跳转到neutron-filter-top跳转到nova-compute-local"></a>策略3 从FORWARD跳转到neutron-filter-top跳转到nova-compute-local</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL nova-filter-top</div><div class="line">Chain nova-filter-top (2 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1     4344 1066K nova-compute-local  all  --  *      *       0.0.0.0/0            0.0.0.0/0</div><div class="line">root@compute:~#</div><div class="line">root@compute:~# iptables --line-numbers -vnL nova-compute-local</div><div class="line">Chain nova-compute-local (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">root@compute:~#</div></pre></td></tr></table></figure>
<p>neutron-linuxbri-local  目前没有什么策略</p>
<h3 id="策略4-从FORWARD跳转交给neutron-linuxbri-FORWARD处理"><a href="#策略4-从FORWARD跳转交给neutron-linuxbri-FORWARD处理" class="headerlink" title="策略4 从FORWARD跳转交给neutron-linuxbri-FORWARD处理"></a>策略4 从FORWARD跳转交给neutron-linuxbri-FORWARD处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@compute:~# iptables --line-numbers -vnL nova-compute-FORWARD</div><div class="line">Chain nova-compute-FORWARD (1 references)</div><div class="line">num   pkts bytes target     prot opt in     out     source               destination</div><div class="line">1        0     0 ACCEPT     all  --  brqe47041c9-00 *       0.0.0.0/0            0.0.0.0/0</div><div class="line">2        0     0 ACCEPT     all  --  *      brqe47041c9-00  0.0.0.0/0            0.0.0.0/0</div><div class="line">3        0     0 DROP       all  --  *      brqe47041c9-00  0.0.0.0/0            0.0.0.0/0</div></pre></td></tr></table></figure>
<h2 id="寻找计算节点vm连接的接口的策略"><a href="#寻找计算节点vm连接的接口的策略" class="headerlink" title="寻找计算节点vm连接的接口的策略"></a>寻找计算节点vm连接的接口的策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@compute:~# brctl show</div><div class="line">bridge name bridge id       STP enabled interfaces</div><div class="line">brqe47041c9-00      8000.7a0a01214421   no      tap44a3abfa-12</div><div class="line">                            vxlan-68</div><div class="line">virbr0      8000.000000000000   yes</div><div class="line">root@compute:~#</div><div class="line">root@compute:~#</div><div class="line">root@compute:~# iptables -S|grep tap44a3abfa-12</div><div class="line">-A neutron-linuxbri-FORWARD -m physdev --physdev-out tap44a3abfa-12 --physdev-is-bridged -m comment --comment &quot;Direct traffic from the VM interface to the security group chain.&quot; -j neutron-linuxbri-sg-chain</div><div class="line">-A neutron-linuxbri-FORWARD -m physdev --physdev-in tap44a3abfa-12 --physdev-is-bridged -m comment --comment &quot;Direct traffic from the VM interface to the security group chain.&quot; -j neutron-linuxbri-sg-chain</div><div class="line">-A neutron-linuxbri-INPUT -m physdev --physdev-in tap44a3abfa-12 --physdev-is-bridged -m comment --comment &quot;Direct incoming traffic from VM to the security group chain.&quot; -j neutron-linuxbri-o44a3abfa-1</div><div class="line">-A neutron-linuxbri-sg-chain -m physdev --physdev-out tap44a3abfa-12 --physdev-is-bridged -m comment --comment &quot;Jump to the VM specific chain.&quot; -j neutron-linuxbri-i44a3abfa-1</div><div class="line">-A neutron-linuxbri-sg-chain -m physdev --physdev-in tap44a3abfa-12 --physdev-is-bridged -m comment --comment &quot;Jump to the VM specific chain.&quot; -j neutron-linuxbri-o44a3abfa-1</div><div class="line">root@compute:~#</div></pre></td></tr></table></figure>
<p>tap44a3abfa-12接口的FORWARD流量均扔给neutron-linuxbri-sg-chain处理，访问虚拟机流量扔给neutron-linuxbri-i44a3abfa-1，从虚拟机出来流量扔给neutron-linuxbri-o44a3abfa-1<br>从vm发出流量到 tap44a3abfa-12接口的INPUT扔给neutron-linuxbri-o44a3abfa-1链处理</p>
<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Security-group-安全组-概念&quot;&gt;&lt;a href=&quot;#Security-group-安全组-概念&quot; class=&quot;headerlink&quot; title=&quot;Security group(安全组)概念&quot;&gt;&lt;/a&gt;Security group(安全组)概念&lt;/h1&gt;&lt;p&gt;安全组是通过Linux IPtables实现的，安全组对象是虚拟网卡，由L2 Agent（neutron_openvswitch_agent、neutron_linuxbridfe_agent）实现,在计算节点上通过iptables规则限制虚拟网卡流量进出。其容易和FW混淆，FW主要是异常流量隔离，一般负责跨子网流量不管虚拟网卡间通讯流量。&lt;br&gt;
    
    </summary>
    
      <category term="openstack" scheme="http://vcpu.me/categories/openstack/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="Security group" scheme="http://vcpu.me/tags/Security-group/"/>
    
      <category term="安全组" scheme="http://vcpu.me/tags/%E5%AE%89%E5%85%A8%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>openvSwitch 基础命令行</title>
    <link href="http://vcpu.me/openvswitch4/"/>
    <id>http://vcpu.me/openvswitch4/</id>
    <published>2017-08-08T10:00:00.000Z</published>
    <updated>2017-09-01T09:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建ovs（虚拟交换机）-br0"><a href="#创建ovs（虚拟交换机）-br0" class="headerlink" title="创建ovs（虚拟交换机） br0"></a>创建ovs（虚拟交换机） br0</h1><p>ovs-vsctl add-br br0</p>
<h1 id="创建一根线first-br-lt-gt-first-if"><a href="#创建一根线first-br-lt-gt-first-if" class="headerlink" title="创建一根线first_br&lt;-&gt;first_if"></a>创建一根线first_br&lt;-&gt;first_if</h1><p>ip link add first_br type veth peer name first_if</p>
<h1 id="启动线的两个接口"><a href="#启动线的两个接口" class="headerlink" title="启动线的两个接口"></a>启动线的两个接口</h1><p>ip link set first_br up<br>ip link set first_if up</p>
<h1 id="将接口first-br接入虚拟交换机br0"><a href="#将接口first-br接入虚拟交换机br0" class="headerlink" title="将接口first_br接入虚拟交换机br0"></a>将接口first_br接入虚拟交换机br0</h1><p>ovs-vsctl add-port br0 first_br<br><a id="more"></a></p>
<h1 id="列出网桥的基本信息"><a href="#列出网桥的基本信息" class="headerlink" title="列出网桥的基本信息"></a>列出网桥的基本信息</h1><p>ovs-vsctl list Bridge<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl list Bridge</div><div class="line">_uuid               : 2a47c03f-4060-4b90-ac24-131dbe051446</div><div class="line">auto_attach         : []</div><div class="line">controller          : []</div><div class="line">datapath_id         : &quot;00003ec0472a904b&quot;</div><div class="line">datapath_type       : &quot;&quot;</div><div class="line">datapath_version    : &quot;&lt;unknown&gt;&quot;</div><div class="line">external_ids        : &#123;&#125;</div><div class="line">fail_mode           : []</div><div class="line">flood_vlans         : []</div><div class="line">flow_tables         : &#123;&#125;</div><div class="line">ipfix               : []</div><div class="line">mcast_snooping_enable: false</div><div class="line">mirrors             : []</div><div class="line">name                : &quot;br0&quot;</div><div class="line">netflow             : []</div><div class="line">other_config        : &#123;&#125;</div><div class="line">ports               : [7cb41bb3-ae24-473d-b93a-df5786fb177c, f83add01-bac5-4c63-859c-068a2cd2535d]</div><div class="line">protocols           : []</div><div class="line">rstp_enable         : false</div><div class="line">rstp_status         : &#123;&#125;</div><div class="line">sflow               : []</div><div class="line">status              : &#123;&#125;</div><div class="line">stp_enable          : false</div></pre></td></tr></table></figure></p>
<h1 id="将first-br划分到vlan100中"><a href="#将first-br划分到vlan100中" class="headerlink" title="将first_br划分到vlan100中"></a>将first_br划分到vlan100中</h1><p>ovs-vsctl set Port first_br tag=100</p>
<h1 id="查看接口是否加入到vlan100中"><a href="#查看接口是否加入到vlan100中" class="headerlink" title="查看接口是否加入到vlan100中"></a>查看接口是否加入到vlan100中</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl show</div><div class="line">29c5cc05-2a31-4f14-a304-3a697698f96a</div><div class="line">    Bridge &quot;br0&quot;</div><div class="line">        Port &quot;br0&quot;</div><div class="line">            Interface &quot;br0&quot;</div><div class="line">                type: internal</div><div class="line">        Port first_br</div><div class="line">            tag: 100</div><div class="line">            Interface first_br</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div><div class="line">root@controller-VirtualBox</div></pre></td></tr></table></figure>
<h1 id="将接口移出vlan"><a href="#将接口移出vlan" class="headerlink" title="将接口移出vlan"></a>将接口移出vlan</h1><p>ovs-vsctl clear port first_br tag</p>
<h1 id="将first-br加入trunks中，并且标记tag110"><a href="#将first-br加入trunks中，并且标记tag110" class="headerlink" title="将first_br加入trunks中，并且标记tag110"></a>将first_br加入trunks中，并且标记tag110</h1><p>ovs-vsctl add Port first_br trunks 110,120</p>
<h1 id="将trunks信息去除110-tag，剩余120-tag"><a href="#将trunks信息去除110-tag，剩余120-tag" class="headerlink" title="将trunks信息去除110 tag，剩余120 tag"></a>将trunks信息去除110 tag，剩余120 tag</h1><p>ovs-vsctl remove Port first_br trunks 110</p>
<h1 id="一次性完全把接口first-br清出trunk"><a href="#一次性完全把接口first-br清出trunk" class="headerlink" title="一次性完全把接口first_br清出trunk"></a>一次性完全把接口first_br清出trunk</h1><p>ovs-vsctl clear Port first_br trunks</p>
<h1 id="查看数据库Open-vSwitch内容"><a href="#查看数据库Open-vSwitch内容" class="headerlink" title="查看数据库Open_vSwitch内容"></a>查看数据库Open_vSwitch内容</h1><p>ovsdb-client get-schema Open_vSwitch </p>
<h1 id="查看ovs所有数据库内容，并格式化输出"><a href="#查看ovs所有数据库内容，并格式化输出" class="headerlink" title="查看ovs所有数据库内容，并格式化输出"></a>查看ovs所有数据库内容，并格式化输出</h1><p>ovsdb-client dump</p>
<h1 id="列出当前ovs工作数据库"><a href="#列出当前ovs工作数据库" class="headerlink" title="列出当前ovs工作数据库"></a>列出当前ovs工作数据库</h1><p>ovsdb-client list-dbs</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovsdb-client list-dbs</div><div class="line">Open_vSwitch</div></pre></td></tr></table></figure>
<h1 id="列出当前ovs工作数据库中的表格"><a href="#列出当前ovs工作数据库中的表格" class="headerlink" title="列出当前ovs工作数据库中的表格"></a>列出当前ovs工作数据库中的表格</h1><p>ovsdb-client list-tables Open_vSwitch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovsdb-client list-tables Open_vSwitch</div><div class="line">Table</div><div class="line">-------------------------</div><div class="line">Controller</div><div class="line">Bridge</div><div class="line">Queue</div><div class="line">IPFIX</div><div class="line">NetFlow</div><div class="line">Open_vSwitch</div><div class="line">QoS</div><div class="line">Port</div><div class="line">sFlow</div><div class="line">SSL</div><div class="line">Flow_Sample_Collector_Set</div><div class="line">Mirror</div><div class="line">Flow_Table</div><div class="line">Interface</div><div class="line">AutoAttach</div><div class="line">Manager</div></pre></td></tr></table></figure></p>
<h1 id="列出Open-vSwitch中表格Port所有类型和范围信息"><a href="#列出Open-vSwitch中表格Port所有类型和范围信息" class="headerlink" title="列出Open_vSwitch中表格Port所有类型和范围信息"></a>列出Open_vSwitch中表格Port所有类型和范围信息</h1><p>ovsdb-client list-columns Open_vSwitch Port</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">oot@controller-VirtualBox:~# ovsdb-client list-columns Open_vSwitch Port</div><div class="line">Column            Type</div><div class="line">----------------- -----------------------------------------------------------------------------------------------------</div><div class="line">bond_downdelay    &quot;integer&quot;</div><div class="line">name              &quot;string&quot;</div><div class="line">statistics        &#123;&quot;key&quot;:&quot;string&quot;,&quot;max&quot;:&quot;unlimited&quot;,&quot;min&quot;:0,&quot;value&quot;:&quot;integer&quot;&#125;</div><div class="line">fake_bridge       &quot;boolean&quot;</div><div class="line">mac               &#123;&quot;key&quot;:&quot;string&quot;,&quot;min&quot;:0&#125;</div><div class="line">trunks            &#123;&quot;key&quot;:&#123;&quot;maxInteger&quot;:4095,&quot;minInteger&quot;:0,&quot;type&quot;:&quot;integer&quot;&#125;,&quot;max&quot;:4096,&quot;min&quot;:0&#125;</div><div class="line">_uuid             &quot;uuid&quot;</div><div class="line">tag               &#123;&quot;key&quot;:&#123;&quot;maxInteger&quot;:4095,&quot;minInteger&quot;:0,&quot;type&quot;:&quot;integer&quot;&#125;,&quot;min&quot;:0&#125;</div><div class="line">rstp_status       &#123;&quot;key&quot;:&quot;string&quot;,&quot;max&quot;:&quot;unlimited&quot;,&quot;min&quot;:0,&quot;value&quot;:&quot;string&quot;&#125;</div><div class="line">_version          &quot;uuid&quot;</div><div class="line">bond_updelay      &quot;integer&quot;</div><div class="line">bond_active_slave &#123;&quot;key&quot;:&quot;string&quot;,&quot;min&quot;:0&#125;</div><div class="line">external_ids      &#123;&quot;key&quot;:&quot;string&quot;,&quot;max&quot;:&quot;unlimited&quot;,&quot;min&quot;:0,&quot;value&quot;:&quot;string&quot;&#125;</div><div class="line">other_config      &#123;&quot;key&quot;:&quot;string&quot;,&quot;max&quot;:&quot;unlimited&quot;,&quot;min&quot;:0,&quot;value&quot;:&quot;string&quot;&#125;</div><div class="line">status            &#123;&quot;key&quot;:&quot;string&quot;,&quot;max&quot;:&quot;unlimited&quot;,&quot;min&quot;:0,&quot;value&quot;:&quot;string&quot;&#125;</div><div class="line">qos               &#123;&quot;key&quot;:&#123;&quot;refTable&quot;:&quot;QoS&quot;,&quot;type&quot;:&quot;uuid&quot;&#125;,&quot;min&quot;:0&#125;</div><div class="line">bond_mode         &#123;&quot;key&quot;:&#123;&quot;enum&quot;:[&quot;set&quot;,[&quot;active-backup&quot;,&quot;balance-slb&quot;,&quot;balance-tcp&quot;]],&quot;type&quot;:&quot;string&quot;&#125;,&quot;min&quot;:0&#125;</div><div class="line">bond_fake_iface   &quot;boolean&quot;</div><div class="line">interfaces        &#123;&quot;key&quot;:&#123;&quot;refTable&quot;:&quot;Interface&quot;,&quot;type&quot;:&quot;uuid&quot;&#125;,&quot;max&quot;:&quot;unlimited&quot;&#125;</div><div class="line">vlan_mode         &#123;&quot;key&quot;:&#123;&quot;enum&quot;:[&quot;set&quot;,[&quot;access&quot;,&quot;native-tagged&quot;,&quot;native-untagged&quot;,&quot;trunk&quot;]],&quot;type&quot;:&quot;string&quot;&#125;,&quot;min&quot;:0&#125;</div><div class="line">rstp_statistics   &#123;&quot;key&quot;:&quot;string&quot;,&quot;max&quot;:&quot;unlimited&quot;,&quot;min&quot;:0,&quot;value&quot;:&quot;integer&quot;&#125;</div><div class="line">lacp              &#123;&quot;key&quot;:&#123;&quot;enum&quot;:[&quot;set&quot;,[&quot;active&quot;,&quot;off&quot;,&quot;passive&quot;]],&quot;type&quot;:&quot;string&quot;&#125;,&quot;min&quot;:0&#125;</div></pre></td></tr></table></figure>
<h1 id="列出Port表格的数据信息"><a href="#列出Port表格的数据信息" class="headerlink" title="列出Port表格的数据信息"></a>列出Port表格的数据信息</h1><p>ovsdb-client dump Port</p>
<h1 id="查看ovs-接口信息详情"><a href="#查看ovs-接口信息详情" class="headerlink" title="查看ovs 接口信息详情"></a>查看ovs 接口信息详情</h1><p>ovs-vsctl list Port</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl list Port</div><div class="line">_uuid               : f83add01-bac5-4c63-859c-068a2cd2535d</div><div class="line">bond_active_slave   : []</div><div class="line">bond_downdelay      : 0</div><div class="line">bond_fake_iface     : false</div><div class="line">bond_mode           : []</div><div class="line">bond_updelay        : 0</div><div class="line">external_ids        : &#123;&#125;</div><div class="line">fake_bridge         : false</div><div class="line">interfaces          : [31edb9df-45bc-45ba-90b9-d9e78211ecc6]</div><div class="line">lacp                : []</div><div class="line">mac                 : []</div><div class="line">name                : first_br</div><div class="line">other_config        : &#123;&#125;</div><div class="line">qos                 : []</div><div class="line">rstp_statistics     : &#123;&#125;</div><div class="line">rstp_status         : &#123;&#125;</div><div class="line">statistics          : &#123;&#125;</div><div class="line">status              : &#123;&#125;</div><div class="line">tag                 : []</div><div class="line">trunks              : [120]</div><div class="line">vlan_mode           : []</div><div class="line"></div><div class="line">_uuid               : 7cb41bb3-ae24-473d-b93a-df5786fb177c</div><div class="line">bond_active_slave   : []</div><div class="line">bond_downdelay      : 0</div><div class="line">bond_fake_iface     : false</div><div class="line">bond_mode           : []</div><div class="line">bond_updelay        : 0</div><div class="line">external_ids        : &#123;&#125;</div><div class="line">fake_bridge         : false</div><div class="line">interfaces          : [0f86bf9b-c702-481c-b1e6-0919f1d06c2a]</div><div class="line">lacp                : []</div><div class="line">mac                 : []</div><div class="line">name                : &quot;br0&quot;</div><div class="line">other_config        : &#123;&#125;</div><div class="line">qos                 : []</div><div class="line">rstp_statistics     : &#123;&#125;</div><div class="line">rstp_status         : &#123;&#125;</div><div class="line">statistics          : &#123;&#125;</div><div class="line">status              : &#123;&#125;</div><div class="line">tag                 : []</div><div class="line">trunks              : []</div><div class="line">vlan_mode           : []</div></pre></td></tr></table></figure>
<h1 id="查看ovs交换机学习到的MAC表项"><a href="#查看ovs交换机学习到的MAC表项" class="headerlink" title="查看ovs交换机学习到的MAC表项"></a>查看ovs交换机学习到的MAC表项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@compute:~# ovs-appctl fdb/show br-int</div><div class="line"> port  VLAN  MAC                Age</div><div class="line">    3     2  fa:16:3e:1f:95:2c    0</div><div class="line">    2     1  fa:16:3e:f3:31:f5    0</div><div class="line">    6     1  fa:16:3e:2c:c3:0d    0</div><div class="line">    4     2  fa:16:3e:3c:d2:56    0</div></pre></td></tr></table></figure>
<p>此命令可运用在normal转发时ovs交换机上，如果ovs交换机没有进行normal转发，请通过openflow表项探究流量转发路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建ovs（虚拟交换机）-br0&quot;&gt;&lt;a href=&quot;#创建ovs（虚拟交换机）-br0&quot; class=&quot;headerlink&quot; title=&quot;创建ovs（虚拟交换机） br0&quot;&gt;&lt;/a&gt;创建ovs（虚拟交换机） br0&lt;/h1&gt;&lt;p&gt;ovs-vsctl add-br br0&lt;/p&gt;
&lt;h1 id=&quot;创建一根线first-br-lt-gt-first-if&quot;&gt;&lt;a href=&quot;#创建一根线first-br-lt-gt-first-if&quot; class=&quot;headerlink&quot; title=&quot;创建一根线first_br&amp;lt;-&amp;gt;first_if&quot;&gt;&lt;/a&gt;创建一根线first_br&amp;lt;-&amp;gt;first_if&lt;/h1&gt;&lt;p&gt;ip link add first_br type veth peer name first_if&lt;/p&gt;
&lt;h1 id=&quot;启动线的两个接口&quot;&gt;&lt;a href=&quot;#启动线的两个接口&quot; class=&quot;headerlink&quot; title=&quot;启动线的两个接口&quot;&gt;&lt;/a&gt;启动线的两个接口&lt;/h1&gt;&lt;p&gt;ip link set first_br up&lt;br&gt;ip link set first_if up&lt;/p&gt;
&lt;h1 id=&quot;将接口first-br接入虚拟交换机br0&quot;&gt;&lt;a href=&quot;#将接口first-br接入虚拟交换机br0&quot; class=&quot;headerlink&quot; title=&quot;将接口first_br接入虚拟交换机br0&quot;&gt;&lt;/a&gt;将接口first_br接入虚拟交换机br0&lt;/h1&gt;&lt;p&gt;ovs-vsctl add-port br0 first_br&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="虚拟交换机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="cmd" scheme="http://vcpu.me/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>openvSwitch flow</title>
    <link href="http://vcpu.me/openvswitch3/"/>
    <id>http://vcpu.me/openvswitch3/</id>
    <published>2017-08-07T10:00:00.000Z</published>
    <updated>2017-08-07T07:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenvSwitch-flow"><a href="#OpenvSwitch-flow" class="headerlink" title="OpenvSwitch  flow"></a>OpenvSwitch  flow</h2><p>OpenFlow 是用于管理交换机流表的协议，ovs-ofctl 则是 OVS 提供的命令行工具。在没有配置 OpenFlow 控制器的模式下，可以使用 ovs-ofctl 命令通过 OpenFlow 协议去连接 OVS，创建、修改或删除 OVS 中的流表项，并对 OVS 的运行状况进行动态监控。</p>
<h2 id="ovs-ofctl流表操作命令"><a href="#ovs-ofctl流表操作命令" class="headerlink" title="ovs-ofctl流表操作命令"></a>ovs-ofctl流表操作命令</h2><p>ovs-ofctl add−flow／add−flows／mod−flows “流表匹配条件,actions=[target][,target…]”</p>
<h3 id="流表匹配条件"><a href="#流表匹配条件" class="headerlink" title="流表匹配条件"></a>流表匹配条件</h3><p>在 OVS 中，流表项作为 ovs-ofctl 的参数，采用如下的格式：字段=值。如果有多个字段，可以用逗号或者空格分开<br><img src="/myimages/flow.png" alt="flow"><br><a id="more"></a></p>
<h3 id="流表执行的动作"><a href="#流表执行的动作" class="headerlink" title="流表执行的动作"></a>流表执行的动作</h3><p>流表可以有多个执行动作，是从左向右以此执行，常用动作如下：</p>
<ul>
<li>output:port: 输出数据包到指定的端口。port 是指端口的 OpenFlow 端口编号</li>
<li>group:group_id 输出数据包到openflow group。group_id是指openflow group的id</li>
<li><p>enqueue:port:queue 将数据包放到openflow port端口的queue号队列中</p>
</li>
<li><p>mod_vlan_vid: vlan_id 修改数据包中的 VLAN tag为vlan_id,如果数据包中无tag，则添加。如果数据包中已经是vlan_id，同时调整期vlan优先级为0</p>
</li>
<li>strip_vlan: 移除数据包中的 VLAN tag</li>
<li>mod_dl_src/ mod_dl_dest: 修改源或者目标的 MAC 地址信息</li>
<li>mod_nw_src/mod_nw_dst: 修改源或者目标的 IPv4 地址信息</li>
<li>mod_tp_src/mod_tp_dst: 将数据包的TCP/UDP/SCTP源或则目的端口</li>
<li><p>drop 将数据包丢弃</p>
</li>
<li><p>resubmit:port: 替换流表的 in_port 字段，并重新进行匹配</p>
</li>
<li>load:value−&gt;dst[start..end]: 写数据到指定的字段</li>
<li>move:src[start..end]−&gt;dst[start..end] 含义未探究清楚、待定</li>
<li><p>learn(argument[,argument]…) 含义未探究清楚、待定</p>
</li>
<li><p>normal 按照常规L2/L3处理流程处理数据包</p>
</li>
<li>flood 将数据包输出到除该数据包输入口外和不可被flooding端口外的所有物理端口</li>
<li>all 将数据包输出到除了该数据包的输入口外的所有物理口</li>
<li>local 将数据包输出到与bridge同名的端口</li>
<li>in_port 将数据包输出到其输入口</li>
<li><p>controller(key=value) 将数据包以“packet in”消息形式发给openflow控制器<br>max_len=nbytes 将数据包的nbytes字节数据发给控制器<br>reason=reason 指明“packet in” reason; action(默认reason)、no_match、invalid_ttl<br>id=controller-id 指明要发送给的控制器id</p>
</li>
<li><p>mod_nw_tos:tos 修改ip头的服务类型tos中的高六位（修改数值4的倍数[0,255]之间）</p>
</li>
<li>mod_nw_ecn:ecn 修改ip头的服务类型tos中底2位</li>
<li>mod_nw_ttl:ttl 修改TTL[0,255]</li>
<li>set_tunnel:id</li>
</ul>
<h2 id="flow-table使用实例"><a href="#flow-table使用实例" class="headerlink" title="flow table使用实例"></a>flow table使用实例</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><ul>
<li><p>创建一个Virtual Switch br0</p>
</li>
<li><p>包含下面四个Port：<br>first_br, truck port<br>second_br, VLAN 20<br>third_br, forth_br VLAN 30</p>
</li>
<li><p>包含五个flow table:<br>Table 0: Admission control.<br>Table 1: VLAN input processing.<br>Table 2: Learn source MAC and VLAN for ingress port.<br>Table 3: Look up learned port for destination MAC and VLAN.<br>Table 4: Output processing</p>
</li>
</ul>
<h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">     +----+                          +----+</div><div class="line">     |    |  first_if                |    |  second_if</div><div class="line">     +----+                          +----+</div><div class="line">        |                               |</div><div class="line">        |                               |</div><div class="line">        |                               |</div><div class="line">        |                               |</div><div class="line">        |   first_br                    |   second_br</div><div class="line">      +---+                           +---+</div><div class="line">+-------------------------------------------------------+</div><div class="line">|     +---+                           +---+             |</div><div class="line">|                                                       |</div><div class="line">|                                                       |</div><div class="line">|                     br0                               |</div><div class="line">|                                                       |</div><div class="line">|                                                       |</div><div class="line">|    +---+                             +---+            |</div><div class="line">+-------------------------------------------------------+</div><div class="line">     +---+ third_br                    +---+ forth_br</div><div class="line">       |                                 |</div><div class="line">       |                                 |</div><div class="line">       |                                 |</div><div class="line">       |   third_if                      |   forth_if</div><div class="line">     +---+                             +----+</div><div class="line">     +---+                             +----+</div></pre></td></tr></table></figure>
<h3 id="实验拓扑基础环境实现脚本"><a href="#实验拓扑基础环境实现脚本" class="headerlink" title="实验拓扑基础环境实现脚本"></a>实验拓扑基础环境实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br br0</div><div class="line">ip link add first_br type veth peer name first</div><div class="line">ip link add second_br type veth peer name second_if</div><div class="line">ip link add third_br type veth peer name third_if</div><div class="line">ip link add forth_br type veth peer name forth_if</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br0 first_br -- set Interface first_br ofport_request=1</div><div class="line">ovs-vsctl add-port br0 second_br -- set Interface second_br ofport_request=2</div><div class="line">ovs-vsctl add-port br0 third_br -- set Interface third_br ofport_request=3</div><div class="line">ovs-vsctl add-port br0 forth_br -- set Interface forth_br ofport_request=4</div><div class="line"></div><div class="line">ip link set first_if up</div><div class="line">ip link set first_br up</div><div class="line">ip link set second_br up</div><div class="line">ip link set second_if up</div><div class="line">ip link set third_if up</div><div class="line">ip link set third_br up</div><div class="line">ip link set forth_br up</div><div class="line">ip link set forth_if up</div></pre></td></tr></table></figure>
<p>脚本执行完成后，查看flow策略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-ofctl dump-flows br0</div><div class="line">NXST_FLOW reply (xid=0x4):</div><div class="line"> cookie=0x0, duration=52.681s, table=0, n_packets=0, n_bytes=0, idle_age=52, priority=0 actions=NORMA</div></pre></td></tr></table></figure></p>
<h3 id="flow-table-0-策略（基础策略，所有数据包都先经过我）"><a href="#flow-table-0-策略（基础策略，所有数据包都先经过我）" class="headerlink" title="flow table 0 策略（基础策略，所有数据包都先经过我）"></a>flow table 0 策略（基础策略，所有数据包都先经过我）</h3><p>数据包会首先进入flow table0，因此这里的flow table策略相当于总开关</p>
<h4 id="多播不允许进入ovs-br0"><a href="#多播不允许进入ovs-br0" class="headerlink" title="多播不允许进入ovs br0"></a>多播不允许进入ovs br0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00, actions=drop&quot;</div></pre></td></tr></table></figure>
<h4 id="STP报文丢弃"><a href="#STP报文丢弃" class="headerlink" title="STP报文丢弃"></a>STP报文丢弃</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, actions=drop&quot;</div></pre></td></tr></table></figure>
<h4 id="如果非上述两种类数据包交给table-1策略处理"><a href="#如果非上述两种类数据包交给table-1策略处理" class="headerlink" title="如果非上述两种类数据包交给table 1策略处理"></a>如果非上述两种类数据包交给table 1策略处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=0, priority=0, actions=resubmit(,1)&quot;</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul>
<li>命中 table=0 cookie=0 dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0<br>OpenFlow actions=drop</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:05</div><div class="line">Bridge: br0</div><div class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:05,dl_type=0x0000</div><div class="line"></div><div class="line">Rule: table=0 cookie=0 dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0</div><div class="line">OpenFlow actions=drop</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">Datapath actions: drop</div></pre></td></tr></table></figure>
<ul>
<li>命中table=0 cookie=0 priority=0 OpenFlow actions=resubmit(,1)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:10</div><div class="line">Bridge: br0</div><div class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10,dl_type=0x0000</div><div class="line"></div><div class="line">Rule: table=0 cookie=0 priority=0</div><div class="line">OpenFlow actions=resubmit(,1)</div></pre></td></tr></table></figure>
<h3 id="flow-table-1-策略（搭建含有trunk、vlan概念的基本组网信息）"><a href="#flow-table-1-策略（搭建含有trunk、vlan概念的基本组网信息）" class="headerlink" title="flow table 1 策略（搭建含有trunk、vlan概念的基本组网信息）"></a>flow table 1 策略（搭建含有trunk、vlan概念的基本组网信息）</h3><h4 id="table-1-默认策略为数据包丢弃"><a href="#table-1-默认策略为数据包丢弃" class="headerlink" title="table 1 默认策略为数据包丢弃"></a>table 1 默认策略为数据包丢弃</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=1, priority=0, actions=drop&quot;</div></pre></td></tr></table></figure>
<h4 id="table-1-从first-br-in-port-1-进入的数据包继续交给table-2处理"><a href="#table-1-从first-br-in-port-1-进入的数据包继续交给table-2处理" class="headerlink" title="table 1 从first_br(in_port=1)进入的数据包继续交给table 2处理"></a>table 1 从first_br(in_port=1)进入的数据包继续交给table 2处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=1, priority=99, in_port=1, actions=resubmit(,2)&quot;</div></pre></td></tr></table></figure>
<p><strong> 测试：从first_br进入br0 tag为5的数据包直接交给table2处理 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=5</div><div class="line">Bridge: br0</div><div class="line">Flow: in_port=1,vlan_tci=0x0005,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line"></div><div class="line">Rule: table=0 cookie=0 priority=0</div><div class="line">OpenFlow actions=resubmit(,1)</div><div class="line">    Resubmitted flow: in_port=1,vlan_tci=0x0005,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line">    Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0</div><div class="line">    Resubmitted  odp: drop</div><div class="line">    Resubmitted megaflow: recirc_id=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">    Rule: table=1 cookie=0 priority=99,in_port=1</div><div class="line">    OpenFlow actions=resubmit(,2)</div></pre></td></tr></table></figure></p>
<h4 id="从其它口进入数据包，没有tag加上对应tag，有tag则不动"><a href="#从其它口进入数据包，没有tag加上对应tag，有tag则不动" class="headerlink" title="从其它口进入数据包，没有tag加上对应tag，有tag则不动"></a>从其它口进入数据包，没有tag加上对应tag，有tag则不动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flows br0 - &lt;&lt;&apos;EOF&apos; </div><div class="line">table=1, priority=99, in_port=2, vlan_tci=0, actions=mod_vlan_vid:20, resubmit(,2) </div><div class="line">table=1, priority=99, in_port=3, vlan_tci=0, actions=mod_vlan_vid:30, resubmit(,2) </div><div class="line">table=1, priority=99, in_port=4, vlan_tci=0, actions=mod_vlan_vid:30, resubmit(,2) </div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>执行完上述标签操作后，其拓扑图更改如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">      +----+                          +----+</div><div class="line">      |    |  first_if                |    |  second_if</div><div class="line">      +----+                          +----+</div><div class="line">         |                               |</div><div class="line">         |                               |</div><div class="line">         |                               |</div><div class="line">         |                               |    vlan 20</div><div class="line">trunk口   |                               |</div><div class="line">         |   first_br                    |   second_br</div><div class="line">       +---+                           +---+</div><div class="line"> +-------------------------------------------------------+</div><div class="line"> |     +---+                           +---+             |</div><div class="line"> |                                                       |</div><div class="line"> |                                                       |</div><div class="line"> |                     br0                               |</div><div class="line"> |                                                       |</div><div class="line"> |                                                       |</div><div class="line"> |    +---+                             +---+            |</div><div class="line"> +-------------------------------------------------------+</div><div class="line">      +---+ third_br                    +---+ forth_br</div><div class="line">        |                                 |</div><div class="line">        |    vlan30                       |     vlan30</div><div class="line">        |                                 |</div><div class="line">        |                                 |</div><div class="line">        |   third_if                      |   forth_if</div><div class="line">      +---+                             +----+</div><div class="line">      +---+                             +----+</div></pre></td></tr></table></figure></p>
<p><strong> 测试1：从接口second_br进入br0数据包被加上tag20标签交给了table2处理 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace br0 in_port=2</div><div class="line">Bridge: br0</div><div class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line"></div><div class="line">Rule: table=0 cookie=0 priority=0</div><div class="line">OpenFlow actions=resubmit(,1)</div><div class="line"></div><div class="line">    Resubmitted flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line">    Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0</div><div class="line">    Resubmitted  odp: drop</div><div class="line">    Resubmitted megaflow: recirc_id=0,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">    Rule: table=1 cookie=0 priority=99,in_port=2,vlan_tci=0x0000</div><div class="line">    OpenFlow actions=mod_vlan_vid:20,resubmit(,2)</div><div class="line"></div><div class="line">        Resubmitted flow: in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line">        Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0</div><div class="line">        Resubmitted  odp: drop</div><div class="line">        Resubmitted megaflow: recirc_id=0,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">        Rule: table=254 cookie=0 priority=0,reg0=0x2</div><div class="line">        OpenFlow actions=drop</div><div class="line"></div><div class="line">Final flow: in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line">Megaflow: recirc_id=0,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">Datapath actions: drop</div></pre></td></tr></table></figure></p>
<p><strong>测试2:tag 5的数据包从second_br进入br0，命中默认丢包策略</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace br0 in_port=2,vlan_tci=5</div><div class="line">Bridge: br0</div><div class="line">Flow: in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line"></div><div class="line">Rule: table=0 cookie=0 priority=0</div><div class="line">OpenFlow actions=resubmit(,1)</div><div class="line"></div><div class="line">    Resubmitted flow: in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</div><div class="line">    Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0</div><div class="line">    Resubmitted  odp: drop</div><div class="line">    Resubmitted megaflow: recirc_id=0,in_port=2,vlan_tci=0x0001/0x0001,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">    Rule: table=1 cookie=0 priority=0</div><div class="line">    OpenFlow actions=drop</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=2,vlan_tci=0x0001/0x1001,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</div><div class="line">Datapath actions: drop</div></pre></td></tr></table></figure></p>
<h3 id="flow-table-2-策略（让br0具有mac学习能力）"><a href="#flow-table-2-策略（让br0具有mac学习能力）" class="headerlink" title="flow table 2 策略（让br0具有mac学习能力）"></a>flow table 2 策略（让br0具有mac学习能力）</h3><h4 id="学习port-mac-vlan-tag-数据表将学习结果放到table10，学习后交给table3继续处理"><a href="#学习port-mac-vlan-tag-数据表将学习结果放到table10，学习后交给table3继续处理" class="headerlink" title="学习port-mac-vlan tag 数据表将学习结果放到table10，学习后交给table3继续处理"></a>学习port-mac-vlan tag 数据表将学习结果放到table10，学习后交给table3继续处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11], NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]), resubmit(,3)&quot;</div></pre></td></tr></table></figure>
<ul>
<li>learn表示这是一个学习的action</li>
<li>table 10，这是一个MAC learning table，学习的结果会放在这个table中。</li>
<li>NXM_OF_VLAN_TCI这个是VLAN Tag，在MAC Learning * table中，每一个entry都是仅仅对某一个VLAN来说的，不同VLAN的learning table是分开的。在学习的结果的entry中，会标出这个entry是对于哪个VLAN的。</li>
<li>NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[]这个的意思是当前包里面的MAC Source Address会被放在学习结果的entry里面的dl_dst里面。这是因为每个switch都是通过Ingress包来学习，某个MAC从某个port进来，switch就应该记住以后发往这个MAC的包要从这个port出去，因而MAC source address就被放在了Mac destination address里面，因为这是为发送用的。</li>
<li>NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0将portf放入register.</li>
<li>一般对于学习的entry还需要有hard_timeout，这是的每个学习结果都会expire，需要重新学习。</li>
</ul>
<h4 id="table2-转发表项学习测试"><a href="#table2-转发表项学习测试" class="headerlink" title="table2 转发表项学习测试"></a>table2 转发表项学习测试</h4><h5 id="产生从接口first-br进入br0-vlan20的数据包"><a href="#产生从接口first-br进入br0-vlan20的数据包" class="headerlink" title="产生从接口first_br进入br0 vlan20的数据包"></a>产生从接口first_br进入br0 vlan20的数据包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=20,dl_src=50:00:00:00:00:01 -generate</div></pre></td></tr></table></figure>
<p>结果：执行 ovs-ofctl dump-flows br0时候学习到了一个table10表项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie=0x0, duration=3.235s, table=10, n_packets=0, n_bytes=0, idle_age=3, vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</div></pre></td></tr></table></figure></p>
<h3 id="table-3策略（把table2学习到的转发策略运用起来）"><a href="#table-3策略（把table2学习到的转发策略运用起来）" class="headerlink" title="table 3策略（把table2学习到的转发策略运用起来）"></a>table 3策略（把table2学习到的转发策略运用起来）</h3><h4 id="针对于要发送的数据包，根据学习结果table10进行转发，不用每次flood"><a href="#针对于要发送的数据包，根据学习结果table10进行转发，不用每次flood" class="headerlink" title="针对于要发送的数据包，根据学习结果table10进行转发，不用每次flood"></a>针对于要发送的数据包，根据学习结果table10进行转发，不用每次flood</h4><p>下面命令含义是：先到table10查找，如果找不到相应策略再交给table4处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=3 priority=50 actions=resubmit(,10), resubmit(,4)&quot;</div></pre></td></tr></table></figure></p>
<h4 id="查找学习表项排除多播和广播"><a href="#查找学习表项排除多播和广播" class="headerlink" title="查找学习表项排除多播和广播"></a>查找学习表项排除多播和广播</h4><p>如果数据包为多播火灾 广播，就不需要查找table10，直接交给table4处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=3 priority=99 dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)&quot;</div></pre></td></tr></table></figure></p>
<h3 id="table-4策略（让vlan和trunk隔离工作起来）"><a href="#table-4策略（让vlan和trunk隔离工作起来）" class="headerlink" title="table 4策略（让vlan和trunk隔离工作起来）"></a>table 4策略（让vlan和trunk隔离工作起来）</h3><h4 id="对于接口first-br，是trunk-port，如果数据包携带tag，就让其带着从改接口出去"><a href="#对于接口first-br，是trunk-port，如果数据包携带tag，就让其带着从改接口出去" class="headerlink" title="对于接口first_br，是trunk port，如果数据包携带tag，就让其带着从改接口出去"></a>对于接口first_br，是trunk port，如果数据包携带tag，就让其带着从改接口出去</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow br0 &quot;table=4 reg0=1 actions=1&quot;</div></pre></td></tr></table></figure>
<h4 id="对于接口234，发出时候需要去除vlan标签"><a href="#对于接口234，发出时候需要去除vlan标签" class="headerlink" title="对于接口234，发出时候需要去除vlan标签"></a>对于接口234，发出时候需要去除vlan标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flows br0 - &lt;&lt;&apos;EOF&apos;   </div><div class="line">        table=4 reg0=2 actions=strip_vlan,2 </div><div class="line">        table=4 reg0=3 actions=strip_vlan,3 </div><div class="line">        table=4 reg0=4 actions=strip_vlan,4 </div><div class="line">EOF</div></pre></td></tr></table></figure>
<h4 id="对于broadcast，增加策略让其在一个广播域发送数据包"><a href="#对于broadcast，增加策略让其在一个广播域发送数据包" class="headerlink" title="对于broadcast，增加策略让其在一个广播域发送数据包"></a>对于broadcast，增加策略让其在一个广播域发送数据包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flows br0 - &lt;&lt;&apos;EOF&apos;   </div><div class="line">        table=4 reg0=0 priority=99 dl_vlan=20 actions=1,strip_vlan,2 </div><div class="line">        table=4 reg0=0 priority=99 dl_vlan=30 actions=1,strip_vlan,3,4 </div><div class="line">        table=4 reg0=0 priority=50 actions=1 </div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>所以对于register = 0的，也即是broadcast的，属于vlan 20的，则从port 1, 2出去，属于vlan 30的，则从port 1, 3, 4出去。</p>
<h4 id="table4-广播隔离测试"><a href="#table4-广播隔离测试" class="headerlink" title="table4 广播隔离测试"></a>table4 广播隔离测试</h4><h5 id="从first-br来的tag-30数据包广播"><a href="#从first-br来的tag-30数据包广播" class="headerlink" title="从first_br来的tag=30数据包广播"></a>从first_br来的tag=30数据包广播</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-appctl ofproto/trace br0 in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=30</div></pre></td></tr></table></figure>
<h5 id="从接口third-br-in-port-3-进入的数据包被加上tag30标签，转发给接口1接口4"><a href="#从接口third-br-in-port-3-进入的数据包被加上tag30标签，转发给接口1接口4" class="headerlink" title="从接口third_br(in_port 3)进入的数据包被加上tag30标签，转发给接口1接口4"></a>从接口third_br(in_port 3)进入的数据包被加上tag30标签，转发给接口1接口4</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-appctl ofproto/trace br0 in_port=3,dl_dst=ff:ff:ff:ff:ff:ff</div></pre></td></tr></table></figure>
<h5 id="首次产生的数据包，因同属于tag30会被发送给接口3和接口4"><a href="#首次产生的数据包，因同属于tag30会被发送给接口3和接口4" class="headerlink" title="首次产生的数据包，因同属于tag30会被发送给接口3和接口4"></a>首次产生的数据包，因同属于tag30会被发送给接口3和接口4</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 -generate</div></pre></td></tr></table></figure>
<p>学习了20:00:00:00:00:01 in_port=1 tag 30 到table10 </p>
<h5 id="数据包回复时候，仅仅从接口1发出去"><a href="#数据包回复时候，仅仅从接口1发出去" class="headerlink" title="数据包回复时候，仅仅从接口1发出去"></a>数据包回复时候，仅仅从接口1发出去</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-appctl ofproto/trace br0 in_port=4,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01 -generate</div></pre></td></tr></table></figure>
<p>根据上述表项进行数据包转发，不需要flood数据包之需要发给接口1<br>并且学习到了20:00:00:00:00:01 in_port=4 tag=30</p>
<h5 id="数据包包回复时候，仅仅发给接口4"><a href="#数据包包回复时候，仅仅发给接口4" class="headerlink" title="数据包包回复时候，仅仅发给接口4"></a>数据包包回复时候，仅仅发给接口4</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 -generate</div></pre></td></tr></table></figure>
<p>根据上述表项进行数据包转发，不需要flood数据包之需要发给接口4</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OpenvSwitch-flow&quot;&gt;&lt;a href=&quot;#OpenvSwitch-flow&quot; class=&quot;headerlink&quot; title=&quot;OpenvSwitch  flow&quot;&gt;&lt;/a&gt;OpenvSwitch  flow&lt;/h2&gt;&lt;p&gt;OpenFlow 是用于管理交换机流表的协议，ovs-ofctl 则是 OVS 提供的命令行工具。在没有配置 OpenFlow 控制器的模式下，可以使用 ovs-ofctl 命令通过 OpenFlow 协议去连接 OVS，创建、修改或删除 OVS 中的流表项，并对 OVS 的运行状况进行动态监控。&lt;/p&gt;
&lt;h2 id=&quot;ovs-ofctl流表操作命令&quot;&gt;&lt;a href=&quot;#ovs-ofctl流表操作命令&quot; class=&quot;headerlink&quot; title=&quot;ovs-ofctl流表操作命令&quot;&gt;&lt;/a&gt;ovs-ofctl流表操作命令&lt;/h2&gt;&lt;p&gt;ovs-ofctl add−flow／add−flows／mod−flows “流表匹配条件,actions=[target][,target…]”&lt;/p&gt;
&lt;h3 id=&quot;流表匹配条件&quot;&gt;&lt;a href=&quot;#流表匹配条件&quot; class=&quot;headerlink&quot; title=&quot;流表匹配条件&quot;&gt;&lt;/a&gt;流表匹配条件&lt;/h3&gt;&lt;p&gt;在 OVS 中，流表项作为 ovs-ofctl 的参数，采用如下的格式：字段=值。如果有多个字段，可以用逗号或者空格分开&lt;br&gt;&lt;img src=&quot;/myimages/flow.png&quot; alt=&quot;flow&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="虚拟交换机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="ovs-ofctl" scheme="http://vcpu.me/tags/ovs-ofctl/"/>
    
  </entry>
  
  <entry>
    <title>openvSwitch tunnel</title>
    <link href="http://vcpu.me/openvswitch2/"/>
    <id>http://vcpu.me/openvswitch2/</id>
    <published>2017-08-03T10:00:00.000Z</published>
    <updated>2017-08-07T09:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ovs-tunnel"><a href="#ovs-tunnel" class="headerlink" title="ovs tunnel"></a>ovs tunnel</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/myimages/tunnel.png" alt="tunnel"></p>
<h3 id="实验拓扑搭建基础脚本"><a href="#实验拓扑搭建基础脚本" class="headerlink" title="实验拓扑搭建基础脚本"></a>实验拓扑搭建基础脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#vbox虚拟机1</div><div class="line">ip netns add left</div><div class="line">ip link add name veth1 type veth peer name sw1-p1</div><div class="line">ip link set dev veth1 netns left</div><div class="line">ip netns exec left ifconfig veth1 10.0.0.1/24 up</div><div class="line"></div><div class="line">ovs-vsctl add-br sw1</div><div class="line">ovs-vsctl add-port sw1 sw1-p1</div><div class="line">ip link set sw1-p1 up</div><div class="line"></div><div class="line">#vbox虚拟机2</div><div class="line">ip netns add right</div><div class="line">ip link add name veth1 type veth peer name sw2-p1</div><div class="line">ip link set dev veth1 netns right</div><div class="line">ip netns exec right ifconfig veth1 10.0.0.2/24 up</div><div class="line"></div><div class="line">ovs-vsctl add-br sw2</div><div class="line">ovs-vsctl add-port sw2 sw2-p1</div><div class="line">ip link set sw2-p1 up</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="GRE-TUNNEL-配置"><a href="#GRE-TUNNEL-配置" class="headerlink" title="GRE TUNNEL 配置"></a>GRE TUNNEL 配置</h3><ul>
<li><p>vbox虚拟机1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port sw1 tun0 -- set Interface tun0 type=gre options:remote_ip=10.30.10.141</div></pre></td></tr></table></figure>
</li>
<li><p>vbox虚拟机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port sw2 tun0 -- set Interface tun0 type=gre options:remote_ip=10.30.10.145</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h4><ul>
<li><p>vbox虚拟机1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl show</div><div class="line">29c5cc05-2a31-4f14-a304-3a697698f96a</div><div class="line">    Bridge &quot;sw1&quot;</div><div class="line">        Port &quot;sw1&quot;</div><div class="line">            Interface &quot;sw1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;sw1-p1&quot;</div><div class="line">            Interface &quot;sw1-p1&quot;</div><div class="line">        Port &quot;tun0&quot;</div><div class="line">            Interface &quot;tun0&quot;</div><div class="line">                type: gre</div><div class="line">                options: &#123;remote_ip=&quot;10.30.10.141&quot;&#125;</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>vbox虚拟机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl show</div><div class="line">0f92aaa0-5385-48f5-a54a-644e05652f59</div><div class="line">    Bridge &quot;sw2&quot;</div><div class="line">        Port &quot;sw2-p1&quot;</div><div class="line">            Interface &quot;sw2-p1&quot;</div><div class="line">        Port &quot;sw2&quot;</div><div class="line">            Interface &quot;sw2&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;tun0&quot;</div><div class="line">            Interface &quot;tun0&quot;</div><div class="line">                type: gre</div><div class="line">                options: &#123;remote_ip=&quot;10.30.10.145&quot;&#125;</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div><div class="line">root@controller-VirtualBox</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="连通性测试-在vbox虚拟机1-left-ns中ping虚拟机2-right"><a href="#连通性测试-在vbox虚拟机1-left-ns中ping虚拟机2-right" class="headerlink" title="连通性测试,在vbox虚拟机1 left ns中ping虚拟机2 right"></a>连通性测试,在vbox虚拟机1 left ns中ping虚拟机2 right</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec left ping 10.0.0.2</div><div class="line">PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.</div><div class="line">64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=0.953 ms</div><div class="line">64 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=0.609 ms</div></pre></td></tr></table></figure>
<h3 id="VXLAN-TUNNEL配置"><a href="#VXLAN-TUNNEL配置" class="headerlink" title="VXLAN TUNNEL配置"></a>VXLAN TUNNEL配置</h3><ul>
<li><p>vbox虚拟机1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port sw1 tun0 -- set Interface tun0 type=vxlan options:local_ip=10.30.10.145 options:remote_ip=10.30.10.141</div></pre></td></tr></table></figure>
</li>
<li><p>vbbox虚拟机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port sw2 tun0 -- set Interface tun0 type=vxlan options:local_ip=10.30.10.141 options:remote_ip=10.30.10.145</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="查看配置-1"><a href="#查看配置-1" class="headerlink" title="查看配置"></a>查看配置</h4><ul>
<li><p>vbox虚拟机1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl show</div><div class="line">29c5cc05-2a31-4f14-a304-3a697698f96a</div><div class="line">    Bridge &quot;sw1&quot;</div><div class="line">        Port &quot;sw1&quot;</div><div class="line">            Interface &quot;sw1&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;sw1-p1&quot;</div><div class="line">            Interface &quot;sw1-p1&quot;</div><div class="line">        Port &quot;tun0&quot;</div><div class="line">            Interface &quot;tun0&quot;</div><div class="line">                type: vxlan</div><div class="line">                options: &#123;local_ip=&quot;10.30.10.145&quot;, remote_ip=&quot;10.30.10.141&quot;&#125;</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>vbox虚拟机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl show</div><div class="line">0f92aaa0-5385-48f5-a54a-644e05652f59</div><div class="line">    Bridge &quot;sw2&quot;</div><div class="line">        Port &quot;sw2-p1&quot;</div><div class="line">            Interface &quot;sw2-p1&quot;</div><div class="line">        Port &quot;sw2&quot;</div><div class="line">            Interface &quot;sw2&quot;</div><div class="line">                type: internal</div><div class="line">        Port &quot;tun0&quot;</div><div class="line">            Interface &quot;tun0&quot;</div><div class="line">                type: vxlan</div><div class="line">                options: &#123;local_ip=&quot;10.30.10.141&quot;, remote_ip=&quot;10.30.10.145&quot;&#125;</div><div class="line">    ovs_version: &quot;2.5.2&quot;</div><div class="line">root@controller-VirtualBox:~#</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="连通性测试-在vbox虚拟机1-left-ns中ping虚拟机2-right-1"><a href="#连通性测试-在vbox虚拟机1-left-ns中ping虚拟机2-right-1" class="headerlink" title="连通性测试,在vbox虚拟机1 left ns中ping虚拟机2 right"></a>连通性测试,在vbox虚拟机1 left ns中ping虚拟机2 right</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec left ping 10.0.0.2</div><div class="line">PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.</div><div class="line">64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=0.905 ms</div><div class="line">64 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=0.490 ms</div><div class="line">2 packets transmitted, 2 received, 0% packet loss, time 1001ms</div><div class="line">rtt min/avg/max/mdev = 0.490/0.697/0.905/0.209 ms</div></pre></td></tr></table></figure>
<h3 id="ipsec-gre配置"><a href="#ipsec-gre配置" class="headerlink" title="ipsec_gre配置"></a>ipsec_gre配置</h3><p>如果运行失败或则无法创建接口，首先安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install openvswitch* -y</div></pre></td></tr></table></figure></p>
<ul>
<li><p>vbox虚拟机1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port sw1 tun0 -- set interface tun0 type=ipsec_gre options:remote_ip=10.30.10.141 options:psk=test123</div></pre></td></tr></table></figure>
</li>
<li><p>vbbox虚拟机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port sw2 tun0 -- set interface tun0 type=ipsec_gre options:remote_ip=10.30.10.145 options:psk=test123</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在ipsec gre tunnel情况下，我的环境中并没有完成连通，而且日志中也没有报错；具体原因还需要探究。当然我已经翻阅论坛，然并卵，哎。。。，暂且未解之谜吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ovs-tunnel&quot;&gt;&lt;a href=&quot;#ovs-tunnel&quot; class=&quot;headerlink&quot; title=&quot;ovs tunnel&quot;&gt;&lt;/a&gt;ovs tunnel&lt;/h2&gt;&lt;h3 id=&quot;实验拓扑&quot;&gt;&lt;a href=&quot;#实验拓扑&quot; class=&quot;headerlink&quot; title=&quot;实验拓扑&quot;&gt;&lt;/a&gt;实验拓扑&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/myimages/tunnel.png&quot; alt=&quot;tunnel&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实验拓扑搭建基础脚本&quot;&gt;&lt;a href=&quot;#实验拓扑搭建基础脚本&quot; class=&quot;headerlink&quot; title=&quot;实验拓扑搭建基础脚本&quot;&gt;&lt;/a&gt;实验拓扑搭建基础脚本&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#vbox虚拟机1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip netns add left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip link add name veth1 type veth peer name sw1-p1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip link set dev veth1 netns left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip netns exec left ifconfig veth1 10.0.0.1/24 up&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ovs-vsctl add-br sw1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ovs-vsctl add-port sw1 sw1-p1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip link set sw1-p1 up&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#vbox虚拟机2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip netns add right&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip link add name veth1 type veth peer name sw2-p1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip link set dev veth1 netns right&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip netns exec right ifconfig veth1 10.0.0.2/24 up&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ovs-vsctl add-br sw2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ovs-vsctl add-port sw2 sw2-p1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ip link set sw2-p1 up&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="虚拟交换机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="gre" scheme="http://vcpu.me/tags/gre/"/>
    
      <category term="vxlan" scheme="http://vcpu.me/tags/vxlan/"/>
    
      <category term="ovx tunnel" scheme="http://vcpu.me/tags/ovx-tunnel/"/>
    
      <category term="ipsec gre" scheme="http://vcpu.me/tags/ipsec-gre/"/>
    
  </entry>
  
  <entry>
    <title>openvSwitch mirror、Qos、STP</title>
    <link href="http://vcpu.me/openvswitch1/"/>
    <id>http://vcpu.me/openvswitch1/</id>
    <published>2017-08-03T10:00:00.000Z</published>
    <updated>2017-08-03T07:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ovs-mirror"><a href="#ovs-mirror" class="headerlink" title="ovs mirror"></a>ovs mirror</h2><h3 id="ovs-mirror介绍"><a href="#ovs-mirror介绍" class="headerlink" title="ovs mirror介绍"></a>ovs mirror介绍</h3><p>mirror可以将虚拟交换机把数据包发给的接口或则vlan</p>
<ul>
<li><p>命令中对数据包选择选项：<br>select_all，所有的包<br>select_dst_port<br>select_src_port<br>select_vlan</p>
</li>
<li><p>将数据包镜像的命令：<br>output_port (SPAN Switched Port ANalyzer 本地流量)<br>output_vlan (RSPAN Remote Switched Port ANalyzer 远程流量)</p>
</li>
</ul>
<h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/myimages/ovsmirror.png" alt="ovsmirror"></p>
<a id="more"></a>
<h3 id="拓扑实现脚本"><a href="#拓扑实现脚本" class="headerlink" title="拓扑实现脚本"></a>拓扑实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line">ip netns add ns3</div><div class="line">ip netns add ns4</div><div class="line">ip netns add ns5</div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip addr add 1.1.1.1/24 dev tap1</div><div class="line">ip netns exec ns1 ip link set tap1 up</div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip addr add 1.1.1.2/24 dev tap2</div><div class="line">ip netns exec ns2 ip link set tap2 up</div><div class="line">ip netns exec ns2 ip link set lo up</div><div class="line"></div><div class="line">ip link add firstbr type veth peer name firstif</div><div class="line">ip link add secondbr type veth peer name secondif</div><div class="line">ip link add thirdbr type veth peer name thirdif</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 firstbr</div><div class="line">ip link set firstif netns ns3</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 secondbr</div><div class="line">ovs-vsctl add-port br1 secondif</div><div class="line"></div><div class="line">ovs-vsctl add-port br1 thirdbr</div><div class="line">ip link set thirdif netns ns4</div><div class="line"></div><div class="line">ip netns exec ns3 ip link set firstif up</div><div class="line">ip netns exec ns4 ip link set thirdif up</div><div class="line">ip link set firstbr up</div><div class="line">ip link set secondbr up</div><div class="line">ip link set secondif up</div><div class="line">ip link set thirdbr up</div></pre></td></tr></table></figure>
<p>附加拓扑清除脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ip link del firstbr type veth peer name firstif</div><div class="line">ip link del secondbr type veth peer name secondif</div><div class="line">ip link del thirdbr type veth peer name thirdif</div><div class="line"></div><div class="line">ovs-vsctl del-br br0</div><div class="line">ovs-vsctl del-br br1</div><div class="line">ip netns del ns1</div><div class="line">ip netns del ns2</div><div class="line">ip netns del ns3</div><div class="line">ip netns del ns4</div></pre></td></tr></table></figure>
<h3 id="拓扑环境测试"><a href="#拓扑环境测试" class="headerlink" title="拓扑环境测试"></a>拓扑环境测试</h3><p>ip netns exec ns1 ping -c 2 1.1.1.1<br>ip netns exec ns1 ping -c 2 1.1.1.2</p>
<h3 id="将ns1-ping-ns2的双向流量镜像到ns3（本地镜像）"><a href="#将ns1-ping-ns2的双向流量镜像到ns3（本地镜像）" class="headerlink" title="将ns1 ping ns2的双向流量镜像到ns3（本地镜像）"></a>将ns1 ping ns2的双向流量镜像到ns3（本地镜像）</h3><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl -- set bridge br0 mirrors=@m -- --id=@tap1 get Port tap1 -- --id=@firstbr get Port firstbr -- --id=@m create Mirror name=mirrortap1 select-dst-port=@tap1 select-src-port=@tap1 output-port=@firstbr</div></pre></td></tr></table></figure>
<h4 id="实验过程记录"><a href="#实验过程记录" class="headerlink" title="实验过程记录"></a>实验过程记录</h4><ul>
<li><p>ns1 ping ns2 (tap1: 1.1.1.1-&gt; tap2: 1.1.1.2)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/floodlight# ip netns exec ns1 ping -c 20 1.1.1.2</div><div class="line">PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=0.269 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=2 ttl=64 time=0.050 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=3 ttl=64 time=0.075 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=4 ttl=64 time=0.047 ms</div></pre></td></tr></table></figure>
</li>
<li><p>在ns3可以抓到流泪</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec ns3 tcpdump -i firstif</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on firstif, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:01:59.883866 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 12123, seq 1, length 64</div><div class="line">15:01:59.883935 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 12123, seq 1, length 64</div><div class="line">15:02:00.903931 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 12123, seq 2, length 64</div><div class="line">15:02:00.903951 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 12123, seq 2, length 64</div><div class="line">15:02:01.928521 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 12123, seq 3, length 64</div><div class="line">15:02:01.928553 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 12123, seq 3, length 64</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h4><p>经过虚拟交换机器配置，经过tap1所有的流量可以额外镜像复制到ns3</p>
<h3 id="将ns1-ping-ns2的双向流量镜像到ns4（远程镜像）"><a href="#将ns1-ping-ns2的双向流量镜像到ns4（远程镜像）" class="headerlink" title="将ns1 ping ns2的双向流量镜像到ns4（远程镜像）"></a>将ns1 ping ns2的双向流量镜像到ns4（远程镜像）</h3><h4 id="设置secondbr、secondif、thirdbr为vlan110"><a href="#设置secondbr、secondif、thirdbr为vlan110" class="headerlink" title="设置secondbr、secondif、thirdbr为vlan110"></a>设置secondbr、secondif、thirdbr为vlan110</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set Port secondbr tag=110</div><div class="line">ovs-vsctl set Port secondif tag=110</div><div class="line">ovs-vsctl set Port thirdbr tag=110</div></pre></td></tr></table></figure>
<blockquote>
<p>其它： vs-vsctl clear port secondbr tag</p>
</blockquote>
<h4 id="设置虚拟交换机br0-tap1接口镜像输出到vlan110"><a href="#设置虚拟交换机br0-tap1接口镜像输出到vlan110" class="headerlink" title="设置虚拟交换机br0:tap1接口镜像输出到vlan110"></a>设置虚拟交换机br0:tap1接口镜像输出到vlan110</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl -- set bridge br0 mirrors=@m -- --id=@tap1 get Port tap1 -- --id=@m create Mirror name=mirrortap1 select-dst-port=@tap1 select-src-port=@tap1 output-vlan=110</div><div class="line"></div><div class="line">#配置虚拟交换机从vlan110来的，都output到vlan110</div><div class="line">ovs-vsctl -- set bridge br1 mirrors=@m -- --id=@m create Mirror name=mirrorvlan select-vlan=110 output-vlan=110</div></pre></td></tr></table></figure>
<h4 id="禁止学习vlan110的mac"><a href="#禁止学习vlan110的mac" class="headerlink" title="禁止学习vlan110的mac"></a>禁止学习vlan110的mac</h4><p>ovs-vsctl set bridge br0 flood-vlans=110<br>ovs-vsctl set bridge br1 flood-vlans=110</p>
<h4 id="实验过程记录-1"><a href="#实验过程记录-1" class="headerlink" title="实验过程记录"></a>实验过程记录</h4><ul>
<li><p>ns1 ping ns2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/floodlight# ip netns exec ns1 ping -c 200 1.1.1.2</div><div class="line">PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=0.103 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=2 ttl=64 time=0.056 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=3 ttl=64 time=0.064 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=4 ttl=64 time=0.083 ms</div></pre></td></tr></table></figure>
</li>
<li><p>ns4 tcpdump抓到了远程镜像的报文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec ns4 tcpdump -i thirdif</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on thirdif, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:19:21.064214 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 12180, seq 3, length 64</div><div class="line">15:19:21.064245 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 12180, seq 3, length 64</div><div class="line">15:19:22.088654 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 12180, seq 4, length 64</div><div class="line">15:19:22.088681 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 12180, seq 4, length 64</div><div class="line">15:19:23.111975 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 12180, seq 5, length 64</div><div class="line">15:19:23.112006 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 12180, seq 5, length 64</div></pre></td></tr></table></figure>
</li>
<li><p>br0学习到了ns1和ns2接口的mac，br1不会学习到镜像流量的mac</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/floodlight# ovs-appctl fdb/show br0</div><div class="line"> port  VLAN  MAC                Age</div><div class="line">    2     0  d2:82:aa:d7:3d:f2  150</div><div class="line">    1     0  b2:3f:c1:d1:16:7d  150</div><div class="line">root@controller-VirtualBox:~/floodlight# ovs-appctl fdb/show br1</div><div class="line"> port  VLAN  MAC                Age</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="实验结论-1"><a href="#实验结论-1" class="headerlink" title="实验结论"></a>实验结论</h4><p>通过一定配置克实现虚拟交换剂的远程镜像功能</p>
<h4 id="清除实验环境的镜像配置"><a href="#清除实验环境的镜像配置" class="headerlink" title="清除实验环境的镜像配置"></a>清除实验环境的镜像配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl clear Bridge br0 mirrors</div><div class="line">ovs-vsctl clear Bridge br0 flood_vlans</div><div class="line"></div><div class="line">ovs-vsctl clear Bridge br1 mirrors</div><div class="line">ovs-vsctl clear Bridge br1 flood_vlans</div></pre></td></tr></table></figure>
<h2 id="ovs-QOS"><a href="#ovs-QOS" class="headerlink" title="ovs QOS"></a>ovs QOS</h2><h3 id="实验拓扑-1"><a href="#实验拓扑-1" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="/myimages/qos.png" alt="qos"></p>
<h3 id="拓扑实现脚本-1"><a href="#拓扑实现脚本-1" class="headerlink" title="拓扑实现脚本"></a>拓扑实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line">ip netns add ns3</div><div class="line">ip netns add ns4</div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip addr add 1.1.1.1/24 dev tap1</div><div class="line">ip netns exec ns1 ip link set tap1 up</div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip addr add 1.1.1.2/24 dev tap2</div><div class="line">ip netns exec ns2 ip link set tap2 up</div><div class="line">ip netns exec ns2 ip link set lo up</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap3 -- set Interface tap3 type=internal</div><div class="line">ip link set tap3 netns ns3</div><div class="line">ip netns exec ns3 ip addr add 1.1.1.3/24 dev tap3</div><div class="line">ip netns exec ns3 ip link set tap3 up</div><div class="line">ip netns exec ns3 ip link set lo up</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">ip link add firstbr type veth peer name firstif</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 firstbr</div><div class="line">ovs-vsctl add-port br1 firstif</div><div class="line">ip link set firstbr up</div><div class="line">ip link set firstif up</div><div class="line"></div><div class="line">ovs-vsctl add-port br1 tap4 -- set Interface tap4 type=internal</div><div class="line">ip link set tap4 netns ns4</div><div class="line">ip netns exec ns4 ip addr add 1.1.1.4/24 dev tap4</div><div class="line">ip netns exec ns4 ip link set tap4 up</div><div class="line">ip netns exec ns4 ip link set lo up</div></pre></td></tr></table></figure>
<ul>
<li>拓扑销毁方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ip link del firstbr type veth peer name firstif</div><div class="line">ovs-vsctl del-br br0</div><div class="line">ovs-vsctl del-br br1</div><div class="line">ip netns del ns1</div><div class="line">ip netns del ns2</div><div class="line">ip netns del ns3</div><div class="line">ip netns del ns4</div></pre></td></tr></table></figure>
<h3 id="测试验证方法"><a href="#测试验证方法" class="headerlink" title="测试验证方法"></a>测试验证方法</h3><ul>
<li><p>在服务端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#在ns4串口中netserver开启流量测试服务端</div><div class="line">root@controller-VirtualBox:~# netserver</div><div class="line">Starting netserver with host &apos;IN(6)ADDR_ANY&apos; port &apos;12865&apos; and family AF_UNSPEC</div><div class="line"></div><div class="line">root@controller-VirtualBox:~# netstat -ntlp</div><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</div><div class="line">tcp6       0      0 :::12865                :::*                    LISTEN      14197/netserver</div></pre></td></tr></table></figure>
</li>
<li><p>在测试端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">第四列为速率： 36669.53(即约36Gbps)</div><div class="line">root@controller-VirtualBox:~# netperf -H 1.1.1.4 -t UDP_STREAM</div><div class="line">MIGRATED UDP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 1.1.1.4 (1.1.1.4) port 0 AF_INET : demo</div><div class="line">Socket  Message  Elapsed      Messages</div><div class="line">Size    Size     Time         Okay Errors   Throughput</div><div class="line">bytes   bytes    secs            #      #   10^6bits/sec</div><div class="line"></div><div class="line">212992   65507   10.00      700111      0    36688.91</div><div class="line">212992           10.00      699741           36669.53</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="设置接口firstif发包速率10Mbps"><a href="#设置接口firstif发包速率10Mbps" class="headerlink" title="设置接口firstif发包速率10Mbps"></a>设置接口firstif发包速率10Mbps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set Interface firstif ingress_policing_rate=10000</div><div class="line">ovs-vsctl set Interface firstif ingress_policing_burst=10000</div></pre></td></tr></table></figure>
<p><strong> 测试结论：</strong><br>如下结论，从ns1-&gt;ns4  104741.35<br>        从ns4-&gt;ns1  10.27<br>    也就是当流量走入接口firstif后速率限制为10Mbps,导致到ns4位10Mbps,因此回程流量（ns4-&gt;ns1）为10Mbps左右</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# netperf -H 1.1.1.4 -t UDP_STREAM</div><div class="line">MIGRATED UDP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 1.1.1.4 (1.1.1.4) port 0 AF_INET : demo</div><div class="line">Socket  Message  Elapsed      Messages</div><div class="line">Size    Size     Time         Okay Errors   Throughput</div><div class="line">bytes   bytes    secs            #      #   10^6bits/sec</div><div class="line"></div><div class="line">212992   65507   10.00     1998882      0    104741.35</div><div class="line">212992           10.00         196             10.27</div></pre></td></tr></table></figure>
<h3 id="清除接口速率限制方法"><a href="#清除接口速率限制方法" class="headerlink" title="清除接口速率限制方法"></a>清除接口速率限制方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set Interface firstif ingress_policing_rate=0</div><div class="line">ovs-vsctl set Interface firstif ingress_policing_burst=0</div></pre></td></tr></table></figure>
<h2 id="ovs-stp"><a href="#ovs-stp" class="headerlink" title="ovs stp"></a>ovs stp</h2><h3 id="环路拓扑"><a href="#环路拓扑" class="headerlink" title="环路拓扑"></a>环路拓扑</h3><p><img src="/myimages/ovsstp.png" alt="ovsstp"></p>
<h3 id="组成拓扑结构的脚本"><a href="#组成拓扑结构的脚本" class="headerlink" title="组成拓扑结构的脚本"></a>组成拓扑结构的脚本</h3><h4 id="构成连通脚本"><a href="#构成连通脚本" class="headerlink" title="构成连通脚本"></a>构成连通脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br1 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip addr add 1.1.1.1/24 dev tap1</div><div class="line">ip netns exec ns1 ip link set tap1 up</div><div class="line"></div><div class="line">ip netns add ns2</div><div class="line">ovs-vsctl add-br br2</div><div class="line">ovs-vsctl add-port br2 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip addr add 1.1.1.2/24 dev tap2</div><div class="line">ip netns exec ns2 ip link set tap2 up</div><div class="line"></div><div class="line">ip netns add ns3</div><div class="line">ovs-vsctl add-br br3</div><div class="line">ovs-vsctl add-port br3 tap3 -- set Interface tap3 type=internal</div><div class="line">ip link set tap3 netns ns3</div><div class="line">ip netns exec ns3 ip addr add 1.1.1.3/24 dev tap3</div><div class="line">ip netns exec ns3 ip link set tap3 up</div><div class="line"></div><div class="line"></div><div class="line">ip link  add br1-br2 type veth peer name br2-br1</div><div class="line">ip link  add br1-br3 type veth peer name br3-br1</div><div class="line">ip link  add br2-br3 type veth peer name br3-br2</div><div class="line"></div><div class="line">ip link set dev br1-br2  up</div><div class="line">ip link set dev br2-br1  up</div><div class="line">ip link set dev br1-br3  up</div><div class="line">ip link set dev br3-br1  up</div><div class="line">ip link set dev br2-br3  up</div><div class="line">ip link set dev br3-br2  up</div><div class="line"></div><div class="line">#连接br1 &lt;-&gt; br2</div><div class="line">ovs-vsctl add-port br1 br1-br2</div><div class="line">ovs-vsctl add-port br2 br2-br1</div><div class="line"></div><div class="line">#连接br1&lt;-&gt;br3</div><div class="line">ovs-vsctl add-port br1 br1-br3</div><div class="line">ovs-vsctl add-port br3 br3-br1</div><div class="line"></div><div class="line">#连接br2&lt;-&gt;br3 一半</div><div class="line">ovs-vsctl add-port br2 br2-br3</div></pre></td></tr></table></figure>
<blockquote>
<p>拓扑清理脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ip link  del br1-br2 type veth peer name br2-br1</div><div class="line">ip link  del br1-br3 type veth peer name br3-br1</div><div class="line">ip link  del br2-br3 type veth peer name br3-br2</div><div class="line">ovs-vsctl del-br br1</div><div class="line">ovs-vsctl del-br br2</div><div class="line">ovs-vsctl del-br br3</div><div class="line">ip netns del ns1</div><div class="line">ip netns del ns2</div><div class="line">ip netns del ns3</div></pre></td></tr></table></figure></p>
</blockquote>
<p>上述脚本执行完成后br3 &lt;-&gt; br2 未完全连接，因此还未组成环路<br>此时测试连通性：</p>
<h4 id="连通脚本的测试命令"><a href="#连通脚本的测试命令" class="headerlink" title="连通脚本的测试命令"></a>连通脚本的测试命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ip netns exec ns1 ping -c 3 1.1.1.2</div><div class="line">ip netns exec ns1 ping -c 4 1.1.1.3</div></pre></td></tr></table></figure>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec ns1 ping -c 3 1.1.1.2</div><div class="line">PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=0.225 ms</div><div class="line"></div><div class="line">64 bytes from 1.1.1.2: icmp_seq=2 ttl=64 time=0.049 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=3 ttl=64 time=0.051 ms</div><div class="line"></div><div class="line">--- 1.1.1.2 ping statistics ---</div><div class="line">3 packets transmitted, 3 received, 0% packet loss, time 2031ms</div><div class="line">rtt min/avg/max/mdev = 0.049/0.108/0.225/0.082 ms</div><div class="line">root@controller-VirtualBox:~# ip netns exec ns1 ping -c 4 1.1.1.3</div><div class="line">PING 1.1.1.3 (1.1.1.3) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=1 ttl=64 time=0.219 ms</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=2 ttl=64 time=0.051 ms</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=3 ttl=64 time=0.046 ms</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=4 ttl=64 time=0.050 ms</div><div class="line"></div><div class="line">--- 1.1.1.3 ping statistics ---</div><div class="line">4 packets transmitted, 4 received, 0% packet loss, time 3065ms</div><div class="line">rtt min/avg/max/mdev = 0.046/0.091/0.219/0.074 ms</div></pre></td></tr></table></figure>
<h4 id="将br2和br3连通组成二层环路"><a href="#将br2和br3连通组成二层环路" class="headerlink" title="将br2和br3连通组成二层环路"></a>将br2和br3连通组成二层环路</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port br3 br3-br2</div></pre></td></tr></table></figure>
<h4 id="环路后进行ping连通测试结果-时通时不通"><a href="#环路后进行ping连通测试结果-时通时不通" class="headerlink" title="环路后进行ping连通测试结果,时通时不通"></a>环路后进行ping连通测试结果,时通时不通</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec ns1 ping -c 30 1.1.1.2</div><div class="line">PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=0.436 ms</div><div class="line">--- 1.1.1.2 ping statistics ---</div><div class="line">18 packets transmitted, 1 received, 94% packet loss, time 17402ms</div><div class="line">rtt min/avg/max/mdev = 0.436/0.436/0.436/0.000 ms</div></pre></td></tr></table></figure>
<h4 id="环路情况下分析"><a href="#环路情况下分析" class="headerlink" title="环路情况下分析"></a>环路情况下分析</h4><ul>
<li><p>查询接口名称和接口索引的对应关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-ofctl show br1</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:0000bee79fe0e948</div><div class="line">n_tables:254, n_buffers:0</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 1(tap1): addr:ff:7f:00:00:36:38</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 2(br1-br2): addr:b2:86:95:fa:4b:b9</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> 3(br1-br3): addr:12:a5:67:28:40:f1</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(br1): addr:be:e7:9f:e0:e9:48</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div><div class="line">root@controller-VirtualBox:~# ovs-ofctl show br2</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:00007a10ec6b6942</div><div class="line">n_tables:254, n_buffers:0</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 1(tap2): addr:ff:7f:00:00:36:38</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 2(br2-br1): addr:0e:dd:29:5c:73:ec</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> 3(br2-br3): addr:4a:73:b5:67:af:fe</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(br2): addr:7a:10:ec:6b:69:42</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div><div class="line">root@controller-VirtualBox:~# ovs-ofctl show br3</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:0000462c85b99a4d</div><div class="line">n_tables:254, n_buffers:0</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 1(tap3): addr:ff:7f:00:00:36:38</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 2(br3-br1): addr:ca:ed:37:ef:7d:21</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> 3(br3-br2): addr:ea:55:a1:2e:d9:d1</div><div class="line">     config:     0</div><div class="line">     state:      0</div><div class="line">     current:    10GB-FD COPPER</div><div class="line">     speed: 10000 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(br3): addr:46:2c:85:b9:9a:4d</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure>
</li>
<li><p>查看ns1的arp表项，发现已经无法学习到1.1.1.2 mac地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec ns1 arp -n</div><div class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</div><div class="line">1.1.1.3                  ether   72:e4:76:db:2e:c5   C                     tap1</div><div class="line">1.1.1.2                          (incomplete)                              tap1</div><div class="line">root@controller-VirtualBox:~#</div></pre></td></tr></table></figure>
</li>
<li><p>分别查看br1、br2、br3的mac转发表，发现br1和br2表项已经错乱</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl fdb/show br1</div><div class="line"> port  VLAN  MAC                Age</div><div class="line">    2     0  3a:52:a3:d6:67:12    0</div><div class="line">    3     0  b2:86:95:fa:4b:b9    0</div><div class="line">    3     0  02:a1:bd:ae:56:75    0</div><div class="line">root@controller-VirtualBox:~# ovs-appctl fdb/show br2</div><div class="line"> port  VLAN  MAC                Age</div><div class="line">    3     0  3a:52:a3:d6:67:12    0</div><div class="line">    2     0  b2:86:95:fa:4b:b9    0</div><div class="line">    2     0  02:a1:bd:ae:56:75    0</div><div class="line">root@controller-VirtualBox:~# ovs-appctl fdb/show br3</div><div class="line"> port  VLAN  MAC                Age</div><div class="line">    2     0  3a:52:a3:d6:67:12    0</div><div class="line">    3     0  b2:86:95:fa:4b:b9    0</div><div class="line">    2     0  02:a1:bd:ae:56:75    0</div></pre></td></tr></table></figure>
</li>
</ul>
<p>表项错乱说明：<br>br1连接ns1的tap1本应该从接口1学习到，结果从接口三学习到<br>br2连接ns2的tap2本应该从接口1学习到，结果从接口三学习到</p>
<h3 id="开启ovs-stp解决上述二层环路问题"><a href="#开启ovs-stp解决上述二层环路问题" class="headerlink" title="开启ovs stp解决上述二层环路问题"></a>开启ovs stp解决上述二层环路问题</h3><h4 id="ovs-vsctl-list-bridge查看stp默认是关闭的"><a href="#ovs-vsctl-list-bridge查看stp默认是关闭的" class="headerlink" title="ovs-vsctl list bridge查看stp默认是关闭的"></a>ovs-vsctl list bridge查看stp默认是关闭的</h4><h4 id="开启stp"><a href="#开启stp" class="headerlink" title="开启stp"></a>开启stp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set Bridge br1 stp_enable=true</div><div class="line">ovs-vsctl set Bridge br2 stp_enable=true</div><div class="line">ovs-vsctl set Bridge br3 stp_enable=true</div></pre></td></tr></table></figure>
<h4 id="经过测试网络恢复正常"><a href="#经过测试网络恢复正常" class="headerlink" title="经过测试网络恢复正常"></a>经过测试网络恢复正常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec ns1 ping -c 2 1.1.1.2</div><div class="line">PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=0.272 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=2 ttl=64 time=0.057 ms</div><div class="line">--- 1.1.1.2 ping statistics ---</div><div class="line">2 packets transmitted, 2 received, 0% packet loss, time 1023ms</div><div class="line">rtt min/avg/max/mdev = 0.057/0.164/0.272/0.108 ms</div><div class="line">root@controller-VirtualBox:~# ip netns exec ns1 ping -c 3 1.1.1.3</div><div class="line">PING 1.1.1.3 (1.1.1.3) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=1 ttl=64 time=0.463 ms</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=2 ttl=64 time=0.068 ms</div><div class="line">64 bytes from 1.1.1.3: icmp_seq=3 ttl=64 time=0.050 ms</div></pre></td></tr></table></figure>
<h4 id="stp研究"><a href="#stp研究" class="headerlink" title="stp研究"></a>stp研究</h4><p>ovs-vsctl list bridge 获取到如下信息</p>
<p>br3 stp_root_path_cost=”0”<br>br2 stp_root_path_cost=”2”<br>br1 stp_root_path_cost=”2”‘</p>
<p>在br3-br1处抓包，并且令开窗口ns1 ping ns2</p>
<p>窗口1： ns1 ping ns2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ping 1.1.1.2</div><div class="line">PING 1.1.1.2 (1.1.1.2) 56(84) bytes of data.</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=1 ttl=64 time=0.502 ms</div><div class="line">64 bytes from 1.1.1.2: icmp_seq=2 ttl=64 time=0.078 ms</div></pre></td></tr></table></figure></p>
<p>窗口2：抓取到报文流量经过了br3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br3-br1, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:08:46.538492 IP 1.1.1.1 &gt; 1.1.1.2: ICMP echo request, id 4525, seq 3, length 64</div><div class="line">15:08:46.538524 IP 1.1.1.2 &gt; 1.1.1.1: ICMP echo reply, id 4525, seq 3, length 64</div></pre></td></tr></table></figure></p>
<p>通过测试得知上述环形网络，已经被逻辑修剪为如下拓扑图，从此解决了ovs二层环路问题</p>
<p><img src="/myimages/ovsstp1.png" alt="ovsstp1"></p>
<h4 id="stp相关命令总结"><a href="#stp相关命令总结" class="headerlink" title="stp相关命令总结"></a>stp相关命令总结</h4><ul>
<li><p>开启br1 stp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set bridge br1 tp_enable=ture</div></pre></td></tr></table></figure>
</li>
<li><p>关闭br1 stp</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set Bridge br1 stp_enable=false</div></pre></td></tr></table></figure>
</li>
<li><p>设置br1 stp cost</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set Port br2-br1 other_config:stp-path-cost=100</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询br1 stp状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl get bridge br1 stp_enable</div></pre></td></tr></table></figure>
</li>
<li><p>设置br1的stp优先级</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl set bridge br1 other_config:stp-priority=0x7800</div></pre></td></tr></table></figure>
</li>
<li><p>移除br1 stp设置 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl clear bridge br100 other_config</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ovs-mirror&quot;&gt;&lt;a href=&quot;#ovs-mirror&quot; class=&quot;headerlink&quot; title=&quot;ovs mirror&quot;&gt;&lt;/a&gt;ovs mirror&lt;/h2&gt;&lt;h3 id=&quot;ovs-mirror介绍&quot;&gt;&lt;a href=&quot;#ovs-mirror介绍&quot; class=&quot;headerlink&quot; title=&quot;ovs mirror介绍&quot;&gt;&lt;/a&gt;ovs mirror介绍&lt;/h3&gt;&lt;p&gt;mirror可以将虚拟交换机把数据包发给的接口或则vlan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;命令中对数据包选择选项：&lt;br&gt;select_all，所有的包&lt;br&gt;select_dst_port&lt;br&gt;select_src_port&lt;br&gt;select_vlan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将数据包镜像的命令：&lt;br&gt;output_port (SPAN Switched Port ANalyzer 本地流量)&lt;br&gt;output_vlan (RSPAN Remote Switched Port ANalyzer 远程流量)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实验拓扑&quot;&gt;&lt;a href=&quot;#实验拓扑&quot; class=&quot;headerlink&quot; title=&quot;实验拓扑&quot;&gt;&lt;/a&gt;实验拓扑&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/myimages/ovsmirror.png&quot; alt=&quot;ovsmirror&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="虚拟交换机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="mirror" scheme="http://vcpu.me/tags/mirror/"/>
    
      <category term="Qos" scheme="http://vcpu.me/tags/Qos/"/>
    
      <category term="STP" scheme="http://vcpu.me/tags/STP/"/>
    
  </entry>
  
  <entry>
    <title>openvSwitch</title>
    <link href="http://vcpu.me/openvswitch/"/>
    <id>http://vcpu.me/openvswitch/</id>
    <published>2017-07-31T10:00:00.000Z</published>
    <updated>2017-08-03T07:24:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openvSwitch简介"><a href="#openvSwitch简介" class="headerlink" title="openvSwitch简介"></a>openvSwitch简介</h2><p>openvSwitch 是SDN常用的虚拟交换机，其将普通交换机的数据平面和控制平面相分离，SDN交换机只负责数据的转发，而控制指令则由更上一级的控制器下发</p>
<h2 id="OpenvSwitch（虚拟交换机）常用模块"><a href="#OpenvSwitch（虚拟交换机）常用模块" class="headerlink" title="OpenvSwitch（虚拟交换机）常用模块"></a>OpenvSwitch（虚拟交换机）常用模块</h2><ul>
<li>ovs-vswitchd</li>
</ul>
<p>主要模块、实现交换功能，含有支持流交换的Linux内核模块,基于流交换<br>它和上层controller通信采用OPENFLOW协议，与ovsdb-server通信采用OVSDB协议，和内核通信采用netlink通信<br>支持多个独立datapatch(网桥)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root      2225     1  0 20:05 ?        00:00:00 ovs-vswitchd: monitoring pid 2226 (healthy)</div><div class="line">root      2226  2225  0 20:05 ?        00:00:00 ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor</div></pre></td></tr></table></figure>
<ul>
<li>ovsdb-server </li>
</ul>
<p>虚拟交换机配置信息（接口、交换内容、VLAN等）存放的数据库服务，ovs-vswitchd会根据ovsdb-server中的配置工作。<br>ovsdb-server 和ovs-vswitchd 使用OVSDB(JSON-RPC)方式通信<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root      2201     1  0 20:05 ?        00:00:00 ovsdb-server: monitoring pid 2202 (healthy)</div><div class="line">root      2202  2201  0 20:05 ?        00:00:00 ovsdb-server /etc/openvswitch/conf.db -vconsole:emer -vsyslog:err -vfile:info --remote=punix:/var/run/openvswitch/db.sock --private-key=db:Open_vSwitch,SSL,private_key --certificate=db:Open_vSwitch,SSL,certificate --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert --no-chdir --log-file=/var/log/openvswitch/ovsdb-server.log --pidfile=/var/run/openvswitch/ovsdb-server.pid --detach --monitor</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="openvSwitch编译"><a href="#openvSwitch编译" class="headerlink" title="openvSwitch编译"></a>openvSwitch编译</h2><p>编译环境：ubuntun16.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">cat build.sh</div><div class="line"></div><div class="line">apt-get install build-essential libssl-dev linux-headers-$(uname -r) </div><div class="line">apt-get install graphviz autoconf automake bzip2 debhelper dh-autoreconf libssl-dev libtool openssl procps python-all python-qt4 python-twisted-conch python-zopeinterface python-six dkms module-assistant ipsec-tools racoon  libc6-dev  module-init-tools  netbase  python-argparse  uuid-runtime -y</div><div class="line">git clone https://github.com/openvswitch/ovs.git</div><div class="line">cd ovs</div><div class="line">./boot.sh</div><div class="line">./configure --with-linux=/lib/modules/`uname -r`/build</div><div class="line">make</div><div class="line">make install</div><div class="line">make modules_install</div><div class="line">/sbin/modprobe openvswitch</div><div class="line">ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema</div><div class="line">ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \</div><div class="line">             --remote=db:Open_vSwitch,Open_vSwitch,manager_options \</div><div class="line">             --private-key=db:Open_vSwitch,SSL,private_key \</div><div class="line">             --certificate=db:Open_vSwitch,SSL,certificate \</div><div class="line">             --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \</div><div class="line">             --pidfile --detach</div><div class="line">ovs-vsctl --no-wait init</div><div class="line">ovs-vswitchd --pidfile --detach</div></pre></td></tr></table></figure></p>
<blockquote>
<p>make modules_install 错误<br>ubbuntun16.04报错如下,该错误忽略即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/ovs# make modules_install</div><div class="line">cd datapath/linux &amp;&amp; make modules_install</div><div class="line">make[1]: Entering directory &apos;/root/ovs/datapath/linux&apos;</div><div class="line">make -C /lib/modules/4.8.0-36-generic/build M=/root/ovs/datapath/linux modules_install</div><div class="line">make[2]: Entering directory &apos;/usr/src/linux-headers-4.8.0-36-generic&apos;</div><div class="line">  INSTALL /root/ovs/datapath/linux/openvswitch.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-geneve.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-gre.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-lisp.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-stt.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-vxlan.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  DEPMOD  4.8.0-36-generic</div><div class="line">make[2]: Leaving directory &apos;/usr/src/linux-headers-4.8.0-36-generic&apos;</div><div class="line">depmod `sed -n &apos;s/#define UTS_RELEASE &quot;\([^&quot;]*\)&quot;/\1/p&apos; /lib/modules/4.8.0-36-generic/build/include/generated/utsrelease.h`</div><div class="line">make[1]: Leaving directory &apos;/root/ovs/datapath/linux&apos;</div></pre></td></tr></table></figure>
<h2 id="建立ovs接口连接两个namespace组成二层网络"><a href="#建立ovs接口连接两个namespace组成二层网络" class="headerlink" title="建立ovs接口连接两个namespace组成二层网络"></a>建立ovs接口连接两个namespace组成二层网络</h2><h3 id="环境搭建拓扑"><a href="#环境搭建拓扑" class="headerlink" title="环境搭建拓扑"></a>环境搭建拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">             br0</div><div class="line">            +--------------------------------------+</div><div class="line">            +--+                                +--+</div><div class="line">        +---+  | tap1                       tap2|  +---+</div><div class="line">        |   +--+                                +--+   |</div><div class="line">        |   |                                      |   |</div><div class="line">        |   +--------------------------------------+   |</div><div class="line">        |                                              |</div><div class="line">        |                                              |</div><div class="line">        |                                              |</div><div class="line">        |                                              |</div><div class="line">+------------------+                      +-------------------+</div><div class="line">|      tap1        |                      |           tap2    |</div><div class="line">|192.168.1.102/24  |                      | 192.168.1.102/24  |</div><div class="line">|                  |                      |                   |</div><div class="line">|                  |                      |                   |</div><div class="line">|                  |                      |                   |</div><div class="line">|  namespace ns1   |                      |    namespace ns1  |</div><div class="line">|                  |                      |                   |</div><div class="line">+------------------+                      +-------------------+</div></pre></td></tr></table></figure>
<h3 id="实现脚本"><a href="#实现脚本" class="headerlink" title="实现脚本"></a>实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line"></div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip link set dev tap2 up</div><div class="line"></div><div class="line">ip netns exec ns1 ip addr add 192.168.1.102/24 dev tap1</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.101/24 dev tap2</div><div class="line"></div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line">ip netns exec ns2 ip link set lo up</div><div class="line">ip netns exec ns1 ping -c 4 192.168.1.101</div><div class="line">ip netns exec ns1 ping -c 4 192.168.1.102</div></pre></td></tr></table></figure>
<h2 id="建立vlan二层网络"><a href="#建立vlan二层网络" class="headerlink" title="建立vlan二层网络"></a>建立vlan二层网络</h2><h3 id="环境搭建拓扑-1"><a href="#环境搭建拓扑-1" class="headerlink" title="环境搭建拓扑"></a>环境搭建拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">                        br0                trunk vlan tag 10,11           br1</div><div class="line">                +------------------------+                       +------------------------+</div><div class="line">                |                        | tag10           tag10 |                        |</div><div class="line">                |              trunk_br0 +-----------------------+trunk_br1               |</div><div class="line">                |                        +-----------------------+                        |</div><div class="line">                |                        | tag11           tag11 |                        |</div><div class="line">                |tap1               tap2 |                       |  tap3                  |</div><div class="line">                +------------------------+                       +------------------------+</div><div class="line">                  |tag 10        tag11|                         tag10|</div><div class="line">                  |                   |                              |</div><div class="line">                  |                   |                              |</div><div class="line">192.168.1.101/24  |                   | 192.168.1.102/24             | 192.168.1.103/24</div><div class="line">              +-------+          +-------+                        +-------+</div><div class="line">              | tap1  |          | tap2  |                        |tap3   |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              +-------+          +-------+                        +-------+</div><div class="line">              ns1                 ns2                               ns3</div></pre></td></tr></table></figure>
<h3 id="环境实现脚本"><a href="#环境实现脚本" class="headerlink" title="环境实现脚本"></a>环境实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line"></div><div class="line">ovs-vsctl set Port tap1  tag=10</div><div class="line"></div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ovs-vsctl set Port tap2  tag=11</div><div class="line"></div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip link set dev tap2 up</div><div class="line"></div><div class="line">ip netns exec ns1 ip addr add 192.168.1.101/24 dev tap1</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.102/24 dev tap2</div><div class="line"></div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line">ip netns exec ns2 ip link set lo up</div><div class="line"></div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br1 tap3 -- set Interface tap3 type=internal</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 trunk_br0 trunks=10,11  -- set Interface trunk_br0 type=patch options:peer=trunk_br1</div><div class="line">ovs-vsctl add-port br1 trunk_br1 trunks=10,11 -- set Interface trunk_br1 type=patch options:peer=trunk_br0</div><div class="line"></div><div class="line">ip netns add ns3</div><div class="line">ip link set tap3 netns ns3</div><div class="line">ip netns exec ns3 ip addr add 192.168.1.103/24 dev tap3</div><div class="line">ip netns exec ns3 ip link set dev tap3 up</div><div class="line">ovs-vsctl set Port tap3 tag=10</div><div class="line"></div><div class="line"></div><div class="line">ip netns exec ns3 ping -c 4 192.168.1.101</div><div class="line">ip netns exec ns3 ping -c 4 192.168.1.102</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><p>br0和br1两个交换机之间连接使用的是patch口，在创建时候需要指明peer（对端口）选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port br0 trunk_br0 trunks=10,11  -- set Interface trunk_br0 type=patch options:peer=trunk_br1</div><div class="line">ovs-vsctl add-port br1 trunk_br1 trunks=10,11 -- set Interface trunk_br1 type=patch options:peer=trunk_br0</div></pre></td></tr></table></figure>
</li>
<li><p>br0和br1两个交换机之间连接在trunk口附加上tag10和tag11</p>
</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>  ns3:tap3:vlan10 能ping通ns1:tap1:vlan10 因为ns3和ns1属于同一个vlan；同时无法ping通ns2</p>
<h2 id="ovs-vlan报文转发原理探究"><a href="#ovs-vlan报文转发原理探究" class="headerlink" title="ovs vlan报文转发原理探究"></a>ovs vlan报文转发原理探究</h2><h3 id="环境搭建拓扑-2"><a href="#环境搭建拓扑-2" class="headerlink" title="环境搭建拓扑"></a>环境搭建拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">       first_ns         second_ns       third_ns</div><div class="line">    +-----------+    +-----------+    +-----------+</div><div class="line">    |           |    |           |    |           |</div><div class="line">    |           |    |           |    |           |</div><div class="line">    |           |    |           |    |           |</div><div class="line">    |    first_br    |      second_br |   third_br|</div><div class="line">    +-----------+    +-----------+    +-----------+</div><div class="line">10.0.0.4/24          10.0.0.5/24            |  10.0.0.6/24</div><div class="line">         |                 |                |</div><div class="line">         |                 |                |</div><div class="line">         |tag 10           | 无 tag          | trunk 11,12</div><div class="line">     +------------------------------------------+</div><div class="line">     |    first_br       second_br       third_br</div><div class="line">     |                                          |</div><div class="line">     |                   br0                    |</div><div class="line">     |                                          |</div><div class="line">     +------------------------------------------+</div><div class="line">           | tag 10</div><div class="line">           |</div><div class="line">           |</div><div class="line">           |</div><div class="line">           |</div><div class="line">           |10.0.0.1/24</div><div class="line">    +------------+</div><div class="line">    |            |</div><div class="line">    |            |</div><div class="line">    |            |</div><div class="line">    |            |</div><div class="line">    +------------+</div><div class="line">      ns1</div></pre></td></tr></table></figure>
<h3 id="搭建网络脚本"><a href="#搭建网络脚本" class="headerlink" title="搭建网络脚本"></a>搭建网络脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> ovs-vsctl add-br br0</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 first_br -- set Interface first_br type=internal</div><div class="line">ovs-vsctl set Port first_br  tag=10 </div><div class="line"></div><div class="line">ip netns add first</div><div class="line">ip link set first_br netns first</div><div class="line">ip netns exec first ip addr add 10.0.0.4/24 dev first_br</div><div class="line">ip netns exec first ip link set dev first_br up</div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ovs-vsctl set Port tap1  tag=10</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line">ip netns exec ns1 ip addr add 10.0.0.1/24 dev tap1</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br0 second_br -- set Interface second_br type=internal</div><div class="line"></div><div class="line">ip netns add second</div><div class="line">ip link set second_br netns second</div><div class="line">ip netns exec second ip addr add 10.0.0.5/24 dev second_br</div><div class="line">ip netns exec second  ip link set dev second_br up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 third_br trunks=11,12 -- set Interface third_br type=internal</div><div class="line"></div><div class="line">ip netns add third</div><div class="line">ip link set third_br netns third</div><div class="line">ip netns exec third ip addr add 10.0.0.6/24 dev third_br</div><div class="line">ip netns exec third ip link set dev third_br up</div></pre></td></tr></table></figure>
<p><strong>实验过程：</strong><br>进入netns1，一直ping 10.0.0.4，在netns first、second、third分别抓包</p>
<h3 id="实验记录"><a href="#实验记录" class="headerlink" title="实验记录"></a>实验记录</h3><ul>
<li>first抓取报文<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec first tcpdump  -n -e -i first_br arp</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on first_br, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:47:54.636790 9a:03:f1:61:48:9d &gt; ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Request who-has 10.0.0.4 tell 10.0.0.1, length 28</div><div class="line">15:47:54.636808 4e:cc:d6:5a:53:f4 &gt; 9a:03:f1:61:48:9d, ethertype ARP (0x0806), length 42: Reply 10.0.0.4 is-at 4e:cc:d6:5a:53:f4, length 28</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>抓到arp广播包</p>
</blockquote>
<ul>
<li>second抓取报文<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec second tcpdump  -n -e -i second_br arp</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on second_br, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:49:40.345271 9a:03:f1:61:48:9d &gt; ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 46: vlan 10, p 0, ethertype ARP, Request who-has 10.0.0.4 tell 10.0.0.1, length 28</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>抓到arp广播包</p>
</blockquote>
<ul>
<li>third抓取报文<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec third tcpdump  -n -e -i third_br arp</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on third_br, link-type EN10MB (Ethernet), capture size 262144 bytes</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>没有抓到arp广播包</p>
</blockquote>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><ul>
<li>trunk port<br>（1）这个port不配置tag，配置trunks，如果trunks为空，则所有的VLAN都trunk，也就意味着对于所有的VLAN的包，本身带什么VLAN ID，就是携带者什么VLAN ID，<br>（2）如果没有设置VLAN，就属于VLAN 0，全部允许通过。<br>（3）如果trunks不为空，则仅仅带着这些VLAN ID的包通过。</li>
<li>access port<br>（1）这个port配置tag，从这个port进来的包会被打上这个tag，<br>（2）从其他的trunk port中进来的本身就带有VLAN ID的包，如果VLAN ID等于tag，则会从这个port发出，<br>（3）从其他的access port上来的包，如果tag相同，也会被forward到这个port。<br>（4）从access port发出的包不带VLAN ID。<br>（5）如果一个本身带VLAN ID的包到达access port，即便VLAN ID等于tag，也会被抛弃。</li>
</ul>
<h2 id="ovs-bonding链路冗余"><a href="#ovs-bonding链路冗余" class="headerlink" title="ovs bonding链路冗余"></a>ovs bonding链路冗余</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  192.168.0.101/24</div><div class="line">+---------+            +-------------------------------+</div><div class="line">|         |            |                               |</div><div class="line">|     tap0+------------+tap0     br0                   |</div><div class="line">|         |           ++                               |</div><div class="line">|         |            |       +-------------+         |</div><div class="line">|         |            +---------|bond0|---------------+</div><div class="line">+---------+                    +-------------+</div><div class="line">   ns1                  br0_tap0  |    | br0_tap1</div><div class="line">                                  |    |</div><div class="line">                                  |    |</div><div class="line">                        br1_tap0  |    | br1_tap1</div><div class="line">  192.168.0.102/24            +--------------+</div><div class="line">+---------+            +---------|bond1|---------------+</div><div class="line">|         +------------+      +--------------+         |</div><div class="line">|         |            |                               |</div><div class="line">|         |            |      br1                      |</div><div class="line">|         |            |                               |</div><div class="line">|         |            +-------------------------------+</div><div class="line">+---------+</div><div class="line">   ns2</div></pre></td></tr></table></figure>
<h3 id="环境搭建脚本"><a href="#环境搭建脚本" class="headerlink" title="环境搭建脚本"></a>环境搭建脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ip link add br0_tap0 type veth peer name br1_tap0</div><div class="line">ip link add br0_tap1 type veth peer name br1_tap1</div><div class="line">ip link set br0_tap0 up</div><div class="line">ip link set br0_tap1 up</div><div class="line">ip link set br1_tap0 up</div><div class="line">ip link set br1_tap1 up</div><div class="line"></div><div class="line">ovs-vsctl add-bond br0 bond0 br0_tap0 br0_tap1 </div><div class="line">ovs-vsctl add-bond br1 bond1 br1_tap0 br1_tap1</div><div class="line"></div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line">ip netns exec ns1 ip addr add 192.168.1.101/24 dev tap1</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br1 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip link set dev tap2 up</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.102/24 dev tap2</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl set Port bond0 lacp=active </div><div class="line">ovs-vsctl set Port bond1 lacp=active</div></pre></td></tr></table></figure>
<h3 id="环境搭建完成后查看bond"><a href="#环境搭建完成后查看bond" class="headerlink" title="环境搭建完成后查看bond"></a>环境搭建完成后查看bond</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl bond/show</div><div class="line">---- bond1 ----</div><div class="line">bond_mode: active-backup</div><div class="line">bond may use recirculation: no, Recirc-ID : -1</div><div class="line">bond-hash-basis: 0</div><div class="line">updelay: 0 ms</div><div class="line">downdelay: 0 ms</div><div class="line">lacp_status: negotiated</div><div class="line">lacp_fallback_ab: false</div><div class="line">active slave mac: 9e:d9:94:98:26:85(br1_tap0)</div><div class="line"></div><div class="line">slave br1_tap0: enabled</div><div class="line">  active slave</div><div class="line">  may_enable: true</div><div class="line"></div><div class="line">slave br1_tap1: enabled</div><div class="line">  may_enable: true</div><div class="line"></div><div class="line">---- bond0 ----</div><div class="line">bond_mode: active-backup</div><div class="line">bond may use recirculation: no, Recirc-ID : -1</div><div class="line">bond-hash-basis: 0</div><div class="line">updelay: 0 ms</div><div class="line">downdelay: 0 ms</div><div class="line">lacp_status: negotiated</div><div class="line">lacp_fallback_ab: false</div><div class="line">active slave mac: 6a:d8:f8:f3:2b:6d(br0_tap0)</div><div class="line"></div><div class="line">slave br0_tap0: enabled</div><div class="line">  active slave</div><div class="line">  may_enable: true</div><div class="line"></div><div class="line">slave br0_tap1: enabled</div><div class="line">  may_enable: true</div></pre></td></tr></table></figure>
<p><strong>查看结论：</strong></p>
<blockquote>
<p>默认建立的bond为主备模式（bond_mode: active-backup）<br>br1_tap0和br0_tap0 流量走这对口</p>
</blockquote>
<h3 id="抓包结果"><a href="#抓包结果" class="headerlink" title="抓包结果"></a>抓包结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">抓取 br0_tap0</div><div class="line">root@controller-VirtualBox:~# tcpdump -n -e -i br0_tap0</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br0_tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">17:12:45.022854 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:12:45.023409 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:15.024627 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:15.025299 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:45.025411 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:45.025724 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line"></div><div class="line">在ns1 ping ns2，流量只走在主机接口上（br1_tap0和br0_tap0）</div><div class="line">root@controller-VirtualBox:~# tcpdump -n -e -i br0_tap0</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br0_tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">17:15:29.980585 d2:25:e0:f4:59:83 &gt; 3a:df:e7:d3:68:84, ethertype IPv4 (0x0800), length 98: 192.168.1.101 &gt; 192.168.1.102: ICMP echo request, id 6006, seq 4, length 64</div><div class="line">17:15:29.980608 3a:df:e7:d3:68:84 &gt; d2:25:e0:f4:59:83, ethertype IPv4 (0x0800), length 98: 192.168.1.102 &gt; 192.168.1.101: ICMP echo reply, id 6006, seq 4, length 64</div><div class="line">17:15:31.003922 d2:25:e0:f4:59:83 &gt; 3a:df:e7:d3:68:84, ethertype IPv4 (0x0800), length 98: 192.168.1.101 &gt; 192.168.1.102: ICMP echo request, id 6006, seq 5, length 64</div></pre></td></tr></table></figure>
<p>抓取br1_tap0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# tcpdump -n -e -i br1_tap0</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br1_tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">17:14:15.027630 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:14:15.028468 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:14:45.028801 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:14:45.029541 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div></pre></td></tr></table></figure></p>
<h3 id="另外补充"><a href="#另外补充" class="headerlink" title="另外补充"></a>另外补充</h3><ul>
<li><p>查看lacpovs-appctl lacp/show</p>
</li>
<li><p>active-backup 主-备 无法提升吞吐</p>
</li>
<li><p>balance-slb, 根据包的 source MAC + vlan tag來均衡流量</p>
</li>
<li><p>banlnce-tcp, 根据包的 L2/L3/L4 header来均衡流量</p>
<blockquote>
<p>banlance-tcp必须让硬件交换机设置802.3ad，balance-slb则设不设均可，设了流量提高比较大。</p>
</blockquote>
</li>
<li><p>ovs-vsctl set Port bond0 bond_mode=balance-slb </p>
</li>
<li><p>观察流量命令 cat /proc/net/dev</p>
</li>
<li><p>LACP是链路汇聚控制协议（具体研究待定）</p>
</li>
</ul>
<h2 id="openvswitch概念补充"><a href="#openvswitch概念补充" class="headerlink" title="openvswitch概念补充"></a>openvswitch概念补充</h2><h3 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h3><ul>
<li>Bridge: Bridge 代表一个以太网交换机（Switch），一个主机中可以创建一个或者多个 Bridge 设备。</li>
<li>Port: 端口与物理交换机的端口概念类似，每个 Port 都隶属于一个 Bridge。</li>
<li>Interface: 连接到 Port 的网络接口设备。在通常情况下，Port 和 Interface 是一对一的关系, 只有在配置 Port 为 bond 模式后，Port 和 Interface 是一对多的关系。</li>
<li>Controller: OpenFlow 控制器。OVS 可以同时接受一个或者多个 OpenFlow 控制器的管理。</li>
<li>datapath: 在 OVS 中，datapath 负责执行数据交换，也就是把从接收端口收到的数据包在流表中进行匹配，并执行匹配到的动作。</li>
<li>Flow table: 每个 datapath 都和一个“flow table”关联，当 datapath 接收到数据之后， OVS 会在 flow table 中查找可以匹配的 flow，执行对应的操作, 例如转发数据到另外的端口。</li>
</ul>
<h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>内核模块实现了多个“数据路径（DataPath）”（类似于网桥），每个都可以有多个“vports”（类似于桥内的端口）。每个数据路径也通过关联流表（flow table）来设置操作，而这些流表中的流都是用户空间在报文头和元数据的基础上映射的关键信息，一般的操作都是将数据包转发到另一个vport。当一个数据包到达一个vport，内核模块所做的处理是提取其流的关键信息并在流表中查找这些关键信息。当有一个匹配的流时它执行对应的操作。如果没有匹配，它会将数据包送到用户空间的处理队列中（作为处理的一部分，用户空间可能会设置一个流用于以后遇到相同类型的数据包可以在内核中执行操作）。细节如下图所示：</p>
<p><img src="/myimages/openvswitch.png" alt="openvswitch"></p>
<h3 id="ovs管理组件"><a href="#ovs管理组件" class="headerlink" title="ovs管理组件"></a>ovs管理组件</h3><ul>
<li>ovs-dpctl：一个工具，用来配置交换机内核模块，可以控制转发规则。</li>
<li>ovs-vsctl：主要是获取或者更改ovs-vswitchd的配置信息，此工具操作的时候会更新ovsdb-server中的数据库。</li>
<li>ovs-appctl：主要是向OVS守护进程发送命令的，一般用不上。 a utility that sends commands to running Open vSwitch daemons (ovs-vswitchd)</li>
<li>ovsdbmonitor：GUI工具来显示ovsdb-server中数据信息。（Ubuntu下是可以使用apt-get安装，可以远程获取OVS数据库和OpenFlow的流表）</li>
<li>ovs-controller：一个简单的OpenFlow控制器</li>
<li>ovs-ofctl：用来控制OVS作为OpenFlow交换机工作时候的流表内容。</li>
<li>ovs-pki：OpenFlow交换机创建和管理公钥框架；</li>
<li>ovs-tcpundump：tcpdump的补丁，解析OpenFlow的消息；</li>
<li>brocompat.ko : Linux bridge compatibility module</li>
<li>openvswitch.ko : Open vSwitch switching datapath</li>
</ul>
<h2 id="ovs流表实验"><a href="#ovs流表实验" class="headerlink" title="ovs流表实验"></a>ovs流表实验</h2><h3 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h3><p><img src="/myimages/ovs-flow.png" alt="ovs-flow"></p>
<h3 id="拓扑实现脚本"><a href="#拓扑实现脚本" class="headerlink" title="拓扑实现脚本"></a>拓扑实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br ovs-switch</div><div class="line"></div><div class="line">ovs-vsctl add-port ovs-switch p0 -- set Interface p0 ofport_request=100</div><div class="line">ovs-vsctl set Interface p0 type=internal</div><div class="line"></div><div class="line">ip netns add ns0</div><div class="line">ip link set p0 netns ns0 </div><div class="line">ip netns exec ns0 ip addr add 192.168.1.100/24 dev p0</div><div class="line">ip netns exec ns0 ifconfig p0 promisc up</div><div class="line"></div><div class="line">ovs-vsctl add-port ovs-switch p1 -- set Interface p1 ofport_request=101</div><div class="line">ovs-vsctl set Interface p1 type=internal</div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ip link set p1 netns ns1</div><div class="line">ip netns exec ns1 ip addr add 192.168.1.101/24 dev p1 </div><div class="line">ip netns exec ns1 ifconfig p1 promisc up</div><div class="line"></div><div class="line">ovs-vsctl add-port ovs-switch p2 -- set Interface p2 ofport_request=102</div><div class="line">ovs-vsctl set Interface p2 type=internal</div><div class="line"></div><div class="line">ip netns add ns2</div><div class="line">ip link set p2 netns ns2</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.102/24 dev p2</div><div class="line">ip netns exec ns2 ifconfig p2 promisc up</div></pre></td></tr></table></figure>
<h3 id="ovs-ofctl-show-ovs-switch-显示虚拟交换机流表的统计信息"><a href="#ovs-ofctl-show-ovs-switch-显示虚拟交换机流表的统计信息" class="headerlink" title="ovs-ofctl show ovs-switch 显示虚拟交换机流表的统计信息"></a>ovs-ofctl show ovs-switch 显示虚拟交换机流表的统计信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-ofctl show ovs-switch</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:0000aaa801224e40</div><div class="line">n_tables:254, n_buffers:0</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 100(p0): addr:fc:7f:00:00:36:b8</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 101(p1): addr:56:a7:a1:27:a9:b8</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 102(p2): addr:d2:af:d5:d2:c9:52</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(ovs-switch): addr:aa:a8:01:22:4e:40</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure>
<h3 id="ovs-dpctl-show-查看内核接口状态"><a href="#ovs-dpctl-show-查看内核接口状态" class="headerlink" title="ovs-dpctl show 查看内核接口状态"></a>ovs-dpctl show 查看内核接口状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-dpctl show</div><div class="line">system@ovs-system:</div><div class="line">  lookups: hit:334 missed:22 lost:0</div><div class="line">  flows: 0</div><div class="line">  masks: hit:371 total:0 hit/pkt:1.04</div><div class="line">  port 0: ovs-system (internal)</div><div class="line">  port 1: ovs-switch (internal)</div><div class="line">  port 2: p0 (internal)</div><div class="line">  port 3: p1 (internal)</div><div class="line">  port 4: p2 (internal)</div></pre></td></tr></table></figure>
<h3 id="ovs-ofctl-dump-flows-ovs-switch查看ovs-switch的流表"><a href="#ovs-ofctl-dump-flows-ovs-switch查看ovs-switch的流表" class="headerlink" title="ovs-ofctl dump-flows ovs-switch查看ovs-switch的流表"></a>ovs-ofctl dump-flows ovs-switch查看ovs-switch的流表</h3><h3 id="接口p1发出去的icmp发包源地址变成10-10-10-10"><a href="#接口p1发出去的icmp发包源地址变成10-10-10-10" class="headerlink" title="接口p1发出去的icmp发包源地址变成10.10.10.10"></a>接口p1发出去的icmp发包源地址变成10.10.10.10</h3><h3 id="ovs-ofctl-del-flows-ovs-switch-“in-port-100”删除in-port-100的流表"><a href="#ovs-ofctl-del-flows-ovs-switch-“in-port-100”删除in-port-100的流表" class="headerlink" title="ovs-ofctl del-flows ovs-switch “in_port=100”删除in_port=100的流表"></a>ovs-ofctl del-flows ovs-switch “in_port=100”删除in_port=100的流表</h3><h3 id="接口p1发出去的icmp报文源地址均变成10-10-10-10"><a href="#接口p1发出去的icmp报文源地址均变成10-10-10-10" class="headerlink" title="接口p1发出去的icmp报文源地址均变成10.10.10.10"></a>接口p1发出去的icmp报文源地址均变成10.10.10.10</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow ovs-switch &quot;priority=1 idle_timeout=0,in_port=100,actions=mod_nw_src:10.10.10.10,normal&quot;</div></pre></td></tr></table></figure>
<h3 id="所有的icmp定向到p2-in-port-102"><a href="#所有的icmp定向到p2-in-port-102" class="headerlink" title="所有的icmp定向到p2(in_port=102)"></a>所有的icmp定向到p2(in_port=102)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow ovs-switch idle_timeout=0,dl_type=0x0800,nw_proto=1,actions=output:102</div></pre></td></tr></table></figure>
<h3 id="在该组网下数据包转发过程测试"><a href="#在该组网下数据包转发过程测试" class="headerlink" title="在该组网下数据包转发过程测试"></a>在该组网下数据包转发过程测试</h3><h4 id="产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8"><a href="#产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8" class="headerlink" title="产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)"></a>产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=100,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. priority 0</div><div class="line">    NORMAL</div><div class="line">     -&gt; no learned MAC for destination, flooding</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=100,vlan_tci=0x0000/0x1fff,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line">Datapath actions: 1,3,4</div></pre></td></tr></table></figure>
<p><strong>数据包转发过程：</strong><br>上述产生的数据包最终被广播到接口1，3，4<br>  port 1: ovs-switch (internal)<br>  port 2: p0 (internal)<br>  port 3: p1 (internal)<br>  port 4: p2 (internal)</p>
<h4 id="配置接口p1为tag101后-产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8"><a href="#配置接口p1为tag101后-产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8" class="headerlink" title="配置接口p1为tag101后 产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)"></a>配置接口p1为tag101后 产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl set Port p1 tag=101</div><div class="line"></div><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=100,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. priority 0</div><div class="line">    NORMAL</div><div class="line">     -&gt; no learned MAC for destination, flooding</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=100,vlan_tci=0x0000/0x1fff,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div></pre></td></tr></table></figure>
<p><strong> 数据包转发过程：</strong><br>上述产生数据包最终被广播到接口1，4 因为接口2已经配置了tag101和产生数据包不在同一个广播域</p>
<h4 id="修改从p0口发出的数据包强制加上vlantag-101-产生数据包p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8"><a href="#修改从p0口发出的数据包强制加上vlantag-101-产生数据包p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8" class="headerlink" title="修改从p0口发出的数据包强制加上vlantag 101, 产生数据包p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)"></a>修改从p0口发出的数据包强制加上vlantag 101, 产生数据包p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow ovs-switch &quot;priority=3,in_port=100,dl_vlan=0xffff,actions=mod_vlan_vid:101,normal&quot;</div><div class="line"></div><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=100,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. in_port=100,vlan_tci=0x0000, priority 3</div><div class="line">    mod_vlan_vid:101</div><div class="line">    NORMAL</div><div class="line">     -&gt; learned that 06:fc:2c:fd:84:f5 is on port p0 in VLAN 101</div><div class="line">     -&gt; forwarding to learned port</div><div class="line"></div><div class="line">Final flow: in_port=100,dl_vlan=101,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line">Megaflow: recirc_id=0,in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line">Datapath actions: 3</div></pre></td></tr></table></figure>
<p><strong> 数据包转发过程 </strong><br>产生的流从p0-&gt;p1 ，数据包被完整转发到port 3 ，也就是说明该数据包被完整添加上了tag101</p>
<h4 id="产生一条p1-gt-p0流量，该流量携带tag101，发送给接口p0"><a href="#产生一条p1-gt-p0流量，该流量携带tag101，发送给接口p0" class="headerlink" title="产生一条p1-&gt;p0流量，该流量携带tag101，发送给接口p0"></a>产生一条p1-&gt;p0流量，该流量携带tag101，发送给接口p0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=101,dl_dst=06:fc:2c:fd:84:f5,dl_src=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=101,vlan_tci=0x0000,dl_src=56:a7:a1:27:a9:b8,dl_dst=06:fc:2c:fd:84:f5,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. priority 0</div><div class="line">    NORMAL</div><div class="line">     -&gt; forwarding to learned port</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=101,vlan_tci=0x0000/0x1fff,dl_src=56:a7:a1:27:a9:b8,dl_dst=06:fc:2c:fd:84:f5,dl_type=0x0000</div><div class="line">Datapath actions: push_vlan(vid=101,pcp=0),2</div></pre></td></tr></table></figure>
<h2 id="ovs配合使用Controller之一-Floodlight"><a href="#ovs配合使用Controller之一-Floodlight" class="headerlink" title="ovs配合使用Controller之一 Floodlight"></a>ovs配合使用Controller之一 Floodlight</h2><p>操作系统环境：ubuntun 16.04<br>ovs版本信息：(Open vSwitch) 2.5.2<br>10.30.10.145/24</p>
<h3 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install build-essential ant maven python-dev</div><div class="line">apt-get install build-essential openjdk-8-jdk ant maven python-dev</div></pre></td></tr></table></figure>
<h3 id="下载floodlight"><a href="#下载floodlight" class="headerlink" title="下载floodlight"></a>下载floodlight</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/floodlight/floodlight.git</div><div class="line">cd floodlight/</div><div class="line">git submodule init</div><div class="line">git submodule update</div><div class="line">ant</div><div class="line">java -jar target/floodlight.jar</div><div class="line"></div><div class="line"># nohup java -jar target/floodlight.jar &gt; floodlight.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<h3 id="在被管理的ovs上虚拟机上执行加入命令"><a href="#在被管理的ovs上虚拟机上执行加入命令" class="headerlink" title="在被管理的ovs上虚拟机上执行加入命令"></a>在被管理的ovs上虚拟机上执行加入命令</h3><p>ovs-vsctl set-controller ovs-switch tcp:10.30.10.145:6653<br>ovs-vsctl set Bridge ovs-switch fail-mode=secure</p>
<p>其它说明：<br>（1）10.30.10.145为floodlight controller的安装服务地址<br>（2）一堆教程说端口是6633，新版本发生了变化更改为了6653，具体变化版本号未研究<br>（3）采用的是secure，不停的连接Controller</p>
<blockquote>
<p>当 OVS 交换机连接到 Floodlight 控制器后，理论上所有的流表规则应该交给控制器来建立。由于 OVS 交换机和控制器之间是通过网络通讯来传递数据的，所以网络连接失败会影响到 Flow 的建立，为了处理该问题提供两种模式：</p>
<ul>
<li>standlone: 默认模式。如果 OVS 交换机超过三次无法正常连接到 OpenFlow 控制器，OVS 交换机自己会负责建立流表。在这种模式下，OVS 和常见的 L2 交换机相似。与此同时，OVS 也会继续尝试连接控制器，一旦网络连接恢复，OVS 会再次切换到使用控制器进行流表管理。</li>
<li>secure: 在 secure 模式下，如果 OVS 无法正常连接到 OpenFlow 控制器，OVS 会不停的尝试与控制器重新建立连接，而不会自己负责建立流表。</li>
</ul>
</blockquote>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p><a href="http://10.30.10.145:8080/ui/pages/index.html" target="_blank" rel="external">http://10.30.10.145:8080/ui/pages/index.html</a><br><img src="/myimages/floodlight.png" alt="floodlight"></p>
<h2 id="备注说明"><a href="#备注说明" class="headerlink" title="备注说明"></a>备注说明</h2><p>博文的篇幅太长有碍观瞻，深入研究内容请见后续博文openvSwitch XX。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;openvSwitch简介&quot;&gt;&lt;a href=&quot;#openvSwitch简介&quot; class=&quot;headerlink&quot; title=&quot;openvSwitch简介&quot;&gt;&lt;/a&gt;openvSwitch简介&lt;/h2&gt;&lt;p&gt;openvSwitch 是SDN常用的虚拟交换机，其将普通交换机的数据平面和控制平面相分离，SDN交换机只负责数据的转发，而控制指令则由更上一级的控制器下发&lt;/p&gt;
&lt;h2 id=&quot;OpenvSwitch（虚拟交换机）常用模块&quot;&gt;&lt;a href=&quot;#OpenvSwitch（虚拟交换机）常用模块&quot; class=&quot;headerlink&quot; title=&quot;OpenvSwitch（虚拟交换机）常用模块&quot;&gt;&lt;/a&gt;OpenvSwitch（虚拟交换机）常用模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ovs-vswitchd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要模块、实现交换功能，含有支持流交换的Linux内核模块,基于流交换&lt;br&gt;它和上层controller通信采用OPENFLOW协议，与ovsdb-server通信采用OVSDB协议，和内核通信采用netlink通信&lt;br&gt;支持多个独立datapatch(网桥)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root      2225     1  0 20:05 ?        00:00:00 ovs-vswitchd: monitoring pid 2226 (healthy)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root      2226  2225  0 20:05 ?        00:00:00 ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;ovsdb-server &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟交换机配置信息（接口、交换内容、VLAN等）存放的数据库服务，ovs-vswitchd会根据ovsdb-server中的配置工作。&lt;br&gt;ovsdb-server 和ovs-vswitchd 使用OVSDB(JSON-RPC)方式通信&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root      2201     1  0 20:05 ?        00:00:00 ovsdb-server: monitoring pid 2202 (healthy)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root      2202  2201  0 20:05 ?        00:00:00 ovsdb-server /etc/openvswitch/conf.db -vconsole:emer -vsyslog:err -vfile:info --remote=punix:/var/run/openvswitch/db.sock --private-key=db:Open_vSwitch,SSL,private_key --certificate=db:Open_vSwitch,SSL,certificate --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert --no-chdir --log-file=/var/log/openvswitch/ovsdb-server.log --pidfile=/var/run/openvswitch/ovsdb-server.pid --detach --monitor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="虚拟交换机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>iptables</title>
    <link href="http://vcpu.me/iptables/"/>
    <id>http://vcpu.me/iptables/</id>
    <published>2017-07-27T10:00:00.000Z</published>
    <updated>2017-07-27T03:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filter表"><a href="#filter表" class="headerlink" title="filter表"></a>filter表</h2><p>根据已配置好的规则操作本机的包（INPUT）、转发的包（FORWARD）、本机发出的包（OUTPUT）；最终决定是否放行（ACCEPT）、丢弃（DROP）、拒绝（REJECT）、产生告警日志（LOG）。</p>
<h2 id="nat表"><a href="#nat表" class="headerlink" title="nat表"></a>nat表</h2><p>根据配置好的规则，在包刚刚到达FW时修改目的地址（PREROUTING）、本机产生包修改目的地址（OUTPUT）、离开转发系统前修改源地址（POSTROUTING）；最终实现网络SNAT、REDIRECT、DNAT</p>
<h2 id="mangle表"><a href="#mangle表" class="headerlink" title="mangle表"></a>mangle表</h2><p>主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。</p>
<a id="more"></a>
<h2 id="iptables工作的netfilter框架挂载点转发流程"><a href="#iptables工作的netfilter框架挂载点转发流程" class="headerlink" title="iptables工作的netfilter框架挂载点转发流程"></a>iptables工作的netfilter框架挂载点转发流程</h2><p><img src="/myimages/netfilter.png" alt="netfilter"></p>
<ul>
<li><p>1.数据包从网络A经过网卡中断送入内核协议栈，首先进入prerouting挂载点，路由前的操作可加入到此挂载点完成，如图的对目的地址的修改，修改后的地址会跟进修改后的地址会继续进入转发路由查找但是查找路由的目的地址变成了目的NAT后的地</p>
</li>
<li><p>2.经过转发路由查找，如果是发给本机的报文，交给本机的应用程序处理；在具体的应用程序处理之前<br>会经过input挂载点，如图你可以进行上本机的报文限制，直接在input挂载点丢弃报文，使其无法到达具体的应用程序。</p>
</li>
<li><blockquote>
<p>2-1.应用程序在处理完成后，根据本机路由表酱数据发出，在本机报文发出前，会经过output挂载点，此处你的策略只针对于本机发出报文有效。如果你想修改本机发出报文的源地址，你需要在此实现。</p>
</blockquote>
</li>
<li><p>3.经过转发路由查找，如果是转发的报文，在具体的转发报文之前，你可以通过在forward挂载点操作进行过滤等动作。</p>
</li>
<li><p>4.无论是转发报文还是本机发出的报文，它们最终会经过postrouting挂载点，送到最终物理发包流程；也就是说postrouting是数据包离开本netfilter协议栈的最后一个流程，你可以在这个流程中修改源IP地址。</p>
</li>
</ul>
<h2 id="iptables基本命令"><a href="#iptables基本命令" class="headerlink" title="iptables基本命令"></a>iptables基本命令</h2><p><img src="/myimages/iptablecmd.png" alt="iptablecmd"></p>
<ul>
<li>[-t 表名]：该规则所操作的哪个表，可以使用filter、nat等，如果没有指定则默认为filter</li>
<li>-A：新增一条规则，到该规则链列表的最后一行</li>
<li>-I：插入一条规则，原本该位置上的规则会往后顺序移动，没有指定编号则为1</li>
<li>-D：从规则链中删除一条规则，要么输入完整的规则，或者指定规则编号加以删除</li>
<li>-R：替换某条规则，规则替换不会改变顺序，而且必须指定编号。</li>
<li>-P：设置某条规则链的默认动作</li>
<li>-nL：-L、-n，查看当前运行的防火墙规则列表</li>
<li>chain名：指定规则表的哪个链，如INPUT、OUPUT、FORWARD、PREROUTING等</li>
<li>[规则编号]：插入、删除、替换规则时用，–line-numbers显示号码</li>
<li>[-i|o 网卡名称]：i是指定数据包从哪块网卡进入，o是指定数据包从哪块网卡输出</li>
<li>[-p 协议类型]：可以指定规则应用的协议，包含tcp、udp和icmp等</li>
<li>[-s 源IP地址]：源主机的IP地址或子网地址</li>
<li>[–sport 源端口号]：数据包的IP的源端口号</li>
<li>[-d目标IP地址]：目标主机的IP地址或子网地址</li>
<li>[–dport目标端口号]：数据包的IP的目标端口号</li>
<li>-m：extend matches，这个选项用于提供更多的匹配参数，如：</li>
<li>-m state –state ESTABLISHED,RELATED</li>
<li>-m tcp –dport 22</li>
<li>-m multiport –dports 80,8080</li>
<li>-m icmp –icmp-type 8</li>
<li>&lt;-j 动作&gt;：处理数据包的动作，包括ACCEPT、DROP、REJECT等<h2 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h2></li>
</ul>
<h3 id="iptables-nL-查看当前iptables-filter规则"><a href="#iptables-nL-查看当前iptables-filter规则" class="headerlink" title="iptables -nL 查看当前iptables filter规则"></a>iptables -nL 查看当前iptables filter规则</h3><p>   iptables -nL 等价于iptables -nL -t filter</p>
<h3 id="iptables-nL-t-nat查看nat规则"><a href="#iptables-nL-t-nat查看nat规则" class="headerlink" title="iptables -nL -t nat查看nat规则"></a>iptables -nL -t nat查看nat规则</h3><h3 id="iptables-nL-–line-number-显示规则链编号"><a href="#iptables-nL-–line-number-显示规则链编号" class="headerlink" title="iptables -nL –line-number 显示规则链编号"></a>iptables -nL –line-number 显示规则链编号</h3><h3 id="iptables-D-FORWARD-2删除FORWARD链第二条规则"><a href="#iptables-D-FORWARD-2删除FORWARD链第二条规则" class="headerlink" title="iptables -D FORWARD 2删除FORWARD链第二条规则"></a>iptables -D FORWARD 2删除FORWARD链第二条规则</h3><h3 id="iptables-A-INPUT-j-REJECT-–reject-with-icmp-host-prohibited拒绝所有报文，并回应主机已被封锁"><a href="#iptables-A-INPUT-j-REJECT-–reject-with-icmp-host-prohibited拒绝所有报文，并回应主机已被封锁" class="headerlink" title="iptables -A INPUT -j REJECT –reject-with icmp-host-prohibited拒绝所有报文，并回应主机已被封锁"></a>iptables -A INPUT -j REJECT –reject-with icmp-host-prohibited拒绝所有报文，并回应主机已被封锁</h3><p>–reject-with icmp-net-prohibited 拒绝数据包回应一条icmp改造主机被封锁<br>–reject-with tcp-reset 拒绝数据包 tcp回应rst<br>–reject-with icmp-net-prohibited 拒绝数据包回应一条icmp告知网络禁止</p>
<h3 id="实现在外界和本机访问主机的80端口就相当于访问8080端口"><a href="#实现在外界和本机访问主机的80端口就相当于访问8080端口" class="headerlink" title="实现在外界和本机访问主机的80端口就相当于访问8080端口"></a>实现在外界和本机访问主机的80端口就相当于访问8080端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A PREROUTING -p -m tcp --dport 80 -j REDIRECT --to-ports 8080</div><div class="line">iptables -t nat -A OUTPUT -p tcp -m --dport 80 -j REDIRECT --to-ports 8080</div></pre></td></tr></table></figure>
<h3 id="设置input默认丢包，forward和output默认放通"><a href="#设置input默认丢包，forward和output默认放通" class="headerlink" title="设置input默认丢包，forward和output默认放通"></a>设置input默认丢包，forward和output默认放通</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P FORWARD ACCEPT</div><div class="line">iptables -P OUTPUT ACCEPT</div></pre></td></tr></table></figure>
<h3 id="iptables-m-state-–state-NEW-ESTABLISHED"><a href="#iptables-m-state-–state-NEW-ESTABLISHED" class="headerlink" title="iptables -m state –state NEW,ESTABLISHED"></a>iptables -m state –state NEW,ESTABLISHED</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -p icmp -m state --state NEW -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ping通<br>测试结果：执行上述命令后效果为：主机A ping主机B ping不通；主机B ping主机A能通一个包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -p icmp -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包<br>测试结果：主机A ping主机B能ping通，主机B ping主机A并不能ping通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -p icmp -m state --state RELATED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包<br>测结果：主机A和主机B均不通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -s 10.30.10.141 -p tcp  -m state --state NEW -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ssh连接<br>测试结果：主机A无法 telnet 主机B(10.30.10.141) 22端口， 主机B telnet 主机A 可完成三次握手</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -s 10.30.10.141 -p tcp  -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ssh连接<br>测试结果：主机A可正常ssh主机B，主机B无法ssh主机A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -s 10.30.10.141 -p tcp  -m state --state NEW,ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ssh连接<br>测试结果：主机A和主机B可以相互ssh连接</p>
<p><strong>其它说明</strong><br>指定要匹配包的的状态，当前有4种状态可用：INVALID，ESTABLISHED，NEW和RELATED。 </p>
<ul>
<li>INVALID意味着这个包没有已知的流或连接与之关联，也可能是它包含的数据或包头有问题。</li>
<li>ESTABLISHED意思是包是完全有效的，而且属于一个已建立的连接，这个连接的两端都已经有数据发送</li>
<li>RELATED说明包正在建立一个新的连接，这个连接是和一个已建立的连接相关的。比如，FTP data transfer，ICMP error 和一个TCP或UDP连接相关。</li>
<li>NEW状态可以理解成允许首包建立会话，这里首包不适一个包的意思（icmp是第一个包的意思、TCP是三次握手的意思）。</li>
</ul>
<h3 id="10-30-0-0-16-网断允许访问本机的80和443端口"><a href="#10-30-0-0-16-网断允许访问本机的80和443端口" class="headerlink" title="10.30.0.0/16 网断允许访问本机的80和443端口"></a>10.30.0.0/16 网断允许访问本机的80和443端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 10.30.0.0/16 -p tcp -m tcp -m multiport --dports 80,443 -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="10-30-10-0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包"><a href="#10-30-10-0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包" class="headerlink" title="10.30.10.0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包"></a>10.30.10.0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 10.30.10.0/24 -p tcp -m tcp --dport 80 -j DROP</div></pre></td></tr></table></figure>
<h3 id="完全信任主机10-30-10-30"><a href="#完全信任主机10-30-10-30" class="headerlink" title="完全信任主机10.30.10.30"></a>完全信任主机10.30.10.30</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 10.30.10.30 -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="放行lo口所有规则并且插入到规则2位置"><a href="#放行lo口所有规则并且插入到规则2位置" class="headerlink" title="放行lo口所有规则并且插入到规则2位置"></a>放行lo口所有规则并且插入到规则2位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 2 -i lo -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="当有人连接22端口时候产生日志，并对日志写入进行限制"><a href="#当有人连接22端口时候产生日志，并对日志写入进行限制" class="headerlink" title="当有人连接22端口时候产生日志，并对日志写入进行限制"></a>当有人连接22端口时候产生日志，并对日志写入进行限制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -R INPUT 1 -p tcp --dport 22 -m limit --limit 3/minute --limit-burst 8 -j LOG</div></pre></td></tr></table></figure>
<h3 id="iptables-A-PREROUTING-i-eth0-d-202-110-123-100-j-DNAT-–to-10-30-10-30"><a href="#iptables-A-PREROUTING-i-eth0-d-202-110-123-100-j-DNAT-–to-10-30-10-30" class="headerlink" title="iptables -A PREROUTING -i eth0 -d 202.110.123.100 -j DNAT –to 10.30.10.30"></a>iptables -A PREROUTING -i eth0 -d 202.110.123.100 -j DNAT –to 10.30.10.30</h3><p>目的NAT，访问202.110.123.100，最终相当于访问10.30.10.30</p>
<h3 id="iptables-A-POSTROUTING-o-eth0-s-1-1-1-1-j-SNAT-–to-202-110-123-200"><a href="#iptables-A-POSTROUTING-o-eth0-s-1-1-1-1-j-SNAT-–to-202-110-123-200" class="headerlink" title="iptables -A POSTROUTING -o eth0 -s 1.1.1.1 -j SNAT –to 202.110.123.200"></a>iptables -A POSTROUTING -o eth0 -s 1.1.1.1 -j SNAT –to 202.110.123.200</h3><p>源NAT，1.1.1.1内网机器上外网，其报文源地址全部变成 202.110.123.200</p>
<h3 id="iptables-A-POSTROUTING-o-eth0-s-192-168-1-200-j-SNAT-–to-NASQUERADE"><a href="#iptables-A-POSTROUTING-o-eth0-s-192-168-1-200-j-SNAT-–to-NASQUERADE" class="headerlink" title="iptables -A POSTROUTING -o eth0 -s 192.168.1.200 -j SNAT –to NASQUERADE"></a>iptables -A POSTROUTING -o eth0 -s 192.168.1.200 -j SNAT –to NASQUERADE</h3><p>源NAT，1.1.1.1内网机器上外网，其报文根据接口情况进行变更</p>
<h2 id="ubuntun-iptables规则开机启动"><a href="#ubuntun-iptables规则开机启动" class="headerlink" title="ubuntun iptables规则开机启动"></a>ubuntun iptables规则开机启动</h2><p>步骤1:将规则保存到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables-save &gt; /etc/iptables.up.rules</div></pre></td></tr></table></figure></p>
<p>步骤2:系统启动时候加载这些配置,vim /etc/network/interfaces;在最后一行加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller:~# cat /etc/network/interfaces</div><div class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line">pre-up iptables-restore &lt; /etc/iptables.up.rules</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;filter表&quot;&gt;&lt;a href=&quot;#filter表&quot; class=&quot;headerlink&quot; title=&quot;filter表&quot;&gt;&lt;/a&gt;filter表&lt;/h2&gt;&lt;p&gt;根据已配置好的规则操作本机的包（INPUT）、转发的包（FORWARD）、本机发出的包（OUTPUT）；最终决定是否放行（ACCEPT）、丢弃（DROP）、拒绝（REJECT）、产生告警日志（LOG）。&lt;/p&gt;
&lt;h2 id=&quot;nat表&quot;&gt;&lt;a href=&quot;#nat表&quot; class=&quot;headerlink&quot; title=&quot;nat表&quot;&gt;&lt;/a&gt;nat表&lt;/h2&gt;&lt;p&gt;根据配置好的规则，在包刚刚到达FW时修改目的地址（PREROUTING）、本机产生包修改目的地址（OUTPUT）、离开转发系统前修改源地址（POSTROUTING）；最终实现网络SNAT、REDIRECT、DNAT&lt;/p&gt;
&lt;h2 id=&quot;mangle表&quot;&gt;&lt;a href=&quot;#mangle表&quot; class=&quot;headerlink&quot; title=&quot;mangle表&quot;&gt;&lt;/a&gt;mangle表&lt;/h2&gt;&lt;p&gt;主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iptables" scheme="http://vcpu.me/tags/iptables/"/>
    
      <category term="netfilter框架原理" scheme="http://vcpu.me/tags/netfilter%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title> vxlan</title>
    <link href="http://vcpu.me/vxlan1/"/>
    <id>http://vcpu.me/vxlan1/</id>
    <published>2017-07-19T10:00:00.000Z</published>
    <updated>2017-07-19T05:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算网络要求"><a href="#云计算网络要求" class="headerlink" title="云计算网络要求"></a>云计算网络要求</h2><h3 id="虚拟机迁移"><a href="#虚拟机迁移" class="headerlink" title="虚拟机迁移"></a>虚拟机迁移</h3><p>（1）二层网络且链路冗余可靠<br>虚拟机迁移从一个物理机迁移到另一个物理机，要求虚拟机不间断业务；因此虚拟机迁移时候必须要保证IP和MAC等网络参数维持不变，放眼此要求也迁移的两台虚拟机处于二层网络时才能满足；而且要求网络本身能多链路冗余和可靠。<br>（2）二层网络下STP（网络生成树）协议复杂，且搞不定大网络规模网络<br>（3）各个厂商虚拟化网络技术，虽然可以简化拓扑，但网络规模和灵活性上欠缺，适合小规模网络构建，例如数据中心内部网络<br>（4）大规模网络扩展TRILL/SPB/FabricPath/VPLS等技术，课解决上述问题，但是对网络硬件有要求，部署成本高</p>
<h3 id="虚拟机规模受网络规格限制"><a href="#虚拟机规模受网络规格限制" class="headerlink" title="虚拟机规模受网络规格限制"></a>虚拟机规模受网络规格限制</h3><p>大二层网络环境下，所有交换机均需要记录下所有地址和接口映射；一般场景下核心交换机可满足此需求，但是针对于接入交换机却搞不定这件事情；当然你也可以提升所有交换机档次，那么网络建设成本也相应提升。</p>
<h3 id="网络广播隔离"><a href="#网络广播隔离" class="headerlink" title="网络广播隔离"></a>网络广播隔离</h3><p>（1）主流的vlan技术，会限制vlan数目为4094个<br>（2）vlan技术的静态配置型技术，这样使得数据中心网络几乎为所有vlan被允许通过，导致任何一个vlan 的未知广播数据会在整网泛滥，无节制消耗网络交换能力和带宽。<br>（3）对于小规模的云计算虚拟化环境，现有的网络技术如虚拟机接入感知(VEPA/802.1Qbg)、数据中心二层网络扩展(IRF/vPC/TRILL/FabricPath)、数据中心间二层技术(OTV/EVI/TRILL)等可以很好的满足业务需求，上述限制不成为瓶颈。然而，完全依赖于物理网络设备本身的技术改良，目前看来并不能完全解决大规模云计算环境下的问题。<br><a id="more"></a></p>
<h2 id="如何满足云计算网络要求？-so-you-can-use-vxlan"><a href="#如何满足云计算网络要求？-so-you-can-use-vxlan" class="headerlink" title="如何满足云计算网络要求？ so you can use vxlan"></a>如何满足云计算网络要求？ so you can use vxlan</h2><p>云计算，虚拟化服务器迁移不改变IP地址，也不用修改主机路由等；这种使用场景二层网络可满足，传统网络通常采用VLAN进行通信隔离和广播隔离<br>实现2层网络；Vxlan是实现如何在三层网络中进行二层传输的overlay技术。Vxlan技术是SDN解决方案中最流行的技术。</p>
<h3 id="vxlan-amp-openflow-different？"><a href="#vxlan-amp-openflow-different？" class="headerlink" title="vxlan &amp; openflow different？"></a>vxlan &amp; openflow different？</h3><p>overlay只是一组组网方案，openflow是一个控制协议；实际使用网络中是通过openflow协议控制vSwitch构建overlay网络。</p>
<h2 id="why-vxlan（overlay）"><a href="#why-vxlan（overlay）" class="headerlink" title="why vxlan（overlay）?"></a>why vxlan（overlay）?</h2><h3 id="云计算需要弹性的二层网络，这种弹性overlay网络可满足"><a href="#云计算需要弹性的二层网络，这种弹性overlay网络可满足" class="headerlink" title="云计算需要弹性的二层网络，这种弹性overlay网络可满足"></a>云计算需要弹性的二层网络，这种弹性overlay网络可满足</h3><p>overlay网络的本质是在三层网络中实现二层网络的扩展。其也就具备了三层网络的优点。<br>三层网络优点如下：<br>（1）三层网络路由方式转发，突破网络结构限制<br>（2）具有良性大规模扩展能力<br>（3）对网络设备本身无要求<br>（4）故障自愈能力强<br>（5）负责均衡能力强</p>
<h3 id="overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小"><a href="#overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小" class="headerlink" title="overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小"></a>overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小</h3><h3 id="vxlan可以解决度租户问题"><a href="#vxlan可以解决度租户问题" class="headerlink" title="vxlan可以解决度租户问题"></a>vxlan可以解决度租户问题</h3><h3 id="overlay组网避免二层带来的广播、组播、单播问题"><a href="#overlay组网避免二层带来的广播、组播、单播问题" class="headerlink" title="overlay组网避免二层带来的广播、组播、单播问题"></a>overlay组网避免二层带来的广播、组播、单播问题</h3><h2 id="vlan报文头-amp-vxlan报文头"><a href="#vlan报文头-amp-vxlan报文头" class="headerlink" title="vlan报文头 &amp; vxlan报文头"></a>vlan报文头 &amp; vxlan报文头</h2><h3 id="vlan报文结构"><a href="#vlan报文结构" class="headerlink" title="vlan报文结构"></a>vlan报文结构</h3><p><img src="/myimages/vlanframe.png" alt="vxlanframe"></p>
<h3 id="vxlan报文结构"><a href="#vxlan报文结构" class="headerlink" title="vxlan报文结构"></a>vxlan报文结构</h3><p><img src="/myimages/vxlanframe.png" alt="vxlanframe"></p>
<h3 id="vxlan封装端口默认是4798"><a href="#vxlan封装端口默认是4798" class="headerlink" title="vxlan封装端口默认是4798"></a>vxlan封装端口默认是4798</h3><h3 id="支持多达16M（（2-24-1）-1024-2）租户"><a href="#支持多达16M（（2-24-1）-1024-2）租户" class="headerlink" title="支持多达16M（（2^24-1）/1024^2）租户"></a>支持多达16M（（2^24-1）/1024^2）租户</h3><h3 id="vxlan数据平面-amp-控制平面"><a href="#vxlan数据平面-amp-控制平面" class="headerlink" title="vxlan数据平面 &amp; 控制平面"></a>vxlan数据平面 &amp; 控制平面</h3><p>（1）数据平面-隧道机制<br>已经知道，VTEP为虚拟机的数据包加上了层包头，这些新的报头之有在数据到达目的VTEP后才会被去掉。<br>中间路径的网络设备只会根据外层包头内的目的地址进行数据转发，对于转发路径上的网络来说，一个Vxlan<br>数据包跟一个普通IP包相比，除了个头大一点外没有区别。<br>     由于VXLAN的数据包在整个转发过程中保持了内部数据的完整，因此VXLAN的数据平面是一个基于隧道<br>的数据平面。</p>
<p>(2) 控制平面—-改进的二层协议<br>     VXLAN不会在虚拟机之间维持一个长连接，所以VXLAN需要一个控制平面来记录对端地址可达情况。控制<br>平面的表为(VNI，内层MAC，外层vtep_ip)。Vxlan学习地址的时候仍然保存着二层协议的特征，节点之间不会<br>周期性的交换各自的路由表，对于不认识的MAC地址，VXLAN依靠组播来获取路径信息(如果有SDN Controller，<br>可以向SDN单播获取)。<br>    另一方面，VXLAN还有自学习的功能，当VTEP收到一个UDP数据报后，会检查自己是否收到过这个虚拟机的<br>数据，如果没有，VTEP就会记录源vni/源外层ip/源内层mac对应关系，避免组播学习</p>
<h2 id="vxlan实验同网段ping主机"><a href="#vxlan实验同网段ping主机" class="headerlink" title="vxlan实验同网段ping主机"></a>vxlan实验同网段ping主机</h2><p>虚拟主机1<br><img src="/myimages/vxlan1.png" alt="vxlan1"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.151/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.188</div><div class="line"></div><div class="line">ifconfig br1 10.0.0.1/24 up</div></pre></td></tr></table></figure></p>
<p>虚拟主机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.188/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.151</div><div class="line">ifconfig br1 10.0.0.2/24 up</div></pre></td></tr></table></figure>
<h3 id="此实验下vxlan-ARP数据包处理过程"><a href="#此实验下vxlan-ARP数据包处理过程" class="headerlink" title="此实验下vxlan ARP数据包处理过程"></a>此实验下vxlan ARP数据包处理过程</h3><p>步骤1：虚拟机1中ping 虚拟机2的10.0.0.2，arp表中无10.0.0.2的MAC地址，虚拟机1广播ARP请求<br>步骤2：br1即VTEP1会将报文封装起来。封装时候目的IP是确定的，源ip会经过路由抉择进行选择（VNI、源地址为VTEP1地址192.168.55.151、目的地址为VTEP2地址192.168.55.188）<br>步骤3：被封装流量经过物理网络到达VTEP2<br>步骤4：VTEP2接受到封装后报文，获取记录（VNI、内层源MAC、内层源IP），解除封装并在VNI中广播<br>步骤5：虚拟机2收到广播流量后，br1回复ARP请求,br1即VETP2会将ARP回复报文进行封装,因为回复数据要发给192.168.55.151，经过路由抉择发送源ip为192.168.55.188<br>步骤6：虚拟机1VTEP1收到报文后，学习收到报文的内层源MAC、内层源IP，解封将流量发给虚拟机1的br1<br>步骤7：br1获取MAC地址，ARP交互结束</p>
<h2 id="vxlan实验不同网段ping主机"><a href="#vxlan实验不同网段ping主机" class="headerlink" title="vxlan实验不同网段ping主机"></a>vxlan实验不同网段ping主机</h2><p>不同网断vxlan只需要将网关设置为开启vxlan的接口br1<br><img src="/myimages/vxlan2.png" alt="vxlan2"><br>虚拟主机1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.151/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.188</div><div class="line"></div><div class="line">ifconfig br1 10.0.0.1/24 up</div><div class="line">route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.0.0.1 dev br1</div></pre></td></tr></table></figure></p>
<p>虚拟主机2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.188/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.151</div><div class="line">ifconfig br1 10.0.1.1/24 up</div><div class="line">route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.1.1 dev br1</div></pre></td></tr></table></figure></p>
<h2 id="来自牛人的总结"><a href="#来自牛人的总结" class="headerlink" title="来自牛人的总结"></a>来自牛人的总结</h2><p>总要有结尾，此总结来自 <a href="http://www.jianshu.com/p/d8351b6bf41b" target="_blank" rel="external">http://www.jianshu.com/p/d8351b6bf41b</a></p>
<p>1、Overlay网络的优点简单说就两句话：一是在三层网络中利用封装技术提高二层网络扩展性的同时规避了传统二层网络的种种弊端；二是通过引入VNID的概念，满足了云计算多租户vlan不够，以及租户间网络隔离的问题。               </p>
<p>2、Overlay技术的诞生实际就是为了解决云计算大环境下传统网络的种种问题，从它的技术构想到落地方案都是按照云计算的思路来的，所以对于一个规模较小且相对稳定的网络环境中是没有必要用overlay技术的，用了反而把网络搞复杂了。</p>
<p>3、Overlay的所有技术路线中，VXLAN的运用最广泛，得到了最多的主流网络厂商的支持，未来很长一段时间里很可能成为overlay技术的代名词；</p>
<p>4、对于overlay的软硬件模式之争，是仁者见仁、智者见智的，我觉得目前来看软件模式更加容易落地，如果虚拟化平台是开源的需要自己去研发vSwitch是有一些落地难度的，但是vmware NSX相对还是比较成熟的，但是也需要谨慎，最好在一些测试环境或者非重要的环境中先试用。而硬件的overlay方式存在一个所有硬件交换机都需要更换的问题，成本比较高，设备的更换的风险也高，而且硬件overlay方案的捆绑太厉害，需要谨慎考虑。不过我在测试了cisco的ACI后感觉还是很有特点的，后面会单独把ACI拿出来介绍一下，如果是一个完全全新的数据中心倒是可以考虑尝试硬件的overlay模式。</p>
<p>5、在网络的世界里并不是说一个技术叫好就会叫座，比如当年的ATM和Ethernet之争，会有很多客观因素来决定的，比如用户使用习惯，技术落地难度等等，所以对于overlay的技术走向或者SDN的技术走向，还是有很多不确定因素的，各个流派间的博弈也是愈演愈烈，最终鹿死谁手真的很难说，因此这也是对我们用户来说比较头痛的事情，一个正在发展且没有什么标准化的技术，落地的风险比较大，只能抱着边尝试边观望的态度，不轻易落地也不能轻易掉队。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;云计算网络要求&quot;&gt;&lt;a href=&quot;#云计算网络要求&quot; class=&quot;headerlink&quot; title=&quot;云计算网络要求&quot;&gt;&lt;/a&gt;云计算网络要求&lt;/h2&gt;&lt;h3 id=&quot;虚拟机迁移&quot;&gt;&lt;a href=&quot;#虚拟机迁移&quot; class=&quot;headerlink&quot; title=&quot;虚拟机迁移&quot;&gt;&lt;/a&gt;虚拟机迁移&lt;/h3&gt;&lt;p&gt;（1）二层网络且链路冗余可靠&lt;br&gt;虚拟机迁移从一个物理机迁移到另一个物理机，要求虚拟机不间断业务；因此虚拟机迁移时候必须要保证IP和MAC等网络参数维持不变，放眼此要求也迁移的两台虚拟机处于二层网络时才能满足；而且要求网络本身能多链路冗余和可靠。&lt;br&gt;（2）二层网络下STP（网络生成树）协议复杂，且搞不定大网络规模网络&lt;br&gt;（3）各个厂商虚拟化网络技术，虽然可以简化拓扑，但网络规模和灵活性上欠缺，适合小规模网络构建，例如数据中心内部网络&lt;br&gt;（4）大规模网络扩展TRILL/SPB/FabricPath/VPLS等技术，课解决上述问题，但是对网络硬件有要求，部署成本高&lt;/p&gt;
&lt;h3 id=&quot;虚拟机规模受网络规格限制&quot;&gt;&lt;a href=&quot;#虚拟机规模受网络规格限制&quot; class=&quot;headerlink&quot; title=&quot;虚拟机规模受网络规格限制&quot;&gt;&lt;/a&gt;虚拟机规模受网络规格限制&lt;/h3&gt;&lt;p&gt;大二层网络环境下，所有交换机均需要记录下所有地址和接口映射；一般场景下核心交换机可满足此需求，但是针对于接入交换机却搞不定这件事情；当然你也可以提升所有交换机档次，那么网络建设成本也相应提升。&lt;/p&gt;
&lt;h3 id=&quot;网络广播隔离&quot;&gt;&lt;a href=&quot;#网络广播隔离&quot; class=&quot;headerlink&quot; title=&quot;网络广播隔离&quot;&gt;&lt;/a&gt;网络广播隔离&lt;/h3&gt;&lt;p&gt;（1）主流的vlan技术，会限制vlan数目为4094个&lt;br&gt;（2）vlan技术的静态配置型技术，这样使得数据中心网络几乎为所有vlan被允许通过，导致任何一个vlan 的未知广播数据会在整网泛滥，无节制消耗网络交换能力和带宽。&lt;br&gt;（3）对于小规模的云计算虚拟化环境，现有的网络技术如虚拟机接入感知(VEPA/802.1Qbg)、数据中心二层网络扩展(IRF/vPC/TRILL/FabricPath)、数据中心间二层技术(OTV/EVI/TRILL)等可以很好的满足业务需求，上述限制不成为瓶颈。然而，完全依赖于物理网络设备本身的技术改良，目前看来并不能完全解决大规模云计算环境下的问题。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="overlay" scheme="http://vcpu.me/tags/overlay/"/>
    
      <category term="云计算组网" scheme="http://vcpu.me/tags/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BB%84%E7%BD%91/"/>
    
      <category term="vxlan原理" scheme="http://vcpu.me/tags/vxlan%E5%8E%9F%E7%90%86/"/>
    
      <category term="vxlan实验" scheme="http://vcpu.me/tags/vxlan%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title> 虚拟网络</title>
    <link href="http://vcpu.me/network1/"/>
    <id>http://vcpu.me/network1/</id>
    <published>2017-07-14T10:00:00.000Z</published>
    <updated>2017-07-14T07:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="network-namespace"><a href="#network-namespace" class="headerlink" title="network namespace"></a>network namespace</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>当前系统的网络空间，拥有单独的网络协议栈，网络设备、网卡、路由表、转发表、ARP表、ip地址表、iptables、socket等与网络有关的组建均独立，就像进入了另一个网络环境<br>且该网络空间可以实现交换机、路由器、防火墙等功能</p>
<h2 id="使用netns在linux系统上搭建网络"><a href="#使用netns在linux系统上搭建网络" class="headerlink" title="使用netns在linux系统上搭建网络"></a>使用netns在linux系统上搭建网络</h2><p><img src="/myimages/bridge1.png" alt="bridge1"><br><strong>网络描述</strong>：<br>   该网络由四部分组成：外网、虚拟网络空间net0、虚拟网络空间net1、虚拟网络空间net2<br>   net0和net2分别为网段10.0.1.0/24 10.0.2.0/24的网络空间，并且接入网桥<br>   net1为网络空间，分别以接口eth0和eth1接入虚拟网桥，分别和net0和net2同一个网段<br>   net1为网络空间，以eth2接入网桥，和物理接口enp0s8同一个网段<br>   enp0s8为虚拟机的桥接物理网卡（虚拟机接口混杂模式开启）<br>   192.168.55.165物理机器，接入虚拟机虚拟bridge另外一端均属于ubuntun虚拟机上搭建虚拟网络<br>   淡黄色部分属于虚拟网桥<br>   net0和net2的默认网关是net1<br>   net1的默认网关是办公网络交换机192.168.55.254<br>   经过net1出去流量做snat</p>
<p><strong>搭建网络最终效果</strong>：<br>    net0和net1和net2 网络空间中均可以上外网<br><a id="more"></a></p>
<h2 id="搭建命令"><a href="#搭建命令" class="headerlink" title="搭建命令"></a>搭建命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# cat br2.sh</div><div class="line"></div><div class="line"></div><div class="line">#new bridge &amp; start</div><div class="line">ip addr flush dev enp0s8</div><div class="line">brctl addbr br0</div><div class="line">brctl addif br0 enp0s8</div><div class="line">ifconfig br0 192.168.55.244/24 up</div><div class="line">ip route add default via 192.168.55.254</div><div class="line"></div><div class="line"># ip link add br0 type bridge</div><div class="line"># ip link set dev br0 up</div><div class="line"></div><div class="line">#add net0:eth0 &lt;-&gt; br0:tap0</div><div class="line"> ip link add net0_eth0 type veth peer name tap0</div><div class="line"> ip netns add net0</div><div class="line"> ip link set dev net0_eth0 netns net0</div><div class="line"> ip netns exec net0 ip link set dev net0_eth0 name eth0</div><div class="line"> ip netns exec net0 ip addr add 10.0.1.1/24 dev eth0</div><div class="line"> ip netns exec net0 ip link set dev eth0 up</div><div class="line"> ip link set dev tap0 master br0</div><div class="line"> ip link set dev tap0 up</div><div class="line"></div><div class="line">#add net1:eth0 &lt;-&gt; br0:tap1</div><div class="line"> ip link add net1_eth0 type veth peer name tap1</div><div class="line"> ip netns add net1</div><div class="line"> ip link set dev net1_eth0 netns net1</div><div class="line"> ip netns exec net1 ip link set dev net1_eth0 name eth0</div><div class="line"> ip netns exec net1 ip addr add 10.0.1.2/24 dev eth0</div><div class="line"> ip netns exec net1 ip link set dev eth0 up</div><div class="line"> ip link set dev tap1 master br0</div><div class="line"> ip link set dev tap1 up</div><div class="line"></div><div class="line">#add net2:eth0 &lt;-&gt; br0:tap2</div><div class="line"> ip link add net2_eth0 type veth peer name tap2</div><div class="line"> ip netns add net2</div><div class="line"> ip link set dev net2_eth0 netns net2</div><div class="line"> ip netns exec net2 ip link set dev net2_eth0 name eth0</div><div class="line"> ip netns exec net2 ip addr add 10.0.2.1/24 dev eth0</div><div class="line"> ip netns exec net2 ip link set dev eth0 up</div><div class="line"> ip link set dev tap2 master br0</div><div class="line"> ip link set dev tap2 up</div><div class="line"></div><div class="line">#connect net2:eth1 &lt;-&gt; br0:tap3</div><div class="line"> ip link add net2_eth1 type veth peer name tap3</div><div class="line"> ip link set dev net2_eth1 netns net1</div><div class="line"> ip netns exec net1 ip link set dev net2_eth1 name eth1</div><div class="line"> ip netns exec net1 ip addr add 10.0.2.2/24 dev eth1</div><div class="line"> ip netns exec net1 ip link set dev eth1 up</div><div class="line"> ip link set dev tap3 master br0</div><div class="line"> ip link set dev tap3 up</div><div class="line"></div><div class="line">#add route</div><div class="line">#ip netns exec net2 ip route add 10.0.1.0/24 via 10.0.2.2 dev eth0</div><div class="line">#ip netns exec net0 ip route add 10.0.2.0/24 via 10.0.1.2 dev eth0</div><div class="line"></div><div class="line">ip netns exec net2 route add default gw 10.0.2.2</div><div class="line">ip netns exec net0 route add default gw 10.0.1.2</div><div class="line"></div><div class="line">#open gateway forward</div><div class="line">ip netns exec net1 sysctl net.ipv4.ip_forward=1</div><div class="line"></div><div class="line"></div><div class="line">#connect net1:eth2 &lt;-&gt; br0:tap4</div><div class="line"> ip link add net1_eth2 type veth peer name tap4</div><div class="line"> ip link set dev net1_eth2 netns net1</div><div class="line"> ip netns exec net1 ip link set dev net1_eth2 name eth2</div><div class="line"> ip netns exec net1 ip addr add 192.168.55.233/24 dev eth2</div><div class="line"> ip netns exec net1 ip link set dev eth2 up</div><div class="line"> ip link set dev tap4 master br0</div><div class="line"> ip link set dev tap4 up</div><div class="line"></div><div class="line">#add net1 gateway 192.168.55.254</div><div class="line">ip netns exec net1 route add default gw 192.168.55.254</div><div class="line"></div><div class="line">#add snat</div><div class="line">ip netns exec net1 iptables -t nat -A POSTROUTING -s 10.0.1.0/24 -o eth2 -j MASQUERADE</div><div class="line">ip netns exec net1 iptables -t nat -A POSTROUTING -s 10.0.2.0/24 -o eth2 -j MASQUERADE</div><div class="line"></div><div class="line">ip netns exec net0 ping -c 3 8.8.8.8</div><div class="line">ip netns exec net2 ping -c 3 8.8.8.8</div></pre></td></tr></table></figure>
<h1 id="Linux虚拟网络设备tun-tap"><a href="#Linux虚拟网络设备tun-tap" class="headerlink" title="Linux虚拟网络设备tun/tap"></a>Linux虚拟网络设备tun/tap</h1><h2 id="网络设备概念？"><a href="#网络设备概念？" class="headerlink" title="网络设备概念？"></a>网络设备概念？</h2><p>网络设备工作在驱动和协议栈之间，负责衔接它们之间的交互。它帮助驱动和协议栈只关注本身事情。</p>
<h2 id="虚拟网络设备和物理物理设备区别-？"><a href="#虚拟网络设备和物理物理设备区别-？" class="headerlink" title="虚拟网络设备和物理物理设备区别 ？"></a>虚拟网络设备和物理物理设备区别 ？</h2><p>物理网卡其实就是物理设备，比如物理网卡eth0，它分别连接内核协议栈河外面的物理网络，从物理网络收到的数据包会通过接口转发给内核协议栈，从内核协议栈发出包也会通过物理设备转发最终通过物理网络发出去</p>
<p>虚拟设备和物理设备对于内核网络设备管理模块来讲地位一致且无区别。只不过物理设备往往把数据包送到外网，虚拟设备要看具体实现了。</p>
<h2 id="tun-tap-？"><a href="#tun-tap-？" class="headerlink" title="tun/tap ？"></a>tun/tap ？</h2><p>tun/tap连接的应用程序，可以理解其为运行的另一台服务器，这台服务器可用于加密、隧道等数据加工；处理完成后从新借用一个地址将处理完后数据包封装，发出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">+----------------------------------------------------------------+</div><div class="line">|                                                                |</div><div class="line">|  +--------------------+      +--------------------+            |</div><div class="line">|  | User Application A |      | User Application B |&lt;-----+     |</div><div class="line">|  +--------------------+      +--------------------+      |     |</div><div class="line">|               | 1                    | 5                 |     |</div><div class="line">|...............|......................|...................|.....|</div><div class="line">|               ↓                      ↓                   |     |</div><div class="line">|         +----------+           +----------+              |     |</div><div class="line">|         | socket A |           | socket B |              |     |</div><div class="line">|         +----------+           +----------+              |     |</div><div class="line">|                 | 2               | 6                    |     |</div><div class="line">|.................|.................|......................|.....|</div><div class="line">|                 ↓                 ↓                      |     |</div><div class="line">|             +------------------------+                 4 |     |</div><div class="line">|             | Newwork Protocol Stack |                   |     |</div><div class="line">|             +------------------------+                   |     |</div><div class="line">|                | 7                 | 3                   |     |</div><div class="line">|................|...................|.....................|.....|</div><div class="line">|                ↓                   ↓                     |     |</div><div class="line">|        +----------------+    +----------------+          |     |</div><div class="line">|        |      eth0      |    |      tun0      |          |     |</div><div class="line">|        +----------------+    +----------------+          |     |</div><div class="line">|192.168.55.188  |                   |   10.0.1.1          |     |</div><div class="line">|                | 8                 +---------------------+     |</div><div class="line">|                |                                               |</div><div class="line">+----------------|-----------------------------------------------+</div><div class="line">                 ↓</div><div class="line">         Physical Network</div></pre></td></tr></table></figure>
<p>上述图表述的应用场景是VPN场景：发到10.0.1.0/24 网络数据通过应用程序B这个隧道，利用192.168.55.188发出到远端。</p>
<h2 id="tun-tap场景下数据包流程"><a href="#tun-tap场景下数据包流程" class="headerlink" title="tun/tap场景下数据包流程"></a>tun/tap场景下数据包流程</h2><p>1.应用程序A是一个普通的程序，通过socket A发送了一个数据包，假设这个数据包的目的IP地址是10.0.1.2<br>2.socket将这个数据包丢给协议栈<br>3.协议栈根据数据包的目的IP地址，匹配本地路由规则，知道这个数据包应该由tun0出去，于是将数据包交给tun0<br>4.tun0收到数据包之后，发现另一端被进程B打开了，于是将数据包丢给了进程B<br>5.进程B收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是192.168.55.254<br>6.socket B将数据包丢给协议栈<br>7.协议栈根据本地路由，发现这个数据包应该要通过eth0发送出去，于是将数据包交给eth0<br>8.eth0通过物理网络将数据包发送出去</p>
<p>192.168.55.254收到数据包后，打开数据包，取出原始数据，转发给10.0.1.2，收到10.0.1.2应答后，从新构造应答包并讲原始报文封装里面；走路由返回给程序B，应用程序B解封装，最终将数据包回复给应用程序A</p>
<p>至此一个完整的隧道交互完成了，tun/tap承担了奖协议栈数据包从新交付到应用程序作用，使得数据包有机会在用户态进行封装。</p>
<h3 id="tun另一端是一个用户程序"><a href="#tun另一端是一个用户程序" class="headerlink" title="tun另一端是一个用户程序"></a>tun另一端是一个用户程序</h3><p>tun0是一个Tun/Tap虚拟设备，从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，<br>而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。</p>
<h3 id="tun和tap区别"><a href="#tun和tap区别" class="headerlink" title="tun和tap区别"></a>tun和tap区别</h3><p>用户层程序通过tun设备只能读写IP数据包，而通过tap设备能读写链路层数据包，类似于普通socket和raw socket的差别一样，处理数据包的格式不一样。</p>
<h3 id="实例解析tun-tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出"><a href="#实例解析tun-tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出" class="headerlink" title="实例解析tun/tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出"></a>实例解析tun/tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/if_tun.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tun_alloc</span><span class="params">(<span class="keyword">int</span> flags)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></div><div class="line">    <span class="keyword">int</span> fd, err;</div><div class="line">    <span class="keyword">char</span> *clonedev = <span class="string">"/dev/net/tun"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((fd = open(clonedev, O_RDWR)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> fd;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;ifr, <span class="number">0</span>, <span class="keyword">sizeof</span>(ifr));</div><div class="line">    ifr.ifr_flags = flags;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((err = ioctl(fd, TUNSETIFF, (<span class="keyword">void</span> *) &amp;ifr)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Open tun/tap device: %s for reading...\n"</span>, ifr.ifr_name);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tun_fd, nread;</div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">1500</span>];</div><div class="line"></div><div class="line">    <span class="comment">/* Flags: IFF_TUN   - TUN device (no Ethernet headers)</span></div><div class="line">     *        IFF_TAP   - TAP device</div><div class="line">     *        IFF_NO_PI - Do not provide packet information</div><div class="line">     */</div><div class="line">    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tun_fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"Allocating interface"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        nread = read(tun_fd, buffer, <span class="keyword">sizeof</span>(buffer));</div><div class="line">        <span class="keyword">if</span> (nread &lt; <span class="number">0</span>) &#123;</div><div class="line">            perror(<span class="string">"Reading from interface"</span>);</div><div class="line">            close(tun_fd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Read %d bytes from tun/tap device\n"</span>, nread);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行步骤如下：<br>（1）linux运行窗口1编译运行tun<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# gcc tun.c -o tun</div><div class="line">root@controller-VirtualBox:/home/controller# ./tun</div></pre></td></tr></table></figure></p>
<p>（2）linux运行窗口2 查看建立的网络设备tun0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 ::1/128 scope host</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</div><div class="line">    link/ether 08:00:27:5f:1b:a9 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.55.188/24 brd 192.168.55.255 scope global dynamic enp0s8</div><div class="line">       valid_lft 9908sec preferred_lft 9908sec</div><div class="line">    inet6 fe80::174:582b:9b7c:3df4/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">4: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500</div><div class="line">    link/none</div></pre></td></tr></table></figure></p>
<p>（3）linux运行窗口2给tun0配置地址并激活<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr add 10.0.1.1/24 dev tun0</div><div class="line">root@controller-VirtualBox:/home/controller#</div><div class="line">root@controller-VirtualBox:/home/controller#</div><div class="line">root@controller-VirtualBox:/home/controller# ip link set tun0 up</div></pre></td></tr></table></figure></p>
<p>（4）linux运行窗口2 ping 10.0.1.2</p>
<p>（5）linux运行窗口1 查看出现下面效果，用户态socket已经通过tun0接收到ping包了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ./tun</div><div class="line">Open tun/tap device: tun0 for reading...</div><div class="line">Read 48 bytes from tun/tap device</div><div class="line">Read 48 bytes from tun/tap device</div><div class="line">Read 48 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;network-namespace&quot;&gt;&lt;a href=&quot;#network-namespace&quot; class=&quot;headerlink&quot; title=&quot;network namespace&quot;&gt;&lt;/a&gt;network namespace&lt;/h1&gt;&lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h2&gt;&lt;p&gt;当前系统的网络空间，拥有单独的网络协议栈，网络设备、网卡、路由表、转发表、ARP表、ip地址表、iptables、socket等与网络有关的组建均独立，就像进入了另一个网络环境&lt;br&gt;且该网络空间可以实现交换机、路由器、防火墙等功能&lt;/p&gt;
&lt;h2 id=&quot;使用netns在linux系统上搭建网络&quot;&gt;&lt;a href=&quot;#使用netns在linux系统上搭建网络&quot; class=&quot;headerlink&quot; title=&quot;使用netns在linux系统上搭建网络&quot;&gt;&lt;/a&gt;使用netns在linux系统上搭建网络&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/myimages/bridge1.png&quot; alt=&quot;bridge1&quot;&gt;&lt;br&gt;&lt;strong&gt;网络描述&lt;/strong&gt;：&lt;br&gt;   该网络由四部分组成：外网、虚拟网络空间net0、虚拟网络空间net1、虚拟网络空间net2&lt;br&gt;   net0和net2分别为网段10.0.1.0/24 10.0.2.0/24的网络空间，并且接入网桥&lt;br&gt;   net1为网络空间，分别以接口eth0和eth1接入虚拟网桥，分别和net0和net2同一个网段&lt;br&gt;   net1为网络空间，以eth2接入网桥，和物理接口enp0s8同一个网段&lt;br&gt;   enp0s8为虚拟机的桥接物理网卡（虚拟机接口混杂模式开启）&lt;br&gt;   192.168.55.165物理机器，接入虚拟机虚拟bridge另外一端均属于ubuntun虚拟机上搭建虚拟网络&lt;br&gt;   淡黄色部分属于虚拟网桥&lt;br&gt;   net0和net2的默认网关是net1&lt;br&gt;   net1的默认网关是办公网络交换机192.168.55.254&lt;br&gt;   经过net1出去流量做snat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搭建网络最终效果&lt;/strong&gt;：&lt;br&gt;    net0和net1和net2 网络空间中均可以上外网&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="network namespace" scheme="http://vcpu.me/tags/network-namespace/"/>
    
      <category term="网络设备tun/tap" scheme="http://vcpu.me/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87tun-tap/"/>
    
  </entry>
  
  <entry>
    <title> 网络基本命令</title>
    <link href="http://vcpu.me/cmd1/"/>
    <id>http://vcpu.me/cmd1/</id>
    <published>2017-07-13T10:00:00.000Z</published>
    <updated>2017-07-13T10:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ARP相关命令"><a href="#ARP相关命令" class="headerlink" title="ARP相关命令"></a>ARP相关命令</h2><h3 id="ip-n显示ARP表"><a href="#ip-n显示ARP表" class="headerlink" title="ip n显示ARP表"></a>ip n显示ARP表</h3><h3 id="全部清除linux-arp表项"><a href="#全部清除linux-arp表项" class="headerlink" title="全部清除linux arp表项"></a>全部清除linux arp表项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arp -n|awk &apos;/^[1-9]/&#123;system(&quot;arp -d &quot;$1)&#125;&apos;</div></pre></td></tr></table></figure>
<h3 id="清除接口eth0所有的mac"><a href="#清除接口eth0所有的mac" class="headerlink" title="清除接口eth0所有的mac"></a>清除接口eth0所有的mac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip neigh flush  dev eth0</div></pre></td></tr></table></figure>
<h3 id="arp-v-额外显示接口类型和arp表项统计信息"><a href="#arp-v-额外显示接口类型和arp表项统计信息" class="headerlink" title="arp -v 额外显示接口类型和arp表项统计信息"></a>arp -v 额外显示接口类型和arp表项统计信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# arp -v</div><div class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</div><div class="line">10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0</div><div class="line">Entries: 1	Skipped: 0	Found: 1</div></pre></td></tr></table></figure>
<h3 id="arp-a-显示全部ARP缓存"><a href="#arp-a-显示全部ARP缓存" class="headerlink" title="arp -a 显示全部ARP缓存"></a>arp -a 显示全部ARP缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# arp -a</div><div class="line">? (10.0.1.2) at 22:dc:c1:9c:8c:b4 [ether] on eth0</div></pre></td></tr></table></figure>
<h3 id="arp-n-可快速查询ARP缓存"><a href="#arp-n-可快速查询ARP缓存" class="headerlink" title="arp -n 可快速查询ARP缓存"></a>arp -n 可快速查询ARP缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# arp -n</div><div class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</div><div class="line">10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0</div><div class="line">root@controller-VirtualBox:/home/controller#</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="arptables"><a href="#arptables" class="headerlink" title="arptables"></a>arptables</h3><h4 id="增加一条规则，限制10-0-10-220-ARP-packet进入到环境中"><a href="#增加一条规则，限制10-0-10-220-ARP-packet进入到环境中" class="headerlink" title="增加一条规则，限制10.0.10.220 ARP packet进入到环境中"></a>增加一条规则，限制10.0.10.220 ARP packet进入到环境中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arptables -A INPUT -s 10.0.10.220 -j DROP</div></pre></td></tr></table></figure>
<h4 id="删除arotables规则"><a href="#删除arotables规则" class="headerlink" title="删除arotables规则"></a>删除arotables规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arptables -D INPUT -s 10.0.10.220 -j DROP</div></pre></td></tr></table></figure>
<h4 id="查看arptables-规则"><a href="#查看arptables-规则" class="headerlink" title="查看arptables 规则"></a>查看arptables 规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arptables -L</div></pre></td></tr></table></figure>
<h3 id="arpwatch"><a href="#arpwatch" class="headerlink" title="arpwatch"></a>arpwatch</h3><p>arpwatch命令用来监听网络上arp的记录。<br>-d：启动排错模式；<br>-f&lt;记录文件&gt;：设置存储ARP记录的文件，预设为/var/lib／arpwatch/arp.dat；<br>-i&lt;接口&gt;：指定监听ARP的接口，预设的接口为eth0；<br>-r&lt;记录文件&gt;：从指定的文件中读取ARP记录，而不是从网络上监听。</p>
<h4 id="读出监听的ARP地址对应表"><a href="#读出监听的ARP地址对应表" class="headerlink" title="读出监听的ARP地址对应表"></a>读出监听的ARP地址对应表</h4><blockquote>
<p>必须要杀死arpwatch进程后才才能读出下面数据<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# cat /var/lib/arpwatch/arp.dat</div><div class="line">3c:97:0e:3c:8c:53	192.168.55.155	1499942089		br0</div><div class="line">e0:69:95:4c:d4:ac	192.168.55.169	1499942233		br0</div><div class="line">28:d2:44:86:46:be	192.168.55.193	1499942137		br0</div><div class="line">68:f7:28:89:49:bd	192.168.55.199	1499942147		br0</div><div class="line">3c:97:0e:3d:22:0c	192.168.55.137	1499942189		br0</div><div class="line">68:f7:28:63:19:4f	192.168.55.192	1499942097		br0</div><div class="line">10:c3:7b:6e:e6:95	192.168.55.174	1499942112		br0</div><div class="line">20:dc:e6:fe:d7:fe	192.168.55.253	1499942035		br0</div><div class="line">b0:83:fe:6c:ec:a9	192.168.55.135	1499942042		br0</div><div class="line">08:00:27:5f:1b:a9	192.168.55.244	1499942227		br0</div><div class="line">00:15:c6:26:4d:48	192.168.55.254	1499942227		br0</div><div class="line">90:e6:ba:ea:81:93	192.168.55.98	1499942212		br0</div><div class="line">8c:a6:df:98:94:50	192.168.55.197	1499942083		br0</div><div class="line">74:27:ea:54:8b:61	192.168.55.198	1499942096		br0</div><div class="line">3c:97:0e:a7:a8:4f	192.168.55.116	1499942182		br0</div><div class="line">50:7b:9d:f1:6e:47	192.168.55.158	1499942145		br0</div><div class="line">3c:97:0e:3c:8d:fd	192.168.55.143	1499942234		br0</div><div class="line">28:d2:44:bd:02:89	192.168.55.113	1499942210		br0</div><div class="line">d4:61:fe:2b:73:13	192.168.55.220	1499942214		br0</div><div class="line">68:f7:28:06:1a:02	192.168.55.132	1499942226		br0</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="路由相关命令"><a href="#路由相关命令" class="headerlink" title="路由相关命令"></a>路由相关命令</h2><h3 id="route-n"><a href="#route-n" class="headerlink" title="route -n"></a>route -n</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# route -n</div><div class="line">Kernel IP routing table</div><div class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</div><div class="line">0.0.0.0         10.0.1.2        0.0.0.0         UG    0      0        0 eth0</div><div class="line">10.0.1.0        0.0.0.0         255.255.255.0   U     0      0        0 eth0</div></pre></td></tr></table></figure>
<h3 id="ip-r-查看路由"><a href="#ip-r-查看路由" class="headerlink" title="ip r 查看路由"></a>ip r 查看路由</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip r</div><div class="line">default via 192.168.55.254 dev br0</div><div class="line">169.254.0.0/16 dev br0  scope link  metric 1000</div><div class="line">192.168.55.0/24 dev br0  proto kernel  scope link  src 192.168.55.244</div></pre></td></tr></table></figure>
<h3 id="ip-r-get-xx-xx-xx-xx"><a href="#ip-r-get-xx-xx-xx-xx" class="headerlink" title="ip r get xx.xx.xx.xx"></a>ip r get xx.xx.xx.xx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip r get 8.8.8.8</div><div class="line">8.8.8.8 via 10.0.1.2 dev eth0  src 10.0.1.1</div><div class="line">    cache</div></pre></td></tr></table></figure>
<h3 id="增加默认路由"><a href="#增加默认路由" class="headerlink" title="增加默认路由"></a>增加默认路由</h3><p>route add default gw 10.0.1.2<br>ip route add default via 10.0.1.2</p>
<h3 id="ip-s-link-查看网络统计数据"><a href="#ip-s-link-查看网络统计数据" class="headerlink" title="ip -s link 查看网络统计数据"></a>ip -s link 查看网络统计数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip -s link</div><div class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    RX: bytes  packets  errors  dropped overrun mcast</div><div class="line">    0          0        0       0       0       0</div><div class="line">    TX: bytes  packets  errors  dropped carrier collsns</div><div class="line">    0          0        0       0       0       0</div><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    RX: bytes  packets  errors  dropped overrun mcast</div><div class="line">    4621478    12933    0       17      0       0</div><div class="line">    TX: bytes  packets  errors  dropped carrier collsns</div><div class="line">    2720       32       0       0       0       0</div></pre></td></tr></table></figure>
<h3 id="ip-s-s-link-ls-eth0-显示具体接口的详细信息"><a href="#ip-s-s-link-ls-eth0-显示具体接口的详细信息" class="headerlink" title="ip -s -s link ls eth0 显示具体接口的详细信息"></a>ip -s -s link ls eth0 显示具体接口的详细信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    RX: bytes  packets  errors  dropped overrun mcast</div><div class="line">    5197968    14512    0       20      0       0</div><div class="line">    RX errors: length   crc     frame   fifo    missed</div><div class="line">               0        0       0       0       0</div><div class="line">    TX: bytes  packets  errors  dropped carrier collsns</div><div class="line">    9034       97       0       0       0       0</div><div class="line">    TX errors: aborted  fifo   window heartbeat transns</div><div class="line">               0        0       0       0       2</div><div class="line">root@controller-VirtualBox:/home/controller#</div></pre></td></tr></table></figure>
<h2 id="地址配置相关命令"><a href="#地址配置相关命令" class="headerlink" title="地址配置相关命令"></a>地址配置相关命令</h2><h3 id="配置地址"><a href="#配置地址" class="headerlink" title="配置地址"></a>配置地址</h3><p>ip addr add 10.0.1.1/24 dev eth0</p>
<h3 id="ip-addr-显示所有接口信息"><a href="#ip-addr-显示所有接口信息" class="headerlink" title="ip addr 显示所有接口信息"></a>ip addr 显示所有接口信息</h3><h3 id="ip-addr-show-eth0-显示eth0接口信息"><a href="#ip-addr-show-eth0-显示eth0接口信息" class="headerlink" title="ip addr show eth0 显示eth0接口信息"></a>ip addr show eth0 显示eth0接口信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr show eth0</div><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    inet 10.0.1.1/24 scope global eth0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::8c90:7eff:fe35:808e/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure>
<h3 id="ip-addr-del-x-x-x-x-mask-dev-eth0-删除接口eth0地址"><a href="#ip-addr-del-x-x-x-x-mask-dev-eth0-删除接口eth0地址" class="headerlink" title="ip addr del x.x.x.x/mask dev eth0 删除接口eth0地址"></a>ip addr del x.x.x.x/mask dev eth0 删除接口eth0地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr del 10.0.1.1/24 dev eth0</div><div class="line">root@controller-VirtualBox:/home/controller# ip addr</div><div class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    inet6 fe80::8c90:7eff:fe35:808e/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure>
<h3 id="关闭和开启接口"><a href="#关闭和开启接口" class="headerlink" title="关闭和开启接口"></a>关闭和开启接口</h3><p>ip link set eth0 up/down</p>
<h2 id="linux网桥相关"><a href="#linux网桥相关" class="headerlink" title="linux网桥相关"></a>linux网桥相关</h2><h3 id="brctl-show-查看网桥配置"><a href="#brctl-show-查看网桥配置" class="headerlink" title="brctl show 查看网桥配置"></a>brctl show 查看网桥配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# brctl show</div><div class="line">bridge name	bridge id		STP enabled	interfaces</div><div class="line">br0		8000.0800275f1ba9	no		enp0s8</div><div class="line">							tap0</div><div class="line">							tap1</div><div class="line">							tap2</div><div class="line">							tap3</div><div class="line">							tap4</div><div class="line"></div><div class="line">### brctl showmacs br0 查看网桥学习的mac表项</div></pre></td></tr></table></figure>
<h3 id="brctl-showmacs-br0查看br0的mac表项"><a href="#brctl-showmacs-br0查看br0的mac表项" class="headerlink" title="brctl showmacs br0查看br0的mac表项"></a>brctl showmacs br0查看br0的mac表项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# brctl showmacs br0</div><div class="line">port no	mac addr		is local?	ageing timer</div><div class="line">  1	00:0c:29:1f:73:38	no		 202.66</div><div class="line">  1	00:0c:29:f1:60:5d	no		 248.12</div><div class="line">  1	00:0e:c6:cf:da:c7	no		   0.00</div><div class="line">  1	00:15:c6:26:4d:22	no		   1.22</div><div class="line">  1	00:15:c6:26:4d:48	no		   0.73</div><div class="line">  1	00:50:56:9f:cc:e2	no		 161.74</div></pre></td></tr></table></figure>
<h3 id="brctl-showstp-bbr0查看接口信息"><a href="#brctl-showstp-bbr0查看接口信息" class="headerlink" title="brctl showstp bbr0查看接口信息"></a>brctl showstp bbr0查看接口信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# brctl showstp br0</div><div class="line">br0</div><div class="line"> bridge id		8000.0800275f1ba9</div><div class="line"> designated root	8000.0800275f1ba9</div><div class="line"> root port		   0			path cost		   0</div><div class="line"> max age		  20.00			bridge max age		  20.00</div><div class="line"> hello time		   2.00			bridge hello time	   2.00</div><div class="line"> forward delay		  15.00			bridge forward delay	  15.00</div><div class="line"> ageing time		 300.00</div><div class="line"> hello timer		   0.00			tcn timer		   0.00</div><div class="line"> topology change timer	   0.00			gc timer		  14.22</div><div class="line"> flags</div></pre></td></tr></table></figure>
<h2 id="虚拟命名空间相关命令"><a href="#虚拟命名空间相关命令" class="headerlink" title="虚拟命名空间相关命令"></a>虚拟命名空间相关命令</h2><h3 id="增加虚拟网络命名空间"><a href="#增加虚拟网络命名空间" class="headerlink" title="增加虚拟网络命名空间"></a>增加虚拟网络命名空间</h3><p>ip netns add net0</p>
<h3 id="显示所有的虚拟网络命名空间"><a href="#显示所有的虚拟网络命名空间" class="headerlink" title="显示所有的虚拟网络命名空间"></a>显示所有的虚拟网络命名空间</h3><p>EULER:~ # ip netns list<br>net0<br>也可通过查看/var/run/netns目录下的文件来list<br>EULER:~ # ls /var/run/netns/<br>net0</p>
<h3 id="进入虚拟机网络环境"><a href="#进入虚拟机网络环境" class="headerlink" title="进入虚拟机网络环境"></a>进入虚拟机网络环境</h3><p>ip netns exec net0 <code>command</code></p>
<p>如<br>EULER:~ # ip netns exec net0 bash  #打开虚拟网络环境net0的bash窗口<br>EULER:~ # ip addr #显示所有虚拟网络环境的设备<br>EULER:~ # exit #退出该网络虚拟环境<br>exit</p>
<h3 id="增加一对veth虚拟网卡"><a href="#增加一对veth虚拟网卡" class="headerlink" title="增加一对veth虚拟网卡"></a>增加一对veth虚拟网卡</h3><p>EULER:~ # ip link add type veth</p>
<h3 id="将veth0添加到net0虚拟网络环境"><a href="#将veth0添加到net0虚拟网络环境" class="headerlink" title="将veth0添加到net0虚拟网络环境"></a>将veth0添加到net0虚拟网络环境</h3><p>ip link set veth0 netns net0</p>
<h3 id="将虚拟网卡veth1改名并添加到net1虚拟网络环境中"><a href="#将虚拟网卡veth1改名并添加到net1虚拟网络环境中" class="headerlink" title="将虚拟网卡veth1改名并添加到net1虚拟网络环境中"></a>将虚拟网卡veth1改名并添加到net1虚拟网络环境中</h3><p>ip link set dev veth1 name net1-bridge netns net1</p>
<h3 id="设置虚拟网络环境net0的veth0设备处于激活状态"><a href="#设置虚拟网络环境net0的veth0设备处于激活状态" class="headerlink" title="设置虚拟网络环境net0的veth0设备处于激活状态"></a>设置虚拟网络环境net0的veth0设备处于激活状态</h3><p>ip netns exec net0 ip link set veth0 up</p>
<h3 id="为虚拟网络环境net0的veth0设备增加IP地址"><a href="#为虚拟网络环境net0的veth0设备增加IP地址" class="headerlink" title="为虚拟网络环境net0的veth0设备增加IP地址"></a>为虚拟网络环境net0的veth0设备增加IP地址</h3><p>ip netns exec net0 ip address add 10.0.1.1/24 dev veth0</p>
<h3 id="ip-netns-列出当前网络虚拟的namespace"><a href="#ip-netns-列出当前网络虚拟的namespace" class="headerlink" title="ip netns 列出当前网络虚拟的namespace"></a>ip netns 列出当前网络虚拟的namespace</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip netns</div><div class="line">net2 (id: 2)</div><div class="line">net1 (id: 1)</div><div class="line">net0 (id: 0)</div></pre></td></tr></table></figure>
<h3 id="ls-var-run-netns-列出当前网络虚拟的namespace"><a href="#ls-var-run-netns-列出当前网络虚拟的namespace" class="headerlink" title="ls /var/run/netns/ 列出当前网络虚拟的namespace"></a>ls /var/run/netns/ 列出当前网络虚拟的namespace</h3><p>root@controller-VirtualBox:/home/controller# ls /var/run/netns/<br>net0  net1  net2</p>
<h3 id="ip-netns-monitor"><a href="#ip-netns-monitor" class="headerlink" title="ip netns monitor"></a>ip netns monitor</h3><p>监控虚拟网络namespace行为<br>root@controller-VirtualBox:/home/controller# ip netns monitor<br>delete ddd</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ARP相关命令&quot;&gt;&lt;a href=&quot;#ARP相关命令&quot; class=&quot;headerlink&quot; title=&quot;ARP相关命令&quot;&gt;&lt;/a&gt;ARP相关命令&lt;/h2&gt;&lt;h3 id=&quot;ip-n显示ARP表&quot;&gt;&lt;a href=&quot;#ip-n显示ARP表&quot; class=&quot;headerlink&quot; title=&quot;ip n显示ARP表&quot;&gt;&lt;/a&gt;ip n显示ARP表&lt;/h3&gt;&lt;h3 id=&quot;全部清除linux-arp表项&quot;&gt;&lt;a href=&quot;#全部清除linux-arp表项&quot; class=&quot;headerlink&quot; title=&quot;全部清除linux arp表项&quot;&gt;&lt;/a&gt;全部清除linux arp表项&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;arp -n|awk &amp;apos;/^[1-9]/&amp;#123;system(&amp;quot;arp -d &amp;quot;$1)&amp;#125;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;清除接口eth0所有的mac&quot;&gt;&lt;a href=&quot;#清除接口eth0所有的mac&quot; class=&quot;headerlink&quot; title=&quot;清除接口eth0所有的mac&quot;&gt;&lt;/a&gt;清除接口eth0所有的mac&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ip neigh flush  dev eth0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arp-v-额外显示接口类型和arp表项统计信息&quot;&gt;&lt;a href=&quot;#arp-v-额外显示接口类型和arp表项统计信息&quot; class=&quot;headerlink&quot; title=&quot;arp -v 额外显示接口类型和arp表项统计信息&quot;&gt;&lt;/a&gt;arp -v 额外显示接口类型和arp表项统计信息&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller# arp -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Address                  HWtype  HWaddress           Flags Mask            Iface&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Entries: 1	Skipped: 0	Found: 1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arp-a-显示全部ARP缓存&quot;&gt;&lt;a href=&quot;#arp-a-显示全部ARP缓存&quot; class=&quot;headerlink&quot; title=&quot;arp -a 显示全部ARP缓存&quot;&gt;&lt;/a&gt;arp -a 显示全部ARP缓存&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller# arp -a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;? (10.0.1.2) at 22:dc:c1:9c:8c:b4 [ether] on eth0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arp-n-可快速查询ARP缓存&quot;&gt;&lt;a href=&quot;#arp-n-可快速查询ARP缓存&quot; class=&quot;headerlink&quot; title=&quot;arp -n 可快速查询ARP缓存&quot;&gt;&lt;/a&gt;arp -n 可快速查询ARP缓存&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller# arp -n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Address                  HWtype  HWaddress           Flags Mask            Iface&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller#&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="arp相关命令" scheme="http://vcpu.me/tags/arp%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
      <category term="路由相关命令" scheme="http://vcpu.me/tags/%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
      <category term="地址配置相关命令" scheme="http://vcpu.me/tags/%E5%9C%B0%E5%9D%80%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
      <category term="虚拟命名空间相关命令" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>二三层转发-基本原理</title>
    <link href="http://vcpu.me/switchtech/"/>
    <id>http://vcpu.me/switchtech/</id>
    <published>2017-07-07T10:00:00.000Z</published>
    <updated>2017-07-07T03:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交换机的工作原理"><a href="#交换机的工作原理" class="headerlink" title="交换机的工作原理"></a>交换机的工作原理</h2><pre><code>1. 交换机根据收到数据帧中的源MAC地址建立该地址同交换机端口的映射，并将其写入MAC地址表中。
</code></pre><p>　　2. 交换机将数据帧中的目的MAC地址同已建立的MAC地址表进行比较，以决定由哪个端口进行转发。<br>　　3. 如数据帧中的目的MAC地址不在MAC地址表中，则向所有端口转发。这一过程称为泛洪（flood）。<br>　　4. 广播帧和组播帧向所有的端口转发。<br>交换机的工作原理（二、三、四层交换原理）</p>
<h2 id="交换机的三个主要功能"><a href="#交换机的三个主要功能" class="headerlink" title="交换机的三个主要功能"></a>交换机的三个主要功能</h2><p>　　 学习：以太网交换机了解每一端口相连设备的MAC地址，并将地址同相应的端口映射起来存放在交换机缓存中的MAC地址表中。<br>　　转发/过滤：当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）。<br>　　 消除回路：当交换机包括一个冗余回路时，以太网交换机通过生成树协议避免回路的产生，同时允许存在后备路径。</p>
<h2 id="交换机的工作特性"><a href="#交换机的工作特性" class="headerlink" title="交换机的工作特性"></a>交换机的工作特性</h2><p>　　 1. 交换机的每一个端口所连接的网段都是一个独立的冲突域。<br>　　 2. 交换机所连接的设备仍然在同一个广播域内，也就是说，交换机不隔绝广播（惟一的例外是在配有VLAN的环境中）。<br>　　 3. 交换机依据帧头的信息进行转发，因此说交换机是工作在数据链路层的网络设备（此处所述交换机仅指传统的二层交换设备）。</p>
<h2 id="交换机的分类"><a href="#交换机的分类" class="headerlink" title="交换机的分类"></a>交换机的分类</h2><p>　　 依照交换机处理帧时不同的操作模式，主要可分为两类：<br>　　存储转发：交换机在转发之前必须接收整个帧，并进行错误校检，如无错误再将这一帧发往目的地址。帧通过交换机的转发时延随帧长度的不同而变化。<br>　　直通式：交换机只要检查到帧头中所包含的目的地址就立即转发该帧，而无需等待帧全部的被接收，也不进行错误校验。由于以太网帧头的长度总是固定的，因此帧通过交换机的转发时延也保持不变。<br><a id="more"></a>　　</p>
<h2 id="二三四层交换机"><a href="#二三四层交换机" class="headerlink" title="二三四层交换机"></a>二三四层交换机</h2><p>　　多种理解的说法：</p>
<h3 id="理解1"><a href="#理解1" class="headerlink" title="理解1"></a>理解1</h3><p>　　二层交换（也称为桥接）是基于硬件的桥接。基于每个末端站点的唯一MAC地址转发数据包。二层交换的高性能可以产生增加各子网主机数量的网络设计。其仍然有桥接所具有的特性和限制。<br>　　三层交换是基于硬件的路由选择。路由器和第三层交换机对数据包交换操作的主要区别在于物理上的实施。<br>　　四层交换的简单定义是：不仅基于MAC（第二层桥接）或源/目的地IP地址（第三层路由选择），同时也基于TCP/UDP应用端口来做出转发决定的能力。其使网络在决定路由时能够区分应用。能够基于具体应用对数据流进行优先级划分。它为基于策略的服务质量技术提供了更加细化的解决方案。提供了一种可以区分应用类型的方法。</p>
<h3 id="理解2"><a href="#理解2" class="headerlink" title="理解2"></a>理解2</h3><p>　　二层交换机 基于MAC地址<br>　　三层交换机 具有VLAN功能 有交换和路由 ///基于IP，就是网络<br>　　四层交换机 基于端口，就是应用</p>
<h3 id="理解3"><a href="#理解3" class="headerlink" title="理解3"></a>理解3</h3><p>　　二层交换技术从网桥发展到VLAN（虚拟局域网），在局域网建设和改造中得到了广泛的应用。第二层交换技术是工作在OSI七层网络模型中的第二层，即数据链路层。它按照所接收到数据包的目的MAC地址来进行转发，对于网络层或者高层协议来说是透明的。它不处理网络层的IP地址，不处理高层协议的诸如TCP、UDP的端口地址，它只需要数据包的物理地址即MAC地址，数据交换是靠硬件来实现的，其速度相当快，这是二层交换的一个显著的优点。但是，它不能处理不同IP子网之间的数据交换。传统的路由器可以处理大量的跨越IP子网的数据包，但是它的转发效率比二层低，因此要想利用二层转发效率高这一优点，又要处理三层IP数据包，三层交换技术就诞生了。<br>　　三层交换技术的工作原理<br>　　第三层交换工作在OSI七层网络模型中的第三层即网络层，是利用第三层协议中的IP包的包头信息来对后续数据业务流进行标记，具有同一标记的业务流的后续报文被交换到第二层数据链路层，从而打通源IP地址和目的IP地址之间的一条通路。这条通路经过第二层链路层。有了这条通路，三层交换机就没有必要每次将接收到的数据包进行拆包来判断路由，而是直接将数据包进行转发，将数据流进行交换</p>
<h3 id="理解4"><a href="#理解4" class="headerlink" title="理解4"></a>理解4</h3><p>　　</p>
<h4 id="二层交换技术"><a href="#二层交换技术" class="headerlink" title="二层交换技术"></a>二层交换技术</h4><p>　　二层交换技术是发展比较成熟，二层交换机属数据链路层设备，可以识别数据包中的MAC地址信息，根据MAC地址进行转发，并将这些MAC地址与对应的端口记录在自己内部的一个地址表中。具体的工作流程如下：<br>　　（1）当交换机从某个端口收到一个数据包，它先读取包头中的源MAC地址，这样它就知道源MAC地址的机器是连在哪个端口上的；<br>　　（2） 再去读取包头中的目的MAC地址，并在地址表中查找相应的端口；<br>　　（3） 如表中有与这目的MAC地址对应的端口，把数据包直接复制到这端口上；<br>　　（4）如表中找不到相应的端口则把数据包广播到所有端口上，当目的机器对源机器回应时，交换机又可以学习一目的MAC地址与哪个端口对应，在下次传送数据时就不再需要对所有端口进行广播了。<br>　　不断的循环这个过程，对于全网的MAC地址信息都可以学习到，二层交换机就是这样建立和维护它自己的地址表。<br>　　从二层交换机的工作原理可以推知以下三点：<br>　　（1）由于交换机对多数端口的数据进行同时交换，这就要求具有很宽的交换总线带宽，如果二层交换机有N个端口，每个端口的带宽是M，交换机总线带宽超过N×M，那么这交换机就可以实现线速交换；<br>　　（2） 学习端口连接的机器的MAC地址，写入地址表，地址表的大小（一般两种表示方式：一为BEFFER RAM，一为MAC表项数值），地址表大小影响交换机的接入容量；<br>　　（3） 还有一个就是二层交换机一般都含有专门用于处理数据包转发的ASIC （Application specific Integrated Circuit）芯片，因此转发速度可以做到非常快。由于各个厂家采用ASIC不同，直接影响产品性能。<br>　　以上三点也是评判二三层交换机性能优劣的主要技术参数，这一点请大家在考虑设备选型时注意比较。</p>
<h3 id="路由技术"><a href="#路由技术" class="headerlink" title="路由技术"></a>路由技术</h3><p>　　路由器工作在OSI模型的第三层—网络层操作，其工作模式与二层交换相似，但路由器工作在第三层，这个区别决定了路由和交换在传递包时使用不同的控制信息，实现功能的方式就不同。工作原理是在路由器的内部也有一个表，这个表所标示的是如果要去某一个地方，下一步应该向那里走，如果能从路由表中找到数据包下一步往那里走，把链路层信息加上转发出去；如果不能知道下一步走向那里，则将此包丢弃，然后返回一个信息交给源地址。<br>　　路由技术实质上来说不过两种功能：决定最优路由和转发数据包。路由表中写入各种信息，由路由算法计算出到达目的地址的最佳路径，然后由相对简单直接的转发机制发送数据包。接受数据的下一台路由器依照相同的工作方式继续转发，依次类推，直到数据包到达目的路由器。<br>　　而路由表的维护，也有两种不同的方式。一种是路由信息的更新，将部分或者全部的路由信息公布出去，路由器通过互相学习路由信息，就掌握了全网的拓扑结构，这一类的路由协议称为距离矢量路由协议；另一种是路由器将自己的链路状态信息进行广播，通过互相学习掌握全网的路由信息，进而计算出最佳的转发路径，这类路由协议称为链路状态路由协议。<br>　　由于路由器需要做大量的路径计算工作，一般处理器的工作能力直接决定其性能的优劣。当然这一判断还是对中低端路由器而言，因为高端路由器往往采用分布式处理系统体系设计。</p>
<h4 id="三层交换技术"><a href="#三层交换技术" class="headerlink" title="三层交换技术"></a>三层交换技术</h4><p>　　近年来的对三层技术的宣传，耳朵都能起茧子，到处都在喊三层技术，有人说这是个非常新的技术，也有人说，三层交换嘛，不就是路由器和二层交换机的堆叠，也没有什么新的玩意，事实果真如此吗？下面先来通过一个简单的网络来看看三层交换机的工作过程。<br>　　组网比较简单<br>　　使用IP的设备A————三层交换机———–使用IP的设备B<br>　　比如A要给B发送数据，已知目的IP，那么A就用子网掩码取得网络地址，判断目的IP是否与自己在同一网段。<br>　　如果在同一网段，但不知道转发数据所需的MAC地址，A就发送一个ARP请求，B返回其MAC地址，A用此MAC封装数据包并发送给交换机，交换机起用二层交换模块，查找MAC地址表，将数据包转发到相应的端口。<br>　　如果目的IP地址显示不是同一网段的，那么A要实现和B的通讯，在流缓存条目中没有对应MAC地址条目，就将第一个正常数据包发送向一个缺省网关，这个缺省网关一般在操作系统中已经设好，对应第三层路由模块，所以可见对于不是同一子网的数据，最先在MAC表中放的是缺省网关的MAC地址；然后就由三层模块接收到此数据包，查询路由表以确定到达B的路由，将构造一个新的帧头，其中以缺省网关的MAC地址为源MAC地址，以主机B的MAC地址为目的MAC地址。通过一定的识别触发机制，确立主机A与B的MAC地址及转发端口的对应关系，并记录进流缓存条目表，以后的A到B的数据，就直接交由二层交换模块完成。这就通常所说的一次路由多次转发。<br>　　以上就是三层交换机工作过程的简单概括，可以看出三层交换的特点：<br>　　由硬件结合实现数据的高速转发。<br>　　这就不是简单的二层交换机和路由器的叠加，三层路由模块直接叠加在二层交换的高速背板总线上，突破了传统路由器的接口速率限制，速率可达几十Gbit/s。算上背板带宽，这些是三层交换机性能的两个重要参数。<br>　　简洁的路由软件使路由过程简化。<br>　　大部分的数据转发，除了必要的路由选择交由路由软件处理，都是又二层模块高速转发，路由软件大多都是经过处理的高效优化软件，并不是简单照搬路由器中的软件。<br>　　结论：<br>　　二层交换机用于小型的局域网络。这个就不用多言了，在小型局域网中，广播包影响不大，二层交换机的快速交换功能、多个接入端口和低谦价格为小型网络用户提供了很完善的解决方案。<br>　　路由器的优点在于接口类型丰富，支持的三层功能强大，路由能力强大，适合用于大型的网络间的路由，它的优势在于选择最佳路由，负荷分担，链路备份及和其他网络进行路由信息的交换等等路由器所具有功能。<br>　　三层交换机的最重要的功能是加快大型局域网络内部的数据的快速转发，加入路由功能也是为这个目的服务的。如果把大型网络按照部门，地域等等因素划分成一个个小局域网，这将导致大量的网际互访，单纯的使用二层交换机不能实现网际互访；如单纯的使用路由器，由于接口数量有限和路由转发速度慢，将限制网络的速度和网络规模，采用具有路由功能的快速转发的三层交换机就成为首选。<br>　　一般来说，在内网数据流量大，要求快速转发响应的网络中，如全部由三层交换机来做这个工作，会造成三层交换机负担过重，响应速度受影响，将网间的路由交由路由器去完成，充分发挥不同设备的优点，不失为一种好的组网策略，当然，前提是客户的腰包很鼓，不然就退而求其次，让三层交换机也兼为网际互连。</p>
<h4 id="第四层交换技术"><a href="#第四层交换技术" class="headerlink" title="第四层交换技术"></a>第四层交换技术</h4><p>　　第四层交换的一个简单定义是：它是一种功能，它决定传输不仅仅依据MAC地址(第二层网桥)或源/目标IP地址(第三层路由),而且依据TCP/UDP(第四层) 应用端口号。第四层交换功能就象是虚IP，指向物理服务器。它传输的业务服从的协议多种多样，有HTTP、FTP、NFS、Telnet或其他协议。这些业务在物理服务器基础上，需要复杂的载量平衡算法。在IP世界，业务类型由终端TCP或UDP端口地址来决定，在第四层交换中的应用区间则由源端和终端IP地址、TCP和UDP端口共同决定。<br>　　在第四层交换中为每个供搜寻使用的服务器组设立虚IP地址（VIP），每组服务器支持某种应用。在域名服务器（DNS）中存储的每个应用服务器地址是VIP，而不是真实的服务器地址。<br>　　当某用户申请应用时，一个带有目标服务器组的VIP连接请求（例如一个TCP SYN包）发给服务器交换机。服务器交换机在组中选取最好的服务器，将终端地址中的VIP用实际服务器的IP取代，并将连接请求传给服务器。这样，同一区间所有的包由服务器交换机进行映射，在用户和同一服务器间进行传输。<br>　　第四层交换的原理<br>　　OSI模型的第四层是传输层。传输层负责端对端通信，即在网络源和目标系统之间协调通信。在IP协议栈中这是TCP（一种传输协议）和UDP（用户数据包协议）所在的协议层。<br>　　在第四层中，TCP和UDP标题包含端口号（portnumber），它们可以唯一区分每个数据包包含哪些应用协议（例如HTTP、FTP等）。端点系统利用这种信息来区分包中的数据，尤其是端口号使一个接收端计算机系统能够确定它所收到的IP包类型，并把它交给合适的高层软件。端口号和设备IP地址的组合通常称作“插口（socket）”。<br>　　1和255之间的端口号被保留，他们称为“熟知”端口，也就是说，在所有主机TCP/IP协议栈实现中，这些端口号是相同的。除了“熟知”端口外，标准UNIX服务分配在256到1024端口范围，定制的应用一般在1024以上分配端口号.<br>　　分配端口号的最近清单可以在RFc1700”Assigned Numbers”上找到。TCP／UDP端口号提供的附加信息可以为网络交换机所利用，这是第4层交换的基础。<br>　　熟知的端口号举例:<br>　　　　应用协议 　端口号<br>　　　　FTP　　　　20（数据），21（控制）<br>　　　　TELNET　　23<br>　　　　SMTP 　 　25<br>　　　　HTTP 　 　80<br>　　　　NNTP 　 　119<br>　　　　NNMP 　　16，162（SNMP traps）<br>　　TCP/UDP端口号提供的附加信息可以为网络交换机所利用，这是第四层交换的基础。<br>　　具有第四层功能的交换机能够起到与服务器相连接的“虚拟IP”(VIP)前端的作用。<br>　　每台服务器和支持单一或通用应用的服务器组都配置一个VIP地址。这个VIP地址被发送出去并在域名系统上注册。<br>　　在发出一个服务请求时，第四层交换机通过判定TCP开始，来识别一次会话的开始。然后它利用复杂的算法来确定处理这个请求的最佳服务器。一旦做出这种决定，交换机就将会话与一个具体的IP地址联系在一起，并用该服务器真正的IP地址来代替服务器上的VIP地址。<br>　　每台第四层交换机都保存一个与被选择的服务器相配的源IP地址以及源TCP 端口相关联的连接表。然后第四层交换机向这台服务器转发连接请求。所有后续包在客户机与服务器之间重新影射和转发，直到交换机发现会话为止。<br>　　在使用第四层交换的情况下，接入可以与真正的服务器连接在一起来满足用户制定的规则，诸如使每台服务器上有相等数量的接入或根据不同服务器的容量来分配传输流。</p>
<p>本文章来网络</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;交换机的工作原理&quot;&gt;&lt;a href=&quot;#交换机的工作原理&quot; class=&quot;headerlink&quot; title=&quot;交换机的工作原理&quot;&gt;&lt;/a&gt;交换机的工作原理&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 交换机根据收到数据帧中的源MAC地址建立该地址同交换机端口的映射，并将其写入MAC地址表中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　2. 交换机将数据帧中的目的MAC地址同已建立的MAC地址表进行比较，以决定由哪个端口进行转发。&lt;br&gt;　　3. 如数据帧中的目的MAC地址不在MAC地址表中，则向所有端口转发。这一过程称为泛洪（flood）。&lt;br&gt;　　4. 广播帧和组播帧向所有的端口转发。&lt;br&gt;交换机的工作原理（二、三、四层交换原理）&lt;/p&gt;
&lt;h2 id=&quot;交换机的三个主要功能&quot;&gt;&lt;a href=&quot;#交换机的三个主要功能&quot; class=&quot;headerlink&quot; title=&quot;交换机的三个主要功能&quot;&gt;&lt;/a&gt;交换机的三个主要功能&lt;/h2&gt;&lt;p&gt;　　 学习：以太网交换机了解每一端口相连设备的MAC地址，并将地址同相应的端口映射起来存放在交换机缓存中的MAC地址表中。&lt;br&gt;　　转发/过滤：当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）。&lt;br&gt;　　 消除回路：当交换机包括一个冗余回路时，以太网交换机通过生成树协议避免回路的产生，同时允许存在后备路径。&lt;/p&gt;
&lt;h2 id=&quot;交换机的工作特性&quot;&gt;&lt;a href=&quot;#交换机的工作特性&quot; class=&quot;headerlink&quot; title=&quot;交换机的工作特性&quot;&gt;&lt;/a&gt;交换机的工作特性&lt;/h2&gt;&lt;p&gt;　　 1. 交换机的每一个端口所连接的网段都是一个独立的冲突域。&lt;br&gt;　　 2. 交换机所连接的设备仍然在同一个广播域内，也就是说，交换机不隔绝广播（惟一的例外是在配有VLAN的环境中）。&lt;br&gt;　　 3. 交换机依据帧头的信息进行转发，因此说交换机是工作在数据链路层的网络设备（此处所述交换机仅指传统的二层交换设备）。&lt;/p&gt;
&lt;h2 id=&quot;交换机的分类&quot;&gt;&lt;a href=&quot;#交换机的分类&quot; class=&quot;headerlink&quot; title=&quot;交换机的分类&quot;&gt;&lt;/a&gt;交换机的分类&lt;/h2&gt;&lt;p&gt;　　 依照交换机处理帧时不同的操作模式，主要可分为两类：&lt;br&gt;　　存储转发：交换机在转发之前必须接收整个帧，并进行错误校检，如无错误再将这一帧发往目的地址。帧通过交换机的转发时延随帧长度的不同而变化。&lt;br&gt;　　直通式：交换机只要检查到帧头中所包含的目的地址就立即转发该帧，而无需等待帧全部的被接收，也不进行错误校验。由于以太网帧头的长度总是固定的，因此帧通过交换机的转发时延也保持不变。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="二三层转发" scheme="http://vcpu.me/tags/%E4%BA%8C%E4%B8%89%E5%B1%82%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>集线器、网桥、交换机、中继器原理</title>
    <link href="http://vcpu.me/hub/"/>
    <id>http://vcpu.me/hub/</id>
    <published>2017-07-07T09:22:34.000Z</published>
    <updated>2017-08-02T02:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h2><p>集线器（HUB），它是工作在物理层的设备，由于它只是工作在物理层的设备，所以它并不关心也不可能关心OSI上面几层所涉及的，它的工作机制流程 是：从一个端口接收到数据包时，会在其他端口把这个包转发一次，因为它不知道也不可能知道这个包是发给谁的（物理层设备只关心电压这些物理概念），它也只能对所有人广播(这里和下文提到的广播该词的意思和ARP请求时的广播有些不同。</p>
<p>这里的广播意思是：使用物理层转发设备，如HUB，导致的广播，可以说这个广播是被逼的，因为设备的问题！是设备转发包引起的广播！而ARP请求的 广播是自己要求的，主动的，因为ARP请求包的目标地址IP是255.255.255.255，但ARP请求的广播涉及IP层的知识，不在这篇文章讨论的 范围，所以这里提到的广播，除非特别说明，否则都是第一个意思，也就说是”因设备转发数据包引起的广播” )，让他们自己处理了。</p>
<p>这样一来会有不少问题，你发的数据其他人都收到了，私隐这总东西是不存在的！别入可以随便监听你信息！所以会话劫持在那个年代相当容易（记得俺第一次接触会话劫持这个概念的时候还是高2，那是2001~2002，呵，那时候集线器还是比较普遍的）。<br><a id="more"></a><br>另外一个比较严重的问题是，如果一个大型的局域网，比如有500台机器，全部用HUB连接的，后果会怎么样呢？？相当慢，网络的效率极差！为什么？ 如果500台机器都发一个包，那就是说每台机器，都需要接收差不多499个无用包…并且如果是需要回应的话……无用的数据包会充斥着整个的局 域网，这就是传说中的广播风暴！</p>
<p>为了减少广播风暴，网桥产生了（注意这里用的时候“减少”，不是“杜绝”，仅仅是减少!如果仅仅用网桥说能杜绝广播风暴，个人觉得还是不太准确，后来交换机的出现才可以说是完全杜绝了广播风暴的发生）！</p>
<p>在介绍网桥之前，还想简单介绍另一个物理层的设备：“中继器”，这种设备的作用是把物理层传输的信号放大，由于长距离的传输，信号会有一定的损耗的，这种设备主要解决的就是这个问题。它和HUB的区别是：HUB主要是为了在物理层上转发数据的，所以它不关心电压值的大小，也不会放大物理信号；而中继器它的作用就是为了放大信号用的，SO…..</p>
<h2 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h2><p>网桥又称桥接器，英文名Network Bridge，数据链路层设备。它也是转发数据包的设备，但和HUB不一样的是，它工作在数据链路层，HUB只能看懂物理层上的东西（比如一段物理信号），网桥却能看懂一些帧的信息（在链路层上，把上面传下来的数据封装后，封装好了的数据就是帧，但这里我用“数据包”这样的泛指去代替“帧”这个专业术语）。</p>
<p>在以太网构造的局域网上，最终的寻址是以数据链路层的MAC地址作为标识的(就是用MAC地址可以在局域网上找到一台唯一的机器)，网桥能从发来的 数据包中提取MAC信息，并且根据MAC信息对数据包进行有目的的转发，而不采用广播的方式，这样就能减少广播风暴的出现，提升整个网络的效率，在详细说网桥这东西之前，我想先介绍一下交换机。</p>
<p>交换机：</p>
<p>这是大家最熟悉的设备之一</p>
<p>交换机Switch，数据链路层设备，作用是转发数据包。和网桥一样它也是通过识别帧中的MAC地址，然后对特定的端口进行转发的。</p>
<h2 id="网络基础之网桥和交换机的工作原理及区别"><a href="#网络基础之网桥和交换机的工作原理及区别" class="headerlink" title="网络基础之网桥和交换机的工作原理及区别"></a>网络基础之网桥和交换机的工作原理及区别</h2><p>网桥和交换机区别在叙述前，我们先一起看两幅图：</p>
<h3 id="网桥的连接模式：-红点处为HUB"><a href="#网桥的连接模式：-红点处为HUB" class="headerlink" title="网桥的连接模式：(红点处为HUB)"></a>网桥的连接模式：(红点处为HUB)</h3><p><img src="/myimages/bridge.png" alt="bridge"><br><img src="/myimages/switch.png" alt="switch"></p>
<h3 id="交换机连接模式："><a href="#交换机连接模式：" class="headerlink" title="交换机连接模式："></a>交换机连接模式：</h3><p>从图中可以看到，网桥只有2个（输入/出）端口，而交换机有8个。嗯，是的，一开始的时候(那时候只有HUB这种设备)，由于硬件水平不是很发达，人们为了提高局域网效率，减少广播风暴的出现，他们生产了网桥（一个只有两个输入/出端口的链路层设备，这时的网桥已经是个比较先进的设备），然后他们把一个局域网一分为2，中间用网桥连接，这样A发给BCD的数据就不会再广播到EFGH了(网桥发现如果数据包不是转发给下面这个子网的，它会自动丢弃此包)，只有从A 发到EFGH的数据包才能通过网桥，到达另外一个子网(网桥发现如果数据包是转发给下面这个子网的，它才会把包转发给这个子网)。</p>
<p>这样一来，非必要的传输减少了，整个网络的效率也随之提高可不少！人们发现网桥真是个好东西呀，随着硬件发展，出现了4个，8个端口的链路层设备，这就是交换机，由于交换机可以使得网络更安全(数据不容易被监听，因为数据不再广播了，注意：只是不容易而已，要搞你其实还是可以的)，网络效率更高(还是因为数据不再广播！)，交换机渐渐替代了HUB，成为组建局域网的重要设备。</p>
<p>所以说，网桥和交换机，基本上是一样的，嗯，只是基本上而已，细看还是有些不一样的，但在说明他们之间有什么不一样之前，我想先简单介绍一下网桥和交换机的工作原理。</p>
<h3 id="网桥的工作原理："><a href="#网桥的工作原理：" class="headerlink" title="网桥的工作原理："></a>网桥的工作原理：</h3><p><img src="/myimages/bridgeprinciples.png" alt="bridgeprinciples"></p>
<p>上图是用一个网桥连接的两个网络，网桥的A端口连接A子网，B端口连接B子网，为什么网桥知道哪些数据包该转发，哪些包不该转发呢？那是因为它有两个表A和B，当有数据包进入端口A时，网桥从数据包中提取出源MAC地址和目的MAC地址。</p>
<p>一开始的时候，表A和表B都是空的，没有一条记录，这时，网桥会把数据包转发给B网络，并且在表A中增加一条MAC地址(把源MAC地址记录表中)，说明这个MAC地址的机器是A子网的，同理，当B子网发送数据包到B端口时，网桥也会记录源MAC地址到B表。</p>
<p>当网桥工作一段时候后，表A基本上记录了A子网所有的机器的MAC地址，表B同理，当再有一个数据包从A子网发送给网桥时，网桥会先看看数据包的目的MAC 地址是属于A子网还是B子网的，如果从A表中找到对应则，抛弃该包，如果不是，则转发给B子网，然后检查源MAC地址，是否在表中已经存在，如果不存在，在表A中增加一条记录。</p>
<p>噢，或许你现在会问了，为什么需要两张表呢，一张表不行么？？嗯～刚才把表一分为二是为了便于理解，实际上，真正的网桥里面存的应该是一张表(当然有可能为了提速，或者其他原因，它也可能把信息存为多张表，这个得看它怎么实现了～)，如果是一张信息表，表里记录的应该是：MAC-PortNum。</p>
<h3 id="交换机有些许不同，如图："><a href="#交换机有些许不同，如图：" class="headerlink" title="交换机有些许不同，如图："></a>交换机有些许不同，如图：</h3><p><img src="/myimages/switch2.png" alt="switch2"></p>
<p>交换机也有一张MAC-PORT对应表(这张表的学名为：CAM)，和网桥不一样的是，网桥的表是一对多的(一个端口号对多个MAC地址)，但交换机的CAM表却是一对一的，如果一个端口有新的MAC地址，它不会新增MAC－PORT记录，而是修改原有的记录</p>
<p>例如：现在交换机记录表里已经有一项：MAC1-Port1，如果此刻端口1又来了一个数据包，里面的源MAC地址是MAC2，此时，交换机会刷新交换机记录表：MAC1-Port1记录被修改为MAC2－Port1，因为交换机认为是端口1的计算机MAC地址变了，如果端口1连接的一台物理机器，MAC一般是不会变的，如果连接的是另外一个交换机，那这个端口的记录会变化得比较频繁(如上图的Port12，它是对外的接口，与一个局域网连接)，另外，如果 CAM表中没有找到和数据包的目的MAC地址对应的记录，交换机会对此数据包进行广播，发给本交换机的每一个端口。</p>
<h3 id="网桥和交换机的缓存对比"><a href="#网桥和交换机的缓存对比" class="headerlink" title="网桥和交换机的缓存对比"></a>网桥和交换机的缓存对比</h3><p>网桥和交换机除了用CAM表指导数据包转发这点和HUB不一样外，网桥和交换机还有一个特点：缓存！对，网桥和交换机都有一定量的缓存，因为网桥和交换机转发数据包需要一些额外的操作，所以可能会占用一些时间，为了避免出现因来不及转发数据，导致大量数据丢失的情况，网桥和交换机就出现了缓存。</p>
<p>当然，缓存不是万能的，当网桥或交换机处理不及并且缓存用完了，以后再来的数据还是会丢失的。还一个网桥需要缓存的原因是：桥接两个传输速率不同的局域网，比如：802.3的传输速率说10mb/s，但实际上并不是真的10Mb/s，而 802.4(几乎)确实为10Mb/s，但两个局域网桥接时候必须是速率一样的，否则会有包丢失，而缓存也正好可以为不同速率网络连接时所使用。</p>
<p>网桥的缓存量是大于交换机的缓存量，因为网桥天生是为了连接两个网络的，两个网络桥接时所要处理的数据量会比一般的交换机需要处理的数据量要多，所以网桥的缓存也一般要比交换机大一点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集线器&quot;&gt;&lt;a href=&quot;#集线器&quot; class=&quot;headerlink&quot; title=&quot;集线器&quot;&gt;&lt;/a&gt;集线器&lt;/h2&gt;&lt;p&gt;集线器（HUB），它是工作在物理层的设备，由于它只是工作在物理层的设备，所以它并不关心也不可能关心OSI上面几层所涉及的，它的工作机制流程 是：从一个端口接收到数据包时，会在其他端口把这个包转发一次，因为它不知道也不可能知道这个包是发给谁的（物理层设备只关心电压这些物理概念），它也只能对所有人广播(这里和下文提到的广播该词的意思和ARP请求时的广播有些不同。&lt;/p&gt;
&lt;p&gt;这里的广播意思是：使用物理层转发设备，如HUB，导致的广播，可以说这个广播是被逼的，因为设备的问题！是设备转发包引起的广播！而ARP请求的 广播是自己要求的，主动的，因为ARP请求包的目标地址IP是255.255.255.255，但ARP请求的广播涉及IP层的知识，不在这篇文章讨论的 范围，所以这里提到的广播，除非特别说明，否则都是第一个意思，也就说是”因设备转发数据包引起的广播” )，让他们自己处理了。&lt;/p&gt;
&lt;p&gt;这样一来会有不少问题，你发的数据其他人都收到了，私隐这总东西是不存在的！别入可以随便监听你信息！所以会话劫持在那个年代相当容易（记得俺第一次接触会话劫持这个概念的时候还是高2，那是2001~2002，呵，那时候集线器还是比较普遍的）。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="集线器" scheme="http://vcpu.me/tags/%E9%9B%86%E7%BA%BF%E5%99%A8/"/>
    
      <category term="网桥" scheme="http://vcpu.me/tags/%E7%BD%91%E6%A1%A5/"/>
    
      <category term="中继器" scheme="http://vcpu.me/tags/%E4%B8%AD%E7%BB%A7%E5%99%A8/"/>
    
      <category term="交换机" scheme="http://vcpu.me/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>拥塞控制</title>
    <link href="http://vcpu.me/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    <id>http://vcpu.me/TCP拥塞控制/</id>
    <published>2017-07-04T10:00:00.000Z</published>
    <updated>2017-07-05T01:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP拥塞控制设计概念"><a href="#TCP拥塞控制设计概念" class="headerlink" title="TCP拥塞控制设计概念"></a>TCP拥塞控制设计概念</h2><h3 id="延迟确认定时器"><a href="#延迟确认定时器" class="headerlink" title="延迟确认定时器"></a>延迟确认定时器</h3><blockquote>
<p>TCP延时确认定时器是指在一个TCP连接中，当一方收到另一端的数据后，并不是立刻ACK确认，而是等待200ms（2.6内核 40ms），如果这段时间内有新的数据要发往对方，本地奖ACK和数据封装在一个数据包中捎带发送；如果这段时间内没有新的数据要发往对方，200ms后ack确认。</p>
</blockquote>
<p>优点：减少传输消耗<br>缺点：增加了延迟    </p>
<h3 id="超时重传定时器"><a href="#超时重传定时器" class="headerlink" title="超时重传定时器"></a>超时重传定时器</h3><p>超时重传是TCP协议栈保障数据可靠性的一个重要机制<br>原理：</p>
<blockquote>
<p>发送一个数据后同时开启定时器，在一定时间内如果没有收到对方确认，定时器激活重新发送数据包，直到发送成功或者到达最大重传次数。<br><a id="more"></a></p>
<p> RTO(重传超时时间)</p>
<blockquote>
<p>如果RTO值被设置过大，将会使得发送端经过很长时间等待才能发现报文段丢失，会降低吞吐<br>如果RTO值被设置很小，发送端尽管可以很快的检测出报文段的丢失，但也可能将一些延迟大的报文段误认为是丢失，造成不必要重传，浪费网络资源。</p>
</blockquote>
</blockquote>
<h3 id="慢启动阈值"><a href="#慢启动阈值" class="headerlink" title="慢启动阈值"></a>慢启动阈值</h3><p>慢启动阈值是慢启动算法和拥塞避免的分水岭，当拥塞窗口大于慢启动阈值时，就用拥塞避免慢启动阈值门限就用慢启动</p>
<h3 id="SACK机制"><a href="#SACK机制" class="headerlink" title="SACK机制"></a>SACK机制</h3><p>SACK TCP选项<br>    SACK是TCP一个选项，握手过程中会协商判断是否支持SACK，如果支持会在TCP选项中SACK permitted。<br>SACK 选项格式<br>    TCP不能超过四组SACK边界，因为TCP选项最大支持40个字节</p>
<p>作用描述<br>    SACK通常是由数据接收方产生，收到的SYN包中有SACK-Permitted选项为true，同时自己也支持SACK，可以在接收数据异常时候，产生SACK option。SACK中需要携带接收队列中没有被确认的数据信息，已经确认的数据信息不会通过SACK携带。<br>发送端SACK含义：<br>    第一个block指出是哪个segment触发了SACK 选项，发sack人认为是谁乱序了才导致SACK<br>    尽可能填满SACK<br>    SACK需要报告最近接收的不连续的数据块<br>接收端：<br>    数据没有被确认前都会保持在滑动窗口内<br>    每一个数据包都有一个sakced标记，发送数据会忽略被sacked的数据<br>    如果SACK丢失，超时重传后重置所有数据包的SACKed标记<br>SACK分析<br>    适用于多包丢失情况，可以快速退出快速恢复阶段；如果丢包率很低，或者丢包时常常只丢一个包，那么SACK就是多余的。</p>
<h3 id="D-SACK"><a href="#D-SACK" class="headerlink" title="D-SACK"></a>D-SACK</h3><p>D-SACK主要是使用SACK来告诉发送方有哪些数据被重复接收了，如果是D-SACK；D-SACK option的第一个block代表呗重复发送的序号片段。<br>注意：<br>D_SACK仅仅是接收端的报告重复连续的片段<br>每个重复连续片段只能在第一个block，其它block是接收端已经收到但是还没有ACK的数包<br>汇报重复收到片段<br>    此时数据发送端，可以知道，是对方的ACK丢失了导致此种情况</p>
<h3 id="慢启动过程"><a href="#慢启动过程" class="headerlink" title="慢启动过程"></a>慢启动过程</h3><p>最初的TCP在建立完成后会向网络中发送大量的数据包，这样很容易导致网络中路由缓存空间耗尽，从而发生拥塞。慢启动就是为解决该问题，其思想是一开始不是发大量的数据包而是根据网络情况逐步增加每次的发送的数量，以避免上述现象的发生。<br>其基本做法为：<br>新建连接时候，CWND初始化1个最大报文段大小，每当一个报文段被确认，拥塞窗口就增价1个mss大小，在发出的报文段均被正常确认情况 下，拥塞窗会随着往返时间指数增长。慢启动并不慢。RTTlogW 时间可占满带宽。</p>
<h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>拥塞窗口不能一直增长下去，其受慢启动阈值（一开始为65535）限制；如果超过该阈值，进入拥塞避免阶段。<br>    拥塞避免思想<br>    拥塞窗口的加法增大，拥塞窗口随着RTT开始线性增加，这样可以避免增长过快导致网络拥塞，慢慢调整到网络的最佳值。</p>
<h2 id="如何确定拥塞状态"><a href="#如何确定拥塞状态" class="headerlink" title="如何确定拥塞状态"></a>如何确定拥塞状态</h2><h4 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h4><p>此时发出去的报文在RTT时间内没有被确认，此时发生拥塞可能性较大，TCP协议栈强烈反应为：</p>
<blockquote>
<p>慢启动阈值 降低为当前拥塞窗口的一半<br>拥塞窗口设置为1，从新进入慢启动</p>
</blockquote>
<h4 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h4><p>收到3个相同的ACK，TCP在收到乱序包时就会立即发送ACK，TCP利用3个相同的ACK判定数据包失效，发送快速重传，TCP协议栈强烈反应为：</p>
<blockquote>
<p>慢启动阈值降低设置为拥塞窗口的一半<br>拥塞窗口设置为慢启动阈值，从新进入拥塞避免阶段 </p>
</blockquote>
<h4 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h4><p>当收到三个重复ACK时，随着TCP协议栈改进TCP进入的不是拥塞避免，而是快速恢复。<br>快速恢复思想是：</p>
<blockquote>
<p>数据包守恒原则，当老的数据包离开了网络后，才能向网络中发送一个新的数据包。<br>    如果收到一个重复ACK，代表已经有一个数据包离开了网络，于是拥塞窗口加1，此时能向网络中发一个新的数据包。</p>
</blockquote>
<p>具体步骤：</p>
<blockquote>
<p>当收到3个重复ACK，慢启动阈值会降为拥塞窗口的一半，把拥塞窗口设置为慢启动阈值大小+3（3个数据包离开网络）；<br>        再收到重复ACK时，拥塞窗口+1<br>        当收到新的数据包ACK时候，拥塞窗口设置为慢启动阈值，快速恢复结束，可以回到拥塞避免阶段了<br>    上述算法是reno算法，新版本的reno算法差异为：<br>        reno算法发再收到一个新的数据ACK退出快速恢复状态，new reno 需要收等到改窗口所有的数据包确认才会推出快速恢复。</p>
</blockquote>
<h3 id="TCP协议栈拥塞窗口改变时机"><a href="#TCP协议栈拥塞窗口改变时机" class="headerlink" title="TCP协议栈拥塞窗口改变时机"></a>TCP协议栈拥塞窗口改变时机</h3><p>拥塞窗口改变只发生在收到ACK和重传定时器超时。</p>
<h2 id="LINUX协议栈拥塞控制状态划分"><a href="#LINUX协议栈拥塞控制状态划分" class="headerlink" title="LINUX协议栈拥塞控制状态划分"></a>LINUX协议栈拥塞控制状态划分</h2><h3 id="open状态"><a href="#open状态" class="headerlink" title="open状态"></a>open状态</h3><p>慢启动和拥塞避免状态都是没有发生拥塞，网络畅通的状态，linux协议栈使用open状态来表示慢启动和拥塞避免。</p>
<blockquote>
<p>当TCP会话初次建立连接时，还没有发生拥塞，这时慢启动阈值无法估计，linux协议栈设置为极大值0xffffffff；Reno和Cubic算法在慢启动阶段都是当有n个数据报被确认，拥塞窗口就自增n，但是两者在拥塞避免和慢启动阈值计算上，是不同的。</p>
</blockquote>
<h3 id="diorder状态"><a href="#diorder状态" class="headerlink" title="diorder状态"></a>diorder状态</h3><p>在Linux内核TCP实现中，有一个disorder状态，此状态是open状态向快速重传过度的一个状态，收到3个重复确认才开开始快速重传，从收到第一个重复确认到收到第三个重复确认这段时间，处于disorder状态。</p>
<blockquote>
<p>设置disorder状态的必要性在于，当收到重复确认比较少时，我们还没法判断当前是否发生丢包，因为对端收到乱序报文，也会发送选择确认。如果重复确认足够多比如3个重复确认，就进入recovery状态，而如果在收到1-2个重复确认再收到数据确认，则回到open状态。</p>
<p>从disorder状态回到open状态时，拥塞窗口和慢启动阈值不发生变化，会继续进行慢启动或者拥塞避免。</p>
</blockquote>
<h3 id="reocvery状态"><a href="#reocvery状态" class="headerlink" title="reocvery状态"></a>reocvery状态</h3><p>在linux内核实现中快速重传（动作）和快速恢复（阶段）用recovery状态表示。<br>快速恢复阶段，指的是从快速重传开始，到网络上没有丢失的报文，可以回到open状态的这段时间，拥塞窗口和慢启动阈值也调整回去。</p>
<h3 id="LOSS状态"><a href="#LOSS状态" class="headerlink" title="LOSS状态"></a>LOSS状态</h3><p>重传定时器超时以后所处状态就是Loss状态。</p>
<blockquote>
<p>重传定时器超时时，代表网络环境已经极差，此时会拥塞窗口变得很小（一般1），同时调整慢启动阈值为一半，重新开始慢启动算法；认为之前发出去的所有数据包均已经丢失，重新开始慢启动算法。<br>    重传定时器超时之前所有已发的数据包被确认后才退出快速loss状态。<br>    Loss状态和Open状态差别<br>    Loss状态是采用慢启动来重传丢失的报文，知道丢失的报文被确认后才发新的数据包，而Open状态没有丢失数据包，一直再发新的数据包。</p>
</blockquote>
<h2 id="Linux协议栈拥塞控制的初始化"><a href="#Linux协议栈拥塞控制的初始化" class="headerlink" title="Linux协议栈拥塞控制的初始化"></a>Linux协议栈拥塞控制的初始化</h2><p>当TCP从syn sent或者syn recv进入 established状态时，初始话拥塞窗口和慢启动阈值。<br>kernel2.6版本拥塞窗口会根据mss大小来进行初始话，mss值越大窗口就越小。<br>    因为网络最初建立时候，网络情况很难估计，一半慢启动阈值会被设置很大0x7fffffff<br>直到察觉到拥塞发生时才做调整。<br>    Linux在TCP实现中，当TCP连接进入TW和LAST_ACK准备关闭连接时候，会选者性地将拥塞窗口和慢启动阈值保存下来。作为下一次同一条线路TCP会话建立时的拥塞窗口和慢启动阈值初始值。</p>
<h2 id="Linux协议栈拥塞控制相关杂谈"><a href="#Linux协议栈拥塞控制相关杂谈" class="headerlink" title="Linux协议栈拥塞控制相关杂谈"></a>Linux协议栈拥塞控制相关杂谈</h2><h3 id="发送数据包的限制"><a href="#发送数据包的限制" class="headerlink" title="发送数据包的限制"></a>发送数据包的限制</h3><blockquote>
<p>发送数据包实际上受三个条件限制：<br>条件1:发送端的拥塞窗口<br>条件2:接收端的接收窗口<br>条件3:发送队列上实际数据包量</p>
</blockquote>
<h3 id="慢启动阶段拥塞窗口调整策略"><a href="#慢启动阶段拥塞窗口调整策略" class="headerlink" title="慢启动阶段拥塞窗口调整策略"></a>慢启动阶段拥塞窗口调整策略</h3><p>慢启动阶段，有多少数据包被确认久增加多少数据包。一般的描述为一个传输轮次，拥塞窗口翻倍。这与有多少数据包被确认，拥塞窗口增加多少是一个意思。后者更适合于写代码。<br>拥塞避免阶段拥塞窗口调整<br>    没收到一定个数的ACK拥塞窗口加1<br>reno算法拥塞避免表现为：<br>    拥塞窗口在维持一段时间内的恒定值后，自增1</p>
<h3 id="disorder阶段拥塞窗口调整"><a href="#disorder阶段拥塞窗口调整" class="headerlink" title="disorder阶段拥塞窗口调整"></a>disorder阶段拥塞窗口调整</h3><blockquote>
<p>disorder是一个观望状态，拥塞窗口和慢启动阈值保持不变。即此时满足in_flight &lt; 拥塞窗口，对端能接收，并且发送队列中还有数据，则会继续发送数据。</p>
<p>disorder收到数据确认时候，先前引发重复确认报文段已经到达了接收端，这时会重新回到open状态，拥塞窗口和慢启动阈值没有发生任何变化。</p>
<p>disorder接收到足够多的重复确认数据包时（一般3个），会进入revocery状态。</p>
</blockquote>
<h3 id="快速恢复阶段拥塞窗口调整"><a href="#快速恢复阶段拥塞窗口调整" class="headerlink" title="快速恢复阶段拥塞窗口调整"></a>快速恢复阶段拥塞窗口调整</h3><p>进入快速恢复之前，调整慢启动阈值，等退出快速恢复阶段时，拥塞窗口等于慢启动阈值。快速恢复阶段不同恢复算法用不同的拥塞窗口调整策略。</p>
<h4 id="快速恢复阶段突降式调整"><a href="#快速恢复阶段突降式调整" class="headerlink" title="快速恢复阶段突降式调整"></a>快速恢复阶段突降式调整</h4><p>突降方式调整是指进入快速恢复阶段，就立刻调整拥塞窗口。windows采用的就是这种调整方法。</p>
<h4 id="快速恢复阶段比例式拥塞窗口调整"><a href="#快速恢复阶段比例式拥塞窗口调整" class="headerlink" title="快速恢复阶段比例式拥塞窗口调整"></a>快速恢复阶段比例式拥塞窗口调整</h4><p>拥塞窗口缓慢过度至慢启动阈值。</p>
<h3 id="快速重传阶段继续收到重复确认处理"><a href="#快速重传阶段继续收到重复确认处理" class="headerlink" title="快速重传阶段继续收到重复确认处理"></a>快速重传阶段继续收到重复确认处理</h3><p>Linux协议栈采用的方法为：</p>
<blockquote>
<p>如果拥塞窗口没有降到慢启动阈值，每收到两个重复ACK，拥塞窗口减1，并发送丢失的数据段。否则拥塞窗口不变，每收到一个重复ACK就重传一次。<br>在此期间不发送新的数据段。    </p>
</blockquote>
<h3 id="快速重传部分确认处理"><a href="#快速重传部分确认处理" class="headerlink" title="快速重传部分确认处理"></a>快速重传部分确认处理</h3><p>Linux2.6的处理是：<br>    ACK确认了新数据时候，有两种可能性。第一种，重传数据到达对端<br>    第二种，正常数据到达对端<br>为了区分这两种情况，协议栈会比较新数据ack的时间戳和发生重传数据时间戳。如果后发的重传数据，则说明数据包没有丢失，只是晚到达了，慢启动阈值会被恢复到之前的值；此时不重传此ACK的数据包。<br>    如果是重传到达对端，导致的新数据ACK产生；此时重传ACK报文，如果拥塞窗口允许，就发数据。</p>
<h3 id="Loss状态收到ACK"><a href="#Loss状态收到ACK" class="headerlink" title="Loss状态收到ACK"></a>Loss状态收到ACK</h3><p>如果从ack判断出这个ack报文在我们最后一次重传前就已经发出，这种情况代表重传是没有必要重传，其重传数据段已经到达了对端。把慢启动窗口和阈值恢复到loss状态前的值，就当什么也没有发生过，继续发送数据。<br>    否则：<br>    继续重传队列中剩余的数据，重传过程中不发新数据；重传完成后按照拥塞窗口进行发送。进入Loss时候会记录至少重传最大序列号；在确认这些数据传输完成，协议栈从Loss退出进入open。</p>
<h3 id="拥塞控制的误判"><a href="#拥塞控制的误判" class="headerlink" title="拥塞控制的误判"></a>拥塞控制的误判</h3><p>发生在进入Recovery和Loss状态时，会发送误判。<br>并不是收到三个重复ACK就一定代表需要快速从传，并不是重传定时器超时就一定是网络拥塞。</p>
<h4 id="误判进入recovery状态导致问题："><a href="#误判进入recovery状态导致问题：" class="headerlink" title="误判进入recovery状态导致问题："></a>误判进入recovery状态导致问题：</h4><p>拥塞窗口和慢启动阈值减小是不必要的，会导致不必要的性能下降。</p>
<h4 id="超时误判："><a href="#超时误判：" class="headerlink" title="超时误判："></a>超时误判：</h4><p>由于网络状态的不稳定性，RTT会经常变化，超时时有可能发生的。单相对恢复误判，超时误判发生可能性小，因为重传定时器RTO比RTT大。</p>
<h4 id="误判的判定："><a href="#误判的判定：" class="headerlink" title="误判的判定："></a>误判的判定：</h4><p>recovery误判：如果重传数据到达之前，ack就确认了这个数据包，则说明为误判，直接回到以前状态。</p>
<p>这种误判恢复linux需要时间戳的支持。</p>
<p>误判发生经常伴随着时间戳和sack出现。</p>
<h4 id="重定序临界值"><a href="#重定序临界值" class="headerlink" title="重定序临界值"></a>重定序临界值</h4><p>这个临界值就是我们经常说的3个重复ACK的值，在kernel的描述；实际上该值是可能变化的，例如误判发生时，该临界值会变大。这也是linux较为保守的实现。</p>
<h2 id="Linux拥塞控制概述"><a href="#Linux拥塞控制概述" class="headerlink" title="Linux拥塞控制概述"></a>Linux拥塞控制概述</h2><blockquote>
<p>慢启动阶段涨的很快，拥塞避免阶段探测性增长，收到重复确认先观望，收到足够多的重复确认时开始快速重传；在快速恢复阶段争取把可能丢失的报文重传出去，并适当发送新的数据包以维持协议栈正常运转。当退出快速重传时，拥塞窗口和慢启动阈值按预期的值变小。并会到拥塞避免阶段。同时挂一个定时器来处理长时间未收到报文的情况。当重传定时器超时时，批量重传，重新开始慢启动。</p>
</blockquote>
<p>慢启动大家基本默认翻倍增长，在一次TCP的生命周期中，只要不断网，超时重传可能性很小，所以拥塞控制算法的主要集中在拥塞避免阶段，偶尔处在recovery状态；即<br>    拥塞避免-recovery-拥塞避免-recovery<br>拥塞控制性能差异，主要来源于：<br>    1 拥塞避免阶段初始窗口大小，即推出快速恢复状态时的慢启动阈值<br>    2.拥塞避免阶段的拥塞窗口调整策略<br>    3.快速恢复状态的快慢（指不支持sack）</p>
<p>拥塞控制状态图<br>  <img src="/myimages/tcp.jpg" alt="tcp"></p>
<h3 id="慢启动阶段"><a href="#慢启动阶段" class="headerlink" title="慢启动阶段"></a>慢启动阶段</h3><p>1.发出去数据均能被ack</p>
<blockquote>
<p>拥塞窗口持续指数增加，另外一种描述发出去的数据包被ACK多少就额外增加多少数据包。这个情况下拥塞窗口会持续增加。</p>
</blockquote>
<p>2.收到重复ACK但是还没有达到3个</p>
<blockquote>
<p>拥塞窗口和慢启动阈值不会变化，此时发包行为取决于当前和拥塞窗口接收端的窗口，以及当前发送队列上的数据量。如果其后续收到了新的数据ack，会继续进行慢启动，就好像什么也没有发生一样。<br>    如果没有收到新数据ack，会引发快速重传。</p>
</blockquote>
<p>3.收到足够重复ACK</p>
<blockquote>
<p>足够的重复ack引发快速重传，慢启动阈值降低为当前拥塞窗口的一半，拥塞窗口设置为慢启动阈值+3（已经收到3个重复ack，代表3个数据包已经离开网络到达对端）；此时此刻会重传丢失的数据包，具体要不要发新数据包完全取决于当前的拥塞窗口。如果丢失的数据包统统确认已经到达对端，会退出快速恢复从新进入open状态；进入open状态后因为拥塞窗口大于慢启动阈值，所以 会进入拥塞避免阶段。</p>
</blockquote>
<p>4.发送数据包超时</p>
<blockquote>
<p>慢启动阈值变为当前拥塞窗口一半，拥塞窗口减少到1，会按照慢启动发包行为发送认为已经丢失的报文；待这些报文被确认后退出超时阶段从新回到open。按照当前的拥塞窗口和慢启动阈值进行慢启动或者拥塞避免发包。</p>
</blockquote>
<h3 id="拥塞避免阶段"><a href="#拥塞避免阶段" class="headerlink" title="拥塞避免阶段"></a>拥塞避免阶段</h3><p>1.发出去数据均被ack</p>
<blockquote>
<p>拥塞窗口会继续线性增长，慢启动阈值保持不变。</p>
</blockquote>
<p>2.收到重复ack但是还没有达到3个</p>
<blockquote>
<p>此状态属于TCP协议栈的disorder状态，慢启动阈值保持不变，拥塞窗口保持不变，协议栈发包行为收协议栈拥塞窗口的限制。如果后续收到新数据的ACK，将从disorder状态回到拥塞避免阶段，从新线性增长方式发包。</p>
</blockquote>
<p>3.收到足够重复ack</p>
<blockquote>
<p>足够的重复ack引发快速重传，慢启动阈值降低为当前拥塞窗口的一半，拥塞窗口设置为慢启动阈值+3；此时此刻会重传丢失的数据包，具体要不要发新数据取决于当前的拥塞窗口。如果丢失数据包通通被确认已经到达对端，会退出快速恢复阶段进入拥塞避免阶段。</p>
</blockquote>
<p>4.发送数据包超时</p>
<blockquote>
<p>慢启动阈值变成当前拥塞窗口一半，拥塞窗口减少到1，会按照慢启动发包行为完成已经发送数据包的重传。待这些报文被确认后退出loss阶段，从新回到open状态，根据慢启动阈值和拥塞窗口大小进行慢启动或者拥塞避免发包。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP拥塞控制设计概念&quot;&gt;&lt;a href=&quot;#TCP拥塞控制设计概念&quot; class=&quot;headerlink&quot; title=&quot;TCP拥塞控制设计概念&quot;&gt;&lt;/a&gt;TCP拥塞控制设计概念&lt;/h2&gt;&lt;h3 id=&quot;延迟确认定时器&quot;&gt;&lt;a href=&quot;#延迟确认定时器&quot; class=&quot;headerlink&quot; title=&quot;延迟确认定时器&quot;&gt;&lt;/a&gt;延迟确认定时器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TCP延时确认定时器是指在一个TCP连接中，当一方收到另一端的数据后，并不是立刻ACK确认，而是等待200ms（2.6内核 40ms），如果这段时间内有新的数据要发往对方，本地奖ACK和数据封装在一个数据包中捎带发送；如果这段时间内没有新的数据要发往对方，200ms后ack确认。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优点：减少传输消耗&lt;br&gt;缺点：增加了延迟    &lt;/p&gt;
&lt;h3 id=&quot;超时重传定时器&quot;&gt;&lt;a href=&quot;#超时重传定时器&quot; class=&quot;headerlink&quot; title=&quot;超时重传定时器&quot;&gt;&lt;/a&gt;超时重传定时器&lt;/h3&gt;&lt;p&gt;超时重传是TCP协议栈保障数据可靠性的一个重要机制&lt;br&gt;原理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发送一个数据后同时开启定时器，在一定时间内如果没有收到对方确认，定时器激活重新发送数据包，直到发送成功或者到达最大重传次数。&lt;br&gt;
    
    </summary>
    
      <category term="TCP" scheme="http://vcpu.me/categories/TCP/"/>
    
    
      <category term="拥塞控制" scheme="http://vcpu.me/tags/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="Linux拥塞控制基本概念" scheme="http://vcpu.me/tags/Linux%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>软中断和硬中断</title>
    <link href="http://vcpu.me/interrupt/"/>
    <id>http://vcpu.me/interrupt/</id>
    <published>2017-07-04T04:00:00.000Z</published>
    <updated>2017-07-04T03:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中断概述"><a href="#中断概述" class="headerlink" title="中断概述"></a>中断概述</h2><p>Linux内核需要对连接到计算机上所有硬件设备进行管理，毫无疑问这是它分内的事情。其通过中断机制让管理的硬件设备主动通知，而不是其主动轮询。<br>中断是一种电信号，由硬件设备产生送入中断控制器的输入引脚，然后中断控制器会想处理器发出信号；处理器收到该信号后，停下当前正在处理的事情，跳到中断处理程序的入口点，进行中断处理。当然处理器会通知操作系统已经产生中断；操作系统也可能会进行适当的处理。</p>
<p>处理器通过中断向量识别产生的中断，linux系统下Intel X86支持256中断向量,中断编号0-255</p>
<blockquote>
<p>0-31  异常 非屏蔽 固定不变<br>32-47 屏蔽中断（IO设备）<br>48-25 软中断</p>
</blockquote>
<h2 id="硬件中断"><a href="#硬件中断" class="headerlink" title="硬件中断"></a>硬件中断</h2><p>硬中断是外部设备对CPU的中断，硬中断可抢占软中断，优先级高执行较快。<br>硬中断的本质是接收到中断信号后，跳转到公共段代码执行do_IRQ，并切换到硬中断请求栈，执行中断回调函数。<br><a id="more"></a></p>
<h3 id="硬件中断流程"><a href="#硬件中断流程" class="headerlink" title="硬件中断流程"></a>硬件中断流程</h3><p>硬中断的汇编处理-&gt;do_IRQ-&gt;handle_irq-&gt;handle_edge_irq(handle_level_irq)-&gt;handle_irq_event-&gt;具体设备的硬中断处理</p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>linux下硬件中断可以嵌套，且无优先级别；除同种中断外，一个中断可打断另一个中断。此种机制短时间内可以接受更多的中断，可以有大的设备控制吞吐量；无优先级可以简化内核。<br>同种中断处理机制可以描述为，中断数据结构会设置IRQD_IRQ_INPROGRESS中断不处理标识，本地CPU或者其它CPU如果检查到此种中断的该标记，会直接退出，置上IRQS_PENDING后续处理标记。</p>
<h2 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h2><p>软中断是硬中断服务程序对内核的中断，软中断时一种推后执行的机制，软中断是bottom half，上半部在屏蔽中断的上下文中运行，软中断相对来讲不是非常紧急，通常还比较耗时，不会在中断上下文中执行系统会自行安排运行时机。软中断不会抢占另一个软中断。</p>
<h3 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h3><p>1.软中断通过open_softirq注册一个软中断处理函数，在软中断向量表softirq_vec数组中添加新的action函数<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//定时器init_timers调用初始化软中断调用函数</div><div class="line">open_softirq(TIMER_SOFTIRQ, run_timer_softirq);</div><div class="line">...</div><div class="line">void open_softirq(int nr, void (*action)(struct softirq_action *))</div><div class="line">&#123;</div><div class="line">	softirq_vec[nr].action = action;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.调用raise_softirq软中断触发函数，即软中断标记为挂起状态<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This function must run with irqs disabled!</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">raise_softirq_irqoff</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//设置</span></div><div class="line">	__raise_softirq_irqoff(nr);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * If we're in an interrupt or softirq, we're done</div><div class="line">	 * (this also catches softirq-disabled code). We will</div><div class="line">	 * actually run the softirq once we return from</div><div class="line">	 * the irq or softirq.</div><div class="line">	 *</div><div class="line">	 * Otherwise we wake up ksoftirqd to make sure we</div><div class="line">	 * schedule the softirq soon.</div><div class="line">	 */</div><div class="line">	 <span class="comment">//不能在硬中断，必须要硬中断处理完</span></div><div class="line">	 <span class="comment">//不能在软中断里，软中断不能嵌套</span></div><div class="line">	<span class="keyword">if</span> (!in_interrupt())</div><div class="line">		wakeup_softirqd();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">raise_softirq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line">	<span class="comment">//关闭本地CPU中断</span></div><div class="line">	local_irq_save(flags);</div><div class="line">	raise_softirq_irqoff(nr);</div><div class="line">	local_irq_restore(flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内核会在一些位置检查是否有挂起状态的软中断，如果有的话调用do_softirq执行软中断处理action函数<br>3.do_softirq完成两件事情<br>（1）切换到软件请求栈，让其处于软中断上下文<br>（2）执行<strong>do_softirq<br>4.</strong>do_softirq<br>（1）执行软中断处理函数<br>（2）如果软中处理函数超过10个，唤醒内核线程让其处理本地CPU软中断。</p>
<p>软中断本质就是内核在某些位置检查是否有挂起的软中断（local_software_pending()不为0指有挂起软中断），若有则调用do_softirq切换到软中断请求栈，调用__do_softirq。</p>
<h3 id="进程角度看软中断执行过程"><a href="#进程角度看软中断执行过程" class="headerlink" title="进程角度看软中断执行过程"></a>进程角度看软中断执行过程</h3><p>步骤1:将返回四值和CPU状态寄存器压栈<br>步骤2:修改特权级别（系统程序需要核心态特权才能运行，用户态函数只能通过软中断调用系统API）,设置中断事务标记<br>步骤3:唤醒守护线程，检测中断状态寄存器，发现软中断事务<br>步骤4:根据中断号通过查找中断向量表，找到ISR中断服务历程地址，跳转执行<br>步骤5:中断服务程序执行完成后，返回压栈的函数执行点</p>
<h3 id="嵌套-1"><a href="#嵌套-1" class="headerlink" title="嵌套"></a>嵌套</h3><p>软中断不打断软中断，相同软中断可在所有CPU上同时执行</p>
<h3 id="软中断触发时机"><a href="#软中断触发时机" class="headerlink" title="软中断触发时机"></a>软中断触发时机</h3><p>（1）调用do_IRQ完成I/O中断时调用irq_exit<br>    irq_exit-&gt;invoke_softirq-&gt;do_softirq<br>（2）如果系统使用I/O APIC，在处理完本地时钟中断时<br>（3）local_bh_enable-&gt;do_softirq<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">local_bh_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	_local_bh_enable_ip(_RET_IP_);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（4）在SMP中，当CPU处理完被CALL_FUNCTION_VECTOR处理器间中断所触发的函数时：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">smp_trace_call_function_interrupt</span><span class="params">(struct pt_regs *regs)</span></span></div><div class="line">&#123;</div><div class="line">	smp_entering_irq();</div><div class="line">	trace_call_function_entry(CALL_FUNCTION_VECTOR);</div><div class="line">	__smp_call_function_interrupt();</div><div class="line">	trace_call_function_exit(CALL_FUNCTION_VECTOR);</div><div class="line">	exiting_irq();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>exiting_irq-&gt;irq_exit</p>
<p>__do_softirq</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">asmlinkage <span class="keyword">void</span> __do_softirq(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">softirq_action</span> *<span class="title">h</span>;</span></div><div class="line">	__u32 pending;</div><div class="line">	<span class="comment">//软中断结束时间</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> end = jiffies + MAX_SOFTIRQ_TIME;</div><div class="line">	<span class="keyword">int</span> cpu;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> old_flags = current-&gt;flags;</div><div class="line">	<span class="comment">//软中断执行次数10次</span></div><div class="line">	<span class="keyword">int</span> max_restart = MAX_SOFTIRQ_RESTART;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Mask out PF_MEMALLOC s current task context is borrowed for the</div><div class="line">	 * softirq. A softirq handled such as network RX might set PF_MEMALLOC</div><div class="line">	 * again if the socket is related to swap</div><div class="line">	 */</div><div class="line">	current-&gt;flags &amp;= ~PF_MEMALLOC;</div><div class="line"></div><div class="line">	<span class="comment">//获得CPU的软中断掩码，这时候仍然是关中断，可安全获得掩码</span></div><div class="line">	pending = local_softirq_pending();</div><div class="line">	<span class="comment">//统计信息：进程被中断使用时间</span></div><div class="line">	account_irq_enter_time(current);</div><div class="line">	<span class="comment">//执行完该函数后，关闭软中断，后续即使硬件再次触发新的软中断，也不会重新进入__do_softirq</span></div><div class="line">	__local_bh_disable(_RET_IP_, SOFTIRQ_OFFSET);</div><div class="line">	lockdep_softirq_enter();<span class="comment">//just for debugging</span></div><div class="line"></div><div class="line">	cpu = smp_processor_id();</div><div class="line">	</div><div class="line">restart:</div><div class="line">	<span class="comment">/* Reset the pending bitmask before enabling irqs */</span></div><div class="line">	<span class="comment">//中断掩码清0，当然局部变量pending已经存储下来了，开启硬件中断后，可设置上新的软中断了</span></div><div class="line">	set_softirq_pending(<span class="number">0</span>);</div><div class="line">	<span class="comment">//开硬件中断，由于软中断执行时间一般较长，这里将中断打开避免长时间关中断，这段处理时间硬件中断就不会丢失了</span></div><div class="line">	local_irq_enable();</div><div class="line"></div><div class="line">	h = softirq_vec;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		<span class="keyword">if</span> (pending &amp; <span class="number">1</span>) &#123;<span class="comment">//中断挂起</span></div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">int</span> vec_nr = h - softirq_vec;<span class="comment">//获取中断号</span></div><div class="line">			<span class="comment">//保存抢占计数，后续无法破坏该计数了</span></div><div class="line">			<span class="keyword">int</span> prev_count = preempt_count();</div><div class="line">			<span class="comment">//软中断在每个核上执行计数</span></div><div class="line">			kstat_incr_softirqs_this_cpu(vec_nr);</div><div class="line"></div><div class="line">			trace_softirq_entry(vec_nr);</div><div class="line">			<span class="comment">//执行回调函数</span></div><div class="line">			h-&gt;action(h);</div><div class="line">			trace_softirq_exit(vec_nr);</div><div class="line">			<span class="comment">//软中断回调函数破坏了抢占计数，打印高级别警告信息，并恢复抢占计数</span></div><div class="line">			<span class="keyword">if</span> (unlikely(prev_count != preempt_count())) &#123;</div><div class="line">				printk(KERN_ERR <span class="string">"huh, entered softirq %u %s %p"</span></div><div class="line">				       <span class="string">"with preempt_count %08x,"</span></div><div class="line">				       <span class="string">" exited with %08x?\n"</span>, vec_nr,</div><div class="line">				       softirq_to_name[vec_nr], h-&gt;action,</div><div class="line">				       prev_count, preempt_count());</div><div class="line">				preempt_count() = prev_count;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			rcu_bh_qs(cpu);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//处理下一个软中断</span></div><div class="line">		h++;</div><div class="line">		pending &gt;&gt;= <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">while</span> (pending);<span class="comment">//无软中断循环结束</span></div><div class="line"><span class="comment">//处理完一轮软中断后，因为处理时候中断是开启的，可能发生了硬件中断重新触发了软中断</span></div><div class="line"><span class="comment">//我们就关中断保障中断掩码再被修改</span></div><div class="line">	local_irq_disable();</div><div class="line"></div><div class="line">	<span class="comment">//如果没有超过10次，且处理时间也在合法范围内，继续处理,否则唤醒ksoftirqd守护线程处理软中断</span></div><div class="line">	pending = local_softirq_pending();</div><div class="line">	<span class="keyword">if</span> (pending) &#123;</div><div class="line">		<span class="keyword">if</span> (time_before(jiffies, end) &amp;&amp; !need_resched() &amp;&amp;</div><div class="line">		    --max_restart)</div><div class="line">			<span class="keyword">goto</span> restart;</div><div class="line">			<span class="comment">//调用线程处理剩下的中断</span></div><div class="line">		wakeup_softirqd();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	lockdep_softirq_exit();</div><div class="line"></div><div class="line">	account_irq_exit_time(current);</div><div class="line">	__local_bh_enable(SOFTIRQ_OFFSET);</div><div class="line">	tsk_restore_flags(current, old_flags, PF_MEMALLOC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>防止软中断嵌套的流程：关软中断中肯定有一句原子地加1的关键语句，如果当前内核路径A在该原子操作之前被另一个内核路径B打断，则B执行完硬中断和软中断后，返回到A的此处，A接着执行该原子操作，之后的软中断处理应该是空转，因为肯定已经被B处理完了。如果在该原子操作之后被B打断，则B执行完硬中断，不会执行自己的软中断而是会直接退出（因为软中断嵌套了），返回到A的此处，A接着执行，这次A除了处理自己软中断，还会额外地处理B的软中断。<br>对于preempt_count中的软中断位，由上述可以知道，它的作用有两个：防止软中断在单cpu上嵌套；保证了在执行软中断期间不被抢占。</p>
<h3 id="ksoftirqd进程"><a href="#ksoftirqd进程" class="headerlink" title="ksoftirqd进程"></a>ksoftirqd进程</h3><p>run_ksoftirqd是ksoftirqd线程的核心处理函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run_ksoftirqd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> cpu)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//1.把当前CPU中断中断关掉</span></div><div class="line">	local_irq_disable();</div><div class="line">	<span class="comment">//2.当前CPU是否有软中断</span></div><div class="line">	<span class="keyword">if</span> (local_softirq_pending()) &#123;</div><div class="line">	<span class="comment">//3.处理软中断</span></div><div class="line">		__do_softirq();</div><div class="line">		rcu_note_context_switch(cpu);</div><div class="line">		local_irq_enable();</div><div class="line">		cond_resched();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	local_irq_enable();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该内核线程的优先级较低，且采用关闭中断保护方式，而不是关闭抢占保护方式，让更多的软中断被其它人调用执行。达到ksoftirqd进程的辅助作用。<br>一旦开始执行中断就不允许抢占了，软中断和硬中断都是这个做法，在执行期间不允许调度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中断概述&quot;&gt;&lt;a href=&quot;#中断概述&quot; class=&quot;headerlink&quot; title=&quot;中断概述&quot;&gt;&lt;/a&gt;中断概述&lt;/h2&gt;&lt;p&gt;Linux内核需要对连接到计算机上所有硬件设备进行管理，毫无疑问这是它分内的事情。其通过中断机制让管理的硬件设备主动通知，而不是其主动轮询。&lt;br&gt;中断是一种电信号，由硬件设备产生送入中断控制器的输入引脚，然后中断控制器会想处理器发出信号；处理器收到该信号后，停下当前正在处理的事情，跳到中断处理程序的入口点，进行中断处理。当然处理器会通知操作系统已经产生中断；操作系统也可能会进行适当的处理。&lt;/p&gt;
&lt;p&gt;处理器通过中断向量识别产生的中断，linux系统下Intel X86支持256中断向量,中断编号0-255&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0-31  异常 非屏蔽 固定不变&lt;br&gt;32-47 屏蔽中断（IO设备）&lt;br&gt;48-25 软中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;硬件中断&quot;&gt;&lt;a href=&quot;#硬件中断&quot; class=&quot;headerlink&quot; title=&quot;硬件中断&quot;&gt;&lt;/a&gt;硬件中断&lt;/h2&gt;&lt;p&gt;硬中断是外部设备对CPU的中断，硬中断可抢占软中断，优先级高执行较快。&lt;br&gt;硬中断的本质是接收到中断信号后，跳转到公共段代码执行do_IRQ，并切换到硬中断请求栈，执行中断回调函数。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="软中断" scheme="http://vcpu.me/tags/%E8%BD%AF%E4%B8%AD%E6%96%AD/"/>
    
      <category term="硬中断" scheme="http://vcpu.me/tags/%E7%A1%AC%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>惊群探究</title>
    <link href="http://vcpu.me/%E6%83%8A%E7%BE%A4/"/>
    <id>http://vcpu.me/惊群/</id>
    <published>2017-06-29T04:00:00.000Z</published>
    <updated>2017-06-29T03:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="惊群"><a href="#惊群" class="headerlink" title="惊群"></a>惊群</h2><p>发生在多进程或者多线程，等待同一个socket事件，当该事件发生，这些进程或者线程都被唤醒</p>
<h2 id="发生位置"><a href="#发生位置" class="headerlink" title="发生位置"></a>发生位置</h2><p>2.6版本内核accept已经解决该问题了，但是select／poll或者epool_wait仍然存在该问题</p>
<h2 id="产生影响"><a href="#产生影响" class="headerlink" title="产生影响"></a>产生影响</h2><p>一个连接来临时，多个子进程同时被唤醒，却只有一个子进程accept成功，其余都失败，重新休眠；产生了没有必要的唤醒和上下文切换，造成性能浪费。</p>
<h2 id="惊群实例分析"><a href="#惊群实例分析" class="headerlink" title="惊群实例分析"></a>惊群实例分析</h2><p>总体结论：accept linux内核已经解决惊群问题3.10.0-514.16.1.el7.x86_64，具体唤醒方式实现参见<a href="http://vcpu.me/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/">socket信号处理博文</a><br>select/pool和epool内核并没有支持解决惊群问题。<br>之前一直觉得epool和select使用非常平凡，为什么操作系统不直接自己解决惊群问题？应该是epool和select不仅仅使用在socket监听中，会存在需要唤醒多个进程的使用场景。</p>
<a id="more"></a>
<h3 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h3><p>实例背景：3.10.0-514.16.1.el7.x86_64内核下，在创建、绑定和监听后，创建多进程accept 建立好的fd，当一个客户端访问该服务端时候，观察进程的连接获取情况<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT  9999</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">int</span> listenfd,connfd;</div><div class="line">     <span class="keyword">pid_t</span>  childpid,childpid2;</div><div class="line">     <span class="keyword">socklen_t</span> clilen;</div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>,<span class="title">servaddr</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">     listenfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">     bzero(&amp;servaddr,<span class="keyword">sizeof</span>(servaddr));</div><div class="line">     servaddr.sin_family = AF_INET;</div><div class="line">     servaddr.sin_addr.s_addr = htonl (INADDR_ANY);</div><div class="line">     servaddr.sin_port = htons (SERV_PORT);</div><div class="line"></div><div class="line"></div><div class="line">     bind(listenfd,  (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">    listen(listenfd,<span class="number">1000</span>);</div><div class="line"></div><div class="line">     clilen = <span class="keyword">sizeof</span>(cliaddr);</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">         &#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"fork 1 is [%d],error is %m\n"</span>,connfd);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid2 = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line"></div><div class="line">         <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"fork 2 is [%d]，error is %m\n"</span>,connfd);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     sleep(<span class="number">100</span>);</div><div class="line">     <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>窗口1:编译运行例子</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]# gcc jq.c -o jq</div><div class="line">[root@localhost demo]# ./jq</div><div class="line">fork 1 is [4],error is Success</div></pre></td></tr></table></figure>
<p>窗口2：访问9999端口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# curl http://127.0.0.1:9999</div></pre></td></tr></table></figure></p>
<p>结果：在创建、绑定和监听后，创建多进程监听后，只有一个进程被唤醒接收处理fd，其它进程均在休眠阶段，在linux内核3.10.0-514.16.1.el7.x86_64版本下，多进程accept连接时候不存在惊群现象。</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>实例背景：3.10.0-514.16.1.el7.x86_64内核下，在创建、绑定和监听后，创建多进程select监听 建立好的fd，当一个客户端访问该服务端时候，多进程活动情况</p>
<p>jingqunselect.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT  8888</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">int</span> listenfd,connfd;</div><div class="line">     <span class="keyword">pid_t</span>  childpid,childpid2;</div><div class="line">     <span class="keyword">socklen_t</span> clilen;</div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>,<span class="title">servaddr</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">     listenfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">     bzero(&amp;servaddr,<span class="keyword">sizeof</span>(servaddr));</div><div class="line">     servaddr.sin_family = AF_INET;</div><div class="line">     servaddr.sin_addr.s_addr = htonl (INADDR_ANY);</div><div class="line">     servaddr.sin_port = htons (SERV_PORT);</div><div class="line"></div><div class="line"></div><div class="line">     bind(listenfd,  (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">    listen(listenfd,<span class="number">1000</span>);</div><div class="line"></div><div class="line">     clilen = <span class="keyword">sizeof</span>(cliaddr);</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">int</span> maxsock = listenfd+<span class="number">1</span>;</div><div class="line">         fd_set fdsr;</div><div class="line">         FD_ZERO(&amp;fdsr);</div><div class="line">        FD_SET(listenfd, &amp;fdsr);</div><div class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line">         tv.tv_sec = <span class="number">30</span>;</div><div class="line">         tv.tv_usec = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>   ret = select(maxsock, &amp;fdsr,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;tv);</div><div class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d]child err 1 \n"</span>,getpid());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"time out\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] rcv singal \n"</span>,getpid());</div><div class="line">             <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"[%d] [%d],error is %m\n"</span>,getpid(),connfd);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid2 = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">int</span> maxsock = listenfd+<span class="number">1</span>;</div><div class="line">         fd_set fdsr;</div><div class="line">         FD_ZERO(&amp;fdsr);</div><div class="line">         FD_SET(listenfd, &amp;fdsr);</div><div class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line">         tv.tv_sec = <span class="number">30</span>;</div><div class="line">         tv.tv_usec = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ret = select(maxsock, &amp;fdsr,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;tv);</div><div class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d]child 2 err\n"</span>,getpid());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"time out\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] rcv singal \n"</span>,getpid());</div><div class="line">             <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"[%d] [%d],error is %m\n"</span>,getpid(),connfd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     sleep(<span class="number">100</span>);</div><div class="line">     <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>窗口1:编译运行上述代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]# gcc jingqunselect.c -o jqselect</div><div class="line">[root@localhost demo]#</div><div class="line">[root@localhost demo]# ./jqselect</div><div class="line">[23954] rcv singal</div><div class="line">[23955]rcv singal</div><div class="line">[23954] [4],error is Success</div></pre></td></tr></table></figure></p>
<p>窗口2:[root@localhost ~]# curl <a href="http://127.0.0.1:8888" target="_blank" rel="external">http://127.0.0.1:8888</a><br>结论：有连接建立信号时候两个监听进程均被唤醒，也就是存在惊群问题。</p>
<h3 id="epool"><a href="#epool" class="headerlink" title="epool"></a>epool</h3><p>实例背景：3.10.0-514.16.1.el7.x86_64内核下，在创建、绑定和监听后，创建10个子进程epool监听 建立好的fd，当一个客户端访问该服务端时候，多进程活动情况<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]<span class="meta"># cat epjq.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_NUM 10</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">create_and_bind</span> <span class="params">(<span class="keyword">char</span> *port)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></div><div class="line">    serveraddr.sin_family = AF_INET;</div><div class="line">    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">    serveraddr.sin_port = htons(atoi(port));</div><div class="line">    bind(fd, (struct sockaddr*)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> flags, s;</div><div class="line"></div><div class="line">    flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flags |= O_NONBLOCK;</div><div class="line">    s = fcntl (sfd, F_SETFL, flags);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sfd, s;</div><div class="line">    <span class="keyword">int</span> efd;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></div><div class="line"></div><div class="line">    sfd = create_and_bind(<span class="string">"8888"</span>);</div><div class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = make_socket_non_blocking (sfd);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = listen(sfd, SOMAXCONN);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    efd = epoll_create(MAXEVENTS);</div><div class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_create"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    event.data.fd = sfd;</div><div class="line">    <span class="comment">//event.events = EPOLLIN | EPOLLET;</span></div><div class="line">    event.events = EPOLLIN;</div><div class="line">    s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &amp;event);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_ctl"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Buffer where events are returned */</span></div><div class="line">    events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span> event);</div><div class="line">            <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; PROCESS_NUM; k++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> pid = fork();</div><div class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="comment">/* The event loop */</span></div><div class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> n, i;</div><div class="line">                n = epoll_wait(efd, events, MAXEVENTS, <span class="number">-1</span>);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"process %d return from epoll_wait!\n"</span>, getpid());</div><div class="line">                                       <span class="comment">/* sleep here is very important!*/</span></div><div class="line">                sleep(<span class="number">2</span>);</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp;                                    EPOLLIN)))</div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">/* An error has occured on this fd, or the socket is not</span></div><div class="line">                        ready for reading (why were we notified then?) */</div><div class="line">                        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);</div><div class="line">                        close (events[i].data.fd);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd)</div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">/* We have a notification on the listening socket, which</span></div><div class="line">                        means one or more incoming connections. */</div><div class="line">                        struct sockaddr in_addr;</div><div class="line">                        <span class="keyword">socklen_t</span> in_len;</div><div class="line">                        <span class="keyword">int</span> infd;</div><div class="line">                        <span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];</div><div class="line"></div><div class="line">                        in_len = <span class="keyword">sizeof</span> in_addr;</div><div class="line">                        infd = accept(sfd, &amp;in_addr, &amp;in_len);</div><div class="line">                        <span class="keyword">if</span> (infd == <span class="number">-1</span>)</div><div class="line">                        &#123;</div><div class="line">                            <span class="built_in">printf</span>(<span class="string">"process %d accept failed!\n"</span>, getpid());</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"process %d accept successed!\n"</span>, getpid());</div><div class="line"></div><div class="line">                        <span class="comment">/* Make the incoming socket non-blocking and add it to the</span></div><div class="line">                        list of fds to monitor. */</div><div class="line">                        close(infd);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line">    wait(&amp;status);</div><div class="line">    <span class="built_in">free</span> (events);</div><div class="line">    close (sfd);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>窗口1:编译运行epooldemo<br>[root@localhost demo]# ./epjq<br>process 24197 return from epoll_wait!<br>process 24198 return from epoll_wait!<br>process 24196 return from epoll_wait!<br>process 24195 return from epoll_wait!<br>process 24194 return from epoll_wait!<br>process 24193 return from epoll_wait!<br>process 24192 return from epoll_wait!<br>process 24191 return from epoll_wait!<br>process 24190 return from epoll_wait!<br>process 24189 return from epoll_wait!<br>process 24193 accept successed!<br>process 24194 accept failed!<br>process 24197 accept failed!<br>process 24195 accept failed!<br>process 24192 accept failed!<br>process 24191 accept failed!<br>process 24196 accept failed!<br>process 24198 accept failed!<br>process 24189 accept failed!<br>process 24190 accept failed!</p>
<p>窗口2:[root@localhost ~]# curl <a href="http://127.0.0.1:8888" target="_blank" rel="external">http://127.0.0.1:8888</a></p>
<p>结论:epoll_wait监听事件时候没有解决惊群问题；所有监听进程均会被打扰惊醒，进行上下文切换后然后进入睡眠。</p>
<h3 id="how-to-slove"><a href="#how-to-slove" class="headerlink" title="how to slove ?"></a>how to slove ?</h3><p>多进程需要从某一个端口获取连接，为了高性能我们摒弃直接accept而根据具体使用场景选用epool／poll／select等多socket管控机制，这种管控机制会带来惊群问题（具体内容上述实验已经表达）。<br>目前标准解决方案有两种：</p>
<blockquote>
<p>1.锁机制（见后文详细说明）<br>2.复用端口</p>
<blockquote>
<p>kernel 3.9增加了SO_REUSEPORT socket option，该选项允许服务端socket复用端口，通过hash机制将连接分配客户端到具体的进程；而这一切都是内核在处理。</p>
</blockquote>
</blockquote>
<p>实例背景：3.10.0-514.16.1.el7.x86_64内核，fork多个进程，通过设置SO_REUSEPORT标记，多进程一起监听端口8888，具体实验demo程序如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_NUM 10</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">create_and_bind</span> <span class="params">(<span class="keyword">char</span> *port)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> optval = <span class="number">1</span>;</div><div class="line">    setsockopt(fd,SOL_SOCKET,SO_REUSEPORT,&amp;optval,<span class="keyword">sizeof</span>(optval));</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></div><div class="line">    serveraddr.sin_family = AF_INET;</div><div class="line">    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">    serveraddr.sin_port = htons(atoi(port));</div><div class="line">    bind(fd, (struct sockaddr*)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> flags, s;</div><div class="line"></div><div class="line">    flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flags |= O_NONBLOCK;</div><div class="line">    s = fcntl (sfd, F_SETFL, flags);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">socket_proc</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sfd, s;</div><div class="line">    <span class="keyword">int</span> efd;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></div><div class="line"></div><div class="line">    sfd = create_and_bind(<span class="string">"8888"</span>);</div><div class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = make_socket_non_blocking (sfd);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = listen(sfd, SOMAXCONN);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    efd = epoll_create(MAXEVENTS);</div><div class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_create"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    event.data.fd = sfd;</div><div class="line">    <span class="comment">//event.events = EPOLLIN | EPOLLET;</span></div><div class="line">    event.events = EPOLLIN;</div><div class="line">    s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &amp;event);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_ctl"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Buffer where events are returned */</span></div><div class="line">    events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span> event);</div><div class="line"></div><div class="line">	  <span class="comment">/* The event loop */</span></div><div class="line">	  <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">	  &#123;</div><div class="line">	      <span class="keyword">int</span> n, i;</div><div class="line">	      n = epoll_wait(efd, events, MAXEVENTS, <span class="number">-1</span>);</div><div class="line">	      <span class="built_in">printf</span>(<span class="string">"process %d return from epoll_wait!\n"</span>, getpid());</div><div class="line">	                             <span class="comment">/* sleep here is very important!*/</span></div><div class="line">	    <span class="comment">//  sleep(2);</span></div><div class="line">	</div><div class="line">	      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	      &#123;</div><div class="line">	          <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp; EPOLLIN)))</div><div class="line">	          &#123;</div><div class="line">	              <span class="comment">/* An error has occured on this fd, or the socket is not</span></div><div class="line">	              ready for reading (why were we notified then?) */</div><div class="line">	              <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);</div><div class="line">	              close (events[i].data.fd);</div><div class="line">	              <span class="keyword">continue</span>;</div><div class="line">	          &#125;</div><div class="line">	          <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd)</div><div class="line">	          &#123;</div><div class="line">	              <span class="comment">/* We have a notification on the listening socket, which</span></div><div class="line">	              means one or more incoming connections. */</div><div class="line">	              struct sockaddr in_addr;</div><div class="line">	              <span class="keyword">socklen_t</span> in_len;</div><div class="line">	              <span class="keyword">int</span> infd;</div><div class="line">	              <span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];</div><div class="line">	</div><div class="line">	              in_len = <span class="keyword">sizeof</span> in_addr;</div><div class="line">	              infd = accept(sfd, &amp;in_addr, &amp;in_len);</div><div class="line">	              <span class="keyword">if</span> (infd == <span class="number">-1</span>)</div><div class="line">	              &#123;</div><div class="line">	                  <span class="built_in">printf</span>(<span class="string">"process %d accept failed!\n"</span>, getpid());</div><div class="line">	                  <span class="keyword">break</span>;</div><div class="line">	              &#125;</div><div class="line">	              <span class="built_in">printf</span>(<span class="string">"process %d accept successed!\n"</span>, getpid());</div><div class="line">	</div><div class="line">	              <span class="comment">/* Make the incoming socket non-blocking and add it to the</span></div><div class="line">	              list of fds to monitor. */</div><div class="line">	              close(infd);</div><div class="line">	          &#125;</div><div class="line">	      &#125;</div><div class="line">	  &#125;</div><div class="line">    <span class="built_in">free</span> (events);</div><div class="line">    close (sfd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">     <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; PROCESS_NUM; k++)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> pid = fork();</div><div class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            socket_proc();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     <span class="keyword">int</span> status;</div><div class="line">    wait(&amp;status);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]#</div><div class="line">[root@localhost demo]# gcc epjqreuseport.c -o e.out</div><div class="line">[root@localhost demo]# ./e.out</div><div class="line">process 31071 return from epoll_wait!</div><div class="line">process 31071 accept successed!</div><div class="line">process 31075 return from epoll_wait!</div><div class="line">process 31075 accept successed!</div></pre></td></tr></table></figure></p>
<p>总结：SO_REUSEPORT允许多进程共同bind同一个端口，内核会按照一定机制分配访问连接到不同的进程</p>
<h3 id="nginx采用epool模型，怎么解决惊群？"><a href="#nginx采用epool模型，怎么解决惊群？" class="headerlink" title="nginx采用epool模型，怎么解决惊群？"></a>nginx采用epool模型，怎么解决惊群？</h3><blockquote>
<p>如果进程并没有处于过载状态，那么就会去争用锁，当然，实际上是争用监听套接口的监控权.</p>
<ul>
<li>争锁成功就会把所有监听套接口加入到自身的事件监控机制里（如果原本不在）</li>
<li>争锁失败就会把监听套接口从自身的事件监控机制里删除（如果原本在）</li>
</ul>
<p>争抢成功的进程，可以调用epoll_ctl把所有要监听的端口加入该进程的epool事件中，然后epool_wait阻塞及时获取客户端的新建tcp事件，如果获取到相应事件，该进程调用accept正式建立建立连接；然后释放锁。当锁被释放后所有进程可以共同争抢锁了。</p>
<p>也就是说，因为锁的原因，同一时间只能有一个进程拥有监听端口的监控权利（将监听端口放入自己epool中中控制并且调用epoolwait监控新建事件）。这种机制保障了不会有多进程共同拥有套接口的监控权，从而避免了惊群问题。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;惊群&quot;&gt;&lt;a href=&quot;#惊群&quot; class=&quot;headerlink&quot; title=&quot;惊群&quot;&gt;&lt;/a&gt;惊群&lt;/h2&gt;&lt;p&gt;发生在多进程或者多线程，等待同一个socket事件，当该事件发生，这些进程或者线程都被唤醒&lt;/p&gt;
&lt;h2 id=&quot;发生位置&quot;&gt;&lt;a href=&quot;#发生位置&quot; class=&quot;headerlink&quot; title=&quot;发生位置&quot;&gt;&lt;/a&gt;发生位置&lt;/h2&gt;&lt;p&gt;2.6版本内核accept已经解决该问题了，但是select／poll或者epool_wait仍然存在该问题&lt;/p&gt;
&lt;h2 id=&quot;产生影响&quot;&gt;&lt;a href=&quot;#产生影响&quot; class=&quot;headerlink&quot; title=&quot;产生影响&quot;&gt;&lt;/a&gt;产生影响&lt;/h2&gt;&lt;p&gt;一个连接来临时，多个子进程同时被唤醒，却只有一个子进程accept成功，其余都失败，重新休眠；产生了没有必要的唤醒和上下文切换，造成性能浪费。&lt;/p&gt;
&lt;h2 id=&quot;惊群实例分析&quot;&gt;&lt;a href=&quot;#惊群实例分析&quot; class=&quot;headerlink&quot; title=&quot;惊群实例分析&quot;&gt;&lt;/a&gt;惊群实例分析&lt;/h2&gt;&lt;p&gt;总体结论：accept linux内核已经解决惊群问题3.10.0-514.16.1.el7.x86_64，具体唤醒方式实现参见&lt;a href=&quot;http://vcpu.me/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/&quot;&gt;socket信号处理博文&lt;/a&gt;&lt;br&gt;select/pool和epool内核并没有支持解决惊群问题。&lt;br&gt;之前一直觉得epool和select使用非常平凡，为什么操作系统不直接自己解决惊群问题？应该是epool和select不仅仅使用在socket监听中，会存在需要唤醒多个进程的使用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="nginx" scheme="http://vcpu.me/tags/nginx/"/>
    
      <category term="惊群" scheme="http://vcpu.me/tags/%E6%83%8A%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>epool基本用法</title>
    <link href="http://vcpu.me/epool/"/>
    <id>http://vcpu.me/epool/</id>
    <published>2017-06-28T04:00:00.000Z</published>
    <updated>2017-07-04T03:23:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="epool基本概念"><a href="#epool基本概念" class="headerlink" title="epool基本概念"></a>epool基本概念</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>改进的pool，一种I/O多路复用技术，可管理大批量文件描述符。</p>
<h3 id="工作原理？"><a href="#工作原理？" class="headerlink" title="工作原理？"></a>工作原理？</h3><blockquote>
<p>内核中，一切皆文件，epoll向内核注册一个文件系统，用于存储要管理的文件描述符号。调用epoll_create时，会在虚拟文件系统中创建一个file节点服务epool同时也会创建就绪事件list链表。<br>操作系统启动后，会开辟出自己的高速cache，socket问价描述符会以红黑树存入cache，方便查找、插入、删除。<br>    epool_ctl，把socket放到epool文件系统里file对应的红黑树，也会注册一个回调函数，文件描述符有信号后，会调用该组册函数，内核把网卡数据copy到内核中把socket插入就绪列表中。<br>    epoll_wait调用时候，看一眼就绪列表，所以效率很高。监控百万描述符，但是准备就绪fd却很少。</p>
</blockquote>
<a id="more"></a>
<h3 id="适用场景？"><a href="#适用场景？" class="headerlink" title="适用场景？"></a>适用场景？</h3><p>非常适用大量并发连接中只有少量活跃连接情况，且在该情况下CPU适用率很低。</p>
<h3 id="可能缺点？"><a href="#可能缺点？" class="headerlink" title="可能缺点？"></a>可能缺点？</h3><p>所有socket基本都是活跃的，比如在一个高速的LAN环境，使用epool可能会比select／pool效率低</p>
<h3 id="分为LT和ET"><a href="#分为LT和ET" class="headerlink" title="分为LT和ET"></a>分为LT和ET</h3><p>LT和ET作用在epool_wait过程中，LT模式下，只要一个文件描述符没有处理完，后续再次调用epool_wait时也会返回。实现过程为，内核会把socket事件插入就绪链表，epool_wait调用会被把就绪的文件描述符拷入用户态，清空就绪链表，如果是ET则额外检测如果存在没有处理文件描述符，则将再次放入就绪列表中。</p>
<h2 id="epool例子"><a href="#epool例子" class="headerlink" title="epool例子"></a>epool例子</h2><h3 id="epoll-create函数"><a href="#epoll-create函数" class="headerlink" title="epoll_create函数"></a>epoll_create函数</h3><p>用途：创建一个epool事件管理并返回描述符号<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数：size 最大fd数<br>返回值：epool使用的文件描述符</p>
<ul>
<li>-1 失败</li>
<li>>= 0 成功</li>
</ul>
<h3 id="epoll-ctl函数"><a href="#epoll-ctl函数" class="headerlink" title="epoll_ctl函数"></a>epoll_ctl函数</h3><p>用途：控制epoll事件，添加修改删除事件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<blockquote>
<p>epfd:epoll_create的返回值<br>op:要进行的操作例如注册事件，可能的取值EPOLL_CTL_ADD 注册、EPOLL_CTL_MOD 修 改、EPOLL_CTL_DEL 删除<br>fd:要在epool事件管理上加入删除或者修改的文件描述符<br>event:event.data.fd 要处理的文件描述符<br>event:event.events = EPOLLIN|EPOLLET;<br>EPOLLIN ：表示对应的文件描述符可以读；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET：边缘触发；</p>
</blockquote>
<p>返回值：成功返回0，失败返回-1<br>    When successful, epoll_ctl() returns zero.  When an error occurs, epoll_ctl() returns -1 and errno is set appropriately</p>
<h3 id="epool-wait函数"><a href="#epool-wait函数" class="headerlink" title="epool_wait函数"></a>epool_wait函数</h3><p>用途：返回IO事件就绪的fd<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></div><div class="line">                      <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout);</div></pre></td></tr></table></figure></p>
<p>参数：<br>epfd：epoll_create的返回值<br>events：取出内核结果的事件数组<br>maxevents：要处理的事件数<br>timeout：等待IO发生超时值<br>            -1 阻塞直到有事件<br>            0 非阻塞</p>
<pre><code>&gt;0： 阻塞时间，单位毫秒
</code></pre><h3 id="epoool函数实例"><a href="#epoool函数实例" class="headerlink" title="epoool函数实例"></a>epoool函数实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;sys/types.h&gt;       /* basic system data types */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;sys/socket.h&gt;      /* basic socket definitions */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;netinet/in.h&gt;      /* sockaddr_in&#123;&#125; and other Internet defns */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;arpa/inet.h&gt;       /* inet(3) functions */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt; /* epoll function */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;     /* nonblocking */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt; /*setrlimit */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEPOLLSIZE 10000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 10240</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> connfd)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFD, <span class="number">0</span>)|O_NONBLOCK) == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>  servPort = <span class="number">8080</span>;</div><div class="line">    <span class="keyword">int</span> listenq = <span class="number">1024</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> listenfd, connfd, kdpfd, nfds, n, nread, curfds,acceptCount = <span class="number">0</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>, <span class="title">cliaddr</span>;</span></div><div class="line">    <span class="keyword">socklen_t</span> socklen = <span class="keyword">sizeof</span>(struct sockaddr_in);</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">MAXEPOLLSIZE</span>];</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">rt</span>;</span></div><div class="line">    <span class="keyword">char</span> buf[MAXLINE];</div><div class="line"></div><div class="line">    <span class="comment">/* 设置每个进程允许打开的最大文件数 */</span></div><div class="line">    rt.rlim_max = rt.rlim_cur = MAXEPOLLSIZE;</div><div class="line">    <span class="keyword">if</span> (setrlimit(RLIMIT_NOFILE, &amp;rt) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"setrlimit error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">    servaddr.sin_family = AF_INET;</div><div class="line">    servaddr.sin_addr.s_addr = htonl (INADDR_ANY);</div><div class="line">    servaddr.sin_port = htons (servPort);</div><div class="line"></div><div class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (listenfd == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"can't create socket file"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> opt = <span class="number">1</span>;</div><div class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setnonblocking(listenfd) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"setnonblock error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bind(listenfd, (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(struct sockaddr)) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (listen(listenfd, listenq) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"listen error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 创建 epoll 句柄，把监听 socket 加入到 epoll 集合里 */</span></div><div class="line">    kdpfd = epoll_create(MAXEPOLLSIZE);</div><div class="line">    ev.events = EPOLLIN | EPOLLET;</div><div class="line">    ev.data.fd = listenfd;</div><div class="line">    <span class="keyword">if</span> (epoll_ctl(kdpfd, EPOLL_CTL_ADD, listenfd, &amp;ev) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"epoll set insertion error: fd=%d\n"</span>, listenfd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    curfds = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"epollserver startup,port %d, max connection is %d, backlog is %d\n"</span>, servPort, MAXEPOLLSIZE, listenq);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="comment">/* 等待有事件发生 */</span></div><div class="line">        nfds = epoll_wait(kdpfd, events, curfds, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (nfds == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"epoll_wait"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 处理所有事件 */</span></div><div class="line">        <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; nfds; ++n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (events[n].data.fd == listenfd)</div><div class="line">            &#123;</div><div class="line">                connfd = accept(listenfd, (struct sockaddr *)&amp;cliaddr,&amp;socklen);</div><div class="line">                <span class="keyword">if</span> (connfd &lt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"accept error"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"accept form %s:%d\n"</span>, inet_ntoa(cliaddr.sin_addr), cliaddr.sin_port);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d:%s"</span>, ++acceptCount, buf);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (curfds &gt;= MAXEPOLLSIZE) &#123;</div><div class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many connection, more than %d\n"</span>, MAXEPOLLSIZE);</div><div class="line">                    close(connfd);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (setnonblocking(connfd) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    perror(<span class="string">"setnonblocking error"</span>);</div><div class="line">                &#125;</div><div class="line">                ev.events = EPOLLIN | EPOLLET;</div><div class="line">                ev.data.fd = connfd;</div><div class="line">                <span class="keyword">if</span> (epoll_ctl(kdpfd, EPOLL_CTL_ADD, connfd, &amp;ev) &lt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"add socket '%d' to epoll failed: %s\n"</span>, connfd, strerror(errno));</div><div class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                curfds++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 处理客户端请求</span></div><div class="line">            <span class="keyword">if</span> (handle(events[n].data.fd) &lt; <span class="number">0</span>) &#123;</div><div class="line">                epoll_ctl(kdpfd, EPOLL_CTL_DEL, events[n].data.fd,&amp;ev);</div><div class="line">                curfds--;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> connfd)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> nread;</div><div class="line">    <span class="keyword">char</span> buf[MAXLINE];</div><div class="line">    nread = read(connfd, buf, MAXLINE);<span class="comment">//读取客户端socket流</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nread == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"client close the connection\n"</span>);</div><div class="line">        close(connfd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (nread &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"read error"</span>);</div><div class="line">        close(connfd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"recv:%s\n"</span>,buf);</div><div class="line">    write(connfd, buf, nread);<span class="comment">//响应客户端</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"send:%s\n"</span>,buf);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;epool基本概念&quot;&gt;&lt;a href=&quot;#epool基本概念&quot; class=&quot;headerlink&quot; title=&quot;epool基本概念&quot;&gt;&lt;/a&gt;epool基本概念&lt;/h2&gt;&lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h3&gt;&lt;p&gt;改进的pool，一种I/O多路复用技术，可管理大批量文件描述符。&lt;/p&gt;
&lt;h3 id=&quot;工作原理？&quot;&gt;&lt;a href=&quot;#工作原理？&quot; class=&quot;headerlink&quot; title=&quot;工作原理？&quot;&gt;&lt;/a&gt;工作原理？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;内核中，一切皆文件，epoll向内核注册一个文件系统，用于存储要管理的文件描述符号。调用epoll_create时，会在虚拟文件系统中创建一个file节点服务epool同时也会创建就绪事件list链表。&lt;br&gt;操作系统启动后，会开辟出自己的高速cache，socket问价描述符会以红黑树存入cache，方便查找、插入、删除。&lt;br&gt;    epool_ctl，把socket放到epool文件系统里file对应的红黑树，也会注册一个回调函数，文件描述符有信号后，会调用该组册函数，内核把网卡数据copy到内核中把socket插入就绪列表中。&lt;br&gt;    epoll_wait调用时候，看一眼就绪列表，所以效率很高。监控百万描述符，但是准备就绪fd却很少。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="epoll" scheme="http://vcpu.me/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>socket读写条件</title>
    <link href="http://vcpu.me/socket_rw_proc/"/>
    <id>http://vcpu.me/socket_rw_proc/</id>
    <published>2017-06-26T11:10:34.000Z</published>
    <updated>2017-06-26T08:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h2><p>1.接收缓存区低水位标记（用于读）和发送缓存区低水位标记（用于写）：<br>每个套接字有一个接收低水位和一个发送低水位。他们由select函数使用。<br>接收低水位标记是让select返回”可读”时套接字接收缓冲区中所需的数据量。对于TCP,其默认值为1。<br>发送低水位标记是让select返回”可写”时套接字发送缓冲区中所需的可用空间。对于TCP，其默认值常为2048</p>
<p>通俗的解释一下，缓存区我们当成一个大小为 n bytes的空间，那么：<br>接收区缓存的作用就是，接收对面的数据放在缓存区，供应用程序读。当然了，只有当缓存区可读的数据量(接收低水位标记)到达一定程度（eg:1）的时候，我们才能读到数据，不然不就读不到数据了吗。<br>发送区缓存的作用就是，发送应用程序的数据到缓存区，然后一起发给对面。当然了，只有当缓存区剩余一定空间(发送低水位标记)（eg:2048）,你才能写数据进去，不然可能导致空间不够。</p>
<p>2.FIN: (结束标志,Finish)用来结束一个TCP回话.但对应端口仍处于开放状态,准备接收后续数据.</p>
<p>特别纠正说明：</p>
<blockquote>
<p>经过测试在3.10.0-514.16.1.el7.x86_64 内核情况下SO_SNDLOWAT/SO_RCVLOWAT<br>默认发送和接收最低水位均为1，也就是说默认情况下低水位值可以不考虑，系统缓冲区有数据就读<br>有空闲就写</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> value =<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> v_len = <span class="keyword">sizeof</span>(value);</div><div class="line">getsockopt(sockfd, SOL_SOCKET, SO_SNDLOWAT, (<span class="keyword">void</span>*)&amp;value, &amp;v_len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"snd low at value: %d\n"</span>,value);</div><div class="line">value = <span class="number">0</span>;</div><div class="line">getsockopt(sockfd, SOL_SOCKET, SO_RCVLOWAT, (<span class="keyword">void</span>*)&amp;value, &amp;v_len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"rcv low at value: %d\n"</span>,value);</div></pre></td></tr></table></figure>
<h2 id="socket可读的条件"><a href="#socket可读的条件" class="headerlink" title="socket可读的条件"></a>socket可读的条件</h2><p>下列四个条件中的任何一个满足时,socket准备好读:<br>1.socket的接收缓冲区中的数据字节大于等于该socket的接收缓冲区低水位标记的当前大小。对这样的socket的读操作将不阻塞并返回一个大于0的值 {也就是返回准备好读入的数据}。我们可以用SO_RCVLOWATsocket选项来设置该socket的低水位标记。对于TCP和UDP .socket而言，其缺省值为1</p>
<p>2.该连接的读这一半关闭{也就是接收了FIN的TCP连接}。对这样的socket的读操作将不阻塞并返回0</p>
<p>3.socket是一个用于监听的socket,并且已经完成的连接数为非0.这样的soocket处于可读状态,是因为socket收到了对方的connect请求,执行了三次握手的第一步:对方发送SYN请求过来,使监听socket处于可读状态;正常情况下,这样的socket上的accept操作不会阻塞;</p>
<p>4.有一个socket有异常错误条件待处理。对于这样的socket的读操作将不会阻塞,并且返回一个错误-1,errno则设置成明确的错误条件。这些待处理的错误也可通过指定socket选项SO_ERROR调用getsockopt来取得并清除</p>
<h2 id="socket可写的条件"><a href="#socket可写的条件" class="headerlink" title="socket可写的条件"></a>socket可写的条件</h2><p>1.socket发送缓冲区中数据字节大于等于该socket发送缓冲区低水位大小。写操作不会被阻塞，会直接返回写入的数据大小，SO_SNDLOWAT socket选项设置socket可写低水位大小。经过测试默认大小为1。<br>2.如果你已经关闭连接，或者主动fin半关闭。这种情况下socket再些将要产生SIGPIPE信号，你没有对这个信号处理的话，你的进程将会被关闭。<br>3.有socket异常错误待处理，这种情况下写操作并不会被阻塞会直接返回一个错误-1，想知道错误原因erron可以帮助你。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="http://blog.csdn.net/szcarewell/article/details/51227540" target="_blank" rel="external">http://blog.csdn.net/szcarewell/article/details/51227540</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念说明&quot;&gt;&lt;a href=&quot;#概念说明&quot; class=&quot;headerlink&quot; title=&quot;概念说明&quot;&gt;&lt;/a&gt;概念说明&lt;/h2&gt;&lt;p&gt;1.接收缓存区低水位标记（用于读）和发送缓存区低水位标记（用于写）：&lt;br&gt;每个套接字有一个接收低水位和一个发送低水位。他们
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
  </entry>
  
  <entry>
    <title>socket信号处理</title>
    <link href="http://vcpu.me/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    <id>http://vcpu.me/socket信号处理/</id>
    <published>2017-06-26T11:10:34.000Z</published>
    <updated>2017-06-26T09:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="socket-I-O事件处理"><a href="#socket-I-O事件处理" class="headerlink" title="socket I/O事件处理"></a>socket I/O事件处理</h2><p>以TCP socket为例<br>kernel: 3.10.0-514.16.1.el7.x86_64</p>
<h3 id="socket-IO处理函数"><a href="#socket-IO处理函数" class="headerlink" title="socket IO处理函数"></a>socket IO处理函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> &#123;</span></div><div class="line">	...</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> __<span class="title">rcu</span> *<span class="title">sk_wq</span>;</span> <span class="comment">/*等待队列和异步队列*/</span></div><div class="line">	...</div><div class="line">	<span class="keyword">void</span>			(*sk_state_change)(struct sock *sk);</div><div class="line">	<span class="keyword">void</span>			(*sk_data_ready)(struct sock *sk, <span class="keyword">int</span> bytes);</div><div class="line">	<span class="keyword">void</span>			(*sk_write_space)(struct sock *sk);</div><div class="line">	<span class="keyword">void</span>			(*sk_error_report)(struct sock *sk);</div><div class="line">	<span class="keyword">int</span>			(*sk_backlog_rcv)(struct sock *sk);</div><div class="line">	...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p>sk_wq</p>
<blockquote>
<p>含有等待队列用来睡眠唤醒程序使用，异步队列异步socket使用</p>
</blockquote>
</li>
<li><p>sk_state_change </p>
<blockquote>
<p>从SYN_SEND或者SYN_RECV到ES状态，从ES到CLOSE_WAIT状态，当协议栈遇到这些事件时候会调用</p>
</blockquote>
</li>
<li><p>sk_data_ready</p>
</li>
<li><p>sk_write_space</p>
<blockquote>
<p>sock有数据可读和可写时候调用</p>
</blockquote>
</li>
<li><p>sk_error_report</p>
<blockquote>
<p>sock上存在错误时调用，比如收到RST包</p>
<a id="more"></a>
</blockquote>
</li>
</ul>
<h3 id="处理函数初始化"><a href="#处理函数初始化" class="headerlink" title="处理函数初始化"></a>处理函数初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">----------------START-------------------------</div><div class="line"> 0xffffffff81557ed0 : sock_init_data+0x0/0x220 [kernel]</div><div class="line"> 0xffffffff815ec9f4 : inet_create+0x154/0x360 [kernel]</div><div class="line"> 0xffffffff81555200 : __sock_create+0x110/0x260 [kernel]</div><div class="line"> 0xffffffff81556521 : SyS_socket+0x61/0xf0 [kernel]</div><div class="line"> 0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<p>步骤1:通用初始化<br>socket-&gt;SyS_socket-&gt;__sock_create-&gt;inet_create-&gt;sock_init_data</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sock_init_data：</div><div class="line"></div><div class="line">sk-&gt;sk_state_change	=	sock_def_wakeup;</div><div class="line">sk-&gt;sk_data_ready	=	sock_def_readable;</div><div class="line">sk-&gt;sk_write_space	=	sock_def_write_space;</div><div class="line">sk-&gt;sk_error_report	=	sock_def_error_report;</div><div class="line">sk-&gt;sk_destruct		=	sock_def_destruct;</div></pre></td></tr></table></figure>
<p>步骤2:对于TCP socket，特有更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0xffffffff815be170 : tcp_init_sock+0x0/0x200 [kernel]</div><div class="line">0xffffffff815d4212 : tcp_v4_init_sock+0x12/0x30 [kernel]</div><div class="line">0xffffffff815eca71 : inet_create+0x1d1/0x360 [kernel]</div><div class="line">0xffffffff81555200 : __sock_create+0x110/0x260 [kernel]</div><div class="line">0xffffffff81556521 : SyS_socket+0x61/0xf0 [kernel]</div><div class="line">0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]</div></pre></td></tr></table></figure></p>
<p>inet_create-&gt;tcp_v4_init_sock-&gt;tcp_init_sock<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tcp_init_sock:</div><div class="line">sk-&gt;sk_write_space = sk_stream_write_space;</div></pre></td></tr></table></figure></p>
<h2 id="sock-def-wakeup"><a href="#sock-def-wakeup" class="headerlink" title="sock_def_wakeup"></a>sock_def_wakeup</h2><h3 id="信号触发时机"><a href="#信号触发时机" class="headerlink" title="信号触发时机"></a>信号触发时机</h3><blockquote>
<p>无论是作为客户端还是服务端<br>socket TCP协议栈进入到ES或者CLOSE_WAIT时候，会触发sock_def_wakeup通知用户态进程TCP状态变更<br>具体来讲：sock_def_wakeup可以唤醒connect或者accept，或者因收到结束喜欢fin而正常结束<br>send/recv返回值为0</p>
</blockquote>
<h3 id="作为客户端主动连接对方获取资源"><a href="#作为客户端主动连接对方获取资源" class="headerlink" title="作为客户端主动连接对方获取资源"></a>作为客户端主动连接对方获取资源</h3><p>访问方式：curl -v <a href="http://180.97.33.107" target="_blank" rel="external">http://180.97.33.107</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost socketdemo]# curl -v http://180.97.33.107</div><div class="line">* About to connect() to 180.97.33.107 port 80 (#0)</div><div class="line">*   Trying 180.97.33.107...</div><div class="line">* Connected to 180.97.33.107 (180.97.33.107) port 80 (#0)</div><div class="line"><span class="meta">&gt;</span> GET / HTTP/1.1</div><div class="line"><span class="meta">&gt;</span> User-Agent: curl/7.29.0</div><div class="line"><span class="meta">&gt;</span> Host: 180.97.33.107</div><div class="line"><span class="meta">&gt;</span> Accept: */*</div><div class="line"><span class="meta">&gt;</span></div><div class="line">&lt; HTTP/1.1 200 OK</div><div class="line">&lt; Server: bfe/1.0.8.18</div><div class="line">&lt; Date: Fri, 23 Jun 2017 10:02:40 GMT</div><div class="line">&lt; Content-Type: text/html</div><div class="line">&lt; Content-Length: 2381</div><div class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:28:20 GMT</div><div class="line">&lt; Connection: Keep-Alive</div><div class="line">&lt; ETag: "588604f4-94d"</div><div class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</div><div class="line">&lt; Pragma: no-cache</div><div class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</div><div class="line">&lt; Accept-Ranges: bytes</div></pre></td></tr></table></figure>
<p>systemtap探测sock_def_wakeup被调用情况，并打出调用栈，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">调用情况：收到对端回复synack后，发出ack时候客户端connect结束，从SYN_SEND跳转到ES状态唤醒用户态进程，此时连接已经成功，可以发送数据了</div><div class="line">sock_def_wakeup:[2017/6/23,18:00:59]local=10.0.2.15:60162,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]</div><div class="line"> 0xffffffff815cbc09 : tcp_finish_connect+0xc9/0x120 [kernel]</div><div class="line"> 0xffffffff815cc297 : tcp_rcv_state_process+0x637/0xf20 [kernel]</div><div class="line"> 0xffffffff815d5ffb : tcp_v4_do_rcv+0x17b/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00472fc [e1000]</div><div class="line">WARNING: Missing unwind data for a module, rerun with 'stap -d e1000'</div><div class="line"></div><div class="line">情况2:访问的服务端主动关闭连接，则客户端从ES进入CLOSE_WAIT,通知用户态进程</div><div class="line">sock_def_wakeup:[2017/6/23,18:00:59]local=10.0.2.15:60162,remote=180.97.33.107:80 state:CLOSE_WAIT</div><div class="line"> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]</div><div class="line"> 0xffffffff815c5ca9 : tcp_fin+0x169/0x1e0 [kernel]</div><div class="line"> 0xffffffff815c84f8 : tcp_data_queue+0x7f8/0xdd0 [kernel]</div><div class="line"> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00472fc [e1000]</div></pre></td></tr></table></figure>
<h3 id="作为服务端"><a href="#作为服务端" class="headerlink" title="作为服务端"></a>作为服务端</h3><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>作为服务端堵塞在accept时，收到客户端请求，三次握手建立完成后，服务端状态进入ES状态，会调用sock_def_wakeup通知用户态进程<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sock_def_wakeup:[2017/6/26,10:47:00]local=192.168.55.178:8080,remote=192.168.55.165:50536 state:ESTABLISHED</div><div class="line"> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]</div><div class="line"> 0xffffffff815cc3bf : tcp_rcv_state_process+0x75f/0xf20 [kernel]</div><div class="line"> 0xffffffff815d7dde : tcp_child_process+0x3e/0x130 [kernel]</div><div class="line"> 0xffffffff815d60d5 : tcp_v4_do_rcv+0x255/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div></pre></td></tr></table></figure></p>
<h4 id="服务端测试程序如下"><a href="#服务端测试程序如下" class="headerlink" title="服务端测试程序如下"></a>服务端测试程序如下</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//#include &lt;sys/types.h&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="comment">//#include &lt;sys/wait.h&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVPORT 8080</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CONNECTED_NO 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_sockaddr</span>,<span class="title">client_sockaddr</span>;</span></div><div class="line">    <span class="keyword">int</span> sin_size,recvbytes,flags;</div><div class="line">    <span class="keyword">int</span> sockfd,client_fd;</div><div class="line">    <span class="keyword">char</span> buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)&#123;</div><div class="line">        perror(<span class="string">"socket"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"socket success!,sockfd=%d\n"</span>,sockfd);</div><div class="line"></div><div class="line">    server_sockaddr.sin_family=AF_INET;</div><div class="line">    server_sockaddr.sin_port=htons(SERVPORT);</div><div class="line">    server_sockaddr.sin_addr.s_addr=INADDR_ANY;</div><div class="line">    bzero(&amp;(server_sockaddr.sin_zero),<span class="number">8</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(bind(sockfd,(struct sockaddr *)&amp;server_sockaddr,<span class="keyword">sizeof</span>(struct sockaddr))==<span class="number">-1</span>)&#123;</div><div class="line">        perror(<span class="string">"bind"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"bind success!\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(listen(sockfd,BACKLOG)==<span class="number">-1</span>)&#123;</div><div class="line">        perror(<span class="string">"listen"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listening....\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((flags=fcntl( sockfd, F_SETFL, <span class="number">0</span>))&lt;<span class="number">0</span>)</div><div class="line">            perror(<span class="string">"fcntl F_SETFL"</span>);</div><div class="line">    flags |= O_ASYNC;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(fcntl( sockfd, F_SETFL,flags)&lt;<span class="number">0</span>)</div><div class="line">        perror(<span class="string">"fcntl"</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        sin_size=<span class="keyword">sizeof</span>(struct sockaddr_in);</div><div class="line">        <span class="keyword">if</span>((client_fd=accept(sockfd,(struct sockaddr*)&amp;client_sockaddr,&amp;sin_size))==<span class="number">-1</span>)&#123;</div><div class="line">            perror(<span class="string">"accept"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,client_sockaddr.sin_port);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recvbytes=recv(client_fd,buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)&#123;</div><div class="line">            perror(<span class="string">"recv"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"recvbytes: %d %s \n "</span>,recvbytes,buf);</div><div class="line"></div><div class="line">        close(client_fd);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行过程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost socketdemo]# gcc server.c -o server</div><div class="line">[root@localhost socketdemo]#</div><div class="line">[root@localhost socketdemo]# ./server</div><div class="line">socket success!,sockfd=3</div><div class="line">bind success!</div><div class="line">listening....</div></pre></td></tr></table></figure></p>
<h4 id="服务端stap探测脚本"><a href="#服务端stap探测脚本" class="headerlink" title="服务端stap探测脚本"></a>服务端stap探测脚本</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]<span class="comment"># cat socketsingtal.stp</span></div><div class="line">%&#123;</div><div class="line">  <span class="comment">#include &lt;linux/tcp.h&gt;</span></div><div class="line">  <span class="comment">#include&lt;linux/rtc.h&gt;</span></div><div class="line">  <span class="comment">#include &lt;net/tcp.h&gt;</span></div><div class="line"></div><div class="line">    static const char tcp_state_array[][<span class="number">16</span>] = &#123;</div><div class="line">        <span class="string">"NULL"</span>,</div><div class="line">        <span class="string">"ESTABLISHED"</span>,</div><div class="line">        <span class="string">"SYN_SENT"</span>,</div><div class="line">        <span class="string">"SYN_RECV"</span>,</div><div class="line">        <span class="string">"FIN_WAIT1"</span>,</div><div class="line">        <span class="string">"FIN_WAIT2"</span>,</div><div class="line">        <span class="string">"TIME_WAIT"</span>,</div><div class="line">        <span class="string">"CLOSE"</span>,</div><div class="line">        <span class="string">"CLOSE_WAIT"</span>,</div><div class="line">        <span class="string">"LAST_ACK"</span>,</div><div class="line">        <span class="string">"LISTEN"</span>,</div><div class="line">        <span class="string">"CLOSING"</span></div><div class="line">    &#125;;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_short_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_full_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%d/%d/%d,%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_year+<span class="number">1900</span>, tm.tm_mon+<span class="number">1</span>, tm.tm_mday,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_lifetime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    STAP_RETVALUE = jiffies_to_msecs(tcp_time_stamp - info-&gt;estab_t);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_data:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct tcp_sock *tp = tcp_sk(sk);</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    u32 len = tp-&gt;snd_nxt - info-&gt;isn;</div><div class="line"></div><div class="line">    STAP_RETVALUE = len ? len - <span class="number">1</span> : len;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function filter_http_transtime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line"></div><div class="line">    STAP_RETVALUE = info-&gt;http_filter;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_addr:string (sk:long)</div><div class="line">&#123;</div><div class="line">    laddr = tcpmib_local_addr(sk)</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    raddr = tcpmib_remote_addr(sk)</div><div class="line">    rport = tcpmib_remote_port(sk)</div><div class="line"></div><div class="line">    local_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(laddr)), lport)</div><div class="line">    remote_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(raddr)), rport)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">sprintf</span>(<span class="string">"local=%s,remote=%s"</span>, local_addr, remote_addr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function get_socket_state:string (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[sk-&gt;sk_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_sk_sndbuf:string(sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk=(struct sock*)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE,<span class="string">"%d:%d"</span>, sk-&gt;sk_wmem_queued, sk-&gt;sk_sndbuf);</div><div class="line">%&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">function socket_state_num2str:string (<span class="keyword">state</span>:long)</div><div class="line">%&#123;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[STAP_ARG_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function sshfilter:long(sk:long)</div><div class="line">&#123;</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    <span class="keyword">if</span>(lport == <span class="number">22</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sock_def_wakeup"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sock_def_wakeup:[%s]%s state:%s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk))</div><div class="line">    print_backtrace()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行过程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# stap -g socketsingtal.stp</div></pre></td></tr></table></figure></p>
<h3 id="sock-def-wakeup状态改变事件实现分析"><a href="#sock-def-wakeup状态改变事件实现分析" class="headerlink" title="sock_def_wakeup状态改变事件实现分析"></a>sock_def_wakeup状态改变事件实现分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断等待队列释放存在进程</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">wq_has_sleeper</span><span class="params">(struct socket_wq *wq)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//同步使用，具体实现未分析</span></div><div class="line">	smp_mb();</div><div class="line">	<span class="keyword">return</span> wq &amp;&amp; waitqueue_active(&amp;wq-&gt;wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sock_def_wakeup</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	rcu_read_lock();</div><div class="line">	wq = rcu_dereference(sk-&gt;sk_wq);</div><div class="line">	<span class="comment">//如果等待队列有进程，全部唤醒</span></div><div class="line">	<span class="keyword">if</span> (wq_has_sleeper(wq))</div><div class="line">		wake_up_interruptible_all(&amp;wq-&gt;wait);</div><div class="line">	rcu_read_unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唤醒进程实现如下wake_up_interruptible_all -&gt;<strong>wake_up-&gt;</strong>wake_up_common<br>比较特殊点是，__wake_up的nr_exclusive为0时候唤醒所有进程。<br>其它说明是：nr_exclusive为1时候，是为了惊鸿设置的，只唤醒一个进程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up_interruptible_all(x)	__wake_up(x, TASK_INTERRUPTIBLE, 0, NULL)</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> __wake_up(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</div><div class="line">			<span class="keyword">int</span> nr_exclusive, <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line"></div><div class="line">	spin_lock_irqsave(&amp;q-&gt;lock, flags);</div><div class="line">	__wake_up_common(q, mode, nr_exclusive, <span class="number">0</span>, key);</div><div class="line">	spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(__wake_up);</div></pre></td></tr></table></figure></p>
<p>__wake_up_common 参数nr_exclusive为0时候，break不可能被执行<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __wake_up_common(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</div><div class="line">			<span class="keyword">int</span> nr_exclusive, <span class="keyword">int</span> wake_flags, <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">wait_queue_t</span> *curr, *next;</div><div class="line"></div><div class="line">	list_for_each_entry_safe(curr, next, &amp;q-&gt;task_list, task_list) &#123;</div><div class="line">		<span class="keyword">unsigned</span> flags = curr-&gt;flags;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (curr-&gt;func(curr, mode, wake_flags, key) &amp;&amp;</div><div class="line">				(flags &amp; WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>__wake_up_common 中curr-&gt;func是什么呢？</p>
<p>是autoremove_wake_function，将socket睡眠时候，会调用DEFINE_WAIT将autoremove_wake_function设置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFINE_WAIT_FUNC(name, function)\</span></div><div class="line">	wait_queue_t name = &#123;		\</div><div class="line">		.private	= current,		\</div><div class="line">		.func		= function,		\</div><div class="line">		.task_list	= LIST_HEAD_INIT((name).task_list),x\</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name, autoremove_wake_function)</span></div></pre></td></tr></table></figure></p>
<p>autoremove_wake_function 干了什么？<br>1:default_wake_function -&gt;try_to_wake_up<br>    把进程状态设置为TASK_RUNNING，并把其插入CPU运行队列，从而唤醒睡眠进程<br>2:待进程状态唤醒后，把等待事件从等待队列中删除</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">autoremove_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ret = default_wake_function(wait, mode, sync, key);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ret)</div><div class="line">		list_del_init(&amp;wait-&gt;task_list);<span class="comment">//等待队列删除</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(autoremove_wake_function);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">default_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *curr, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> wake_flags,</span></span></div><div class="line">			  <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//把进程状态设置为TASK_RUNNING，并把其插入CPU运行队列，从而唤醒睡眠进程</span></div><div class="line">	<span class="keyword">return</span> try_to_wake_up(curr-&gt;<span class="keyword">private</span>, mode, wake_flags);</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(default_wake_function);</div></pre></td></tr></table></figure>
<h2 id="sock-def-readable"><a href="#sock-def-readable" class="headerlink" title="sock_def_readable"></a>sock_def_readable</h2><p>sock_def_readable调用时机，sock数据可读会调用此函数唤醒进程</p>
<p>作为服务端<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//收到syn包后</span></div><div class="line">sock_def_wakeup:[<span class="number">2017</span>/<span class="number">6</span>/<span class="number">26</span>,<span class="number">11</span>:<span class="number">52</span>:<span class="number">07</span>]local=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>,remote=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span> state:LISTEN</div><div class="line"> <span class="number">0xffffffff81558220</span> : sock_def_readable+<span class="number">0x0</span>/<span class="number">0x70</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d7eb8</span> : tcp_child_process+<span class="number">0x118</span>/<span class="number">0x130</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d60d5</span> : tcp_v4_do_rcv+<span class="number">0x255</span>/<span class="number">0x340</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d76d9</span> : tcp_v4_rcv+<span class="number">0x799</span>/<span class="number">0x9a0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1094</span> : ip_local_deliver_finish+<span class="number">0xb4</span>/<span class="number">0x1f0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1379</span> : ip_local_deliver+<span class="number">0x59</span>/<span class="number">0xd0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b0d1a</span> : ip_rcv_finish+<span class="number">0x8a</span>/<span class="number">0x350</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b16a6</span> : ip_rcv+<span class="number">0x2b6</span>/<span class="number">0x410</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815700d2</span> : __netif_receive_skb_core+<span class="number">0x582</span>/<span class="number">0x800</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81570368</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815703f0</span> : netif_receive_skb_internal+<span class="number">0x40</span>/<span class="number">0xc0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81571578</span> : napi_gro_receive+<span class="number">0xd8</span>/<span class="number">0x130</span> [kernel]</div><div class="line"> <span class="number">0xffffffffa00a72fc</span> [e1000]</div><div class="line"><span class="comment">//收到数据包后</span></div><div class="line">sock_def_wakeup:</div><div class="line">[<span class="number">2017</span>/<span class="number">6</span>/<span class="number">26</span>,<span class="number">11</span>:<span class="number">52</span>:<span class="number">07</span>]local=<span class="number">192.168</span><span class="number">.55</span><span class="number">.178</span>:<span class="number">8080</span>,remote=<span class="number">192.168</span><span class="number">.55</span><span class="number">.165</span>:<span class="number">50843</span> state:ESTABLISHED</div><div class="line"> <span class="number">0xffffffff81558220</span> : sock_def_readable+<span class="number">0x0</span>/<span class="number">0x70</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815c8197</span> : tcp_data_queue+<span class="number">0x497</span>/<span class="number">0xdd0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815cb4a7</span> : tcp_rcv_established+<span class="number">0x217</span>/<span class="number">0x760</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d5f8a</span> : tcp_v4_do_rcv+<span class="number">0x10a</span>/<span class="number">0x340</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d76d9</span> : tcp_v4_rcv+<span class="number">0x799</span>/<span class="number">0x9a0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1094</span> : ip_local_deliver_finish+<span class="number">0xb4</span>/<span class="number">0x1f0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1379</span> : ip_local_deliver+<span class="number">0x59</span>/<span class="number">0xd0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b0d1a</span> : ip_rcv_finish+<span class="number">0x8a</span>/<span class="number">0x350</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b16a6</span> : ip_rcv+<span class="number">0x2b6</span>/<span class="number">0x410</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815700d2</span> : __netif_receive_skb_core+<span class="number">0x582</span>/<span class="number">0x800</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81570368</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815703f0</span> : netif_receive_skb_internal+<span class="number">0x40</span>/<span class="number">0xc0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81571578</span> : napi_gro_receive+<span class="number">0xd8</span>/<span class="number">0x130</span> [kernel]</div><div class="line"> <span class="number">0xffffffffa00a72fc</span> [e1000]</div><div class="line">[root@localhost stp]#</div></pre></td></tr></table></figure></p>
<p>作为客户端<br>    收到ES状态服务端回复的数据在tcp_data_queue／tcp_rcv_established中调用<br>    具体实现后续分析。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815cb6c3 : tcp_rcv_established+0x433/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815c8197 : tcp_data_queue+0x497/0xdd0 [kernel]</div><div class="line"> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815cb6c3 : tcp_rcv_established+0x433/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div><div class="line"> </div><div class="line"> 服务端主动关闭连接，作为客户端TCP状态机处于CLOSE_WAIT</div><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:CLOSE_WAIT</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815c8197 : tcp_data_queue+0x497/0xdd0 [kernel]</div><div class="line"> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div></pre></td></tr></table></figure></p>
<h3 id="sock-def-readable-1"><a href="#sock-def-readable-1" class="headerlink" title="sock_def_readable"></a>sock_def_readable</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sock_def_readable</span><span class="params">(struct sock *sk, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	rcu_read_lock();</div><div class="line">	wq = rcu_dereference(sk-&gt;sk_wq);</div><div class="line">	<span class="keyword">if</span> (wq_has_sleeper(wq))</div><div class="line">	<span class="comment">//阻塞队列通知</span></div><div class="line">		wake_up_interruptible_sync_poll(&amp;wq-&gt;wait, POLLIN | POLLPRI |</div><div class="line">						POLLRDNORM | POLLRDBAND);</div><div class="line">	<span class="comment">//异步队列通知</span></div><div class="line">	sk_wake_async(sk, SOCK_WAKE_WAITD, POLL_IN);</div><div class="line">	rcu_read_unlock();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up_interruptible_sync_poll(x, m)\</span></div><div class="line">	__wake_up_sync_key((x), TASK_INTERRUPTIBLE, 1, (void *) (m))</div><div class="line">	</div><div class="line"></div><div class="line"><span class="keyword">void</span> __wake_up_sync_key(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</div><div class="line">			<span class="keyword">int</span> nr_exclusive, <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line">	<span class="keyword">int</span> wake_flags = WF_SYNC;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(!q))</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(!nr_exclusive))</div><div class="line">		wake_flags = <span class="number">0</span>;</div><div class="line"></div><div class="line">	spin_lock_irqsave(&amp;q-&gt;lock, flags);</div><div class="line">	__wake_up_common(q, mode, nr_exclusive, wake_flags, key);</div><div class="line">	spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL_GPL(__wake_up_sync_key);</div></pre></td></tr></table></figure>
<p>wake_up_interruptible_sync_poll传递的nr_exclusive为1，表示只允许唤醒一个等待进程。</p>
<h2 id="sk-stream-write-space"><a href="#sk-stream-write-space" class="headerlink" title="sk_stream_write_space"></a>sk_stream_write_space</h2><p>sk-&gt;sk_write_space的实例为sock_def_write_space()。<br>如果socket是SOCK_STREAM类型的，那么函数指针的值会更新为sk_stream_write_space()。<br>sk_stream_write_space()在TCP中的调用路径为：<br>tcp_rcv_established / tcp_rcv_state_process<br>    tcp_data_snd_check<br>        tcp_check_space<br>            tcp_new_space</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sk_stream_write_space</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span> = <span class="title">sk</span>-&gt;<span class="title">sk_socket</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	<span class="comment">//发送缓存大小，当要发送数据没有到达发送缓存的2／3 下限</span></div><div class="line">	<span class="comment">//尚未发送数据缓冲区大小数据，没有大于用户设定值sysctl_tcp_notsent_lowat时候才能触发写数据</span></div><div class="line">	<span class="comment">//针对于下限，要发送数据还不多</span></div><div class="line">	<span class="comment">//针对于上限，要发送数据已经很多的话，不变要再发了，否则会使用过多内存</span></div><div class="line">	<span class="keyword">if</span> (sk_stream_is_writeable(sk) &amp;&amp; sock) &#123;</div><div class="line">		<span class="comment">//经过sk_stream_is_writeable判别说明缓冲是足够的SOCK_NOSPACE标记清除</span></div><div class="line">		clear_bit(SOCK_NOSPACE, &amp;sock-&gt;flags);</div><div class="line"></div><div class="line">		rcu_read_lock();</div><div class="line">		wq = rcu_dereference(sk-&gt;sk_wq);</div><div class="line">		<span class="keyword">if</span> (wq_has_sleeper(wq))</div><div class="line">		<span class="comment">//唤醒等待队列一个进程</span></div><div class="line">			wake_up_interruptible_poll(&amp;wq-&gt;wait, POLLOUT |</div><div class="line">						POLLWRNORM | POLLWRBAND);</div><div class="line">		<span class="comment">//异步队列允许发送数据，通知异步队列</span></div><div class="line">		<span class="keyword">if</span> (wq &amp;&amp; wq-&gt;fasync_list &amp;&amp; !(sk-&gt;sk_shutdown &amp; SEND_SHUTDOWN))</div><div class="line">			sock_wake_async(sock, SOCK_WAKE_SPACE, POLL_OUT);</div><div class="line">		rcu_read_unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;socket-I-O事件处理&quot;&gt;&lt;a href=&quot;#socket-I-O事件处理&quot; class=&quot;headerlink&quot; title=&quot;socket I/O事件处理&quot;&gt;&lt;/a&gt;socket I/O事件处理&lt;/h2&gt;&lt;p&gt;以TCP socket为例&lt;br&gt;kernel: 3.10.0-514.16.1.el7.x86_64&lt;/p&gt;
&lt;h3 id=&quot;socket-IO处理函数&quot;&gt;&lt;a href=&quot;#socket-IO处理函数&quot; class=&quot;headerlink&quot; title=&quot;socket IO处理函数&quot;&gt;&lt;/a&gt;socket IO处理函数&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sock&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;socket_wq&lt;/span&gt; __&lt;span class=&quot;title&quot;&gt;rcu&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;sk_wq&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*等待队列和异步队列*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_state_change)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_data_ready)(struct sock *sk, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; bytes);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_write_space)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_error_report)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;			(*sk_backlog_rcv)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sk_wq&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;含有等待队列用来睡眠唤醒程序使用，异步队列异步socket使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_state_change &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从SYN_SEND或者SYN_RECV到ES状态，从ES到CLOSE_WAIT状态，当协议栈遇到这些事件时候会调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_data_ready&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_write_space&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sock有数据可读和可写时候调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_error_report&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sock上存在错误时调用，比如收到RST包&lt;/p&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket信号处理" scheme="http://vcpu.me/tags/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>select</title>
    <link href="http://vcpu.me/select/"/>
    <id>http://vcpu.me/select/</id>
    <published>2017-06-26T09:00:57.000Z</published>
    <updated>2017-06-26T09:00:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span></div><div class="line">           fd_set *exceptfds, struct timeval *timeout);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>nfds 是最大文件描述符号 +1   怎么可能这么简单，它限制的是最大值而不是个数</li>
<li>readfds 用来记录可读fd集合</li>
<li>writefds 用来记录可写fd集合</li>
<li>exceptfds 用来检查带外数据</li>
<li>timeout 决定select等待I/O时间</li>
</ul>
<blockquote>
<p>1.timeout该值为NULL，会阻塞一定等到监控的文件描述符集合中产生状态变化（可读，可写等）<br>2.timeout值为0分0毫秒，非阻塞，不关注文件描述符是否变化立刻返回<br>3.timeout正常值，timeout这段时间内阻塞，如果监控集合中有信号来临，select将返回，否则超时返回</p>
</blockquote>
<a id="more"></a>
<p>返回值：</p>
<ul>
<li>0 出发信号的fd数目</li>
<li>=0 超时</li>
<li>-1 出错 </li>
</ul>
<p>作用：<br>    用来管理fd集合，实现多fd集合监听操作</p>
<h2 id="select用户态用法"><a href="#select用户态用法" class="headerlink" title="select用户态用法"></a>select用户态用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPORT 1234    <span class="comment">// the port users will be connecting to</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 5     <span class="comment">// how many pending connections queue will hold</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 200</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> fd_A[BACKLOG];    <span class="comment">// accepted connection fd</span></div><div class="line"><span class="keyword">int</span> conn_amount;    <span class="comment">// current connection amount</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showclient</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"client amount: %d\n"</span>, conn_amount);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[%d]:%d  "</span>, i, fd_A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;  <span class="comment">// listen on sock_fd, new connection on new_fd</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span>    <span class="comment">// server address information</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span> <span class="comment">// connector's address information</span></div><div class="line">    <span class="keyword">socklen_t</span> sin_size;</div><div class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"socket"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"setsockopt"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_port = htons(MYPORT);</div><div class="line">    server_addr.sin_addr.s_addr = INADDR_ANY;</div><div class="line">    <span class="built_in">memset</span>(server_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(server_addr.sin_zero));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bind(sock_fd, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"bind"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (listen(sock_fd, BACKLOG) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen port %d\n"</span>, MYPORT);</div><div class="line"></div><div class="line">    fd_set fdsr;</div><div class="line">    <span class="keyword">int</span> maxsock;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line"></div><div class="line">    conn_amount = <span class="number">0</span>;</div><div class="line">    sin_size = <span class="keyword">sizeof</span>(client_addr);</div><div class="line">    maxsock = sock_fd;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// initialize file descriptor set</span></div><div class="line">        FD_ZERO(&amp;fdsr);</div><div class="line">        FD_SET(sock_fd, &amp;fdsr);</div><div class="line"></div><div class="line">        <span class="comment">// timeout setting</span></div><div class="line">        tv.tv_sec = <span class="number">30</span>;</div><div class="line">        tv.tv_usec = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// add active connection to fd set</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;</div><div class="line">                FD_SET(fd_A[i], &amp;fdsr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ret = select(maxsock + <span class="number">1</span>, &amp;fdsr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);</div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">            perror(<span class="string">"select"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"timeout\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check every fd in the set</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conn_amount; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (FD_ISSET(fd_A[i], &amp;fdsr)) &#123;</div><div class="line">                ret = recv(fd_A[i], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;        <span class="comment">// client close</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] close\n"</span>, i);</div><div class="line">                    close(fd_A[i]);</div><div class="line">                    FD_CLR(fd_A[i], &amp;fdsr);</div><div class="line">                    fd_A[i] = <span class="number">0</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">// receive data</span></div><div class="line">                    <span class="keyword">if</span> (ret &lt; BUF_SIZE)</div><div class="line">                        <span class="built_in">memset</span>(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] send:%s\n"</span>, i, buf);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check whether a new connection comes</span></div><div class="line">        <span class="keyword">if</span> (FD_ISSET(sock_fd, &amp;fdsr)) &#123;</div><div class="line">            new_fd = accept(sock_fd, (struct sockaddr *)&amp;client_addr, &amp;sin_size);</div><div class="line">            <span class="keyword">if</span> (new_fd &lt;= <span class="number">0</span>) &#123;</div><div class="line">                perror(<span class="string">"accept"</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// add to fd queue</span></div><div class="line">            <span class="keyword">if</span> (conn_amount &lt; BACKLOG) &#123;</div><div class="line">                fd_A[conn_amount++] = new_fd;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"new connection client[%d] %s:%d\n"</span>, conn_amount,</div><div class="line">                        inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));</div><div class="line">                <span class="keyword">if</span> (new_fd &gt; maxsock)</div><div class="line">                    maxsock = new_fd;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"max connections arrive, exit\n"</span>);</div><div class="line">                send(new_fd, <span class="string">"bye"</span>, <span class="number">4</span>, <span class="number">0</span>);</div><div class="line">                close(new_fd);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        showclient();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// close other connections</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;</div><div class="line">            close(fd_A[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>代码实现采用select用法描述：</p>
<blockquote>
<p>1.select作为服务端使用<br>2.select监听服务的fd，如果有客户端连接此服务端时候，服务端fd会被触发，然后调用accept完成连接<br>3.select监听服务端和客户端建立好连接的fd，如果客户端发送数据过来，select可监听到读信号，然后recv读出数据。</p>
</blockquote>
</blockquote>
<h2 id="select实现分析"><a href="#select实现分析" class="headerlink" title="select实现分析"></a>select实现分析</h2><h3 id="用户态select-系统调用-sys-select"><a href="#用户态select-系统调用-sys-select" class="headerlink" title="用户态select 系统调用 sys_select"></a>用户态select 系统调用 sys_select</h3><p> 调用栈如下：<br> 0xffffffff81213f80 : sys_select+0x0/0x110 [kernel]<br> 0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]</p>
<p> 实现代码位于：fs/select.c  SYSCALL_DEFINE5(select,…</p>
<h3 id="select功能概述"><a href="#select功能概述" class="headerlink" title="select功能概述"></a>select功能概述</h3><h3 id="sys-select实现分析"><a href="#sys-select实现分析" class="headerlink" title="sys_select实现分析"></a>sys_select实现分析</h3><p>分析结论：</p>
<p>sys_select<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE5(select, <span class="keyword">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</div><div class="line">		fd_set __user *, <span class="built_in">exp</span>, struct timeval __user *, tvp)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">end_time</span>, *<span class="title">to</span> = <span class="title">NULL</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line">	<span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">	<span class="comment">//用户态时间处理，将用户态时间拷入内核态并将参数规整为struct timespec以供调用</span></div><div class="line">	<span class="keyword">if</span> (tvp) &#123;</div><div class="line">		<span class="keyword">if</span> (copy_from_user(&amp;tv, tvp, <span class="keyword">sizeof</span>(tv)))</div><div class="line">			<span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">		to = &amp;end_time;</div><div class="line">		<span class="keyword">if</span> (poll_select_set_timeout(to,</div><div class="line">				tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),</div><div class="line">				(tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))</div><div class="line">			<span class="keyword">return</span> -EINVAL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//select的核心实现</span></div><div class="line">	ret = core_sys_select(n, inp, outp, <span class="built_in">exp</span>, to);</div><div class="line">	</div><div class="line">	<span class="comment">//该函数会将剩余的时间拷入到用户态的tvp 中</span></div><div class="line">	ret = poll_select_copy_remaining(&amp;end_time, tvp, <span class="number">1</span>, ret);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1.将用户态select时间参数拷入内核<br>2.调用core_sys_select<br>3.将select退出后剩余时间结果拷入用户态时间参数中</p>
</blockquote>
<p>core_sys_select<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">core_sys_select</span><span class="params">(<span class="keyword">int</span> n, fd_set __user *inp, fd_set __user *outp,</span></span></div><div class="line">			   fd_set __user *<span class="built_in">exp</span>, struct timespec *end_time)</div><div class="line">&#123;</div><div class="line">	fd_set_bits fds;</div><div class="line">	<span class="keyword">void</span> *bits;</div><div class="line">	<span class="keyword">int</span> ret, max_fds;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> size;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></div><div class="line">	<span class="comment">/* Allocate small arguments on the stack to save memory and be faster */</span></div><div class="line">	<span class="keyword">long</span> stack_fds[SELECT_STACK_ALLOC/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];</div><div class="line"></div><div class="line">	<span class="comment">//用户态给予参数nfds &lt; 0 ,直接返并报告参数非法 -EINVAL</span></div><div class="line">	ret = -EINVAL;</div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out_nofds;</div><div class="line"></div><div class="line">	<span class="comment">/* max_fds can increase, so grab it once to avoid race */</span></div><div class="line">	rcu_read_lock();</div><div class="line">	fdt = files_fdtable(current-&gt;files);</div><div class="line">	max_fds = fdt-&gt;max_fds;</div><div class="line">	rcu_read_unlock();</div><div class="line">	<span class="keyword">if</span> (n &gt; max_fds)</div><div class="line">		n = max_fds;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * We need 6 bitmaps (in/out/ex for both incoming and outgoing),</div><div class="line">	 * since we used fdset we need to allocate memory in units of</div><div class="line">	 * long-words. </div><div class="line">	 */</div><div class="line">	<span class="comment">//以一个文件描述符占1bit，传递进来的这么多fd共占多数字</span></div><div class="line">	size = FDS_BYTES(n);</div><div class="line">	bits = stack_fds;</div><div class="line">	<span class="comment">//检查默认静态数据资源是否够用</span></div><div class="line">	<span class="keyword">if</span> (size &gt; <span class="keyword">sizeof</span>(stack_fds) / <span class="number">6</span>) &#123;</div><div class="line">		<span class="comment">/* Not enough space in on-stack array; must use kmalloc */</span></div><div class="line">		ret = -ENOMEM;</div><div class="line">		bits = kmalloc(<span class="number">6</span> * size, GFP_KERNEL);</div><div class="line">		<span class="keyword">if</span> (!bits)</div><div class="line">			<span class="keyword">goto</span> out_nofds;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//fds用来指向具体的存储空间</span></div><div class="line">	fds.in      = bits;</div><div class="line">	fds.out     = bits +   size;</div><div class="line">	fds.ex      = bits + <span class="number">2</span>*size;</div><div class="line">	fds.res_in  = bits + <span class="number">3</span>*size;</div><div class="line">	fds.res_out = bits + <span class="number">4</span>*size;</div><div class="line">	fds.res_ex  = bits + <span class="number">5</span>*size;</div><div class="line"></div><div class="line"><span class="comment">//将用户空间的inp  outp exp 拷入内核空间</span></div><div class="line">	<span class="keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||</div><div class="line">	    (ret = get_fd_set(n, outp, fds.out)) ||</div><div class="line">	    (ret = get_fd_set(n, <span class="built_in">exp</span>, fds.ex)))</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	<span class="comment">//存放返回状态的字段清零，后续可用作返回结果使用</span></div><div class="line">	zero_fd_set(n, fds.res_in);</div><div class="line">	zero_fd_set(n, fds.res_out);</div><div class="line">	zero_fd_set(n, fds.res_ex);</div><div class="line"></div><div class="line">	<span class="comment">//select核心逻辑处理函数</span></div><div class="line">	ret = do_select(n, &amp;fds, end_time);</div><div class="line"></div><div class="line">	<span class="comment">//存在错误</span></div><div class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	<span class="comment">//超时情况</span></div><div class="line">	<span class="keyword">if</span> (!ret) &#123;</div><div class="line">		ret = -ERESTARTNOHAND;</div><div class="line">		<span class="keyword">if</span> (signal_pending(current))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">		ret = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//把结果集拷入用户空间</span></div><div class="line">	<span class="keyword">if</span> (set_fd_set(n, inp, fds.res_in) ||</div><div class="line">	    set_fd_set(n, outp, fds.res_out) ||</div><div class="line">	    set_fd_set(n, <span class="built_in">exp</span>, fds.res_ex))</div><div class="line">		ret = -EFAULT;</div><div class="line"></div><div class="line">out:</div><div class="line">	<span class="comment">//释放辅助内存</span></div><div class="line">	<span class="keyword">if</span> (bits != stack_fds)</div><div class="line">		kfree(bits);</div><div class="line">out_nofds:</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1.检验nfds，如果其小于0，参数异常返回；并规整nfds（最大不能超过当前进程的max_fds）<br>2.将用户态fd集合拷入内核态<br>3.运行do_select<br>4.将do_select检测结果拷入用户空间<br>5.释放select运算中辅助内存</p>
</blockquote>
<p>do_select<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_select</span><span class="params">(<span class="keyword">int</span> n, fd_set_bits *fds, struct timespec *end_time)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">ktime_t</span> expire, *to = <span class="literal">NULL</span>;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> <span class="title">table</span>;</span></div><div class="line">	poll_table *wait;</div><div class="line">	<span class="keyword">int</span> retval, i, timed_out = <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> slack = <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> busy_end = <span class="number">0</span>;</div><div class="line"></div><div class="line">	rcu_read_lock();</div><div class="line">	<span class="comment">//检查fd对应file状态，且找出最大fd</span></div><div class="line">	retval = max_select_fd(n, fds);</div><div class="line">	rcu_read_unlock();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> retval;</div><div class="line">	n = retval;</div><div class="line"></div><div class="line">	poll_initwait(&amp;table);</div><div class="line">	wait = &amp;table.pt;</div><div class="line">	<span class="comment">//传入的时间为0s 0ms time_out标记为1 这种情况不阻塞直接返回</span></div><div class="line">	<span class="keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;</div><div class="line">		wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">		timed_out = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//正常情况处理。 超时时间转换</span></div><div class="line">	<span class="keyword">if</span> (end_time &amp;&amp; !timed_out)</div><div class="line">		slack = select_estimate_accuracy(end_time);</div><div class="line"></div><div class="line">	retval = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (;;) &#123;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">long</span> *rinp, *routp, *rexp, *inp, *outp, *<span class="built_in">exp</span>;</div><div class="line">		<span class="keyword">bool</span> can_busy_loop = <span class="literal">false</span>;</div><div class="line"></div><div class="line">		inp = fds-&gt;in; outp = fds-&gt;out; <span class="built_in">exp</span> = fds-&gt;ex;</div><div class="line">		rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;</div><div class="line"></div><div class="line">		<span class="comment">//所有监听的fd大循环</span></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">long</span> in, out, ex, all_bits, bit = <span class="number">1</span>, mask, j;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">long</span> res_in = <span class="number">0</span>, res_out = <span class="number">0</span>, res_ex = <span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="comment">//32个文件描述符号，没有任何状态被检测，进入下一轮32个</span></div><div class="line">			in = *inp++; out = *outp++; ex = *<span class="built_in">exp</span>++;</div><div class="line">			all_bits = in | out | ex;</div><div class="line">			<span class="keyword">if</span> (all_bits == <span class="number">0</span>) &#123;</div><div class="line">				i += BITS_PER_LONG;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 这一轮32个fd存在需要检测的状态</span></div><div class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></div><div class="line">				<span class="comment">//超过最大待检测fd n直接退出循环</span></div><div class="line">				<span class="keyword">if</span> (i &gt;= n)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">					</div><div class="line">				<span class="comment">//跳过没有状态检测的fd</span></div><div class="line">				<span class="keyword">if</span> (!(bit &amp; all_bits))</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">					</div><div class="line">				f = fdget(i);</div><div class="line">				<span class="keyword">if</span> (f.file) &#123;</div><div class="line">					<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">f_op</span>;</span></div><div class="line">					f_op = f.file-&gt;f_op;</div><div class="line">					</div><div class="line">					<span class="comment">//设置fd检测事件掩码，poll相关情况处理</span></div><div class="line">					mask = DEFAULT_POLLMASK;</div><div class="line">					<span class="keyword">if</span> (f_op &amp;&amp; f_op-&gt;poll) &#123;</div><div class="line">						<span class="comment">//设置用户需要探查的标记</span></div><div class="line">						wait_key_set(wait, in, out,</div><div class="line">							     bit, busy_flag);</div><div class="line">						<span class="comment">//获取fd当前对应的信号掩码</span></div><div class="line">						mask = (*f_op-&gt;poll)(f.file, wait);</div><div class="line">					&#125;</div><div class="line">					fdput(f);</div><div class="line">					</div><div class="line">					<span class="comment">//可读</span></div><div class="line">					<span class="keyword">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;</div><div class="line">						res_in |= bit;</div><div class="line">						retval++;</div><div class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">//可写</span></div><div class="line">					<span class="keyword">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;</div><div class="line">						res_out |= bit;</div><div class="line">						retval++;</div><div class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;</div><div class="line">						res_ex |= bit;</div><div class="line">						retval++;</div><div class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">/* got something, stop busy polling */</span></div><div class="line">					<span class="keyword">if</span> (retval) &#123;</div><div class="line">						can_busy_loop = <span class="literal">false</span>;</div><div class="line">						busy_flag = <span class="number">0</span>;</div><div class="line"></div><div class="line">					<span class="comment">/*</span></div><div class="line">					 * only remember a returned</div><div class="line">					 * POLL_BUSY_LOOP if we asked for it</div><div class="line">					 */</div><div class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (busy_flag &amp; mask)</div><div class="line">						can_busy_loop = <span class="literal">true</span>;</div><div class="line"></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//将检测结果存下来</span></div><div class="line">			<span class="keyword">if</span> (res_in)</div><div class="line">				*rinp = res_in;</div><div class="line">			<span class="keyword">if</span> (res_out)</div><div class="line">				*routp = res_out;</div><div class="line">			<span class="keyword">if</span> (res_ex)</div><div class="line">				*rexp = res_ex;</div><div class="line">				</div><div class="line">			<span class="comment">//增加抢占点 该抢占点可达到效果是：判断是否有进程需要抢占当前进程，如果是将立即发生调度</span></div><div class="line">			<span class="comment">//已经检查过的fd如果此时被唤醒，则会在此产生调度</span></div><div class="line">			cond_resched();</div><div class="line">		&#125;</div><div class="line">		wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">if</span> (retval || timed_out || signal_pending(current))</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">			</div><div class="line">		<span class="comment">//设备就绪异常超时终止灯信号触发，直接break，可跳出大循环结束程序</span></div><div class="line">		<span class="keyword">if</span> (table.error) &#123;</div><div class="line">			retval = table.error;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span></div><div class="line">		<span class="keyword">if</span> (can_busy_loop &amp;&amp; !need_resched()) &#123;</div><div class="line">			<span class="keyword">if</span> (!busy_end) &#123;</div><div class="line">				busy_end = busy_loop_end_time();</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!busy_loop_timeout(busy_end))</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		busy_flag = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * If this is the first loop and we have a timeout</div><div class="line">		 * given, then we convert to ktime_t and set the to</div><div class="line">		 * pointer to the expiry value.</div><div class="line">		 */</div><div class="line">		<span class="keyword">if</span> (end_time &amp;&amp; !to) &#123;</div><div class="line">			expire = timespec_to_ktime(*end_time);</div><div class="line">			to = &amp;expire;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//当前用户进程从这里进入睡眠，超时后timed_out 置1 直接退出</span></div><div class="line">		<span class="keyword">if</span> (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,</div><div class="line">					   to, slack))</div><div class="line">			timed_out = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	poll_freewait(&amp;table);</div><div class="line">	<span class="keyword">return</span> retval;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>do_select为select的核心实现，其处理过程如下：</p>
<blockquote>
<p>1.调用poll_initwait初始化poll_wqueues对象table，包括其成员poll_table；</p>
<p>2.如果用户传入的timeout不为NULL，但是设定的时间为0，那么设置poll_table指针wait(即 &amp;table.pt）为NULL；当&amp;table.pt为NULL，它并不会被加到等到队列中。</p>
<p>3.将in,out和exception进行或运算，得到all_bits，然后遍历all_bits中bit为1的fd，根据进程的fd_table查找到file指针filp，然后设置wait的key值（POLLEX_SET, POLLIN_SET,POLLIN_SET三者的或运算，取决于用户输入），并调用filp-&gt;poll(filp, wait)，获得返回值mask。 再根据mask值检查该文件是否立即满足条件，如果满足，设置res_in/res_out/res_exception的值，执行retval++, 并设置wait为NULL。</p>
<p>4.在每遍历32（取决于long型整数的位数）个文件后，调用1次cond_resched()，主动寻求调度，可以等待已经遍历过的文件是否有唤醒的；</p>
<p>5.在遍历完所有文件之后，设置wait为NULL，并检查是否有满足条件的文件（retval值是否为0），或者是否超时，或者是否有未决信号，如果有那么直接跳出循环，进入步骤7；</p>
<p>6.否则调用poll_schedule_timeout，使进程进入睡眠，直到超时（如果未设置超时，那么是直接调用的schedule()）。如果是超时后进程继续执行，那么设置pwq-&gt;triggered为0；如果是被文件对应的驱动程序唤醒的，那么pwq-&gt;triggered被设置为1.</p>
<p>   7.最终，函数调用poll_freewait，将本进程从所有文件的等待队列中删掉，并删除分配的poll_table_page对象，回收内存，并返回retval值。</p>
<p> 8.拷贝res_in, res_out和res_exception到传入的in, out, exception，并返回ret。</p>
</blockquote>
<h3 id="select睡眠过程"><a href="#select睡眠过程" class="headerlink" title="select睡眠过程"></a>select睡眠过程</h3><p>do_select</p>
<p>…<br>    步骤1<br>    poll_initwait(&amp;table);<br>    wait = &amp;table.pt;<br>…<br>    步骤2<br>    if (f_op &amp;&amp; f_op-&gt;poll) {<br>    wait_key_set(wait, in, out,<br>             bit, busy_flag);<br>    //如果是socket此处调用的是sock_poll<br>    mask = (*f_op-&gt;poll)(f.file, wait);<br>}<br>    步骤3<br>…<br>    if (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,<br>                       to, slack))</p>
<p>步骤1:初始化table<br>    struct poll_wqueues table;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">poll_initwait</span><span class="params">(struct poll_wqueues *pwq)</span></span></div><div class="line">&#123;</div><div class="line">	init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);</div><div class="line">	pwq-&gt;polling_task = current;</div><div class="line">	pwq-&gt;triggered = <span class="number">0</span>;</div><div class="line">	pwq-&gt;error = <span class="number">0</span>;</div><div class="line">	pwq-&gt;table = <span class="literal">NULL</span>;</div><div class="line">	pwq-&gt;inline_index = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(poll_initwait);</div></pre></td></tr></table></figure>
<ul>
<li>将当前进程标志current给table让其记录下来</li>
<li>将__pollwait给table-&gt;pt-&gt;_qproc让其记录下来</li>
</ul>
<p>步骤2:调用sock_poll最终调用tcp_pool<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* No kernel lock held - perfect */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sock_poll</span><span class="params">(struct file *file, poll_table *wait)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> busy_flag = <span class="number">0</span>;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *      We can't return errors to poll, so it's either yes or no.</div><div class="line">	 */</div><div class="line">	sock = file-&gt;private_data;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sk_can_busy_loop(sock-&gt;sk)) &#123;</div><div class="line">		<span class="comment">/* this socket can poll_ll so tell the system call */</span></div><div class="line">		busy_flag = POLL_BUSY_LOOP;</div><div class="line"></div><div class="line">		<span class="comment">/* once, only if requested by syscall */</span></div><div class="line">		<span class="keyword">if</span> (wait &amp;&amp; (wait-&gt;_key &amp; POLL_BUSY_LOOP))</div><div class="line">			sk_busy_loop(sock-&gt;sk, <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">							<span class="comment">//针对于tcpsocket来讲此处调用tcp_pool</span></div><div class="line">	<span class="keyword">return</span> busy_flag | sock-&gt;ops-&gt;poll(file, sock, wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *	Wait for a TCP event.</div><div class="line"> *</div><div class="line"> *	Note that we don't need to lock the socket, as the upper poll layers</div><div class="line"> *	take care of normal races (between the test and the event) and we don't</div><div class="line"> *	go look at any of the socket buffers directly.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">tcp_poll</span><span class="params">(struct file *file, struct socket *sock, poll_table *wait)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> mask;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line"></div><div class="line">	sock_rps_record_flow(sk);</div><div class="line"></div><div class="line">	sock_poll_wait(file, sk_sleep(sk), wait);</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state == TCP_LISTEN)</div><div class="line">		<span class="keyword">return</span> inet_csk_listen_poll(sk);</div><div class="line"></div><div class="line">	<span class="comment">/* Socket is not locked. We are protected from async events</span></div><div class="line">	 * by poll logic and correct handling of state changes</div><div class="line">	 * made by other threads is impossible in any case.</div><div class="line">	 */</div><div class="line"></div><div class="line">	mask = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_shutdown == SHUTDOWN_MASK || sk-&gt;sk_state == TCP_CLOSE)</div><div class="line">		mask |= POLLHUP;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_shutdown &amp; RCV_SHUTDOWN)</div><div class="line">		mask |= POLLIN | POLLRDNORM | POLLRDHUP;</div><div class="line"></div><div class="line">	<span class="comment">/* Connected or passive Fast Open socket? */</span></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state != TCP_SYN_SENT &amp;&amp;</div><div class="line">	    (sk-&gt;sk_state != TCP_SYN_RECV || tp-&gt;fastopen_rsk != <span class="literal">NULL</span>)) &#123;</div><div class="line">		<span class="keyword">int</span> target = sock_rcvlowat(sk, <span class="number">0</span>, INT_MAX);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (tp-&gt;urg_seq == tp-&gt;copied_seq &amp;&amp;</div><div class="line">		    !sock_flag(sk, SOCK_URGINLINE) &amp;&amp;</div><div class="line">		    tp-&gt;urg_data)</div><div class="line">			target++;</div><div class="line"></div><div class="line">		<span class="comment">/* Potential race condition. If read of tp below will</span></div><div class="line">		 * escape above sk-&gt;sk_state, we can be illegally awaken</div><div class="line">		 * in SYN_* states. */</div><div class="line">		<span class="keyword">if</span> (tp-&gt;rcv_nxt - tp-&gt;copied_seq &gt;= target)</div><div class="line">			mask |= POLLIN | POLLRDNORM;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!(sk-&gt;sk_shutdown &amp; SEND_SHUTDOWN)) &#123;</div><div class="line">			<span class="keyword">if</span> (sk_stream_is_writeable(sk)) &#123;</div><div class="line">				mask |= POLLOUT | POLLWRNORM;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;  <span class="comment">/* send SIGIO later */</span></div><div class="line">				set_bit(SOCK_ASYNC_NOSPACE,</div><div class="line">					&amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line">				set_bit(SOCK_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line"></div><div class="line">				<span class="comment">/* Race breaker. If space is freed after</span></div><div class="line">				 * wspace test but before the flags are set,</div><div class="line">				 * IO signal will be lost.</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (sk_stream_is_writeable(sk))</div><div class="line">					mask |= POLLOUT | POLLWRNORM;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			mask |= POLLOUT | POLLWRNORM;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (tp-&gt;urg_data &amp; TCP_URG_VALID)</div><div class="line">			mask |= POLLPRI;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* This barrier is coupled with smp_wmb() in tcp_reset() */</span></div><div class="line">	smp_rmb();</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_err)</div><div class="line">		mask |= POLLERR;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>收集信号状态以mask方式返回</li>
<li>调用sock_poll_wait然后poll_wait最终调用_qproc也就是__pollwait</li>
<li>__pollwait</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Add a new entry */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __pollwait(struct file *filp, <span class="keyword">wait_queue_head_t</span> *wait_address,</div><div class="line">				poll_table *p)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> *<span class="title">pwq</span> = <span class="title">container_of</span>(<span class="title">p</span>, <span class="title">struct</span> <span class="title">poll_wqueues</span>, <span class="title">pt</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> *<span class="title">entry</span> = <span class="title">poll_get_entry</span>(<span class="title">pwq</span>);</span></div><div class="line">	<span class="keyword">if</span> (!entry)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	entry-&gt;filp = get_file(filp);</div><div class="line">	entry-&gt;wait_address = wait_address;</div><div class="line">	entry-&gt;key = p-&gt;_key;</div><div class="line">	init_waitqueue_func_entry(&amp;entry-&gt;wait, pollwake);</div><div class="line">	entry-&gt;wait.<span class="keyword">private</span> = pwq;</div><div class="line">	add_wait_queue(wait_address, &amp;entry-&gt;wait);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>为每个fd对应文件分配 poll_table_entry</li>
<li>将fd对应poll_table_entry加入到等待队列中</li>
</ul>
<p>步骤3:<br>    poll_schedule_timeout，作用是使进程进入睡眠，直到超时或者被唤醒<br>    如果超时后进程继续执行设置pwq-&gt;triggered为0<br>    如果是被文件对应的驱动程序唤醒pwq-&gt;triggered为1</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll_schedule_timeout</span><span class="params">(struct poll_wqueues *pwq, <span class="keyword">int</span> state,</span></span></div><div class="line">			  <span class="keyword">ktime_t</span> *expires, <span class="keyword">unsigned</span> <span class="keyword">long</span> slack)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> rc = -EINTR;</div><div class="line"></div><div class="line">	set_current_state(state);</div><div class="line">	<span class="keyword">if</span> (!pwq-&gt;triggered)</div><div class="line">		rc = freezable_schedule_hrtimeout_range(expires, slack,</div><div class="line">							HRTIMER_MODE_ABS);</div><div class="line">	__set_current_state(TASK_RUNNING);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Prepare for the next iteration.</div><div class="line">	 *</div><div class="line">	 * The following set_mb() serves two purposes.  First, it's</div><div class="line">	 * the counterpart rmb of the wmb in pollwake() such that data</div><div class="line">	 * written before wake up is always visible after wake up.</div><div class="line">	 * Second, the full barrier guarantees that triggered clearing</div><div class="line">	 * doesn't pass event check of the next iteration.  Note that</div><div class="line">	 * this problem doesn't exist for the first iteration as</div><div class="line">	 * add_wait_queue() has full barrier semantics.</div><div class="line">	 */</div><div class="line">	set_mb(pwq-&gt;triggered, <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> rc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="select唤醒过程"><a href="#select唤醒过程" class="headerlink" title="select唤醒过程"></a>select唤醒过程</h3><p> 0xffffffff81213130 : pollwake+0x0/0x90 [kernel]<br> 0xffffffff810ba628 : <strong>wake_up_common+0x58/0x90 [kernel]<br> 0xffffffff810bc4a4 : </strong>wake_up_sync_key+0x44/0x60 [kernel]<br> 0xffffffff8155825a : sock_def_readable+0x3a/0x70 [kernel]<br> 0xffffffff815c8197 : tcp_data_queue+0x497/0xdd0 [kernel]<br> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]<br> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]<br> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]<br> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]<br> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]<br> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]<br> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]<br> 0xffffffff815700d2 : <strong>netif_receive_skb_core+0x582/0x800 [kernel]<br> 0xffffffff81570368 : </strong>netif_receive_skb+0x18/0x60 [kernel]<br> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]<br> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]<br> 0xffffffffa00472fc [e1000]</p>
<p> pollwake -&gt;__pollwake-&gt;default_wake_function-&gt;try_to_wake_up</p>
<p> try_to_wake_up会把进程的状态设置为TASK_RUNNING，并把进程插入CPU运行队列，来唤醒睡眠的进程</p>
<h2 id="linux-select-1024限制魔咒"><a href="#linux-select-1024限制魔咒" class="headerlink" title="linux select 1024限制魔咒"></a>linux select 1024限制魔咒</h2><p>__FD_SETSIZE 默认最大为1024，一个int占用4个byte，也就是32个bit，所以使用了一个int数组大小为32位来表示了我们要操作的fd的数值，每个bit代表了一个handle数值</p>
<p>需要注意的问题是，这里的最大为1024，如果handle数值为1025是不能处理的（而且很容易导致破坏堆栈），不是说可以容纳1024个网络客户端句柄，而是最大的handle数值为1024，再算上系统本身使用的stdout,stdin, stderr默认的3个，因此最多也就是1021个，再算上程序打开的文件句柄等等，实际上使用可能要比1024少上好多。</p>
<p>另外，ulimit对每个进程打开的句柄也有限制。</p>
<h3 id="why-1024"><a href="#why-1024" class="headerlink" title="why 1024 ?"></a>why 1024 ?</h3><p>内核参数适用结构体是fd_set</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE5(select, <span class="keyword">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</div><div class="line">		fd_set __user *, <span class="built_in">exp</span>, struct timeval __user *, tvp)</div><div class="line">&#123;</div></pre></td></tr></table></figure>
<p>fd_set是 __kernel_fd_set</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> __kernel_fd_set		fd_set;</div></pre></td></tr></table></figure>
<p>__kernel_fd_set 中fds_bits 最大只能1024 </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __FD_SETSIZE	1024</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> fds_bits[__FD_SETSIZE / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">long</span>))];</div><div class="line">&#125; __kernel_fd_set;</div></pre></td></tr></table></figure>
<h3 id="我该怎么办才能突破1024限制？"><a href="#我该怎么办才能突破1024限制？" class="headerlink" title="我该怎么办才能突破1024限制？"></a>我该怎么办才能突破1024限制？</h3><p>修改掉此宏重新编译吧，当然还有其他办法，但是没必要这么复杂，直接用pool或者epool解决吧<br>当然你也可以多进程或者多线程，每个进程／线程 分别select</p>
<h2 id="select缺点总结"><a href="#select缺点总结" class="headerlink" title="select缺点总结"></a>select缺点总结</h2><blockquote>
<p>select效率低下，用户空间和内核空间来回拷贝，select内部吧存进程上下文切换，大型项目不适用<br>可同时监听的文件数量有限，linux平台1024个<br>每次调用select都要遍历完成所有的fd，每隔32fd需要调度一次<br>多个fd情况下，如果小的fs一直可读，会导致大的fd信号不会被收集到<br>需要在用户态和内核态来回拷贝fd_set，睡眠唤醒机制需要为fd分配poll_table_entry</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nfds, fd_set *readfds, fd_set *writefds,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           fd_set *exceptfds, struct timeval *timeout);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_CLR&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;FD_ISSET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_SET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_ZERO&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;nfds 是最大文件描述符号 +1   怎么可能这么简单，它限制的是最大值而不是个数&lt;/li&gt;
&lt;li&gt;readfds 用来记录可读fd集合&lt;/li&gt;
&lt;li&gt;writefds 用来记录可写fd集合&lt;/li&gt;
&lt;li&gt;exceptfds 用来检查带外数据&lt;/li&gt;
&lt;li&gt;timeout 决定select等待I/O时间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1.timeout该值为NULL，会阻塞一定等到监控的文件描述符集合中产生状态变化（可读，可写等）&lt;br&gt;2.timeout值为0分0毫秒，非阻塞，不关注文件描述符是否变化立刻返回&lt;br&gt;3.timeout正常值，timeout这段时间内阻塞，如果监控集合中有信号来临，select将返回，否则超时返回&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="select" scheme="http://vcpu.me/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>TIME_WAIT状态分析</title>
    <link href="http://vcpu.me/TIME_WAIT%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90/"/>
    <id>http://vcpu.me/TIME_WAIT状态分析/</id>
    <published>2017-06-23T03:16:59.000Z</published>
    <updated>2017-06-23T03:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIME-WAIT状态分析"><a href="#TIME-WAIT状态分析" class="headerlink" title="TIME_WAIT状态分析"></a>TIME_WAIT状态分析</h1><p>之所以起这样一个题目是因为很久以前我曾经写过一篇介绍TIME_WAIT的文章，不过当时基本属于浅尝辄止，并没深入说明问题的来龙去脉，碰巧这段时间反复被别人问到相关的问题，让我觉得有必要全面总结一下，以备不时之需。</p>
<p>讨论前大家可以拿手头的服务器摸摸底，记住「ss」比「netstat」快：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ss -ant | awk 'NR&gt;1 &#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;</div></pre></td></tr></table></figure></p>
<p>更简单方法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/net/sockstat</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我猜你一定被巨大无比的TIME_WAIT网络连接总数吓到了！以我个人的经验，对于一台繁忙的Web服务器来说，如果主要以短连接为主，那么其TIME_WAIT网络连接总数很可能会达到几万，甚至十几万。虽然一个TIME_WAIT网络连接耗费的资源无非就是一个端口、一点内存，但是架不住基数大，所以这始终是一个需要面对的问题。</p>
<h2 id="TIMEWAIT是什么"><a href="#TIMEWAIT是什么" class="headerlink" title="TIMEWAIT是什么"></a>TIMEWAIT是什么</h2><p>因为TCP连接是双向的，所以在关闭连接的时候，两个方向各自都需要关闭。先发FIN包的一方执行的是主动关闭；后发FIN包的一方执行的是被动关闭。主动关闭的一方会进入TIME_WAIT状态，并且在此状态停留两倍的MSL时长。<br>穿插一点MSL的知识：MSL指的是报文段的最大生存时间，如果报文段在网络活动了MSL时间，还没有被接收，那么会被丢弃。关于MSL的大小，RFC 793协议中给出的建议是两分钟，不过实际上不同的操作系统可能有不同的设置，以Linux为例，通常是半分钟，两倍的MSL就是一分钟，也就是60秒，并且这个数值是硬编码在内核中的，也就是说除非你重新编译内核，否则没法修改它：</p>
<pre><code>#define TCP_TIMEWAIT_LEN (60*HZ)
</code></pre><p>如果每秒的连接数是一千的话，那么一分钟就可能会产生六万个TIME_WAIT。<br>为什么主动关闭的一方不直接进入CLOSED状态，而是进入TIME_WAIT状态，并且停留两倍的MSL时长呢？这是因为TCP是建立在不可靠网络上的可靠的协议。例子：主动关闭的一方收到被动关闭的一方发出的FIN包后，回应ACK包，同时进入TIME_WAIT状态，但是因为网络原因，主动关闭的一方发送的这个ACK包很可能延迟，从而触发被动连接一方重传FIN包。极端情况下，这一去一回，就是两倍的MSL时长。如果主动关闭的一方跳过TIME_WAIT直接进入CLOSED，或者在TIME_WAIT停留的时长不足两倍的MSL，那么当被动关闭的一方早先发出的延迟包到达后，就可能出现类似下面的问题：<br>    ▪    旧的TCP连接已经不存在了，系统此时只能返回RST包<br>    ▪    新的TCP连接被建立起来了，延迟包可能干扰新的连接<br>不管是哪种情况都会让TCP不再可靠，所以TIME_WAIT状态有存在的必要性。</p>
<h2 id="如何控制TIME-WAIT的数量？"><a href="#如何控制TIME-WAIT的数量？" class="headerlink" title="如何控制TIME_WAIT的数量？"></a>如何控制TIME_WAIT的数量？</h2><p>从前面的描述我们可以得出这样的结论：TIME_WAIT这东西没有的话不行，不过太多可能也是个麻烦事。下面让我们看看有哪些方法可以控制TIME_WAIT数量，这里只说一些常规方法，另外一些诸如SO_LINGER之类的方法太过偏门，略过不谈。<br>ip_conntrack：顾名思义就是跟踪连接。一旦激活了此模块，就能在系统参数里发现很多用来控制网络连接状态超时的设置，其中自然也包括TIME_WAIT：<br>shell&gt; modprobe ip_conntrack<br>shell&gt; sysctl net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait<br>我们可以尝试缩小它的设置，比如十秒，甚至一秒，具体设置成多少合适取决于网络情况而定，当然也可以参考相关的案例。不过就我的个人意见来说，ip_conntrack引入的问题比解决的还多，比如性能会大幅下降，所以不建议使用。</p>
<h3 id="tcp-tw-recycle："><a href="#tcp-tw-recycle：" class="headerlink" title="tcp_tw_recycle："></a>tcp_tw_recycle：</h3><p>顾名思义就是回收TIME_WAIT连接。可以说这个内核参数已经变成了大众处理TIME_WAIT的万金油，如果你在网络上搜索TIME_WAIT的解决方案，十有八九会推荐设置它，不过这里隐藏着一个不易察觉的陷阱：<br>当多个客户端通过NAT方式联网并与服务端交互时，服务端看到的是同一个IP，也就是说对服务端而言这些客户端实际上等同于一个，可惜由于这些客户端的时间戳可能存在差异，于是乎从服务端的视角看，便可能出现时间戳错乱的现象，进而直接导致时间戳小的数据包被丢弃。（tcp_tw_recycle和tcp_timestamps导致connect失败问题。同时开启情况下，60s内同一源ip主机socket 请求中timestamp必须是递增的）</p>
<h3 id="tcp-tw-reuse："><a href="#tcp-tw-reuse：" class="headerlink" title="tcp_tw_reuse："></a>tcp_tw_reuse：</h3><p>顾名思义就是复用TIME_WAIT连接。当创建新连接的时候，如果可能的话会考虑复用相应的TIME_WAIT连接。通常认为「tcp_tw_reuse」比「tcp_tw_recycle」安全一些，这是因为一来TIME_WAIT创建时间必须超过一秒才可能会被复用；二来只有连接的时间戳是递增的时候才会被复用。官方文档里是这样说的：如果从协议视角看它是安全的，那么就可以使用。这简直就是外交辞令啊！按我的看法，如果网络比较稳定，比如都是内网连接，那么就可以尝试使用。<br>不过需要注意的是在哪里使用，既然我们要复用连接，那么当然应该在连接的发起方使用，而不能在被连接方使用。举例来说：客户端向服务端发起HTTP请求，服务端响应后主动关闭连接，于是TIME_WAIT便留在了服务端，此类情况使用「tcp_tw_reuse」是无效的，因为服务端是被连接方，所以不存在复用连接一说。让我们延伸一点来看，比如说服务端是PHP，它查询另一个MySQL服务端，然后主动断开连接，于是TIME_WAIT就落在了PHP一侧，此类情况下使用「tcp_tw_reuse」是有效的，因为此时PHP相对于MySQL而言是客户端，它是连接的发起方，所以可以复用连接。<br>说明：如果使用tcp_tw_reuse，请激活tcp_timestamps，否则无效。</p>
<h3 id="tcp-max-tw-buckets："><a href="#tcp-max-tw-buckets：" class="headerlink" title="tcp_max_tw_buckets："></a>tcp_max_tw_buckets：</h3><p>顾名思义就是控制TIME_WAIT总数。官网文档说这个选项只是为了阻止一些简单的DoS攻击，平常不要人为的降低它。如果缩小了它，那么系统会将多余的TIME_WAIT删除掉，日志里会显示：「TCP: time wait bucket table overflow」。<br>需要提醒大家的是物极必反，曾经看到有人把「tcp_max_tw_buckets」设置成0，也就是说完全抛弃TIME_WAIT，这就有些冒险了，用一句围棋谚语来说：入界宜缓。<br>…<br>有时候，如果我们换个角度去看问题，往往能得到四两拨千斤的效果。前面提到的例子：客户端向服务端发起HTTP请求，服务端响应后主动关闭连接，于是TIME_WAIT便留在了服务端。这里的关键在于主动关闭连接的是服务端！在关闭TCP连接的时候，先出手的一方注定逃不开TIME_WAIT的宿命，套用一句歌词：把我的悲伤留给自己，你的美丽让你带走。如果客户端可控的话，那么在服务端打开KeepAlive，尽可能不让服务端主动关闭连接，而让客户端主动关闭连接，如此一来问题便迎刃而解了。</p>
<p>原文连接于<a href="https://huoding.com/2013/12/31/316" target="_blank" rel="external">https://huoding.com/2013/12/31/316</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TIME-WAIT状态分析&quot;&gt;&lt;a href=&quot;#TIME-WAIT状态分析&quot; class=&quot;headerlink&quot; title=&quot;TIME_WAIT状态分析&quot;&gt;&lt;/a&gt;TIME_WAIT状态分析&lt;/h1&gt;&lt;p&gt;之所以起这样一个题目是因为很久以前我曾经写过一篇介绍TIME_WAIT的文章，不过当时基本属于浅尝辄止，并没深入说明问题的来龙去脉，碰巧这段时间反复被别人问到相关的问题，让我觉得有必要全面总结一下，以备不时之需。&lt;/p&gt;
&lt;p&gt;讨论前大家可以拿手头的服务器摸摸底，记住「ss」比「netstat」快：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ss -ant | awk &#39;NR&amp;gt;1 &amp;#123;++s[$1]&amp;#125; END &amp;#123;for(k in s) print k,s[k]&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更简单方法：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cat /proc/net/sockstat&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="TCP" scheme="http://vcpu.me/categories/TCP/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统调用</title>
    <link href="http://vcpu.me/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>http://vcpu.me/Linux系统调用/</id>
    <published>2017-06-22T10:10:14.000Z</published>
    <updated>2017-06-22T10:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么事系统调用"><a href="#什么事系统调用" class="headerlink" title="什么事系统调用"></a>什么事系统调用</h2><ul>
<li>linux虚拟地址空间分为用户空间和内核空间</li>
<li>用户空间不可直接访问内核空间，帝王班的内核空间可直接访问用户空间</li>
<li>用户空间只能通过系统调用访问内核空间</li>
<li>系统调用时内核提供的一组函数接口，使得用户空间上进程可以和内核空间交互</li>
</ul>
<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><ul>
<li>执行用户程序</li>
<li>根据glibc中实现，取得系统调用号，将其存入EAX并执行int $0x80（128号中断）</li>
<li>用户态可以传递变量、参数值给内核，内核态运行时候会保存用户进程的一些寄存器值等（上下文环境）</li>
<li>触发中断后内核根据系统调用号执行对应的中断处理函数 </li>
<li>系统调用结束将访问址存入EAX，返回中断处理函数</li>
<li>中断处理函数根据存储用户态进程上下文环境恢复用户态，同时用户态就获取了内核态函数执行的返回值</li>
</ul>
<h2 id="系统调用汇编"><a href="#系统调用汇编" class="headerlink" title="系统调用汇编"></a>系统调用汇编</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// pid = fork();</div><div class="line">asm volatile(</div><div class="line">    &quot;mov $0x2, %%eax\n\t&quot; // 将fork的系统调用号2存到eax寄存器  </div><div class="line">    &quot;int $0x80\n\t&quot;       // 产生int 0x80中断</div><div class="line">    &quot;mov %%eax,%0\n\t&quot;    // 将结果存入pid中</div><div class="line">    : &quot;=m&quot; (pid)</div></pre></td></tr></table></figure>
<h2 id="系统调用实现分析"><a href="#系统调用实现分析" class="headerlink" title="系统调用实现分析"></a>系统调用实现分析</h2><p>待续</p>
<h2 id="添加系统调用"><a href="#添加系统调用" class="headerlink" title="添加系统调用"></a>添加系统调用</h2><p>待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么事系统调用&quot;&gt;&lt;a href=&quot;#什么事系统调用&quot; class=&quot;headerlink&quot; title=&quot;什么事系统调用&quot;&gt;&lt;/a&gt;什么事系统调用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;linux虚拟地址空间分为用户空间和内核空间&lt;/li&gt;
&lt;li&gt;用户空间不可直接访问内核
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="系统调用" scheme="http://vcpu.me/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>tcp socket发送缓冲区</title>
    <link href="http://vcpu.me/tcp_sndbuf/"/>
    <id>http://vcpu.me/tcp_sndbuf/</id>
    <published>2017-06-20T10:31:48.000Z</published>
    <updated>2017-06-20T10:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcp-socket发送缓冲区探究结论"><a href="#tcp-socket发送缓冲区探究结论" class="headerlink" title="tcp socket发送缓冲区探究结论"></a>tcp socket发送缓冲区探究结论</h2><blockquote>
<p>1: 未设置SO_SNDBUF时，sk-&gt;sk_sndbuf值由tcp_finish_connect-&gt;tcp_init_buffer_space-&gt;tcp_sndbuf_expand决定，TCP协议栈会自己计算一个值出来46080，sk_sndbuf是46080和net.ipv4.tcp_wmem[2]（4194304）的较小值</p>
<p>2: 设置SO_SNDBUF后，tcp_sndbuf_expand将不会再被调用，其值情况完全由sock_setsockopt决定</p>
<blockquote>
<p>2-1: 设置值较小 value &lt;  2304 { SOCK_MIN_SNDBUF（4608）/2 }</p>
<blockquote>
<p>sk_sndbuf = 4608</p>
</blockquote>
<p>2-2: 设置值适中 { SOCK_MIN_SNDBUF（4608）/2 }  &lt;  value  &lt;  net.core.wmem_max</p>
<blockquote>
<p>sk_sndbuf = value*2</p>
</blockquote>
<p>2-3: 设置值较大 value &gt; net.core.wmem_max</p>
<blockquote>
<p>sk_sndbuf = net.core.wmem_max* 2</p>
</blockquote>
</blockquote>
</blockquote>
<a id="more"></a>
<h2 id="默认情况下（未设置SO-SNDBUF）"><a href="#默认情况下（未设置SO-SNDBUF）" class="headerlink" title="默认情况下（未设置SO_SNDBUF）"></a>默认情况下（未设置SO_SNDBUF）</h2><p>net.core.wmem_default = 212992<br>net.core.wmem_max = 212992<br>net.ipv4.tcp_wmem = 4096    16384 4194304</p>
<ul>
<li>TCPsocket未connect之前 sendbuf:16384 sk-&gt;sk_sndbuf是sysctl_tcp_wmem[1]的值</li>
<li>connect之后，sendbuf:46080</li>
</ul>
<p>通过调试机制可知，sendbuf默认大小为sysctl_tcp_wmem[1] 为16384<br>connect连接连接到服务端后，sendbuf变为46080，该值不是尚书配置中任何一个值</p>
<h3 id="原因探究"><a href="#原因探究" class="headerlink" title="原因探究"></a>原因探究</h3><p>阶段1:tcp_init_sock初始化，sk-&gt;sk_sndbuf = sysctl_tcp_wmem[1]</p>
<p>阶段2:主动连接进入ES状态时候，状态切换时候调用tcp_sndbuf_expand调整sk_sndbuf</p>
<p>stp脚本探测结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">tcp_v4_connect[2017/6/20,10:57:56]local=0.0.0.0:3000,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:16384</div><div class="line">tcp_v4_connect return [2017/6/20,10:57:56]local=192.168.55.178:3000,remote=180.97.33.108:80 state:SYN_SENT,sndbubf 1280:16384</div><div class="line">tcp_input:302 return [2017/6/20,10:57:56]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:16384 sndmem : 46080 permss 2304</div><div class="line"> 0xffffffff815c3527 : tcp_sndbuf_expand+0x67/0x90 [kernel]</div><div class="line"> 0xffffffff815c7ba8 : tcp_init_buffer_space+0x178/0x190 [kernel]</div><div class="line"> 0xffffffff815cbbae : tcp_finish_connect+0x6e/0x120 [kernel]</div><div class="line"> 0xffffffff815cc297 : tcp_rcv_state_process+0x637/0xf20 [kernel]</div><div class="line"> 0xffffffff815d5ffb : tcp_v4_do_rcv+0x17b/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00472fc [e1000]</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tcp_sndbuf_expand</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="keyword">int</span> sndmem, per_mss;</div><div class="line">	u32 nr_segs;</div><div class="line"></div><div class="line">	<span class="comment">/* Worst case is non GSO/TSO : each frame consumes one skb</span></div><div class="line">	 * and skb-&gt;head is kmalloced using power of two area of memory</div><div class="line">	 */</div><div class="line">	per_mss = <span class="keyword">max_t</span>(u32, tp-&gt;rx_opt.mss_clamp, tp-&gt;mss_cache) +</div><div class="line">		  MAX_TCP_HEADER +</div><div class="line">		  SKB_DATA_ALIGN(<span class="keyword">sizeof</span>(struct skb_shared_info));</div><div class="line"></div><div class="line">	per_mss = roundup_pow_of_two(per_mss) +</div><div class="line">		  SKB_DATA_ALIGN(<span class="keyword">sizeof</span>(struct sk_buff));</div><div class="line"></div><div class="line">	nr_segs = <span class="keyword">max_t</span>(u32, TCP_INIT_CWND, tp-&gt;snd_cwnd);</div><div class="line">	nr_segs = <span class="keyword">max_t</span>(u32, nr_segs, tp-&gt;reordering + <span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* Fast Recovery (RFC 5681 3.2) :</span></div><div class="line">	 * Cubic needs 1.7 factor, rounded to 2 to include</div><div class="line">	 * extra cushion (application might react slowly to POLLOUT)</div><div class="line">	 */</div><div class="line">	sndmem = <span class="number">2</span> * nr_segs * per_mss;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_sndbuf &lt; sndmem)</div><div class="line">		sk-&gt;sk_sndbuf = min(sndmem, sysctl_tcp_wmem[<span class="number">2</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置发送缓冲区大小为较小值"><a href="#设置发送缓冲区大小为较小值" class="headerlink" title="设置发送缓冲区大小为较小值"></a>设置发送缓冲区大小为较小值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">0</span>;</div><div class="line"><span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(sendbuflen);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"default,sendbuf:%d\n"</span>, sendbuflen);</div><div class="line"></div><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">100</span>;</div><div class="line">setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, len);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"now,sendbuf:%d\n"</span>, sendbuflen);</div></pre></td></tr></table></figure>
<p>输出信息如下：<br>default,sendbuf:16384<br>now,sendbuf:4608</p>
<p>输出信息总结：设置sendbubf为100时，没有生效，反而设置出来一个较大的值4608</p>
<h3 id="原因探究-1"><a href="#原因探究-1" class="headerlink" title="原因探究"></a>原因探究</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *	This is meant for all protocols to use and covers goings on</div><div class="line"> *	at the socket level. Everything here is generic.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_setsockopt</span><span class="params">(struct socket *sock, <span class="keyword">int</span> level, <span class="keyword">int</span> optname,</span></span></div><div class="line">		    <span class="keyword">char</span> __user *optval, <span class="keyword">unsigned</span> <span class="keyword">int</span> optlen)</div><div class="line">&#123;</div><div class="line">	···</div><div class="line">	<span class="keyword">case</span> SO_SNDBUF:</div><div class="line">		<span class="comment">/* Don't error on this BSD doesn't and if you think</span></div><div class="line">		 * about it this is right. Otherwise apps have to</div><div class="line">		 * play 'guess the biggest size' games. RCVBUF/SNDBUF</div><div class="line">		 * are treated in BSD as hints</div><div class="line">		 */</div><div class="line">		val = <span class="keyword">min_t</span>(u32, val, sysctl_wmem_max);</div><div class="line">set_sndbuf:</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_SNDBUF_LOCK;</div><div class="line">		sk-&gt;sk_sndbuf = <span class="keyword">max_t</span>(<span class="keyword">int</span>, val * <span class="number">2</span>, SOCK_MIN_SNDBUF);</div><div class="line">		<span class="comment">/* Wake up sending tasks if we upped the value. */</span></div><div class="line">		sk-&gt;sk_write_space(sk);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		···</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		ret = -ENOPROTOOPT;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TCP_SKB_MIN_TRUESIZE	(2048 + SKB_DATA_ALIGN(sizeof(struct sk_buff)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SOCK_MIN_SNDBUF		(TCP_SKB_MIN_TRUESIZE * 2)</span></div></pre></td></tr></table></figure>
<p>设置socket选项SO_SNDBUF会触发系统调用最终调用sock_setsockopt函数，其处理设置选项过程如上：<br>其会将用户设置的缓冲区大小乘以2，然后和SOCK_MIN_SNDBUF（4608）比较，取较大值<br>因此最终较小的缓冲区设置值200没有生效，生效的是4608</p>
<h2 id="设置发送缓冲区大小为中间值"><a href="#设置发送缓冲区大小为中间值" class="headerlink" title="设置发送缓冲区大小为中间值"></a>设置发送缓冲区大小为中间值</h2><p>缓冲区系统设置值大小：<br>net.core.wmem_max = 212992<br>net.ipv4.tcp_wmem = 4096    16384 4194304</p>
<p>实验动作将缓冲区大小设置为3000<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">0</span>;</div><div class="line"><span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(sendbuflen);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"default,sendbuf:%d\n"</span>, sendbuflen);</div><div class="line"></div><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">3000</span>;</div><div class="line">setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, len);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"now,sendbuf:%d\n"</span>, sendbuflen);</div></pre></td></tr></table></figure></p>
<p>实验程序输出：<br>default,sendbuf:16384<br>now,sendbuf:6000<br>输出信息总结：设置大小3000生效，sndbuf大小会被设置成为3000*2</p>
<h2 id="设置发送缓冲区大小威较大值"><a href="#设置发送缓冲区大小威较大值" class="headerlink" title="设置发送缓冲区大小威较大值"></a>设置发送缓冲区大小威较大值</h2><p>缓冲区系统设置值大小：<br>net.core.wmem_max = 212992<br>net.ipv4.tcp_wmem = 4096    16384 4194304</p>
<p>实验动作将缓冲区大小设置为230000<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">0</span>;</div><div class="line"><span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(sendbuflen);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"default,sendbuf:%d\n"</span>, sendbuflen);</div><div class="line"></div><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">230000</span>;</div><div class="line">setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, len);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"now,sendbuf:%d\n"</span>, sendbuflen);</div></pre></td></tr></table></figure></p>
<p>实现程序输出：<br>default,sendbuf:16384<br>now,sendbuf:425984<br>实验结果分析：设置大小23000（大于系统212992），sendbuf最终结果为212992*2 </p>
<h3 id="原因探究-2"><a href="#原因探究-2" class="headerlink" title="原因探究"></a>原因探究</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> SO_SNDBUF:</div><div class="line">		val = <span class="keyword">min_t</span>(u32, val, sysctl_wmem_max);</div><div class="line">set_sndbuf:</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_SNDBUF_LOCK;</div><div class="line">		sk-&gt;sk_sndbuf = <span class="keyword">max_t</span>(<span class="keyword">int</span>, val * <span class="number">2</span>, SOCK_MIN_SNDBUF);</div><div class="line">		<span class="comment">/* Wake up sending tasks if we upped the value. */</span></div><div class="line">		sk-&gt;sk_write_space(sk);</div><div class="line">		<span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>val为用户set的值，其在选择时候会同sysctl_wmem_max比较，选取一个较小的值，如果设置值大于sysctl_wmem_max值的话，val就取系统wmem的最大值。</p>
<p>如上可知：230000 &gt; net.core.wmem_max ,所以用户设置SO_SNDBUF选项最大只能取net.core.wmem_max，所以最终sk_sndbubf值为net.core.wmem_max*2 即425984</p>
<h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h2><p>tcp socket记录当前发送队列的占用缓冲区大小的变量为sk_wmem_queued<br>和发送缓冲区判断函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">sk_stream_memory_free</span><span class="params">(<span class="keyword">const</span> struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_wmem_queued &gt;= sk-&gt;sk_sndbuf)</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sk-&gt;sk_prot-&gt;stream_memory_free ?</div><div class="line">		sk-&gt;sk_prot-&gt;stream_memory_free(sk) : <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上述判别中我们可以知道，发送缓冲区记录和比对单位均是字节</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tcp-socket发送缓冲区探究结论&quot;&gt;&lt;a href=&quot;#tcp-socket发送缓冲区探究结论&quot; class=&quot;headerlink&quot; title=&quot;tcp socket发送缓冲区探究结论&quot;&gt;&lt;/a&gt;tcp socket发送缓冲区探究结论&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1: 未设置SO_SNDBUF时，sk-&amp;gt;sk_sndbuf值由tcp_finish_connect-&amp;gt;tcp_init_buffer_space-&amp;gt;tcp_sndbuf_expand决定，TCP协议栈会自己计算一个值出来46080，sk_sndbuf是46080和net.ipv4.tcp_wmem[2]（4194304）的较小值&lt;/p&gt;
&lt;p&gt;2: 设置SO_SNDBUF后，tcp_sndbuf_expand将不会再被调用，其值情况完全由sock_setsockopt决定&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2-1: 设置值较小 value &amp;lt;  2304 { SOCK_MIN_SNDBUF（4608）/2 }&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sk_sndbuf = 4608&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2-2: 设置值适中 { SOCK_MIN_SNDBUF（4608）/2 }  &amp;lt;  value  &amp;lt;  net.core.wmem_max&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sk_sndbuf = value*2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2-3: 设置值较大 value &amp;gt; net.core.wmem_max&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sk_sndbuf = net.core.wmem_max* 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>PF_INET和AF_INET区别</title>
    <link href="http://vcpu.me/pf_inet/"/>
    <id>http://vcpu.me/pf_inet/</id>
    <published>2017-06-20T10:12:51.000Z</published>
    <updated>2017-06-20T10:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PF-INET和AF-INET区别"><a href="#PF-INET和AF-INET区别" class="headerlink" title="PF_INET和AF_INET区别"></a>PF_INET和AF_INET区别</h1><ul>
<li>在初始化socket时候socket(PF_INET,SOCK_SRTEAM,0) 用PF_INET，表示ip协议</li>
<li>指定地址协议族时候用AF_INET，表示地址为IP协议</li>
<li>Linux AF_INET和PF_INET值相同均为2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">socket.h</div><div class="line"></div><div class="line">#define AF_INET		2	/* Internet IP Protocol *</div><div class="line"></div><div class="line">...</div><div class="line">#define PF_INET		AF_INET</div></pre></td></tr></table></figure>
<h1 id="socket通信协议类型"><a href="#socket通信协议类型" class="headerlink" title="socket通信协议类型"></a>socket通信协议类型</h1><ul>
<li>SOCKET_STREAM: 面向连接TCP</li>
<li>SOCK_DGRAM: 无保障UDP</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PF-INET和AF-INET区别&quot;&gt;&lt;a href=&quot;#PF-INET和AF-INET区别&quot; class=&quot;headerlink&quot; title=&quot;PF_INET和AF_INET区别&quot;&gt;&lt;/a&gt;PF_INET和AF_INET区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在初始化
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="PF_INET" scheme="http://vcpu.me/tags/PF-INET/"/>
    
      <category term="AF_INET" scheme="http://vcpu.me/tags/AF-INET/"/>
    
  </entry>
  
  <entry>
    <title>sockaddr_in和sockaddr的区别</title>
    <link href="http://vcpu.me/sockaddr_in/"/>
    <id>http://vcpu.me/sockaddr_in/</id>
    <published>2017-06-20T07:18:11.000Z</published>
    <updated>2017-06-20T07:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sockaddr-in在头文件-usr-include-netinet-in-h"><a href="#sockaddr-in在头文件-usr-include-netinet-in-h" class="headerlink" title="sockaddr_in在头文件/usr/include/netinet/in.h"></a>sockaddr_in在头文件/usr/include/netinet/in.h</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/* Structure describing an Internet socket address.  */</div><div class="line">struct sockaddr_in</div><div class="line">  &#123;</div><div class="line">    __SOCKADDR_COMMON (sin_);</div><div class="line">    in_port_t sin_port;			/* Port number.  */</div><div class="line">    struct in_addr sin_addr;		/* Internet address.  */</div><div class="line"></div><div class="line">    /* Pad to size of `struct sockaddr&apos;.  */</div><div class="line">    unsigned char sin_zero[sizeof (struct sockaddr) -</div><div class="line">			   __SOCKADDR_COMMON_SIZE -</div><div class="line">			   sizeof (in_port_t) -</div><div class="line">			   sizeof (struct in_addr)];</div><div class="line">  &#125;;</div><div class="line">  or</div><div class="line">  struct  sockaddr_in &#123;</div><div class="line">	short  int  sin_family;                 /* Address family */</div><div class="line">	unsigned  short  int  sin_port;         /* Port number */</div><div class="line">	struct  in_addr  sin_addr;              /* Internet address */</div><div class="line">	unsigned  char  sin_zero[8];            /* Same size as struct sockaddr */</div><div class="line">&#125;;</div><div class="line">  </div><div class="line">   </div><div class="line"> struct   in_addr   &#123;</div><div class="line"> 		union &#123;</div><div class="line">          	struct &#123; u_char s_b1,s_b2,s_b3,s_b4; &#125; S_un_b;</div><div class="line">          	struct &#123; u_short s_w1,s_w2; &#125; S_un_w;</div><div class="line">          	u_long S_addr; </div><div class="line">          	&#125; S_un;</div><div class="line">          	 #define s_addr  S_un.S_addr</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<ul>
<li>组成包含协议家族、端口、地址、填充</li>
<li>端口和地址，需要是网络字节序号</li>
<li>inet_addr(“127.0.0.1”)把字符串点分十进制地址按照网络字节序转换为4字节的地址</li>
</ul>
<a id="more"></a>
<h2 id="sockaddr为通用的socket地址"><a href="#sockaddr为通用的socket地址" class="headerlink" title="sockaddr为通用的socket地址"></a>sockaddr为通用的socket地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct sockaddr &#123;    </div><div class="line">      unsigned short sa_family;  // address family, AF_INET    </div><div class="line">      char sa_data[14];          // 14 bytes of protocol address    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>bind、connect、recv、send等socket参数使用的就是这个结构体</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sockaddr-in在头文件-usr-include-netinet-in-h&quot;&gt;&lt;a href=&quot;#sockaddr-in在头文件-usr-include-netinet-in-h&quot; class=&quot;headerlink&quot; title=&quot;sockaddr_in在头文件/usr/include/netinet/in.h&quot;&gt;&lt;/a&gt;sockaddr_in在头文件/usr/include/netinet/in.h&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* Structure describing an Internet socket address.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct sockaddr_in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __SOCKADDR_COMMON (sin_);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    in_port_t sin_port;			/* Port number.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr sin_addr;		/* Internet address.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /* Pad to size of `struct sockaddr&amp;apos;.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char sin_zero[sizeof (struct sockaddr) -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   __SOCKADDR_COMMON_SIZE -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   sizeof (in_port_t) -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   sizeof (struct in_addr)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  or&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  struct  sockaddr_in &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	short  int  sin_family;                 /* Address family */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned  short  int  sin_port;         /* Port number */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	struct  in_addr  sin_addr;              /* Internet address */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned  char  sin_zero[8];            /* Same size as struct sockaddr */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; struct   in_addr   &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 		union &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	struct &amp;#123; u_char s_b1,s_b2,s_b3,s_b4; &amp;#125; S_un_b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	struct &amp;#123; u_short s_w1,s_w2; &amp;#125; S_un_w;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	u_long S_addr; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	&amp;#125; S_un;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	 #define s_addr  S_un.S_addr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;组成包含协议家族、端口、地址、填充&lt;/li&gt;
&lt;li&gt;端口和地址，需要是网络字节序号&lt;/li&gt;
&lt;li&gt;inet_addr(“127.0.0.1”)把字符串点分十进制地址按照网络字节序转换为4字节的地址&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="sockaddr_in" scheme="http://vcpu.me/tags/sockaddr-in/"/>
    
      <category term="sockaddr" scheme="http://vcpu.me/tags/sockaddr/"/>
    
  </entry>
  
  <entry>
    <title>systemtap使用调试记录（二）</title>
    <link href="http://vcpu.me/socket_stp/"/>
    <id>http://vcpu.me/socket_stp/</id>
    <published>2017-06-20T06:52:23.000Z</published>
    <updated>2017-06-20T06:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="socket-sendbubf探究stp脚本"><a href="#socket-sendbubf探究stp脚本" class="headerlink" title="socket sendbubf探究stp脚本"></a>socket sendbubf探究stp脚本</h2><ul>
<li>centos7 3.10.0-514.16.1.el7.x86_64</li>
</ul>
<p>该systap脚本是在调用协议栈sk-&gt;sk_sndbuf可能改变的位置增加探测点，探究snd_buf变更规律使用</p>
<a id="more"></a>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>socket.stp<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line">  <span class="comment">#include &lt;linux/tcp.h&gt;</span></div><div class="line">  <span class="comment">#include&lt;linux/rtc.h&gt;</span></div><div class="line">  <span class="comment">#include &lt;net/tcp.h&gt;</span></div><div class="line"></div><div class="line">    static const char tcp_state_array[][<span class="number">16</span>] = &#123;</div><div class="line">        <span class="string">"NULL"</span>,</div><div class="line">        <span class="string">"ESTABLISHED"</span>,</div><div class="line">        <span class="string">"SYN_SENT"</span>,</div><div class="line">        <span class="string">"SYN_RECV"</span>,</div><div class="line">        <span class="string">"FIN_WAIT1"</span>,</div><div class="line">        <span class="string">"FIN_WAIT2"</span>,</div><div class="line">        <span class="string">"TIME_WAIT"</span>,</div><div class="line">        <span class="string">"CLOSE"</span>,</div><div class="line">        <span class="string">"CLOSE_WAIT"</span>,</div><div class="line">        <span class="string">"LAST_ACK"</span>,</div><div class="line">        <span class="string">"LISTEN"</span>,</div><div class="line">        <span class="string">"CLOSING"</span></div><div class="line">    &#125;;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_short_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_full_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%d/%d/%d,%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_year+<span class="number">1900</span>, tm.tm_mon+<span class="number">1</span>, tm.tm_mday,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_lifetime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    STAP_RETVALUE = jiffies_to_msecs(tcp_time_stamp - info-&gt;estab_t);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_data:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct tcp_sock *tp = tcp_sk(sk);</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    u32 len = tp-&gt;snd_nxt - info-&gt;isn;</div><div class="line"></div><div class="line">    STAP_RETVALUE = len ? len - <span class="number">1</span> : len;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function filter_http_transtime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line"></div><div class="line">    STAP_RETVALUE = info-&gt;http_filter;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_addr:string (sk:long)</div><div class="line">&#123;</div><div class="line">    laddr = tcpmib_local_addr(sk)</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    raddr = tcpmib_remote_addr(sk)</div><div class="line">    rport = tcpmib_remote_port(sk)</div><div class="line"></div><div class="line">    local_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(laddr)), lport)</div><div class="line">    remote_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(raddr)), rport)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">sprintf</span>(<span class="string">"local=%s,remote=%s"</span>, local_addr, remote_addr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function get_socket_state:string (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[sk-&gt;sk_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_sk_sndbuf:string(sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk=(struct sock*)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE,<span class="string">"%d:%d"</span>, sk-&gt;sk_wmem_queued, sk-&gt;sk_sndbuf);</div><div class="line">%&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">function socket_state_num2str:string (<span class="keyword">state</span>:long)</div><div class="line">%&#123;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[STAP_ARG_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function sshfilter:long(sk:long)</div><div class="line">&#123;</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    <span class="keyword">if</span>(lport == <span class="number">22</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_send_ack"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_send_ack[%s]%s state:%s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_sendmsg"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_sendmsg[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_sendmsg"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_sendmsg return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/core/sock.c:711"</span>)&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sock:711 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/core/sock.c:715"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sock:715 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/ipv4/ip_output.c:1581"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"ip_output:1581 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/ipv4/ip_output.c:1583"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"ip_output:1583 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/ipv4/tcp_input.c:304"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_input:304 return [%s]%s state:%s,sndbubf %s sndmem : %d permss %d\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk),$sndmem,$per_mss);</div><div class="line">    print_backtrace()</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"__sk_mem_schedule"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"__sk_mem_schedule[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"__sk_mem_schedule"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"__sk_mem_schedule return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_page_frag_refill"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_page_frag_refill[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_page_frag_refill"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_page_frag_refill return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_stream_alloc_skb"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_stream_alloc_skb[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_stream_alloc_skb"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_stream_alloc_skb return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_v4_connect"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_v4_connect[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_v4_connect"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_v4_connect return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><p>stap -g socket.stp</p>
<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# stap -g socket.stp</div><div class="line">WARNING: Eliding unused function 'filter_http_transtime': identifier 'filter_http_transtime' at socket.stp:68:10</div><div class="line"> source: function filter_http_transtime:long (sk:long)</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'get_conn_data': identifier 'get_conn_data' at :58:10</div><div class="line"> source: function get_conn_data:long (sk:long)</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'get_conn_lifetime': identifier 'get_conn_lifetime' at :51:10</div><div class="line"> source: function get_conn_lifetime:long (sk:long)</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'get_short_time': identifier 'get_short_time' at :22:10</div><div class="line"> source: function get_short_time:string()</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'socket_state_num2str': identifier 'socket_state_num2str' at :104:10</div><div class="line"> source: function socket_state_num2str:string (state:long)</div><div class="line">                  ^</div><div class="line">sock:711 return [2017/6/20,14:42:35]local=0.0.0.0:0,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:16384</div><div class="line">sock:715 return [2017/6/20,14:42:35]local=0.0.0.0:0,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:32768</div><div class="line">tcp_v4_connect[2017/6/20,14:42:35]local=0.0.0.0:3000,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:32768</div><div class="line">tcp_v4_connect return [2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:SYN_SENT,sndbubf 1280:32768</div><div class="line">tcp_send_ack[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED</div><div class="line">tcp_sendmsg[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:32768</div><div class="line">sk_stream_alloc_skb[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:32768</div><div class="line">sk_stream_alloc_skb return [2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:32768</div><div class="line">tcp_sendmsg return [2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 2304:32768</div><div class="line">tcp_send_ack[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED</div><div class="line">tcp_send_ack[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED</div><div class="line">ip_output:1583 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1581 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1583 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1581 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1583 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1581 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;socket-sendbubf探究stp脚本&quot;&gt;&lt;a href=&quot;#socket-sendbubf探究stp脚本&quot; class=&quot;headerlink&quot; title=&quot;socket sendbubf探究stp脚本&quot;&gt;&lt;/a&gt;socket sendbubf探究stp脚本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;centos7 3.10.0-514.16.1.el7.x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该systap脚本是在调用协议栈sk-&amp;gt;sk_sndbuf可能改变的位置增加探测点，探究snd_buf变更规律使用&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
      <category term="systemtap" scheme="http://vcpu.me/tags/systemtap/"/>
    
  </entry>
  
  <entry>
    <title>socket send</title>
    <link href="http://vcpu.me/socketsend1/"/>
    <id>http://vcpu.me/socketsend1/</id>
    <published>2017-06-19T04:43:31.000Z</published>
    <updated>2017-06-19T04:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户态发送函数列表"><a href="#用户态发送函数列表" class="headerlink" title="用户态发送函数列表"></a>用户态发送函数列表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> send(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags);</div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,</div><div class="line">                            <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen);</div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> sendmsg(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct msghdr *msg, <span class="keyword">int</span> flags);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendmmsg</span><span class="params">(<span class="keyword">int</span> sockfd, struct mmsghdr *msgvec, <span class="keyword">unsigned</span> <span class="keyword">int</span> vlen,</span></span></div><div class="line">                                                            <span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</div><div class="line">                                                            </div><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="发送函数之间差别"><a href="#发送函数之间差别" class="headerlink" title="发送函数之间差别"></a>发送函数之间差别</h2><blockquote>
<p>send 有连接协议发送数据使用，send第四个参数flags为0时候，等价于write</p>
<blockquote>
<p>send(sockfd, buf, len, 0) 等价 write（sockfd, buf, len）</p>
</blockquote>
<p>send是sendto一部分,send可被sendto替换</p>
<blockquote>
<p>send(sockfd, buf, len, flags) 等价于  sendto(sockfd, buf, len, flags, NULL, 0)</p>
</blockquote>
<p>sendto 无连接和有连接发包都可以使用</p>
<p>sendmsg 可替换上树所有的发包函数</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> &#123;</span></div><div class="line">     <span class="keyword">void</span>         *msg_name;       <span class="comment">/* optional address */</span></div><div class="line">     <span class="keyword">socklen_t</span>     msg_namelen;    <span class="comment">/* size of address */</span></div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">msg_iov</span>;</span>        <span class="comment">/* scatter/gather array */</span></div><div class="line">     <span class="keyword">size_t</span>        msg_iovlen;     <span class="comment">/* # elements in msg_iov */</span></div><div class="line">     <span class="keyword">void</span>         *msg_control;    <span class="comment">/* ancillary data, see below */</span></div><div class="line">     <span class="keyword">size_t</span>        msg_controllen; <span class="comment">/* ancillary data buffer len */</span></div><div class="line">     <span class="keyword">int</span>           msg_flags;      <span class="comment">/* flags (unused) */</span></div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
</blockquote>
<p> /proc/sys/net/core/optmem_max可控制每个socket的msg_control大小<br> sendmsg不使用msg_flags参数</p>
</blockquote>
<h2 id="send发包过程概述"><a href="#send发包过程概述" class="headerlink" title="send发包过程概述"></a>send发包过程概述</h2><ul>
<li><p>阻塞模式下<br> 调用send函数时候，比较要发送数据和套接字发送缓冲区长度（net.ipv4.tcp_wmem）；如果发送缓冲区较小，函数直接返回SOCKET_ERR;</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> send_len &lt;= tcp_wmem&#123;</div><div class="line">	<span class="keyword">if</span> is sending&#123;</div><div class="line">		wait</div><div class="line">		<span class="keyword">if</span> network err</div><div class="line">			<span class="keyword">return</span> SCOKET_ERR</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">if</span> len &gt; tcp_wmem left&#123;</div><div class="line">			wait</div><div class="line">			<span class="keyword">if</span> network err</div><div class="line">				<span class="keyword">return</span> SCOKET_ERR</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			copy data to tcp buf</div><div class="line">			<span class="keyword">if</span> copy err</div><div class="line">				<span class="keyword">return</span> SCOKET_ERR</div><div class="line">			<span class="keyword">return</span> copy data size</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 剩余缓冲区能容纳发送数据，则直接将数据拷贝到缓冲区中，send直接返回。如果剩余缓冲区不足，发送端阻塞等待，对端在协议栈层接收到数据后会发送ack确认，发送方接收到ack后释放缓冲区空间；如果此时剩余缓冲区大小可放置要发送数据，则直接将数据拷入缓冲区，返回。<br> Tips：阻塞模式下，数据发送正常，其返回的数据长度一定是发送数据的长度。</p>
</li>
</ul>
<ul>
<li>非阻塞模式下<br>  send函数将数据拷入协议栈缓冲区，如果缓冲区不足，则send尽力拷贝，并返回拷贝大小；如果缓冲区满则返回-1，同时errno为EAGAIN，让发送端再次尝试发送数据。</li>
</ul>
<h2 id="发送缓冲区设置"><a href="#发送缓冲区设置" class="headerlink" title="发送缓冲区设置"></a>发送缓冲区设置</h2><pre><code>socklen_t sendbuflen = 0;  
socklen_t len = sizeof(sendbuflen);  
getsockopt(clientSocket, SOL_SOCKET, SO_SNDBUF, (void*)&amp;sendbuflen, &amp;len);  
printf(&quot;default,sendbuf:%d\n&quot;, sendbuflen);      
sendbuflen = 10240;  
setsockopt(clientSocket, SOL_SOCKET, SO_SNDBUF, (void*)&amp;sendbuflen, len);  
getsockopt(clientSocket, SOL_SOCKET, SO_SNDBUF, (void*)&amp;sendbuflen, &amp;len);  
printf(&quot;now,sendbuf:%d\n&quot;, sendbuflen); 
</code></pre><h2 id="send发包实例解析"><a href="#send发包实例解析" class="headerlink" title="send发包实例解析"></a>send发包实例解析</h2><p>实际socket使用过程中，常用的是非阻塞模式，我们就以非阻塞模式为例进行分析，预设多种场景如下：</p>
<ul>
<li><p>场景1：发送端10k数据已经安全放入缓冲区，已实际发出2k（收到对端ack），接收端正在处理数据，此时发送端因为10k数据发送完毕，关闭了socket。</p>
<blockquote>
<p>场景分析：</p>
<blockquote>
<p>发送端关闭socket，主动fin告诉对端发送端数据发送完毕想关闭TCP连接，发送完fin后发送端处于fin wait1状态等待接收端ack确认；发送端协议栈剩余8k数据依然在独立发送，待数据发送完成后，协议栈才会把fin发给接收端；接收端在接收ack完10k数据后，且收到fin信号后，接收端回复ack确认fin信号，两者协商关闭socket。</p>
</blockquote>
</blockquote>
</li>
<li><p>场景2：发送端预期发送10k数据，已将2k数据拷入缓冲区并实际发出拷入的2k数据（收到对端ack），接收端正在处理数据，此时发送端又发送了8k新数据；（缓冲区充足(8k新数据会被拷入缓冲区)情况我们不讨论）缓冲区不足时候会发生什么？</p>
<blockquote>
<p>场景分析</p>
<blockquote>
<p>新发送的10k数据会尽力拷入缓冲区，send返回拷入缓冲区数据长度2k，如果此时缓冲区剩余空间为0时候，客户端强制send数据，会收到EAGAIN信号；其实这种情况客户端正确处理方式是读出缓冲区可写信号再发送数据，而不是自己进行发送尝试。</p>
</blockquote>
</blockquote>
</li>
<li><p>场景3:发送端10k数据已经安全放入缓冲区，已实际发出2k（收到对端ack），接收端正在处理接收到1k数据，处理完成后数据接收端关闭了socket，会发发生什么？</p>
<blockquote>
<p>场景分析</p>
<blockquote>
<ul>
<li>数据发送端有监听机制，数据发送端用户态会得到接收端端关闭信号（socket可读信号），这时候用户正确打开方式是调用close关闭socket</li>
<li>如果数据发送端未处理该关闭信号，且数据接收端没有rst强制关闭连接，数据发送端仍然可正常发送数据</li>
<li>如果数据发送端未处理该关闭信号，但是数据接收端已经rst强制关闭连接，数据发送端仍然在send发送数据，send将返回-1</li>
<li>如果是阻塞情况，但是因缓冲区满正在阻塞，如果接收端发送rst，阻塞发送端会退出阻塞返回，发送成功字节数，如果在此调用send，将返回-1</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><p>场景4：发送端10k数据已经安全放入缓冲区，已实际发出2k（收到对端ack），接收端正在处理接收到1k数据，此时网络出现异常</p>
<blockquote>
<p>场景分析</p>
<blockquote>
<p>接收应用程序在处理完已收到的1k数据后,会继续从缓存区读取余下的1k数据,然后就表现为无数据可读的现象,这种情况需要应用程序来处理超时.一般做法是设定一个select等待的最大时间,如果超出这个时间依然没有数据可读,则认为socket已不可用.<br>发送应用程序会不断的将余下的数据发送到网络上,但始终得不到确认,所以缓存区的可用空间持续为0,这种情况也需要应用程序来处理.如果不由应用程序来处理这种情况超时的情况,也可以通过tcp协议本身来处理,具体可以查看sysctl项中的:<br>net.ipv4.tcp_keepalive_intvl<br>net.ipv4.tcp_keepalive_probes<br>net.ipv4.tcp_keepalive_time</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="send特点"><a href="#send特点" class="headerlink" title="send特点"></a>send特点</h2><ul>
<li>send只是将数据放入缓冲区中，并不是真正已经发给对方</li>
<li>非阻塞发送字节可以是1-n，其发送多少完全依赖于剩余的发送缓冲区</li>
</ul>
<h2 id="socket发送函数解析"><a href="#socket发送函数解析" class="headerlink" title="socket发送函数解析"></a>socket发送函数解析</h2><h3 id="发送流程图"><a href="#发送流程图" class="headerlink" title="发送流程图"></a>发送流程图</h3><blockquote>
<p>send<br>sendto<br>sendmmsg<br>sendmsg </p>
</blockquote>
<p>上述流程调用过程如下：<br>-&gt;socketcall -&gt;sock_sendmsg -&gt; __sock_sendmsg -&gt; sock-&gt;ops-&gt;sendmsg(inet_sendmsg)<br>-&gt;[tcp_prot]tcp_sendmsg</p>
<h3 id="内核系统调用"><a href="#内核系统调用" class="headerlink" title="内核系统调用"></a>内核系统调用</h3><p>send    、sendto、sendmsg、sendmmsg发送函数由glibc提供，声明于/usr/include/sys/socket.h<br>用户态在调用后会进入到sys_socketcall系统调用中，下面代码部分就是其入口<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE2(socketcall, <span class="keyword">int</span>, call, <span class="keyword">unsigned</span> <span class="keyword">long</span> __user *, args)</div><div class="line">&#123;</div><div class="line">...</div><div class="line">	<span class="keyword">switch</span> (call) &#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">case</span> SYS_SEND:</div><div class="line">		err = sys_send(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_SENDTO:</div><div class="line">		err = sys_sendto(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>],</div><div class="line">				 (struct sockaddr __user *)a[<span class="number">4</span>], a[<span class="number">5</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	...</div><div class="line">	<span class="keyword">case</span> SYS_SENDMSG:</div><div class="line">		err = sys_sendmsg(a0, (struct msghdr __user *)a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_SENDMMSG:</div><div class="line">		err = sys_sendmmsg(a0, (struct mmsghdr __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	...</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>send 是sendto的一种特殊情况,(sendto发送地址为NULL发送地址长度为0)</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE4(send, <span class="keyword">int</span>, fd, <span class="keyword">void</span> __user *, buff, <span class="keyword">size_t</span>, len,</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>, flags)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> sys_sendto(fd, buff, len, flags, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sendto -&gt; sock_sendmsg -&gt; __sock_sendmsg -&gt; sock-&gt;ops-&gt;sendmsg(inet_sendmsg)</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE6(sendto, <span class="keyword">int</span>, fd, <span class="keyword">void</span> __user *, buff, <span class="keyword">size_t</span>, len,</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>, flags, struct sockaddr __user *, addr,</div><div class="line">		<span class="keyword">int</span>, addr_len)</div><div class="line">&#123;</div><div class="line"> ...</div><div class="line">	err = sock_sendmsg(sock, &amp;msg, len);</div><div class="line"></div><div class="line">out_put:</div><div class="line">	fput_light(sock-&gt;file, fput_needed);</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sendmsg 和sendmmsg 完成用户态数据拷贝到内核态后，最终也是调用inet_sendmsg处理，在此就拿sendto情况详细分析</li>
</ul>
<h3 id="sendto源码实现分析"><a href="#sendto源码实现分析" class="headerlink" title="sendto源码实现分析"></a>sendto源码实现分析</h3><p>sendto -&gt; sock_sendmsg -&gt; “<strong>sock_sendmsg” -&gt;”</strong>sock_sendmsg_nosec” -&gt; sock-&gt;ops-&gt;sendmsg(inet_sendmsg)</p>
<ul>
<li>首先分析sock_sendmsg实现</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_sendmsg</span><span class="params">(struct socket *sock, struct msghdr *msg, <span class="keyword">size_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kiocb</span> <span class="title">iocb</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock_iocb</span> <span class="title">siocb</span>;</span></div><div class="line">	<span class="keyword">int</span> ret;</div><div class="line">	<span class="comment">/*异步IO控制块初始化*/</span></div><div class="line">	init_sync_kiocb(&amp;iocb, <span class="literal">NULL</span>);</div><div class="line">	iocb.<span class="keyword">private</span> = &amp;siocb;</div><div class="line">	<span class="comment">/*异步控制块调用完毕后，可调用__sock_sendmsg发送数据*/</span></div><div class="line">	ret = __sock_sendmsg(&amp;iocb, sock, msg, size);</div><div class="line">	<span class="keyword">if</span> (-EIOCBQUEUED == ret)</div><div class="line">		ret = wait_on_sync_kiocb(&amp;iocb);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> __sock_sendmsg(struct kiocb *iocb, struct socket *sock,</div><div class="line">				 struct msghdr *msg, <span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> err = security_socket_sendmsg(sock, msg, size);</div><div class="line">	<span class="comment">/*调用__sock_sendmsg_nosec*/</span></div><div class="line">	<span class="keyword">return</span> err ?: __sock_sendmsg_nosec(iocb, sock, msg, size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> __sock_sendmsg_nosec(struct kiocb *iocb, struct socket *sock,</div><div class="line">				       struct msghdr *msg, <span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock_iocb</span> *<span class="title">si</span> = <span class="title">kiocb_to_siocb</span>(<span class="title">iocb</span>);</span></div><div class="line"></div><div class="line">	si-&gt;sock = sock;</div><div class="line">	si-&gt;scm = <span class="literal">NULL</span>;</div><div class="line">	si-&gt;msg = msg;</div><div class="line">	si-&gt;size = size;</div><div class="line">	</div><div class="line">	<span class="comment">/*调用inet_sendnsg*/</span></div><div class="line">	<span class="keyword">return</span> sock-&gt;ops-&gt;sendmsg(iocb, sock, msg, size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_sendmsg</span><span class="params">(struct kiocb *iocb, struct socket *sock, struct msghdr *msg,</span></span></div><div class="line">		 <span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line"></div><div class="line">	sock_rps_record_flow(sk);</div><div class="line">	<span class="comment">/*如果连接没有分配本地端口且允许分配本地端口，我们就给连接绑定一个本地端口</span></div><div class="line">	*/</div><div class="line">	<span class="comment">/* We may need to bind the socket. */</span></div><div class="line">	<span class="keyword">if</span> (!inet_sk(sk)-&gt;inet_num &amp;&amp; !sk-&gt;sk_prot-&gt;no_autobind &amp;&amp;</div><div class="line">	    inet_autobind(sk))</div><div class="line">	   </div><div class="line">		<span class="keyword">return</span> -EAGAIN;</div><div class="line">	<span class="comment">/*传输层是TCP情况下，调用tcp_sendmsg()*/</span></div><div class="line">	<span class="keyword">return</span> sk-&gt;sk_prot-&gt;sendmsg(iocb, sk, msg, size);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其次分析inet_autobind ，获取可用端口并给，获取后的端口会赋值给inet-&gt;inet_sport/inet_num</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inet_autobind</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span>;</span></div><div class="line">	<span class="comment">/* We may need to bind the socket. */</span></div><div class="line">	lock_sock(sk);</div><div class="line">	inet = inet_sk(sk);</div><div class="line">	<span class="keyword">if</span> (!inet-&gt;inet_num) &#123;</div><div class="line">		<span class="comment">/*针对于TCP情况sk-&gt;sk_prot-&gt;get_port调用的是inet_csk_get_port</span></div><div class="line">		* inet_csk_get_port工作获取端口，并将其赋值给inet-&gt;inet_num</div><div class="line">		*/</div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;get_port(sk, <span class="number">0</span>)) &#123;</div><div class="line">			release_sock(sk);</div><div class="line">			<span class="keyword">return</span> -EAGAIN;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/*获取inet-&gt;inet_num赋值给inet-&gt;inet_sport*/</span></div><div class="line">		inet-&gt;inet_sport = htons(inet-&gt;inet_num);</div><div class="line">	&#125;</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后分析tcp_sendmsg</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_sendmsg</span><span class="params">(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,</span></span></div><div class="line">		<span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">iov</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">skb</span>;</span></div><div class="line">	<span class="keyword">int</span> iovlen, flags, err, copied = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> mss_now = <span class="number">0</span>, size_goal, copied_syn = <span class="number">0</span>, offset = <span class="number">0</span>;</div><div class="line">	<span class="keyword">bool</span> sg;</div><div class="line">	<span class="keyword">long</span> timeo;</div><div class="line"></div><div class="line">	lock_sock(sk);</div><div class="line">	</div><div class="line">	flags = msg-&gt;msg_flags;</div><div class="line">	<span class="keyword">if</span> (flags &amp; MSG_FASTOPEN) &#123;</div><div class="line">		err = tcp_sendmsg_fastopen(sk, msg, &amp;copied_syn, size);</div><div class="line">		<span class="keyword">if</span> (err == -EINPROGRESS &amp;&amp; copied_syn &gt; <span class="number">0</span>)</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (err)</div><div class="line">			<span class="keyword">goto</span> out_err;</div><div class="line">		offset = copied_syn;</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">    <span class="comment">/*</span></div><div class="line">	* 获取数据发送超时时间</div><div class="line">	*/</div><div class="line">	timeo = sock_sndtimeo(sk, flags &amp; MSG_DONTWAIT);</div><div class="line"></div><div class="line">	<span class="comment">/* Wait for a connection to finish. One exception is TCP Fast Open</span></div><div class="line">	 * (passive side) where data is allowed to be sent before a connection</div><div class="line">	 * is fully established.</div><div class="line">	 */</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * TCP状态检查，ES和CLOSE_WAIT状态才能发送数据，其它状态都要等待连接建立起来</div><div class="line">	 * 否则直接返回错误</div><div class="line">	 * </div><div class="line">	 * 随着协议栈进步，增加一种情况tcp_passive_fastopen即tcp被动快速打开时候，不区分当前TCP处于状态</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (((<span class="number">1</span> &lt;&lt; sk-&gt;sk_state) &amp; ~(TCPF_ESTABLISHED | TCPF_CLOSE_WAIT)) &amp;&amp;</div><div class="line">	    !tcp_passive_fastopen(sk)) &#123;</div><div class="line">	    <span class="comment">/*等待连接建立，连接建立成功则返回0*/</span></div><div class="line">		<span class="keyword">if</span> ((err = sk_stream_wait_connect(sk, &amp;timeo)) != <span class="number">0</span>)</div><div class="line">			<span class="keyword">goto</span> do_error;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*开启repair功能处理*/</span></div><div class="line">	<span class="keyword">if</span> (unlikely(tp-&gt;repair)) &#123;</div><div class="line">		<span class="keyword">if</span> (tp-&gt;repair_queue == TCP_RECV_QUEUE) &#123;</div><div class="line">			copied = tcp_send_rcvq(sk, msg, size);</div><div class="line">			<span class="keyword">goto</span> out_nopush;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">if</span> (tp-&gt;repair_queue == TCP_NO_QUEUE)</div><div class="line">			<span class="keyword">goto</span> out_err;</div><div class="line"></div><div class="line">		<span class="comment">/* 'common' sending to sendq */</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**/</span></div><div class="line">	<span class="comment">/* This should be in poll */</span></div><div class="line">	clear_bit(SOCK_ASYNC_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line"></div><div class="line">	<span class="comment">/*获取发送mss*/</span></div><div class="line">	mss_now = tcp_send_mss(sk, &amp;size_goal, flags);</div><div class="line"></div><div class="line">	<span class="comment">/* Ok commence sending. */</span></div><div class="line">	iovlen = msg-&gt;msg_iovlen;<span class="comment">//应用层要发送数据块个数</span></div><div class="line">	iov = msg-&gt;msg_iov;<span class="comment">//要发送数据地址</span></div><div class="line">	copied = <span class="number">0</span>;<span class="comment">//已经放到缓冲区的数据长度</span></div><div class="line"></div><div class="line">	err = -EPIPE;</div><div class="line">	<span class="comment">/*在发送数据前，如果sk已经关闭或者出现err，直接返回 -EPIPE*/</span></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_err || (sk-&gt;sk_shutdown &amp; SEND_SHUTDOWN))</div><div class="line">		<span class="keyword">goto</span> out_err;</div><div class="line"></div><div class="line">	<span class="comment">/*网卡分散聚合*/</span></div><div class="line">	sg = !!(sk-&gt;sk_route_caps &amp; NETIF_F_SG);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (--iovlen &gt;= <span class="number">0</span>) &#123;</div><div class="line">	</div><div class="line">		<span class="comment">/*获取用户态数据长度和数据指针并指向下一个用户态要发送数据块*/</span></div><div class="line">		<span class="keyword">size_t</span> seglen = iov-&gt;iov_len;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span> __user *from = iov-&gt;iov_base;</div><div class="line">		iov++;</div><div class="line">		</div><div class="line">		<span class="comment">/*TCP fast open涉及*/</span></div><div class="line">		<span class="keyword">if</span> (unlikely(offset &gt; <span class="number">0</span>)) &#123;  <span class="comment">/* Skip bytes copied in SYN */</span></div><div class="line">			<span class="keyword">if</span> (offset &gt;= seglen) &#123;</div><div class="line">				offset -= seglen;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			seglen -= offset;</div><div class="line">			from += offset;</div><div class="line">			offset = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (seglen &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> copy = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> max = size_goal;</div><div class="line">			<span class="comment">/*从发送队列尾部取skb，尝试将用户态数据放入skb-&gt;data剩余空间*/</span></div><div class="line">			skb = tcp_write_queue_tail(sk);</div><div class="line">			<span class="keyword">if</span> (tcp_send_head(sk)) &#123;</div><div class="line">			</div><div class="line">				<span class="comment">/*另一种mss情况，GSO*/</span></div><div class="line">				<span class="keyword">if</span> (skb-&gt;ip_summed == CHECKSUM_NONE)</div><div class="line">					max = mss_now;</div><div class="line">				copy = max - skb-&gt;len;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (copy &lt;= <span class="number">0</span>) &#123;<span class="comment">/*skb已经装满数据，后续会申请新的skb来发送数据*/</span></div><div class="line">new_segment:</div><div class="line">				<span class="comment">/* Allocate new segment. If the interface is SG,</span></div><div class="line">				 * allocate skb fitting to single page.</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (!sk_stream_memory_free(sk))</div><div class="line">					<span class="keyword">goto</span> wait_for_sndbuf;</div><div class="line">				</div><div class="line">				<span class="comment">/*申请内存大小为select_size（线性数据区+协议头），申请失败或者不合法，睡眠等待*/</span></div><div class="line">				skb = sk_stream_alloc_skb(sk,</div><div class="line">							  select_size(sk, sg),</div><div class="line">							  sk-&gt;sk_allocation);</div><div class="line">				<span class="keyword">if</span> (!skb)</div><div class="line">					<span class="keyword">goto</span> wait_for_memory;</div><div class="line"></div><div class="line">				<span class="comment">/*</span></div><div class="line">				 * Check whether we can use HW checksum.</div><div class="line">				 * 检查释放网卡硬件释放可以计算校验和</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (sk-&gt;sk_route_caps &amp; NETIF_F_CSUM_MASK)</div><div class="line">					skb-&gt;ip_summed = CHECKSUM_PARTIAL;</div><div class="line"></div><div class="line">				<span class="comment">/*将新分配的skb入sk_write_queue数据发送队列*/</span></div><div class="line">				skb_entail(sk, skb);</div><div class="line">				copy = size_goal;</div><div class="line">				max = size_goal;</div><div class="line"></div><div class="line">				<span class="comment">/* All packets are restored as if they have</span></div><div class="line">				 * already been sent. skb_mstamp isn't set to</div><div class="line">				 * avoid wrong rtt estimation.</div><div class="line">				 * TCP repair</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (tp-&gt;repair)</div><div class="line">					TCP_SKB_CB(skb)-&gt;sacked |= TCPCB_REPAIRED;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">/* Try to append data to the end of skb. */</span></div><div class="line">			<span class="keyword">if</span> (copy &gt; seglen)</div><div class="line">				copy = seglen;</div><div class="line"></div><div class="line">			<span class="comment">/* Where to copy to? */</span></div><div class="line">			<span class="comment">/*如果数据还有线性区间，直接将数据拷入冰计算校验和*/</span></div><div class="line">			<span class="keyword">if</span> (skb_availroom(skb) &gt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">/* We have some space in skb head. Superb! */</span></div><div class="line">				copy = <span class="keyword">min_t</span>(<span class="keyword">int</span>, copy, skb_availroom(skb));</div><div class="line">				err = skb_add_data_nocache(sk, skb, from, copy);</div><div class="line">				<span class="keyword">if</span> (err)</div><div class="line">					<span class="keyword">goto</span> do_fault;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;<span class="comment">/*如果没有了线性空间*/</span></div><div class="line">				<span class="comment">/*</span></div><div class="line">				*  数据会被复制到分页中</div><div class="line">				*  </div><div class="line">				*/</div><div class="line">				<span class="keyword">bool</span> merge = <span class="literal">true</span>;</div><div class="line">				<span class="comment">/*取得当前SKB的分片段数*/</span></div><div class="line">				<span class="keyword">int</span> i = skb_shinfo(skb)-&gt;nr_frags;</div><div class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">page_frag</span> *<span class="title">pfrag</span> = <span class="title">sk_page_frag</span>(<span class="title">sk</span>);</span></div><div class="line">				<span class="comment">/*检查分也可用空间，如果没有就申请新的页，如果系统内存不足就睡眠等待*/</span></div><div class="line">				<span class="keyword">if</span> (!sk_page_frag_refill(sk, pfrag))</div><div class="line">					<span class="keyword">goto</span> wait_for_memory;</div><div class="line">				</div><div class="line">				<span class="comment">/*如果不能将数据最佳到最后一个分片*/</span></div><div class="line">				<span class="keyword">if</span> (!skb_can_coalesce(skb, i, pfrag-&gt;page,</div><div class="line">						      pfrag-&gt;offset)) &#123;</div><div class="line">					<span class="comment">/*分页已经达到最大规格，将当前数据发出去，跳到new_segment重新申请skb*/</span></div><div class="line">					<span class="keyword">if</span> (i == MAX_SKB_FRAGS || !sg) &#123;</div><div class="line">						tcp_mark_push(tp, skb);</div><div class="line">						<span class="keyword">goto</span> new_segment;</div><div class="line">					&#125;</div><div class="line">					merge = <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				copy = <span class="keyword">min_t</span>(<span class="keyword">int</span>, copy, pfrag-&gt;size - pfrag-&gt;offset);</div><div class="line">				</div><div class="line">				<span class="comment">/*系统对发送缓冲区申请合法性判断*/</span></div><div class="line">				<span class="keyword">if</span> (!sk_wmem_schedule(sk, copy))</div><div class="line">					<span class="keyword">goto</span> wait_for_memory;</div><div class="line">				<span class="comment">/*拷贝用户空间数据，同时计算校验和，更新数据skb长度和缓存*/</span></div><div class="line">				err = skb_copy_to_page_nocache(sk, from, skb,</div><div class="line">							       pfrag-&gt;page,</div><div class="line">							       pfrag-&gt;offset,</div><div class="line">							       copy);</div><div class="line">				<span class="keyword">if</span> (err)</div><div class="line">					<span class="keyword">goto</span> do_error;</div><div class="line"></div><div class="line">				<span class="comment">/* Update the skb. */</span></div><div class="line">				<span class="comment">/*最后一个分页可以放数据数据页被放入了，就更新分也大小记录*/</span></div><div class="line">				<span class="keyword">if</span> (merge) &#123;</div><div class="line">					skb_frag_size_add(&amp;skb_shinfo(skb)-&gt;frags[i - <span class="number">1</span>], copy);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">/*如果不能分页就新增页，并初始化*/</span></div><div class="line">					skb_fill_page_desc(skb, i, pfrag-&gt;page,</div><div class="line">							   pfrag-&gt;offset, copy);</div><div class="line">					get_page(pfrag-&gt;page);</div><div class="line">				&#125;</div><div class="line">				pfrag-&gt;offset += copy;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">/*如果复制数据长度为0，不用加PSH标记*/</span></div><div class="line">			<span class="keyword">if</span> (!copied)</div><div class="line">				TCP_SKB_CB(skb)-&gt;tcp_flags &amp;= ~TCPHDR_PSH;</div><div class="line">			<span class="comment">/*更新发送队列中最后一个序号，数据包的最后一个序号*/</span></div><div class="line">			tp-&gt;write_seq += copy;</div><div class="line">			TCP_SKB_CB(skb)-&gt;end_seq += copy;</div><div class="line">			skb_shinfo(skb)-&gt;gso_segs = <span class="number">0</span>;</div><div class="line">			</div><div class="line">			<span class="comment">/*已经拷入了copy大小数据，用户态指针后移且更新已经拷贝数据增加*/</span></div><div class="line">			from += copy;</div><div class="line">			copied += copy;</div><div class="line">			</div><div class="line">			<span class="comment">/*所有数据处理完毕，直接退出*/</span></div><div class="line">			<span class="keyword">if</span> ((seglen -= copy) == <span class="number">0</span> &amp;&amp; iovlen == <span class="number">0</span>)</div><div class="line">				<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">			<span class="comment">/*如果skbb还可以继续填充数据或者是带外数据或者是有REPAIR选项，继续使用skb*/</span></div><div class="line">			<span class="keyword">if</span> (skb-&gt;len &lt; max || (flags &amp; MSG_OOB) || unlikely(tp-&gt;repair))</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">			<span class="comment">/*检查释放必须立即发送，即检查自上次发送后产生的数据是否已经超过对方通告过的最大接收窗口的一半。如果必须发送则设置紧急数据标示，然后将数据发出去*/</span></div><div class="line">			<span class="keyword">if</span> (forced_push(tp)) &#123;</div><div class="line">				tcp_mark_push(tp, skb);</div><div class="line">				__tcp_push_pending_frames(sk, mss_now, TCP_NAGLE_PUSH);</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (skb == tcp_send_head(sk))</div><div class="line">				<span class="comment">/*数据不必立即发送，且数据上只存在这段数据，则将这段数据发出*/</span></div><div class="line">				tcp_push_one(sk, mss_now);</div><div class="line">				</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">wait_for_sndbuf:</div><div class="line"><span class="comment">/*套接口缓冲区大小超过限制，此时无法再申请skb放数据，我们设置socket满标志*/</span></div><div class="line">			set_bit(SOCK_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line">			</div><div class="line"><span class="comment">/*系统内存不足处理*/</span></div><div class="line">wait_for_memory:</div><div class="line">	<span class="comment">/*skb分配失败了，已经拷入发送队列数据，直接调用tcp_push发出去</span></div><div class="line">	～MSG_MORE表示无更多数据</div><div class="line">	TCP_NAGLE_PUSH 选项调用NAGLE，尽量减少小字节发送数据</div><div class="line">	*/</div><div class="line">			<span class="keyword">if</span> (copied)</div><div class="line">				tcp_push(sk, flags &amp; ~MSG_MORE, mss_now,</div><div class="line">					 TCP_NAGLE_PUSH, size_goal);</div><div class="line">		<span class="comment">/*等待内存空闲，超过timeo时间后返回错误*/</span></div><div class="line">			<span class="keyword">if</span> ((err = sk_stream_wait_memory(sk, &amp;timeo)) != <span class="number">0</span>)</div><div class="line">				<span class="keyword">goto</span> do_error;</div><div class="line">			<span class="comment">/*啊，内存来了，重新获取MSS和TSO，继续将用户态数据拷入缓冲区*/</span></div><div class="line">			mss_now = tcp_send_mss(sk, &amp;size_goal, flags);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">out:</div><div class="line">	<span class="comment">/*如果数据已经拷入发送队列，则立即发送*/</span></div><div class="line">	<span class="keyword">if</span> (copied)</div><div class="line">		tcp_push(sk, flags, mss_now, tp-&gt;nonagle, size_goal);</div><div class="line">out_nopush:</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> copied + copied_syn;</div><div class="line"></div><div class="line">do_fault:</div><div class="line">	<span class="comment">/*复制数据异常时才进入这里</span></div><div class="line">	* skb无负载数据，从发送队列上去除，并更新发送队列等参数*/</div><div class="line">	<span class="keyword">if</span> (!skb-&gt;len) &#123;</div><div class="line">		tcp_unlink_write_queue(skb, sk);</div><div class="line">		<span class="comment">/* It is the one place in all of TCP, except connection</span></div><div class="line">		 * reset, where we can be unlinking the send_head.</div><div class="line">		 */</div><div class="line">		tcp_check_send_head(sk, skb);</div><div class="line">		sk_wmem_free_skb(sk, skb);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">do_error:</div><div class="line">	<span class="comment">/*如果已经复制了部分数据，即使发生了错误也可以发送，跳到out就是去发送数据去了*/</span></div><div class="line">	<span class="keyword">if</span> (copied + copied_syn)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">out_err:</div><div class="line">	err = sk_stream_error(sk, flags, err);</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>tcp_sendmsg()做了以下事情：</p>
<ol>
<li>如果使用了TCP Fast Open，则会在发送SYN包的同时携带上数据。</li>
<li>如果连接尚未建立好，不处于ESTABLISHED或者CLOSE_WAIT状态，<br> 那么进程进行睡眠，等待三次握手的完成。</li>
<li>获取当前的MSS、网络设备支持的最大数据长度size_goal。<br> 如果支持GSO，size_goal会是MSS的整数倍。</li>
<li>遍历用户层的数据块数组：<br> 4.1 获取发送队列的最后一个skb，如果是尚未发送的，且长度尚未达到size_goal，<pre><code>那么可以往此skb继续追加数据。
</code></pre> 4.2 否则需要申请一个新的skb来装载数据。<br> 4.2.1 如果发送队列的总大小sk_wmem_queued大于等于发送缓存的上限sk_sndbuf，<pre><code>或者发送缓存中尚未发送的数据量超过了用户的设置值：
设置同步发送时发送缓存不够的标志。
如果此时已有数据复制到发送队列了，就尝试立即发送。
等待发送缓存，直到sock有发送缓存可写事件唤醒进程，或者等待超时。
</code></pre> 4.2.2 申请一个skb，其线性数据区的大小为：<pre><code>通过select_size()得到的线性数据区中TCP负荷的大小 + 最大的协议头长度。
如果申请skb失败了，或者虽然申请skb成功，但是从系统层面判断此次申请不合法，
等待可用内存，等待时间为2~202ms之间的一个随机数。
</code></pre> 4.2.3 如果以上两步成功了，就更新skb的TCP控制块字段，把skb加入到sock发送队列的尾部，<pre><code>增加发送队列的大小，减小预分配缓存的大小。
</code></pre> 4.3 接下来就是拷贝消息头中的数据到skb中了。<pre><code>如果skb的线性数据区还有剩余空间，就复制数据到线性数据区中，同时计算校验和。
</code></pre> 4.4 如果skb的线性数据区已经用完了，那么就使用分页区：<br> 4.4.1 检查分页是否有可用空间，如果没有就申请新的page。如果申请失败，说明系统内存不足。<pre><code>之后会设置TCP内存压力标志，减小发送缓冲区的上限，睡眠等待内存。
</code></pre> 4.4.2 判断能否往最后一个分页追加数据。不能追加时，检查分页数是否达到了上限、<pre><code>或网卡不支持分散聚合。如果是的话，就为此skb设置PSH标志。
然后跳转到4.2处申请新的skb，来继续填装数据。
</code></pre> 4.4.3 从系统层面判断此次分页发送缓存的申请是否合法。<br> 4.4.4 拷贝用户空间的数据到skb的分页中，同时计算校验和。<pre><code>更新skb的长度字段，更新sock的发送队列大小和预分配缓存。
</code></pre> 4.4.5 如果把数据追加到最后一个分页了，更新最后一个分页的数据大小。否则初始化新的分页。<br> 4.5 拷贝成功后更新：发送队列的最后一个序号、skb的结束序号、已经拷贝到发送队列的数据量。<br> 4.6 尽可能的将发送队列中的skb发送出去。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>  <a href="http://blog.csdn.net/zhangskd/article/details/48207553" target="_blank" rel="external">http://blog.csdn.net/zhangskd/article/details/48207553</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用户态发送函数列表&quot;&gt;&lt;a href=&quot;#用户态发送函数列表&quot; class=&quot;headerlink&quot; title=&quot;用户态发送函数列表&quot;&gt;&lt;/a&gt;用户态发送函数列表&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; send(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; sendto(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; struct sockaddr *dest_addr, &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; addrlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; sendmsg(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; struct msghdr *msg, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendmmsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, struct mmsghdr *msgvec, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; vlen,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; write(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="send" scheme="http://vcpu.me/tags/send/"/>
    
      <category term="sendto" scheme="http://vcpu.me/tags/sendto/"/>
    
      <category term="sendmsg" scheme="http://vcpu.me/tags/sendmsg/"/>
    
      <category term="sendmmsg" scheme="http://vcpu.me/tags/sendmmsg/"/>
    
  </entry>
  
  <entry>
    <title>centos环境下脚本执行顺序探究</title>
    <link href="http://vcpu.me/centos%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://vcpu.me/centos脚本执行顺序/</id>
    <published>2017-06-15T07:42:10.000Z</published>
    <updated>2017-06-15T07:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos脚本执行顺序"><a href="#centos脚本执行顺序" class="headerlink" title="centos脚本执行顺序"></a>centos脚本执行顺序</h1><p>通用角度分析，centos 7 系统中存在如下以下5种常用的脚本路径<br>/etc/rc.d/rc.local<br>/etc/profile<br>/etc/bashrc<br>~/.bash_profile<br>~/.bashrc</p>
<p>通过在除rc外的脚本中加入echo信息，reboot虚拟机并ssh登陆用户，打印出顺序如下<br>I am etc profile<br>i am etc bashrc<br>i am ~ bash rc<br>i am ~ bash profile</p>
<a id="more"></a>
<h2 id="脚本执行顺序和执行时机"><a href="#脚本执行顺序和执行时机" class="headerlink" title="脚本执行顺序和执行时机"></a>脚本执行顺序和执行时机</h2><table>
<thead>
<tr>
<th>脚本路径</th>
<th style="text-align:center">执行顺序</th>
<th style="text-align:right">执行时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/rc.d/rc.local</td>
<td style="text-align:center">1</td>
<td style="text-align:right">系统起机执行一次，后续均不执行</td>
</tr>
<tr>
<td>/etc/profile</td>
<td style="text-align:center">2</td>
<td style="text-align:right">ssh/su/界面登陆时执行</td>
</tr>
<tr>
<td>/etc/bashrc</td>
<td style="text-align:center">3</td>
<td style="text-align:right">ssh/su/界面登陆时执行</td>
</tr>
<tr>
<td>~/.bash_profile</td>
<td style="text-align:center">4</td>
<td style="text-align:right">ssh/su/界面登陆以当前用户身份登陆</td>
</tr>
<tr>
<td>~/.bashrc</td>
<td style="text-align:center">5</td>
<td style="text-align:right">ssh/su/界面登陆以当前用户身份登陆</td>
</tr>
</tbody>
</table>
<h2 id="脚本含义"><a href="#脚本含义" class="headerlink" title="脚本含义"></a>脚本含义</h2><p>rc.local脚本centos启动时候执行脚本，可以用作默认启动<br>/etc/profile和/etc/bashrc 属于系统的全局变量设置<br>~/profile和~/bashrc 属于给予某一个用户的变量设置</p>
<h2 id="profile和bashrc区别"><a href="#profile和bashrc区别" class="headerlink" title="profile和bashrc区别"></a>profile和bashrc区别</h2><ul>
<li>profile 是用户唯一用来设置环境变量的地方，因为用户可能有多种shell（bash、sh、zsh），环境变量没有必要在每种shell都初始化，只需要统一初始化就行，很显然，profile就是这样的地方</li>
<li>bashrc 是专门给bash做初始化设置的，相对应来讲，其它shell会有专门的shrc、zshrc文件存放</li>
</ul>
<h2 id="开机启动脚本其它说明"><a href="#开机启动脚本其它说明" class="headerlink" title="开机启动脚本其它说明"></a>开机启动脚本其它说明</h2><p>centos7 默认是没有执行权限的，想在此处加执行脚本，执行脚本不会执行到，需要增添执行权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost rc.d]# ls -alt rc.local</div><div class="line">-rw-r--r--. 1 root root 491 Jun 13 22:24 rc.local</div><div class="line">[root@localhost rc.d]# chmod +x rc.local</div><div class="line"></div><div class="line">[root@localhost qinlong]# ls -alt /etc/rc.d/rc.local</div><div class="line">-rwxr-xr-x. 1 root root 535 Jun 13 22:48 /etc/rc.d/rc.local</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;centos脚本执行顺序&quot;&gt;&lt;a href=&quot;#centos脚本执行顺序&quot; class=&quot;headerlink&quot; title=&quot;centos脚本执行顺序&quot;&gt;&lt;/a&gt;centos脚本执行顺序&lt;/h1&gt;&lt;p&gt;通用角度分析，centos 7 系统中存在如下以下5种常用的脚本路径&lt;br&gt;/etc/rc.d/rc.local&lt;br&gt;/etc/profile&lt;br&gt;/etc/bashrc&lt;br&gt;~/.bash_profile&lt;br&gt;~/.bashrc&lt;/p&gt;
&lt;p&gt;通过在除rc外的脚本中加入echo信息，reboot虚拟机并ssh登陆用户，打印出顺序如下&lt;br&gt;I am etc profile&lt;br&gt;i am etc bashrc&lt;br&gt;i am ~ bash rc&lt;br&gt;i am ~ bash profile&lt;/p&gt;
    
    </summary>
    
      <category term="centos" scheme="http://vcpu.me/categories/centos/"/>
    
    
      <category term="linux" scheme="http://vcpu.me/tags/linux/"/>
    
      <category term="centos" scheme="http://vcpu.me/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>f-stack安装运行</title>
    <link href="http://vcpu.me/f-stack%E5%AE%89%E8%A3%85/"/>
    <id>http://vcpu.me/f-stack安装/</id>
    <published>2017-06-12T09:50:55.000Z</published>
    <updated>2018-02-07T13:13:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-os-virtual-box跑f-stack环境搭建"><a href="#mac-os-virtual-box跑f-stack环境搭建" class="headerlink" title="mac os virtual box跑f-stack环境搭建"></a>mac os virtual box跑f-stack环境搭建</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>kernel版本3.10.0-514.el7.x86_64<br>CentOS-7-x86_64-Minimal-1611.iso<br>Mac osx<br>Oreacle Virtual Box5.1.22<br>kernel-devel</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="在Oreacle-Virtual-Box上安装centos-7虚拟机"><a href="#在Oreacle-Virtual-Box上安装centos-7虚拟机" class="headerlink" title="在Oreacle Virtual Box上安装centos 7虚拟机"></a>在Oreacle Virtual Box上安装centos 7虚拟机</h3><h4 id="配置开启NAT网卡和桥接网卡"><a href="#配置开启NAT网卡和桥接网卡" class="headerlink" title="配置开启NAT网卡和桥接网卡"></a>配置开启NAT网卡和桥接网卡</h4><ul>
<li>网卡配置芯片类型选择<br>Add two more virtual network adapters with “Intel PRO/1000 MT Server (82545EM)” type in order to provide virtual network hardware to the virtual machine that is supported by Intel DPDK.<br>  上述说明来自于一篇国外文档说明，使用的Inetl 82545EM，但是经过尝试Intel PRO/1000MT桌面(82540EN)也是可以的。所以不要太迷信啦。</li>
</ul>
<a id="more"></a>
<ul>
<li>桥接网卡用来ssh登陆管理串口，NAT网卡用来运行DPDK驱动，跑nginx<br>  在Virtual Box上制作地址映射<br>  <img src="/myimages/wk1.png" alt="wk1"><br>  <img src="/myimages/wk2.png" alt="wk2"></li>
<li>centos7虚拟机上网口配置信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s17</div><div class="line">TYPE=&quot;Ethernet&quot;</div><div class="line">BOOTPROTO=&quot;dhcp&quot;</div><div class="line">DEFROUTE=&quot;yes&quot;</div><div class="line">PEERDNS=&quot;yes&quot;</div><div class="line">PEERROUTES=&quot;yes&quot;</div><div class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</div><div class="line">IPV6INIT=&quot;yes&quot;</div><div class="line">IPV6_AUTOCONF=&quot;yes&quot;</div><div class="line">IPV6_DEFROUTE=&quot;yes&quot;</div><div class="line">IPV6_PEERDNS=&quot;yes&quot;</div><div class="line">IPV6_PEERROUTES=&quot;yes&quot;</div><div class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</div><div class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</div><div class="line">NAME=&quot;enp0s17&quot;</div><div class="line">UUID=&quot;2ea1ed66-7bcd-4153-a495-39c25d5f0ff9&quot;</div><div class="line">DEVICE=&quot;enp0s17&quot;</div><div class="line">ONBOOT=&quot;yes&quot;</div><div class="line">[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s8</div><div class="line">TYPE=Ethernet</div><div class="line">BOOTPROTO=dhcp</div><div class="line">DEFROUTE=yes</div><div class="line">PEERDNS=yes</div><div class="line">PEERROUTES=yes</div><div class="line">IPV4_FAILURE_FATAL=no</div><div class="line">IPV6INIT=yes</div><div class="line">IPV6_AUTOCONF=yes</div><div class="line">IPV6_DEFROUTE=yes</div><div class="line">IPV6_PEERDNS=yes</div><div class="line">IPV6_PEERROUTES=yes</div><div class="line">IPV6_FAILURE_FATAL=no</div><div class="line">IPV6_ADDR_GEN_MODE=stable-privacy</div><div class="line">NAME=enp0s8</div><div class="line">UUID=6c930d05-bc17-4316-998e-f01a7233cbd3</div><div class="line">DEVICE=enp0s8</div><div class="line">ONBOOT=yes</div><div class="line">[root@localhost ~]# ifconfig</div><div class="line">enp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.55.183  netmask 255.255.255.0  broadcast 192.168.55.255</div><div class="line">        inet6 fe80::f97d:539:4010:eaff  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 08:00:27:d5:ee:00  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 521  bytes 58437 (57.0 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 155  bytes 23680 (23.1 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">enp0s17: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255</div><div class="line">        inet6 fe80::a15d:3b87:fec0:f3c1  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 08:00:27:28:39:6c  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 2  bytes 1180 (1.1 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 10  bytes 1308 (1.2 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class="line">        inet 127.0.0.1  netmask 255.0.0.0</div><div class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class="line">        loop  txqueuelen 1  (Local Loopback)</div><div class="line">        RX packets 0  bytes 0 (0.0 B)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 0  bytes 0 (0.0 B)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure>
<h4 id="开启CPU-flags-SSE-4-1-SSE-4-2"><a href="#开启CPU-flags-SSE-4-1-SSE-4-2" class="headerlink" title="开启CPU flags(SSE 4.1/SSE 4.2)"></a>开启CPU flags(SSE 4.1/SSE 4.2)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">VBoxManage setextradata &quot;VM name&quot; VBoxInternal/CPUM/SSE4.1 1</div><div class="line">VBoxManage setextradata &quot;VM name&quot; VBoxInternal/CPUM/SSE4.2 1</div></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>上述CPU flags默认是不开启的，启动f-stack上ngx会err日志如下</li>
<li>如果不开启sse cpu选项，在启动ngx会报如下问题<br>/usr/local/nginx_fstack/sbin/nginx /data/f-stack/config.ini -c 1 –proc-type=primary –num-procs=1 –proc-id=0<br>ERROR: This system does not support “SSE4_1”.<br>Please check that RTE_MACHINE is set correctly.</li>
<li>做NAT网卡10.0.2.15需要在vbox上做主机地址和端口映射才能访问<br> <img src="/myimages/vboxaddr.png" alt="wk2"></li>
</ul>
<h3 id="安装详细步骤"><a href="#安装详细步骤" class="headerlink" title="安装详细步骤"></a>安装详细步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">yum install -y git gcc openssl-devel bc</div><div class="line">cd /data</div><div class="line">yum install kernel-devel-`uname -r` -y</div><div class="line">mkdir /data/f-stack</div><div class="line">git clone https://github.com/F-Stack/f-stack.git /data/f-stack</div><div class="line"></div><div class="line"># Compile DPDK</div><div class="line">cd /data/f-stack/dpdk</div><div class="line">make config T=x86_64-native-linuxapp-gcc</div><div class="line">make</div><div class="line"></div><div class="line"># set hugepage    </div><div class="line">echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</div><div class="line">mkdir /mnt/huge</div><div class="line">mount -t hugetlbfs nodev /mnt/huge</div><div class="line"></div><div class="line"># insmod ko</div><div class="line">modprobe uio</div><div class="line">insmod build/kmod/igb_uio.ko</div><div class="line">insmod build/kmod/rte_kni.ko</div><div class="line"></div><div class="line"># set ip address</div><div class="line">export myaddr=`ifconfig enp0s17 | grep &quot;inet&quot; | grep -v &quot;:&quot; | awk -F &apos; &apos;  &apos;&#123;print $2&#125;&apos;`</div><div class="line">export mymask=`ifconfig enp0s17 | grep &quot;netmask&quot; | awk -F &apos; &apos; &apos;&#123;print $4&#125;&apos;`</div><div class="line">export mybc=`ifconfig enp0s17 | grep &quot;broadcast&quot; | awk -F &apos; &apos; &apos;&#123;print $6&#125;&apos;`</div><div class="line">export myhw=`ifconfig enp0s17 | grep &quot;ether&quot; | awk -F &apos; &apos; &apos;&#123;print $2&#125;&apos;`</div><div class="line">export mygw=`route -n | grep 0.0.0.0 | grep enp0s17 | grep UG | awk -F &apos; &apos; &apos;&#123;print $2&#125;&apos;`</div><div class="line"></div><div class="line">sed &quot;s/addr=192.168.1.2/addr=$&#123;myaddr&#125;/&quot; -i /data/f-stack/config.ini</div><div class="line">sed &quot;s/netmask=255.255.255.0/netmask=$&#123;mymask&#125;/&quot; -i /data/f-stack/config.ini</div><div class="line">sed &quot;s/broadcast=192.168.1.255/broadcast=$&#123;mybc&#125;/&quot; -i /data/f-stack/config.ini</div><div class="line">sed &quot;s/gateway=192.168.1.1/gateway=$&#123;mygw&#125;/&quot; -i /data/f-stack/config.ini</div><div class="line"></div><div class="line"></div><div class="line"># Compile F-Stack lib</div><div class="line">export FF_PATH=/data/f-stack</div><div class="line">export FF_DPDK=/data/f-stack/dpdk/build</div><div class="line">cd /data/f-stack/lib</div><div class="line">make</div><div class="line"></div><div class="line"># Compile Nginx</div><div class="line">cd ../app/nginx-1.11.10</div><div class="line">./configure --prefix=/usr/local/nginx_fstack --with-ff_module</div><div class="line">make</div><div class="line">make install</div><div class="line"></div><div class="line"># offload NIC（if there is only one NIC，the follow commands must run in a script）</div><div class="line">ifconfig enp0s17 down</div><div class="line">python /data/f-stack/dpdk/tools/dpdk-devbind.py --bind=igb_uio enp0s17</div><div class="line"></div><div class="line"># start Nginx</div><div class="line">cd ../..</div><div class="line">./start.sh -b /usr/local/nginx_fstack/sbin/nginx -c config.ini</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在vbox主机上访问映射地址和端口192.168.55.165:8080 -&gt; 10.0.2.15:80<br>curl <a href="http://192.168.55.165:8080" target="_blank" rel="external">http://192.168.55.165:8080</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    body &#123;</div><div class="line">        width: 35em;</div><div class="line">        margin: 0 auto;</div><div class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</div><div class="line">working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.org/"</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">Commercial support is available at</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.com/"</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="f-stack-ngx配置文件"><a href="#f-stack-ngx配置文件" class="headerlink" title="f-stack ngx配置文件"></a>f-stack ngx配置文件</h3><p>/data/f-stack/config.ini<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">[dpdk]</div><div class="line"><span class="meta">#</span># Hexadecimal bitmask of cores to run on.</div><div class="line">lcore_mask=3</div><div class="line"><span class="meta">#</span># Port mask, enable and disable ports.</div><div class="line"><span class="meta">#</span># Default: all ports are enabled.</div><div class="line"><span class="meta">#</span>port_mask=1</div><div class="line">channel=4</div><div class="line"><span class="meta">#</span># Number of ports.</div><div class="line">nb_ports=1</div><div class="line">promiscuous=1</div><div class="line">numa_on=1</div><div class="line"><span class="meta">#</span># TCP segment offload, default: disabled.</div><div class="line">tso=0</div><div class="line"><span class="meta"></span></div><div class="line">## Port config section</div><div class="line"><span class="meta">#</span># According to dpdk.nb_ports: port0, port1...</div><div class="line">[port0]</div><div class="line">addr=10.0.2.15</div><div class="line">netmask=255.255.255.0</div><div class="line">broadcast=10.0.2.255</div><div class="line">gateway=10.0.2.2</div><div class="line"><span class="meta">#</span># Packet capture path, this will hurt performance</div><div class="line"><span class="meta">#</span>pcap=./a.pcap</div><div class="line"><span class="meta"></span></div><div class="line">## Kni config: if enabled and method=reject,</div><div class="line"><span class="meta">#</span># all packets that do not belong to the following tcp_port and udp_port</div><div class="line"><span class="meta">#</span># will transmit to kernel; if method=accept, all packets that belong to</div><div class="line"><span class="meta">#</span># the following tcp_port and udp_port will transmit to kernel.</div><div class="line"><span class="meta">#</span>[kni]</div><div class="line"><span class="meta">#</span>enable=1</div><div class="line"><span class="meta">#</span>method=reject</div><div class="line"><span class="meta">#</span>tcp_port=80,443</div><div class="line"><span class="meta">#</span>udp_port=53</div><div class="line"><span class="meta"></span></div><div class="line">## FreeBSD network performance tuning configurations.</div><div class="line"><span class="meta">#</span># Most native FreeBSD configurations are supported.</div><div class="line">[freebsd.boot]</div><div class="line">hz=100</div><div class="line"></div><div class="line">kern.ipc.maxsockets=262144</div><div class="line"></div><div class="line">net.inet.tcp.syncache.hashsize=4096</div><div class="line">net.inet.tcp.syncache.bucketlimit=100</div><div class="line"></div><div class="line">net.inet.tcp.tcbhashsize=65536</div><div class="line"></div><div class="line">[freebsd.sysctl]</div><div class="line">kern.ipc.somaxconn=32768</div><div class="line">kern.ipc.maxsockbuf=16777216</div><div class="line"></div><div class="line">net.inet.tcp.fast_finwait2_recycle=1</div><div class="line">net.inet.tcp.sendspace=16384</div><div class="line">net.inet.tcp.recvspace=8192</div><div class="line">net.inet.tcp.nolocaltimewait=1</div><div class="line">net.inet.tcp.cc.algorithm=htcp</div><div class="line">net.inet.tcp.sendbuf_max=16777216</div><div class="line">net.inet.tcp.recvbuf_max=16777216</div><div class="line">net.inet.tcp.sendbuf_auto=1</div><div class="line">net.inet.tcp.recvbuf_auto=1</div><div class="line">net.inet.tcp.sendbuf_inc=16384</div><div class="line">net.inet.tcp.recvbuf_inc=524288</div><div class="line">net.inet.tcp.inflight.enable=0</div><div class="line">net.inet.tcp.sack=1</div><div class="line">net.inet.tcp.blackhole=1</div><div class="line">net.inet.tcp.msl=2000</div><div class="line">net.inet.tcp.delayed_ack=0</div><div class="line"></div><div class="line">net.inet.udp.blackhole=1</div><div class="line">net.inet.ip.redirect=0</div></pre></td></tr></table></figure></p>
<h3 id="f-stack-ngx正常启动信息"><a href="#f-stack-ngx正常启动信息" class="headerlink" title="f-stack ngx正常启动信息"></a>f-stack ngx正常启动信息</h3><p>[root@localhost f-stack]# ./start.sh -b /usr/local/nginx_fstack/sbin/nginx -c config.ini<br>/usr/local/nginx_fstack/sbin/nginx config.ini -c 1 –proc-type=primary –num-procs=1 –proc-id=0</p>
<p>EAL: Detected 1 lcore(s)<br>EAL: Probing VFIO support…<br>EAL: PCI device 0000:00:08.0 on NUMA socket -1<br>EAL:   probe driver: 8086:100f rte_em_pmd<br>EAL: PCI device 0000:00:11.0 on NUMA socket -1<br>EAL:   probe driver: 8086:100f rte_em_pmd<br>create mbuf pool on socket 0<br>create ring:arp_ring_0_0 success, 2047 ring entries are now free!<br>Port 0 MAC: 08 00 27 28 39 6c<br>TSO is disabled<br>set port 0 to promiscuous mode ok</p>
<p>Checking link status………………..done<br>Port 0 Link Up - speed 1000 Mbps - full-duplex<br>link_elf_lookup_symbol: missing symbol hash table<br>link_elf_lookup_symbol: missing symbol hash table<br>netisr_init: forcing maxthreads from 1 to 0<br>Timecounters tick every 10.000 msec<br>Timecounter “ff_clock” frequency 100 Hz quality 1<br>f-stack-0: Ethernet address: 08:00:27:28:39:6c</p>
<h3 id="f-stack-环境安装完成后重启后应该重新设置的参数"><a href="#f-stack-环境安装完成后重启后应该重新设置的参数" class="headerlink" title="f-stack 环境安装完成后重启后应该重新设置的参数"></a>f-stack 环境安装完成后重启后应该重新设置的参数</h3><p>下述命令可放入/etc/rd.c/rd.local启动文件中，在机器重启后执行一次下面环境设置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</div><div class="line">mount -t hugetlbfs nodev /mnt/huge</div><div class="line">modprobe uio</div><div class="line">insmod /data/f-stack/dpdk/build/kmod/igb_uio.ko</div><div class="line">insmod /data/f-stack/dpdk/build/kmod/rte_kni.ko</div><div class="line">ifconfig enp0s17 down</div><div class="line">python /data/f-stack/dpdk/tools/dpdk-devbind.py --bind=igb_uio enp0s17</div><div class="line">/data/f-stack/start.sh -b /usr/local/nginx_fstack/sbin/nginx -c /data/f-stack/config.ini</div></pre></td></tr></table></figure></p>
<h3 id="如果kernel-devel-yum无法找到内核对应版本可去centos官网查找下载"><a href="#如果kernel-devel-yum无法找到内核对应版本可去centos官网查找下载" class="headerlink" title="如果kernel-devel yum无法找到内核对应版本可去centos官网查找下载"></a>如果kernel-devel yum无法找到内核对应版本可去centos官网查找下载</h3><p>wget <a href="https://buildlogs.centos.org/c7.1511.00/kernel/20151119220809/3.10.0-327.el7.x86_64/kernel-devel-3.10.0-327.el7.x86_64.rpm" target="_blank" rel="external">https://buildlogs.centos.org/c7.1511.00/kernel/20151119220809/3.10.0-327.el7.x86_64/kernel-devel-3.10.0-327.el7.x86_64.rpm</a><br>rpm -ivh kernel-devel-3.10.0-327.el7.x86_64.rpm</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mac-os-virtual-box跑f-stack环境搭建&quot;&gt;&lt;a href=&quot;#mac-os-virtual-box跑f-stack环境搭建&quot; class=&quot;headerlink&quot; title=&quot;mac os virtual box跑f-stack环境搭建&quot;&gt;&lt;/a&gt;mac os virtual box跑f-stack环境搭建&lt;/h1&gt;&lt;h2 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; class=&quot;headerlink&quot; title=&quot;基本环境&quot;&gt;&lt;/a&gt;基本环境&lt;/h2&gt;&lt;p&gt;kernel版本3.10.0-514.el7.x86_64&lt;br&gt;CentOS-7-x86_64-Minimal-1611.iso&lt;br&gt;Mac osx&lt;br&gt;Oreacle Virtual Box5.1.22&lt;br&gt;kernel-devel&lt;/p&gt;
&lt;h2 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;&lt;h3 id=&quot;在Oreacle-Virtual-Box上安装centos-7虚拟机&quot;&gt;&lt;a href=&quot;#在Oreacle-Virtual-Box上安装centos-7虚拟机&quot; class=&quot;headerlink&quot; title=&quot;在Oreacle Virtual Box上安装centos 7虚拟机&quot;&gt;&lt;/a&gt;在Oreacle Virtual Box上安装centos 7虚拟机&lt;/h3&gt;&lt;h4 id=&quot;配置开启NAT网卡和桥接网卡&quot;&gt;&lt;a href=&quot;#配置开启NAT网卡和桥接网卡&quot; class=&quot;headerlink&quot; title=&quot;配置开启NAT网卡和桥接网卡&quot;&gt;&lt;/a&gt;配置开启NAT网卡和桥接网卡&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;网卡配置芯片类型选择&lt;br&gt;Add two more virtual network adapters with “Intel PRO/1000 MT Server (82545EM)” type in order to provide virtual network hardware to the virtual machine that is supported by Intel DPDK.&lt;br&gt;  上述说明来自于一篇国外文档说明，使用的Inetl 82545EM，但是经过尝试Intel PRO/1000MT桌面(82540EN)也是可以的。所以不要太迷信啦。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DPDK" scheme="http://vcpu.me/categories/DPDK/"/>
    
    
      <category term="DPDK" scheme="http://vcpu.me/tags/DPDK/"/>
    
      <category term="f-stack" scheme="http://vcpu.me/tags/f-stack/"/>
    
      <category term="nginx" scheme="http://vcpu.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>bind()实现源码分析</title>
    <link href="http://vcpu.me/bind/"/>
    <id>http://vcpu.me/bind/</id>
    <published>2017-06-12T09:35:01.000Z</published>
    <updated>2017-06-12T09:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h1><p>内核版本：3.10.0-514.16.1.el7.x86_64<br>下述源码分析均以tcp socket为背景</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>socket文件描述符</li>
<li>要绑定的承载地址和端口的结构体 struct sockaddr</li>
<li>第二个参数struct sockaddr的长度</li>
</ul>
<blockquote>
<p>该函数负责绑定套接字的地址和端口，按照绑定者身份来分，会存在两种情况</p>
<blockquote>
<p>情况1:绑定者为客户端，主动发起请求方，绑定地址和端口成功后，会使用该地址和端口进行发包<br>一般情况下，客户端的地址和端口都是其自动选择的，不需要绑定动作。<br>情况2:绑定者为服务端，被动连接接收方，绑定地址和端口成功后，客户端只能向该地址和端口发送连接请求。服务端往往需要绑定地址和端口。如果服务端存在多网卡情况，其只需要绑定服务端口即可，其目的地址就是客户端访问的目的地址。<br><a id="more"></a></p>
</blockquote>
</blockquote>
<h2 id="sys-bind"><a href="#sys-bind" class="headerlink" title="sys_bind"></a>sys_bind</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE3(bind, <span class="keyword">int</span>, fd, struct sockaddr __user *, umyaddr, <span class="keyword">int</span>, addrlen)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">address</span>;</span></div><div class="line">	<span class="keyword">int</span> err, fput_needed;</div><div class="line"></div><div class="line">	sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);</div><div class="line">	<span class="keyword">if</span> (sock) &#123;</div><div class="line">		err = move_addr_to_kernel(umyaddr, addrlen, &amp;address);</div><div class="line">		<span class="keyword">if</span> (err &gt;= <span class="number">0</span>) &#123;</div><div class="line">			err = security_socket_bind(sock,</div><div class="line">						   (struct sockaddr *)&amp;address,</div><div class="line">						   addrlen);</div><div class="line">			<span class="keyword">if</span> (!err)</div><div class="line">				err = sock-&gt;ops-&gt;bind(sock,</div><div class="line">						      (struct sockaddr *)</div><div class="line">						      &amp;address, addrlen);<span class="comment">//inet_bind</span></div><div class="line">		&#125;</div><div class="line">		fput_light(sock-&gt;file, fput_needed);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sockfd_lookup_light 和move_addr_to_kernel分别为根据fd从当前进程取出socket和把参数从用户空间考入地址空间</li>
<li>bind系统调用最重要函数为sock-&gt;ops-&gt;bind</li>
<li>在TCP协议情况下inet_stream_ops中bind成员函数为inet_bind</li>
<li>后续为对此函数的分析</li>
</ul>
<h2 id="inet-bind"><a href="#inet-bind" class="headerlink" title="inet_bind"></a>inet_bind</h2><p>实现较为复杂，现在版本和原始版本相比，支持端口复用了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_bind</span><span class="params">(struct socket *sock, struct sockaddr *uaddr, <span class="keyword">int</span> addr_len)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">addr</span> = (<span class="title">struct</span> <span class="title">sockaddr_in</span> *)<span class="title">uaddr</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> snum;</div><div class="line">	<span class="keyword">int</span> chk_addr_ret;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	<span class="comment">/* If the socket has its own bind function then use it. (RAW) */</span></div><div class="line">	<span class="comment">/*raw socket才会用到，tcp_proc无此函数*/</span></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;bind) &#123;</div><div class="line">		err = sk-&gt;sk_prot-&gt;bind(sk, uaddr, addr_len);</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line">	err = -EINVAL;</div><div class="line">	<span class="comment">/*地址长度检验*/</span></div><div class="line">	<span class="keyword">if</span> (addr_len &lt; <span class="keyword">sizeof</span>(struct sockaddr_in))</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	<span class="comment">/*bind地址中协议检查，必须是下面两种情况</span></div><div class="line">	* 1.绑定的地址协议为AF_INET</div><div class="line">	* 2.绑定协议为0（AF_UNSPEC）同时地址也为0</div><div class="line">	* 否则直接退出inet_bind ,返回地址不支持错误码</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (addr-&gt;sin_family != AF_INET) &#123;</div><div class="line">		<span class="comment">/* Compatibility games : accept AF_UNSPEC (mapped to AF_INET)</span></div><div class="line">		 * only if s_addr is INADDR_ANY.</div><div class="line">		 */</div><div class="line">		err = -EAFNOSUPPORT;</div><div class="line">		<span class="keyword">if</span> (addr-&gt;sin_family != AF_UNSPEC ||</div><div class="line">		    addr-&gt;sin_addr.s_addr != htonl(INADDR_ANY))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*获取根据IP地址得出地址类型</span></div><div class="line">		RTN_LOCAL 本机地址</div><div class="line">		RTN_MULTICAST 多播</div><div class="line">		RTN_BROADCAST 广播</div><div class="line">		RTN_UNICAST</div><div class="line">	*/</div><div class="line">	chk_addr_ret = inet_addr_type(net, addr-&gt;sin_addr.s_addr);</div><div class="line"></div><div class="line">	<span class="comment">/* Not specified by any standard per-se, however it breaks too</span></div><div class="line">	 * many applications when removed.  It is unfortunate since</div><div class="line">	 * allowing applications to make a non-local bind solves</div><div class="line">	 * several problems with systems using dynamic addressing.</div><div class="line">	 * (ie. your servers still start up even if your ISDN link</div><div class="line">	 *  is temporarily down)</div><div class="line">	 */</div><div class="line">	err = -EADDRNOTAVAIL;</div><div class="line">   <span class="comment">/*	 地址类型必须是本机，多播，组播中的一个，否则直接返回，报地址参数异常</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (!net-&gt;ipv4_sysctl_ip_nonlocal_bind &amp;&amp;</div><div class="line">	    !(inet-&gt;freebind || inet-&gt;transparent) &amp;&amp;</div><div class="line">	    addr-&gt;sin_addr.s_addr != htonl(INADDR_ANY) &amp;&amp;</div><div class="line">	    chk_addr_ret != RTN_LOCAL &amp;&amp;</div><div class="line">	    chk_addr_ret != RTN_MULTICAST &amp;&amp;</div><div class="line">	    chk_addr_ret != RTN_BROADCAST)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	snum = ntohs(addr-&gt;sin_port);</div><div class="line">	err = -EACCES;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 要绑定的端口小于1024时候，要求运行该应用程序的为超级权限</div><div class="line">	* 否则返回并报权限不运行的错误</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (snum &amp;&amp; snum &lt; PROT_SOCK &amp;&amp;</div><div class="line">	    !ns_capable(net-&gt;user_ns, CAP_NET_BIND_SERVICE))</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	<span class="comment">/*      We keep a pair of addresses. rcv_saddr is the one</span></div><div class="line">	 *      used by hash lookups, and saddr is used for transmit.</div><div class="line">	 *</div><div class="line">	 *      In the BSD API these are the same except where it</div><div class="line">	 *      would be illegal to use them (multicast/broadcast) in</div><div class="line">	 *      which case the sending device address is used.</div><div class="line">	 */</div><div class="line">	lock_sock(sk);</div><div class="line"></div><div class="line">	<span class="comment">/* Check these errors (active socket, double bind). */</span></div><div class="line">	err = -EINVAL;</div><div class="line">	<span class="comment">/*bind动作发生在最初状态，其TCP状态是CLOSE且没有绑定过</span></div><div class="line">	*	否则直接判别为异常</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE || inet-&gt;inet_num)</div><div class="line">		<span class="keyword">goto</span> out_release_sock;</div><div class="line">	<span class="comment">/*inet_rcv_saddr 用作hash表查找使用</span></div><div class="line">	*inet_saddr作为发包源地址</div><div class="line">	*当为广播和组播时候发送地址为0</div><div class="line">	*/</div><div class="line">	inet-&gt;inet_rcv_saddr = inet-&gt;inet_saddr = addr-&gt;sin_addr.s_addr;</div><div class="line">	<span class="keyword">if</span> (chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST)</div><div class="line">		inet-&gt;inet_saddr = <span class="number">0</span>;  <span class="comment">/* Use device */</span></div><div class="line"></div><div class="line">	<span class="comment">/* Make sure we are allowed to bind here. */</span></div><div class="line">	<span class="comment">/* TCP时候该函数负责查询该端口是否被使用，没有被使用返回0，否则返回非0</span></div><div class="line">	*如果已经被使用，则退出bind函数，并返回地址和端口已经被使用错误-EADDRINUSE</div><div class="line">	*sk-&gt;sk_prot-&gt;get_port= inet_csk_get_port</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;get_port(sk, snum)) &#123;</div><div class="line">		inet-&gt;inet_saddr = inet-&gt;inet_rcv_saddr = <span class="number">0</span>;</div><div class="line">		err = -EADDRINUSE;</div><div class="line">		<span class="keyword">goto</span> out_release_sock;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 更新sk-&gt;sk_userlocks标记，表明本地地址和端口已经绑定</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (inet-&gt;inet_rcv_saddr)</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_BINDADDR_LOCK;</div><div class="line">	<span class="keyword">if</span> (snum)</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_BINDPORT_LOCK;</div><div class="line">	inet-&gt;inet_sport = htons(inet-&gt;inet_num);</div><div class="line">	inet-&gt;inet_daddr = <span class="number">0</span>;</div><div class="line">	inet-&gt;inet_dport = <span class="number">0</span>;</div><div class="line">	sk_dst_reset(sk);</div><div class="line">	err = <span class="number">0</span>;</div><div class="line">out_release_sock:</div><div class="line">	release_sock(sk);</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(inet_bind);</div></pre></td></tr></table></figure></p>
<ul>
<li>绑定地址长度和协议检查 长度异常返回-EINVAL 表示参数异常，协议不支持 -EAFNOSUPPORT</li>
<li>对绑定地址进行类型检查inet_addr_type，必须是本机地址，组播和广播地址类型 -EADDRNOTAVAIL 否则报地址参数异常</li>
<li>如果端口小于1024 ，必须为超级权限ns_capable 否则 err = -EACCES 权限不允许</li>
<li>sk-&gt;sk_prot-&gt;get_port = inet_csk_get_port 四层端口检查，看是否被使用</li>
<li>更新sk-&gt;skuserlocks标记，代表地址和端口已经被绑定</li>
</ul>
<p>扩展函数：<br>   inet_csk_get_port TCP四层端口检查<br>   inet_addr_type    地址类型判别<br>   ns_capable        超级权限检查</p>
<h2 id="inet-csk-get-port"><a href="#inet-csk-get-port" class="headerlink" title="inet_csk_get_port"></a>inet_csk_get_port</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_get_port</span><span class="params">(struct sock *sk, <span class="keyword">unsigned</span> <span class="keyword">short</span> snum)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_hashinfo</span> *<span class="title">hashinfo</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot</span>-&gt;<span class="title">h</span>.<span class="title">hashinfo</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_hashbucket</span> *<span class="title">head</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_bucket</span> *<span class="title">tb</span>;</span></div><div class="line">	<span class="keyword">int</span> ret, attempts = <span class="number">5</span>;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="keyword">int</span> smallest_size = <span class="number">-1</span>, smallest_rover;</div><div class="line">	<span class="keyword">kuid_t</span> uid = sock_i_uid(sk);</div><div class="line">	<span class="keyword">int</span> attempt_half = (sk-&gt;sk_reuse == SK_CAN_REUSE) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">/*禁止上下半部，防止进程冲突*/</span></div><div class="line">	local_bh_disable();</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 如果没有bind端口</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (!snum) &#123;<span class="comment">/*没有指定端口会自动选择端口*/</span></div><div class="line">		<span class="keyword">int</span> remaining, rover, low, high;</div><div class="line"></div><div class="line">again:</div><div class="line">		<span class="comment">/*获取端口的取值范围*/</span></div><div class="line">		inet_get_local_port_range(net, &amp;low, &amp;high);<span class="comment">/*后文辉对其进行分析*/</span></div><div class="line">		<span class="keyword">if</span> (attempt_half) &#123;</div><div class="line">			<span class="keyword">int</span> half = low + ((high - low) &gt;&gt; <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (attempt_half == <span class="number">1</span>)</div><div class="line">				high = half;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				low = half;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/*取值范围内端口数*/</span></div><div class="line">		remaining = (high - low) + <span class="number">1</span>;</div><div class="line">		<span class="comment">/*随机选择端口*/</span></div><div class="line">		smallest_rover = rover = net_random() % remaining + low;</div><div class="line"></div><div class="line">		smallest_size = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">do</span> &#123;</div><div class="line">			<span class="comment">/*保留端口检查,服务端可以设置 /proc/sys/net/ipv4/ip_local_reserved_ports */</span></div><div class="line">			<span class="keyword">if</span> (inet_is_reserved_local_port(rover))</div><div class="line">				<span class="keyword">goto</span> next_nolock;<span class="comment">/*端口加1继续*/</span></div><div class="line">				</div><div class="line">			<span class="comment">/*根据端口号和HASHsize从确定hash桶，并锁住它，后续便利查找*/</span></div><div class="line">			head = &amp;hashinfo-&gt;bhash[inet_bhashfn(net, rover,</div><div class="line">					hashinfo-&gt;bhash_size)];</div><div class="line">			spin_lock(&amp;head-&gt;lock);</div><div class="line">			inet_bind_bucket_for_each(tb, &amp;head-&gt;chain)</div><div class="line">				<span class="keyword">if</span> (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == rover) &#123;</div><div class="line">				</div><div class="line">					<span class="comment">/*判断端口是否可以复用，如果可以复用即使在链表中也一样复用*/</span></div><div class="line">					<span class="keyword">if</span> (((tb-&gt;fastreuse &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">					      sk-&gt;sk_reuse &amp;&amp;</div><div class="line">					      sk-&gt;sk_state != TCP_LISTEN) ||</div><div class="line">					     (tb-&gt;fastreuseport &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">					      sk-&gt;sk_reuseport &amp;&amp;</div><div class="line">					      uid_eq(tb-&gt;fastuid, uid))) &amp;&amp;</div><div class="line">					    (tb-&gt;num_owners &lt; smallest_size || smallest_size == <span class="number">-1</span>)) &#123;</div><div class="line">					    </div><div class="line">					    <span class="comment">/*记录下端口的使用个数和端口*/</span></div><div class="line">						smallest_size = tb-&gt;num_owners;</div><div class="line">						smallest_rover = rover;</div><div class="line">						</div><div class="line">						<span class="comment">/*系统绑定端口已经超过最大端口数了，要去检查inet_csk_bind_conflict绑定是否存在冲突*/</span></div><div class="line">						<span class="keyword">if</span> (atomic_read(&amp;hashinfo-&gt;bsockets) &gt; (high - low) + <span class="number">1</span> &amp;&amp;</div><div class="line">						    !inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb, <span class="literal">false</span>)) &#123;</div><div class="line">						   </div><div class="line">						   <span class="comment">/*ok，绑定没有冲突*/</span></div><div class="line">							snum = smallest_rover;</div><div class="line">							<span class="keyword">goto</span> tb_found;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">					<span class="comment">/*端口冲突检查*/</span></div><div class="line">					<span class="keyword">if</span> (!inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb, <span class="literal">false</span>)) &#123;</div><div class="line">						snum = rover;</div><div class="line">						<span class="keyword">goto</span> tb_found;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">/*此端口在链表中但是不能复用，继续下一个*/</span></div><div class="line">					<span class="keyword">goto</span> next;</div><div class="line">				&#125;</div><div class="line">			<span class="keyword">break</span>;<span class="comment">/*不在bind表中，端口可以使用，直接跳出循环*/</span></div><div class="line">		next:</div><div class="line">			spin_unlock(&amp;head-&gt;lock);</div><div class="line">		next_nolock:</div><div class="line">			<span class="comment">/*已经找到最大端口了，从最小开始找*/</span></div><div class="line">			<span class="keyword">if</span> (++rover &gt; high)</div><div class="line">				rover = low;</div><div class="line">		&#125; <span class="keyword">while</span> (--remaining &gt; <span class="number">0</span>);<span class="comment">/*en,最大5次查找机会*/</span></div><div class="line"></div><div class="line">		<span class="comment">/* Exhausted local port range during search?  It is not</span></div><div class="line">		 * possible for us to be holding one of the bind hash</div><div class="line">		 * locks if this test triggers, because if 'remaining'</div><div class="line">		 * drops to zero, we broke out of the do/while loop at</div><div class="line">		 * the top level, not from the 'break;' statement.</div><div class="line">		 */</div><div class="line">		ret = <span class="number">1</span>;</div><div class="line">		<span class="comment">/*没有找到端口，那就最后一次机会*/</span></div><div class="line">		<span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (smallest_size != <span class="number">-1</span>) &#123;</div><div class="line">				snum = smallest_rover;</div><div class="line">				<span class="keyword">goto</span> have_snum;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (attempt_half == <span class="number">1</span>) &#123;</div><div class="line">				<span class="comment">/* OK we now try the upper half of the range */</span></div><div class="line">				attempt_half = <span class="number">2</span>;</div><div class="line">				<span class="keyword">goto</span> again;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">goto</span> fail;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/* OK, here is the one we will use.  HEAD is</span></div><div class="line">		 * non-NULL and we hold it's mutex.</div><div class="line">		 */</div><div class="line">		<span class="comment">/*找到可用的端口了*/</span></div><div class="line">		snum = rover;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">/*指定绑定了端口，在绑定的链表中查找，如果查找到，代表已经被绑定*/</span></div><div class="line">have_snum:</div><div class="line">		head = &amp;hashinfo-&gt;bhash[inet_bhashfn(net, snum,</div><div class="line">				hashinfo-&gt;bhash_size)];</div><div class="line">		spin_lock(&amp;head-&gt;lock);</div><div class="line">		inet_bind_bucket_for_each(tb, &amp;head-&gt;chain)</div><div class="line">			<span class="keyword">if</span> (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == snum)</div><div class="line">				<span class="keyword">goto</span> tb_found;<span class="comment">/*端口已经被绑定*/</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*在绑定链表中没有发现，后续会创建*/</span></div><div class="line">	tb = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">goto</span> tb_not_found;</div><div class="line">	</div><div class="line">tb_found:</div><div class="line">	<span class="keyword">if</span> (!hlist_empty(&amp;tb-&gt;owners)) &#123;</div><div class="line">	</div><div class="line">		<span class="comment">/*要bind的sk标记SK_FORCE_REUSE可以强制复用*/</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_reuse == SK_FORCE_REUSE)</div><div class="line">			<span class="keyword">goto</span> success;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (((tb-&gt;fastreuse &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">		      sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN) ||</div><div class="line">		     (tb-&gt;fastreuseport &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">		      sk-&gt;sk_reuseport &amp;&amp; uid_eq(tb-&gt;fastuid, uid))) &amp;&amp;</div><div class="line">		    smallest_size == <span class="number">-1</span>) &#123;</div><div class="line">	<span class="comment">/* 是否可以复用的判别</span></div><div class="line">	* fastreuseport Google添加选项&amp;&amp; 已经开启端口复用 &amp;&amp; 当前socket uid和查找到的uid相符合</div><div class="line">	* 当前socket也可以放到bind hash中，后续会将其加入</div><div class="line">	*/   </div><div class="line">			<span class="keyword">goto</span> success;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ret = <span class="number">1</span>;</div><div class="line">			<span class="comment">/*端口绑定冲突，自动分配端口绑定冲突会走到此处，在自动分配端口时候进行了下列类似判别</span></div><div class="line">			*所以此判断基本不会执行知道跳到tb_not_found这个时候tb不为null的</div><div class="line">			*/</div><div class="line">			<span class="keyword">if</span> (inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb, <span class="literal">true</span>)) &#123;</div><div class="line">				<span class="keyword">if</span> (((sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN) ||</div><div class="line">				     (tb-&gt;fastreuseport &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">				      sk-&gt;sk_reuseport &amp;&amp; uid_eq(tb-&gt;fastuid, uid))) &amp;&amp;</div><div class="line">				    smallest_size != <span class="number">-1</span> &amp;&amp; --attempts &gt;= <span class="number">0</span>) &#123;</div><div class="line">					spin_unlock(&amp;head-&gt;lock);</div><div class="line">					<span class="keyword">goto</span> again;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">goto</span> fail_unlock;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">tb_not_found:</div><div class="line">	ret = <span class="number">1</span>;</div><div class="line">	<span class="comment">/*绑定时没有发现过tb，直接创建一个*/</span></div><div class="line">	<span class="keyword">if</span> (!tb &amp;&amp; (tb = inet_bind_bucket_create(hashinfo-&gt;bind_bucket_cachep,</div><div class="line">					net, head, snum)) == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">goto</span> fail_unlock;</div><div class="line">	<span class="keyword">if</span> (hlist_empty(&amp;tb-&gt;owners)) &#123;<span class="comment">/*没有绑定过socket*/</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN)</div><div class="line">			tb-&gt;fastreuse = <span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			tb-&gt;fastreuse = <span class="number">0</span>;</div><div class="line">			</div><div class="line">		<span class="comment">/*设置了SO_REUSEPORT选项*/</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_reuseport) &#123;</div><div class="line">			tb-&gt;fastreuseport = <span class="number">1</span>;</div><div class="line">			tb-&gt;fastuid = uid;</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			tb-&gt;fastreuseport = <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">/*如果绑定过socket*/</span></div><div class="line">		<span class="keyword">if</span> (tb-&gt;fastreuse &amp;&amp;</div><div class="line">		    (!sk-&gt;sk_reuse || sk-&gt;sk_state == TCP_LISTEN))</div><div class="line">			tb-&gt;fastreuse = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span> (tb-&gt;fastreuseport &amp;&amp;</div><div class="line">		    (!sk-&gt;sk_reuseport || !uid_eq(tb-&gt;fastuid, uid)))</div><div class="line">			tb-&gt;fastreuseport = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">success:</div><div class="line"><span class="comment">/*找到可用端口，添加绑定表*/</span></div><div class="line">	<span class="keyword">if</span> (!inet_csk(sk)-&gt;icsk_bind_hash)</div><div class="line">		inet_bind_hash(sk, tb, snum);<span class="comment">/*sk被放到tb-&gt;owners中*/</span></div><div class="line">	WARN_ON(inet_csk(sk)-&gt;icsk_bind_hash != tb);</div><div class="line">	ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">fail_unlock:</div><div class="line">	spin_unlock(&amp;head-&gt;lock);</div><div class="line">fail:</div><div class="line">	local_bh_enable();</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果端口为0；则自动选取端口选择过程如下：</p>
<blockquote>
<p>先在[low,half] or [half,high]中随机选取一个端口，作为循环获取端口的起始端口，开始以下流程</p>
</blockquote>
<pre><code>步骤1: 保留端口检查，不满足，端口加1，重试次数减1，继续从步骤1开始

步骤2: 从当前端口映射的hash桶中取出列表头，遍历检查该端口是否被使用
        步骤2-1:没有被使用，直接退出循环，tb为NULL，创建tb，跳转到tb_not_found将该端口连同创建的tb加入该hash桶的链表中，sk也被放到tb-&gt;owners中管理，结束退出
        步骤2-2: 端口被使用了，检查端口使用是否冲突
        步骤2-2-1:没有冲突，推出循环，跳转到tb_found,复用检查成功，sk被放到tb-&gt;owners中，结束退出
        步骤2-2-2:存在冲突，直接端口+1，继续循环查找

步骤3:如果上半部分已经查找完毕，继续[half,high]中选择一个端口，进行步骤1
</code></pre><h3 id="attempt-half"><a href="#attempt-half" class="headerlink" title="attempt_half"></a>attempt_half</h3><p>sk-&gt;sk_reuse == SK_CAN_REUSE<br> 取端口范围 [low ,half]<br>否则<br> 取端口范围 [half,high]</p>
<ul>
<li>该值会影响上述选择端口的流程从上半端还是从下半端选择端口</li>
<li>如果sk-&gt;sk_reuse被置SK_CAN_REUSE标记则先从下半端开始选择端口</li>
<li>否则直接从上半端选择端口</li>
</ul>
<h3 id="small-size和small-rover"><a href="#small-size和small-rover" class="headerlink" title="small_size和small_rover"></a>small_size和small_rover</h3><blockquote>
<p>what’s the fuck!!! 疑惑了好久<br>small_size和small_rover在3.10的版本中根本就没有使用基本用不到<br>3.10版本的端口查找原则是确定端口查找区间，随机选择端口，只要该端口能复用就直接使用，已经完全去除了优先选择复用端口数较小的端口这一原则了（3.2kernel）<br>So amazing！这两个变量可以去除了</p>
</blockquote>
<h2 id="inet-get-local-port-range"><a href="#inet-get-local-port-range" class="headerlink" title="inet_get_local_port_range"></a>inet_get_local_port_range</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_get_local_port_range</span><span class="params">(struct net *net, <span class="keyword">int</span> *low, <span class="keyword">int</span> *high)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> seq;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		seq = read_seqbegin(&amp;net-&gt;ipv4_sysctl_local_ports.lock);</div><div class="line"></div><div class="line">		*low = net-&gt;ipv4_sysctl_local_ports.range[<span class="number">0</span>];</div><div class="line">		*high = net-&gt;ipv4_sysctl_local_ports.range[<span class="number">1</span>];</div><div class="line">	&#125; <span class="keyword">while</span> (read_seqretry(&amp;net-&gt;ipv4_sysctl_local_ports.lock, seq));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sysctl -a|grep ip_local_port_range</div><div class="line">net.ipv4.ip_local_port_range = 32768 60999</div></pre></td></tr></table></figure>
<ul>
<li>上述读取端口范围是用户态的ip_local_port_range，默认是3w多以后的，可以调整此参数扩大端口范围</li>
<li>上述read_seqbegin这种方式读取数据，是一种顺序锁，适用于读多写少的方式用方式，后续专门处博文研究</li>
</ul>
<h2 id="tcp端口冲突检查"><a href="#tcp端口冲突检查" class="headerlink" title="tcp端口冲突检查"></a>tcp端口冲突检查</h2><p>inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock_af_ops</span> <span class="title">ipv4_specific</span> = &#123;</span></div><div class="line">	.queue_xmit	   = ip_queue_xmit,</div><div class="line">	.send_check	   = tcp_v4_send_check,</div><div class="line">	.rebuild_header	   = inet_sk_rebuild_header,</div><div class="line">	.sk_rx_dst_set	   = inet_sk_rx_dst_set,</div><div class="line">	.conn_request	   = tcp_v4_conn_request,</div><div class="line">	.syn_recv_sock	   = tcp_v4_syn_recv_sock,</div><div class="line">	.net_header_len	   = <span class="keyword">sizeof</span>(struct iphdr),</div><div class="line">	.setsockopt	   = ip_setsockopt,</div><div class="line">	.getsockopt	   = ip_getsockopt,</div><div class="line">	.addr2sockaddr	   = inet_csk_addr2sockaddr,</div><div class="line">	.sockaddr_len	   = <span class="keyword">sizeof</span>(struct sockaddr_in),</div><div class="line">	.bind_conflict	   = inet_csk_bind_conflict,</div><div class="line">#ifdef CONFIG_COMPAT</div><div class="line">	.compat_setsockopt = compat_ip_setsockopt,</div><div class="line">	.compat_getsockopt = compat_ip_getsockopt,</div><div class="line">#endif</div><div class="line">	.mtu_reduced	   = tcp_v4_mtu_reduced,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_v4_init_sock</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span></div><div class="line"></div><div class="line">	tcp_init_sock(sk);</div><div class="line"></div><div class="line">	icsk-&gt;icsk_af_ops = &amp;ipv4_specific;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_TCP_MD5SIG</span></div><div class="line">	tcp_sk(sk)-&gt;af_specific = &amp;tcp_sock_ipv4_specific;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>从上文得知inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict 函数是inet_csk_bind_conflict</li>
<li>af_ops在tcp_v4_init_sock初始化</li>
</ul>
<h3 id="inet-csk-bind-conflict分析"><a href="#inet-csk-bind-conflict分析" class="headerlink" title="inet_csk_bind_conflict分析"></a>inet_csk_bind_conflict分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_bind_conflict</span><span class="params">(<span class="keyword">const</span> struct sock *sk,</span></span></div><div class="line">			   <span class="keyword">const</span> struct inet_bind_bucket *tb, <span class="keyword">bool</span> relax)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk2</span>;</span></div><div class="line">	<span class="keyword">int</span> reuse = sk-&gt;sk_reuse;</div><div class="line">	<span class="keyword">int</span> reuseport = sk-&gt;sk_reuseport;</div><div class="line">	<span class="keyword">kuid_t</span> uid = sock_i_uid((struct sock *)sk);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Unlike other sk lookup places we do not check</div><div class="line">	 * for sk_net here, since _all_ the socks listed</div><div class="line">	 * in tb-&gt;owners list belong to the same net - the</div><div class="line">	 * one this bucket belongs to.</div><div class="line">	 */</div><div class="line"></div><div class="line">	sk_for_each_bound(sk2, &amp;tb-&gt;owners) &#123;</div><div class="line">	</div><div class="line">		<span class="comment">/*不会冲突情况1:socket绑定设备不同*/</span></div><div class="line">		<span class="keyword">if</span> (sk != sk2 &amp;&amp;</div><div class="line">		    !inet_v6_ipv6only(sk2) &amp;&amp;</div><div class="line">		    (!sk-&gt;sk_bound_dev_if ||</div><div class="line">		     !sk2-&gt;sk_bound_dev_if ||</div><div class="line">		     sk-&gt;sk_bound_dev_if == sk2-&gt;sk_bound_dev_if)) &#123;</div><div class="line">		     <span class="comment">/*</span></div><div class="line">		     *不会冲突情况2:地址不同</div><div class="line">		     */</div><div class="line">			<span class="keyword">if</span> ((!reuse || !sk2-&gt;sk_reuse ||</div><div class="line">			    sk2-&gt;sk_state == TCP_LISTEN) &amp;&amp;</div><div class="line">			    (!reuseport || !sk2-&gt;sk_reuseport ||</div><div class="line">			    (sk2-&gt;sk_state != TCP_TIME_WAIT &amp;&amp;</div><div class="line">			     !uid_eq(uid, sock_i_uid(sk2))))) &#123;</div><div class="line">			<span class="comment">/*</span></div><div class="line">			* 不会冲突情况3:</div><div class="line">			* 条件A: (reuse &amp;&amp; sk2-&gt;sk_reuse &amp;&amp; sk2-&gt;sk_state ！= TCP_LISTEN) </div><div class="line">			* 条件B：(reuseport </div><div class="line">			*       &amp;&amp; sk2-&gt;sk_reuseport </div><div class="line">			*       &amp;&amp;(sk2-&gt;sk_state == TCP_TIME_WAIT || uid_eq(uid, sock_i_uid(sk2))))</div><div class="line">			* 条件A和条件B只要有一个成立，就不会冲突</div><div class="line">			* 条件A成立条件：</div><div class="line">			* 	链上sock和待检查sock开启地址复用且链上状态不是监听状态</div><div class="line">			* 条件B成立条件：</div><div class="line">			*      链上sock和待检查sock开启端口复用且链表上状态为TW</div><div class="line">			*      链上sock和待检查sock开启端口复用且两个sock的uid相同</div><div class="line">			*/</div><div class="line">				<span class="keyword">if</span> (!sk2-&gt;sk_rcv_saddr || !sk-&gt;sk_rcv_saddr ||</div><div class="line">				    sk2-&gt;sk_rcv_saddr == sk-&gt;sk_rcv_saddr)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">/*没有开启relax，要绑定方不能复用，已绑定方不能复用，以绑定方处理监听状态*/</span></div><div class="line">			<span class="keyword">if</span> (!relax &amp;&amp; reuse &amp;&amp; sk2-&gt;sk_reuse &amp;&amp;</div><div class="line">			    sk2-&gt;sk_state != TCP_LISTEN) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (!sk2-&gt;sk_rcv_saddr || !sk-&gt;sk_rcv_saddr ||</div><div class="line">				    sk2-&gt;sk_rcv_saddr == sk-&gt;sk_rcv_saddr)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sk2 != <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在端口自动选择时可以重用端口条件为：</p>
<p>a设备不同<br>b绑定ip地址不同<br>c要绑定sock和已绑定sock地址允许重用，且已绑定socket不处于监听状态<br>d 链上sock和待检查sock开启端口复用且链表上状态为TW<br>e 链上sock和待检查sock开启端口复用且两个sock的uid相同</p>
</blockquote>
<p> 关于条件c的补充条件：即使c满足，也需要看relax的值确定，relax为TRUE时可复用，为fase时候不能复用<br> 自动端口时候relax为false，所以条件c消失，仅仅剩下a、b、d、e四个条件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;bind&quot;&gt;&lt;a href=&quot;#bind&quot; class=&quot;headerlink&quot; title=&quot;bind()&quot;&gt;&lt;/a&gt;bind()&lt;/h1&gt;&lt;p&gt;内核版本：3.10.0-514.16.1.el7.x86_64&lt;br&gt;下述源码分析均以tcp socket为背景&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, struct sockaddr *my_addr, &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; addrlen)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;socket文件描述符&lt;/li&gt;
&lt;li&gt;要绑定的承载地址和端口的结构体 struct sockaddr&lt;/li&gt;
&lt;li&gt;第二个参数struct sockaddr的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数负责绑定套接字的地址和端口，按照绑定者身份来分，会存在两种情况&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;情况1:绑定者为客户端，主动发起请求方，绑定地址和端口成功后，会使用该地址和端口进行发包&lt;br&gt;一般情况下，客户端的地址和端口都是其自动选择的，不需要绑定动作。&lt;br&gt;情况2:绑定者为服务端，被动连接接收方，绑定地址和端口成功后，客户端只能向该地址和端口发送连接请求。服务端往往需要绑定地址和端口。如果服务端存在多网卡情况，其只需要绑定服务端口即可，其目的地址就是客户端访问的目的地址。&lt;br&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="bind" scheme="http://vcpu.me/tags/bind/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
  </entry>
  
  <entry>
    <title>connect()实现源码分析</title>
    <link href="http://vcpu.me/connect/"/>
    <id>http://vcpu.me/connect/</id>
    <published>2017-06-09T09:30:34.000Z</published>
    <updated>2017-06-26T03:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h2><p>内核版本：3.10.0-514.16.1.el7.x86_64<br>下述源码分析均以tcp socket为背景</p>
<h2 id="用户态函数"><a href="#用户态函数" class="headerlink" title="用户态函数"></a>用户态函数</h2><p>int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);<br>参数：</p>
<blockquote>
<p>socketfd socket文件描述索引下标<br>addr 要连接的服务端的地址<br>addrlen addr的长度</p>
</blockquote>
<p>返回值:</p>
<blockquote>
<p>-1 失败<br> strerror(errno)可帮助获取失败原因<br> 常见失败原因有：<br> ETIMEOUT Connection timed out服务端一直未回复syn ack，尝试多次syn后返回<br> ECONNREFUSED Connection refused 服务端端口没有开启，回复rst<br> EHOSTUNREACH  No route to host 服务端在同局域网内arp请求获取办不到对方mac</p>
<p>0 成功</p>
</blockquote>
<p>用法:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">remote_addr</span>;</span></div><div class="line"><span class="built_in">memset</span>(&amp;remote_addr,<span class="number">0</span>,<span class="keyword">sizeof</span>(remote_addr));</div><div class="line">remote_addr.sin_family=AF_INET;</div><div class="line">remote_addr.sin_addr.s_addr=inet_addr(<span class="string">"180.97.33.108"</span>);</div><div class="line">remote_addr.sin_port = htons(<span class="number">80</span>);</div><div class="line">connect(fd,(struct sockaddr*)&amp;remote_addr,<span class="keyword">sizeof</span>(struct sockaddr)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>实例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 20000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"usage: %s IP\n"</span>, name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> server_fd, client_fd, length = <span class="number">0</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></div><div class="line">    <span class="keyword">socklen_t</span> socklen = <span class="keyword">sizeof</span>(server_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        usage(argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((client_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"create socket error, exit!\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    bzero(&amp;client_addr, <span class="keyword">sizeof</span>(client_addr));</div><div class="line">    client_addr.sin_family = AF_INET;</div><div class="line">    client_addr.sin_addr.s_addr = htons(INADDR_ANY);</div><div class="line"></div><div class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line">    server_addr.sin_port = htons(SERVER_PORT);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(connect(client_fd, (struct sockaddr*)&amp;server_addr, socklen) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not connect to %s, exit!\n"</span>, argv[<span class="number">1</span>]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行方法：<br>[root@localhost socketdemo]# gcc connect.c -o connect<br>[root@localhost socketdemo]# ./connect 192.168.55.181</p>
<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE2(socketcall, <span class="keyword">int</span>, call, <span class="keyword">unsigned</span> <span class="keyword">long</span> __user *, args)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> a[AUDITSC_ARGS];</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> a0, a1;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> len;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (call &lt; <span class="number">1</span> || call &gt; SYS_SENDMMSG)</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">	len = nargs[call];</div><div class="line">	<span class="keyword">if</span> (len &gt; <span class="keyword">sizeof</span>(a))</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">	<span class="comment">/* copy_from_user should be SMP safe. */</span></div><div class="line">	<span class="keyword">if</span> (copy_from_user(a, args, len))</div><div class="line">		<span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">	err = audit_socketcall(nargs[call] / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>), a);</div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		<span class="keyword">return</span> err;</div><div class="line"></div><div class="line">	a0 = a[<span class="number">0</span>];</div><div class="line">	a1 = a[<span class="number">1</span>];</div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (call) &#123;</div><div class="line">	<span class="keyword">case</span> SYS_SOCKET:</div><div class="line">		err = sys_socket(a0, a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_BIND:</div><div class="line">		err = sys_bind(a0, (struct sockaddr __user *)a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_CONNECT:</div><div class="line">		err = sys_connect(a0, (struct sockaddr __user *)a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	...</div><div class="line">	</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>系统调用sys_socketcall会携带（fd,serveraddr,serveraddrlen）参数</li>
<li>系统中断处理函数sys_socketcall会将参数从用户态考入到内核态局部变量a中</li>
<li>调用sys_connect函数 sys_connect(a0, (struct sockaddr __user *)a1, a[2]);</li>
</ul>
<h2 id="sys-connect执行入口分析"><a href="#sys-connect执行入口分析" class="headerlink" title="sys_connect执行入口分析"></a>sys_connect执行入口分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE3(connect, <span class="keyword">int</span>, fd, struct sockaddr __user *, uservaddr,<span class="keyword">int</span>,addrlen)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">address</span>;</span></div><div class="line">	<span class="keyword">int</span> err, fput_needed;</div><div class="line"></div><div class="line">	sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);</div><div class="line">	<span class="keyword">if</span> (!sock)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	err = move_addr_to_kernel(uservaddr, addrlen, &amp;address);</div><div class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out_put;</div><div class="line"></div><div class="line">	err =</div><div class="line">	    security_socket_connect(sock, (struct sockaddr *)&amp;address, addrlen);</div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		<span class="keyword">goto</span> out_put;</div><div class="line"></div><div class="line">	err = sock-&gt;ops-&gt;connect(sock, (struct sockaddr *)&amp;address, addrlen,</div><div class="line">				 sock-&gt;file-&gt;f_flags);</div><div class="line">out_put:</div><div class="line">	fput_light(sock-&gt;file, fput_needed);</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div></pre></td></tr></table></figure>
<ul>
<li>根据fd描述符号从当前进程current的files指针中的struct fd_table中的fd成员取出file</li>
<li>fdt-&gt;fd是一个数组用来管理当前进程的file指针</li>
<li>从file中privatedata中获取到socket变量</li>
<li>把connect连接的服务端地址存入内核空间中move_addr_to_kernel</li>
<li>sock-&gt;ops-&gt;connect 以tco为例，此处会调用inet_stream_connect 函数集合中的inet_stream_connect</li>
</ul>
<h3 id="inet-stream-connect分析"><a href="#inet-stream-connect分析" class="headerlink" title="inet_stream_connect分析"></a>inet_stream_connect分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_stream_connect</span><span class="params">(struct socket *sock, struct sockaddr *uaddr,</span></span></div><div class="line">			<span class="keyword">int</span> addr_len, <span class="keyword">int</span> flags)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	lock_sock(sock-&gt;sk);</div><div class="line">	err = __inet_stream_connect(sock, uaddr, addr_len, flags);</div><div class="line">	release_sock(sock-&gt;sk);</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>inet_stream_connect() 为tcp socket时候connect动作调用的函数<br>改函数会调用__inet_stream_connect函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,</div><div class="line">			  <span class="keyword">int</span> addr_len, <span class="keyword">int</span> flags)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line">	<span class="keyword">int</span> err;</div><div class="line">	<span class="keyword">long</span> timeo;</div><div class="line"></div><div class="line">	<span class="comment">//socket地址长度检查，不合法返回</span></div><div class="line">	<span class="keyword">if</span> (addr_len &lt; <span class="keyword">sizeof</span>(uaddr-&gt;sa_family))</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line">   <span class="comment">// 地址协议族检查，如果不合法则关闭连接</span></div><div class="line">	<span class="keyword">if</span> (uaddr-&gt;sa_family == AF_UNSPEC) &#123;</div><div class="line">		err = sk-&gt;sk_prot-&gt;disconnect(sk, flags);</div><div class="line">		sock-&gt;state = err ? SS_DISCONNECTING : SS_UNCONNECTED;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> (sock-&gt;state) &#123;</div><div class="line">	<span class="comment">//非法参数</span></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	<span class="comment">//该socket和对端连接已经建立</span></div><div class="line">	<span class="keyword">case</span> SS_CONNECTED:</div><div class="line">		err = -EISCONN;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	<span class="comment">//该socket和对端连接建立中</span></div><div class="line">	<span class="keyword">case</span> SS_CONNECTING:</div><div class="line">		err = -EALREADY;</div><div class="line">		<span class="comment">/* Fall out of switch with err, set for this state */</span></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="comment">//该socket和对未连接</span></div><div class="line">	<span class="keyword">case</span> SS_UNCONNECTED:</div><div class="line">		err = -EISCONN;</div><div class="line">		<span class="comment">//如果未连接，但是socket还不是TCP_CLOSE状态错误返回</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE)</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">		<span class="comment">//tcp调用tcp_v4_connect，发送syn</span></div><div class="line">		err = sk-&gt;sk_prot-&gt;connect(sk, uaddr, addr_len);</div><div class="line">		<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">		<span class="comment">//发送syn后sock状态从未连接更新为连接中</span></div><div class="line">		sock-&gt;state = SS_CONNECTING;</div><div class="line"></div><div class="line">		<span class="comment">/* Just entered SS_CONNECTING state; the only</span></div><div class="line">		 * difference is that return value in non-blocking</div><div class="line">		 * case is EINPROGRESS, rather than EALREADY.</div><div class="line">		 */</div><div class="line">		err = -EINPROGRESS;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//默认情况下未设置非阻塞socket标志，timeo不为0，设置非阻塞，该值为0</span></div><div class="line">	timeo = sock_sndtimeo(sk, flags &amp; O_NONBLOCK);</div><div class="line"></div><div class="line">	<span class="comment">//发送syn后等待后续握手完成</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 阻塞socket</div><div class="line">	* inet_wait_for_connect 会等待协议栈层的处理</div><div class="line">	* 1.等待超过timeo，connect返回EINPROGRESS 表明正在处理</div><div class="line">	* 2.收到信号 </div><div class="line">	* 3.正常完成握手，返回0</div><div class="line">	* 非阻塞socket</div><div class="line">	* 直接退出connect函数并返回EINPROGRESS，表明协议栈正在处理</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) &#123;</div><div class="line">		<span class="keyword">int</span> writebias = (sk-&gt;sk_protocol == IPPROTO_TCP) &amp;&amp;</div><div class="line">				tcp_sk(sk)-&gt;fastopen_req &amp;&amp;</div><div class="line">				tcp_sk(sk)-&gt;fastopen_req-&gt;data ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">/* Error code is set above */</span></div><div class="line">		<span class="keyword">if</span> (!timeo || !inet_wait_for_connect(sk, timeo, writebias))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">		err = sock_intr_errno(timeo);</div><div class="line">		<span class="keyword">if</span> (signal_pending(current))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Connection was closed by RST, timeout, ICMP error</span></div><div class="line">	 * or another process disconnected us.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state == TCP_CLOSE)</div><div class="line">		<span class="keyword">goto</span> sock_error;</div><div class="line"></div><div class="line">	<span class="comment">/* sk-&gt;sk_err may be not zero now, if RECVERR was ordered by user</span></div><div class="line">	 * and error was received after socket entered established state.</div><div class="line">	 * Hence, it is handled normally after connect() return successfully.</div><div class="line">	 */</div><div class="line">	<span class="comment">//TCP握手完成，连接已经建立</span></div><div class="line">	sock-&gt;state = SS_CONNECTED;</div><div class="line">	err = <span class="number">0</span>;</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line"></div><div class="line"><span class="comment">//异常处理，关闭连接</span></div><div class="line">sock_error:</div><div class="line">	err = sock_error(sk) ? : -ECONNABORTED;</div><div class="line">	sock-&gt;state = SS_UNCONNECTED;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;disconnect(sk, flags))</div><div class="line">		sock-&gt;state = SS_DISCONNECTING;</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>__inet_stream_connect检查地址长度和协议族</li>
<li>检查sock状态，正常情况下状态为SS_UNCONNECTED</li>
<li>sk-&gt;sk_prot-&gt;connect tcp_v4_connect来发送syn</li>
<li>在syn包发完以后会有两种处理情况</li>
</ul>
<blockquote>
<p>情况1:立即返回，针对于非阻塞socket，此时协议栈正在处理握手connect会返回-EINPROGRESS<br>情况2:阻塞运行</p>
<blockquote>
<p>阻塞时间超时后，connect返回-EINPROGRESS<br>收到信号，connect返回-ERESTARTSYS,-EINTR</p>
</blockquote>
</blockquote>
<h3 id="inet-wait-for-connect函数分析"><a href="#inet-wait-for-connect函数分析" class="headerlink" title="inet_wait_for_connect函数分析"></a>inet_wait_for_connect函数分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">inet_wait_for_connect</span><span class="params">(struct sock *sk, <span class="keyword">long</span> timeo, <span class="keyword">int</span> writebias)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//初始化等待队列链表,设置队列唤醒后回调函数autoremove_wake_function</span></div><div class="line">    DEFINE_WAIT(wait);</div><div class="line"></div><div class="line">	prepare_to_wait(sk_sleep(sk), &amp;wait, TASK_INTERRUPTIBLE);</div><div class="line">	sk-&gt;sk_write_pending += writebias;</div><div class="line"></div><div class="line">	<span class="comment">/* Basic assumption: if someone sets sk-&gt;sk_err, he _must_</span></div><div class="line">	 * change state of the socket from TCP_SYN_*.</div><div class="line">	 * Connect() does not allow to get error notifications</div><div class="line">	 * without closing the socket.</div><div class="line">	 */</div><div class="line">	<span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) &#123;</div><div class="line">		release_sock(sk);<span class="comment">/*等下要睡眠了释放sk锁*/</span></div><div class="line">		</div><div class="line">		</div><div class="line">		timeo = schedule_timeout(timeo);</div><div class="line">		<span class="comment">/*</span></div><div class="line">		* 调用schedule_timeout sleep until timeout</div><div class="line">		* 收到信号后，timeout值返回剩余等待时间</div><div class="line">		* 超时timeout后，返回0</div><div class="line">		*/</div><div class="line">		</div><div class="line">		<span class="comment">/*进程被唤醒后新上sk锁*/</span></div><div class="line">		lock_sock(sk);</div><div class="line">		</div><div class="line">		<span class="comment">/*进程有带处理信号，或者睡眠超时，推出循环*/</span></div><div class="line">		<span class="keyword">if</span> (signal_pending(current) || !timeo)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		prepare_to_wait(sk_sleep(sk), &amp;wait, TASK_INTERRUPTIBLE);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*等待结束后，将进程从等待队列删除，标记为TASK_RUNNING*/</span></div><div class="line">	finish_wait(sk_sleep(sk), &amp;wait);</div><div class="line">	sk-&gt;sk_write_pending -= writebias;</div><div class="line">	<span class="keyword">return</span> timeo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>DEFINE_WAIT函数很重要其设置了唤醒时候删除队列成员调用的回调函数autoremove_wake_funtion</li>
<li>睡眠前进程被设置成TASK_INTERRUPTIBLE状态</li>
<li>SO_SNDTIMEO选项对上述的睡眠非常重要</li>
<li>SO_SNDTIMEO被设置，则睡眠时间会安装设置值</li>
<li>SO_SNDTIMEO没有被设置，则在没有收到信号前一只阻塞</li>
<li>睡眠结束，进程从睡眠队列中删除，并标记为TASK_RUNNING</li>
</ul>
<h3 id="prepare-to-wait实现分析"><a href="#prepare-to-wait实现分析" class="headerlink" title="prepare_to_wait实现分析"></a>prepare_to_wait实现分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_to_wait</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait, <span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line"></div><div class="line">	wait-&gt;flags &amp;= ~WQ_FLAG_EXCLUSIVE;</div><div class="line">	spin_lock_irqsave(&amp;q-&gt;lock, flags);</div><div class="line">	<span class="keyword">if</span> (list_empty(&amp;wait-&gt;task_list))</div><div class="line">		__add_wait_queue(q, wait);</div><div class="line">	set_current_state(state);</div><div class="line">	spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>prepare_to_wait(sk_sleep(sk), &amp;wait, TASK_INTERRUPTIBLE);</li>
<li>把wait放入q队列中，设置当前进程状态为TASK_INTERRUPTIBLE</li>
<li>TASK_INTERRUPTIBLE 是一种睡眠信号</li>
<li>标记TASK_INTERRUPTIBLE的信号会被唤醒并处理信号</li>
</ul>
<h3 id="阻塞socket唤醒机制"><a href="#阻塞socket唤醒机制" class="headerlink" title="阻塞socket唤醒机制"></a>阻塞socket唤醒机制</h3><p>[root@localhost stp]# stap bt.stp sock_def_wakeup</p>
<blockquote>
<p>WARNING: Missing unwind data for a module, rerun with ‘stap -d e1000’<br>—————-START————————-<br>In process [swapper/2]<br>RIP: ffffffff81558150<br>RSP: ffff88003fd03970  EFLAGS: 00000246<br>RAX: 0000000000004308 RBX: ffff88003a82a6c0 RCX: 0000000000000000<br>RDX: 0000000050000000 RSI: 0000000000ca00c8 RDI: ffff88003a82a6c0<br>RBP: ffff88003fd03988 R08: ffff88003db89708 R09: ffff88003e001800<br>R10: ffffffff815dabca R11: 0000000000000000 R12: ffff88001bfa3700<br>R13: ffff880002db6762 R14: 0000000000000218 R15: ffff880002db675a<br>FS:  0000000000000000(0000) GS:ffff88003fd00000(0000) knlGS:0000000000000000<br>CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b<br>CR2: 00007ffaf3049072 CR3: 000000003b0b7000 CR4: 00000000000406e0<br> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]<br> 0xffffffff815cbc09 : tcp_finish_connect+0xc9/0x120 [kernel]<br> 0xffffffff815cc297 : tcp_rcv_state_process+0x637/0xf20 [kernel]<br> 0xffffffff815d5ffb : tcp_v4_do_rcv+0x17b/0x340 [kernel]<br> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]<br> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]<br> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]<br> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]<br> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]<br> 0xffffffff815700d2 : <strong>netif_receive_skb_core+0x582/0x800 [kernel]<br> 0xffffffff81570368 : </strong>netif_receive_skb+0x18/0x60 [kernel]<br> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]<br> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]<br> 0xffffffffa00472fc [e1000]<br>—————-END————————-</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_finish_connect</span><span class="params">(struct sock *sk, struct sk_buff *skb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span></div><div class="line"></div><div class="line">	tcp_set_state(sk, TCP_ESTABLISHED);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (skb != <span class="literal">NULL</span>) &#123;</div><div class="line">		icsk-&gt;icsk_af_ops-&gt;sk_rx_dst_set(sk, skb);</div><div class="line">		security_inet_conn_established(sk, skb);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Make sure socket is routed, for correct metrics.  */</span></div><div class="line">	icsk-&gt;icsk_af_ops-&gt;rebuild_header(sk);</div><div class="line"></div><div class="line">	tcp_init_metrics(sk);</div><div class="line"></div><div class="line">	tcp_init_congestion_control(sk);</div><div class="line"></div><div class="line">	<span class="comment">/* Prevent spurious tcp_cwnd_restart() on first data</span></div><div class="line">	 * packet.</div><div class="line">	 */</div><div class="line">	tp-&gt;lsndtime = tcp_time_stamp;</div><div class="line"></div><div class="line">	tcp_init_buffer_space(sk);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sock_flag(sk, SOCK_KEEPOPEN))</div><div class="line">		inet_csk_reset_keepalive_timer(sk, keepalive_time_when(tp));</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!tp-&gt;rx_opt.snd_wscale)</div><div class="line">		__tcp_fast_path_on(tp, tp-&gt;snd_wnd);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		tp-&gt;pred_flags = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!sock_flag(sk, SOCK_DEAD)) &#123;</div><div class="line">		<span class="comment">/*握手完成唤醒所有进程*/</span></div><div class="line">		sk-&gt;sk_state_change(sk);</div><div class="line">		sk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sock_def_wakeup -&gt;wake_up_interruptible_all </li>
<li>上述过程发声在三次握手完成后，TCP从syn send或者syn rcv切换到establish状态时候发生</li>
<li>tcp_finish_connect-&gt;sk-&gt;sk_state_change[sock_def_wakeup]</li>
<li>此次唤醒是全部唤醒sk上等待队列的进程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;connect&quot;&gt;&lt;a href=&quot;#connect&quot; class=&quot;headerlink&quot; title=&quot;connect()&quot;&gt;&lt;/a&gt;connect()&lt;/h2&gt;&lt;p&gt;内核版本：3.10.0-514.16.1.el7.x86_64&lt;br&gt;下述源码分析均以tcp socket为背景&lt;/p&gt;
&lt;h2 id=&quot;用户态函数&quot;&gt;&lt;a href=&quot;#用户态函数&quot; class=&quot;headerlink&quot; title=&quot;用户态函数&quot;&gt;&lt;/a&gt;用户态函数&lt;/h2&gt;&lt;p&gt;int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);&lt;br&gt;参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;socketfd socket文件描述索引下标&lt;br&gt;addr 要连接的服务端的地址&lt;br&gt;addrlen addr的长度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回值:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-1 失败&lt;br&gt; strerror(errno)可帮助获取失败原因&lt;br&gt; 常见失败原因有：&lt;br&gt; ETIMEOUT Connection timed out服务端一直未回复syn ack，尝试多次syn后返回&lt;br&gt; ECONNREFUSED Connection refused 服务端端口没有开启，回复rst&lt;br&gt; EHOSTUNREACH  No route to host 服务端在同局域网内arp请求获取办不到对方mac&lt;/p&gt;
&lt;p&gt;0 成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用法:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remote_addr&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;remote_addr,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(remote_addr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote_addr.sin_family=AF_INET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote_addr.sin_addr.s_addr=inet_addr(&lt;span class=&quot;string&quot;&gt;&quot;180.97.33.108&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote_addr.sin_port = htons(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connect(fd,(struct sockaddr*)&amp;amp;remote_addr,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(struct sockaddr)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>socket()实现源码分析</title>
    <link href="http://vcpu.me/socket/"/>
    <id>http://vcpu.me/socket/</id>
    <published>2017-06-09T09:22:34.000Z</published>
    <updated>2017-06-22T10:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket"><a href="#socket" class="headerlink" title="socket()"></a>socket()</h1><p>内核版本：3.10.0-514.16.1.el7.x86_64</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;          /* See NOTES */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</div><div class="line">fd=socket(PF_INET,SOCK_STREAM,<span class="number">0</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-接口说明："><a href="#1-接口说明：" class="headerlink" title="(1).接口说明："></a>(1).接口说明：</h2><h3 id="按照顺序可传入如下参数："><a href="#按照顺序可传入如下参数：" class="headerlink" title="按照顺序可传入如下参数："></a>按照顺序可传入如下参数：</h3><ul>
<li>PF_INEAT</li>
<li>SOCK_STREAM,SOCK_DGRAM,SOCK_RAW</li>
<li>IPPROTO_TCP,IPPROTO_UDP,IPPROTO_IP</li>
</ul>
<h3 id="返回值说明"><a href="#返回值说明" class="headerlink" title="返回值说明"></a>返回值说明</h3><ul>
<li>EAFNOSUPPORT 不支持地址类型</li>
<li>EMFILE     进程文件表溢出</li>
<li>ENFILE 核心内存不足无法建立新的socket</li>
<li>EINVAL 参数domain/type/protocol不合法</li>
<li>EACCES 权限不允许</li>
<li>ENOBUFS/ENOMEM 内存不足</li>
<li>EPROTONOSUPPORT domain指定的类型不支持参数type或者protocol</li>
</ul>
<h2 id="2-内核调用栈"><a href="#2-内核调用栈" class="headerlink" title="(2).内核调用栈"></a>(2).内核调用栈</h2><p><img src="/myimages/socket.png" alt="socket"></p>
<h2 id="3-结构体说明"><a href="#3-结构体说明" class="headerlink" title="(3).结构体说明"></a>(3).结构体说明</h2><blockquote>
<p>struct socket</p>
<blockquote>
<p>面向用户态的结构体<br>基于虚拟文件系统创建<br>创建socket时最先创建的结构体</p>
</blockquote>
<p>struct sock </p>
<blockquote>
<p>网络层socket</p>
</blockquote>
<p>struct inet_sock</p>
<blockquote>
<p>INET域socket表示<br>提供INET域的一些属性，TTL、 组播、 地址 、端口</p>
</blockquote>
<p>struct raw_socket、struct udp—sock、 struct inet_connection_sock </p>
<blockquote>
<p>是对struct inet_sock的扩展<br>struct raw_socket要处理ICMP<br>struct udp_sock udp协议socket<br>struct inet_connection_sock面向连接socket<br>struct tcp_sock TCP协议socket ，对inet_connection_sock扩展，增加了滑动窗口等拥塞控制属性<br>struct inet_timewait_sock网络层超时控制使用<br>struct tcp_timewait_sock TCP协议超时控制使用</p>
</blockquote>
</blockquote>
<h2 id="4-struct-socket创建源码分析"><a href="#4-struct-socket创建源码分析" class="headerlink" title="(4).struct socket创建源码分析"></a>(4).struct socket创建源码分析</h2><h3 id="4-1-sock-alloc函数"><a href="#4-1-sock-alloc函数" class="headerlink" title="(4.1).sock_alloc函数"></a>(4.1).sock_alloc函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> struct socket *<span class="title">sock_alloc</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line"></div><div class="line">	inode = new_inode_pseudo(sock_mnt-&gt;mnt_sb);</div><div class="line">	<span class="keyword">if</span> (!inode)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	sock = SOCKET_I(inode);</div><div class="line"></div><div class="line">	kmemcheck_annotate_bitfield(sock, type);</div><div class="line">	inode-&gt;i_ino = get_next_ino();</div><div class="line">	inode-&gt;i_mode = S_IFSOCK | S_IRWXUGO;</div><div class="line">	inode-&gt;i_uid = current_fsuid();</div><div class="line">	inode-&gt;i_gid = current_fsgid();</div><div class="line">	inode-&gt;i_op = &amp;sockfs_inode_ops;</div><div class="line"></div><div class="line">	this_cpu_add(sockets_in_use, <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> sock;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>一起申请两块内存struct socket和struct inode</li>
<li>两块内存用struct socket_alloc联系起来</li>
<li>inode是linux用来刻画一个存放在内存中的文件的</li>
<li>socket是一种网络文件类型，可以通过文件描述符使用read和write等文件操作函数操作socket</li>
<li>有了inode就支持了虚拟文件系统的操作</li>
</ul>
<h3 id="4-2-sock-alloc-gt-new-inode-pseudo-gt-alloc-inode"><a href="#4-2-sock-alloc-gt-new-inode-pseudo-gt-alloc-inode" class="headerlink" title="(4.2).sock_alloc-&gt;new_inode_pseudo-&gt;alloc_inode"></a>(4.2).sock_alloc-&gt;new_inode_pseudo-&gt;alloc_inode</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function">struct inode *<span class="title">new_inode_pseudo</span><span class="params">(struct super_block *sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> = <span class="title">alloc_inode</span>(<span class="title">sb</span>);</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (inode) &#123;</div><div class="line">		spin_lock(&amp;inode-&gt;i_lock);</div><div class="line">		inode-&gt;i_state = <span class="number">0</span>;</div><div class="line">		spin_unlock(&amp;inode-&gt;i_lock);</div><div class="line">		INIT_LIST_HEAD(&amp;inode-&gt;i_sb_list);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> inode;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> struct inode *<span class="title">alloc_inode</span><span class="params">(struct super_block *sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sb-&gt;s_op-&gt;alloc_inode)</div><div class="line">		inode = sb-&gt;s_op-&gt;alloc_inode(sb);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		inode = kmem_cache_alloc(inode_cachep, GFP_KERNEL);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!inode)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(inode_init_always(sb, inode))) &#123;</div><div class="line">		<span class="keyword">if</span> (inode-&gt;i_sb-&gt;s_op-&gt;destroy_inode)</div><div class="line">			inode-&gt;i_sb-&gt;s_op-&gt;destroy_inode(inode);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			kmem_cache_free(inode_cachep, inode);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> inode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>alloc_inode获取内存有两种方式 1.通过自己alloc_inode分配 2.从高速缓存中分配</li>
</ul>
<h3 id="4-3-alloc-inode-gt-sock-alloc-inode"><a href="#4-3-alloc-inode-gt-sock-alloc-inode" class="headerlink" title="(4.3).alloc_inode -&gt; sock_alloc_inode"></a>(4.3).alloc_inode -&gt; sock_alloc_inode</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> struct inode *<span class="title">sock_alloc_inode</span><span class="params">(struct super_block *sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_alloc</span> *<span class="title">ei</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	ei = kmem_cache_alloc(sock_inode_cachep, GFP_KERNEL);</div><div class="line">	<span class="keyword">if</span> (!ei)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	wq = kmalloc(<span class="keyword">sizeof</span>(*wq), GFP_KERNEL);</div><div class="line">	<span class="keyword">if</span> (!wq) &#123;</div><div class="line">		kmem_cache_free(sock_inode_cachep, ei);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">	init_waitqueue_head(&amp;wq-&gt;wait);</div><div class="line">	wq-&gt;fasync_list = <span class="literal">NULL</span>;</div><div class="line">	RCU_INIT_POINTER(ei-&gt;socket.wq, wq);</div><div class="line"></div><div class="line">	ei-&gt;socket.state = SS_UNCONNECTED;</div><div class="line">	ei-&gt;socket.flags = <span class="number">0</span>;</div><div class="line">	ei-&gt;socket.ops = <span class="literal">NULL</span>;</div><div class="line">	ei-&gt;socket.sk = <span class="literal">NULL</span>;</div><div class="line">	ei-&gt;socket.file = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &amp;ei-&gt;vfs_inode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>socket结构体最终会调用上述函数申请内存</li>
<li>该函数会在sock_init中被注册和挂载到系统上</li>
</ul>
<h3 id="4-4-sock-init-中sock-allok-inode挂载过程"><a href="#4-4-sock-init-中sock-allok-inode挂载过程" class="headerlink" title="(4.4).sock_init 中sock_allok_inode挂载过程"></a>(4.4).sock_init 中sock_allok_inode挂载过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">err = register_filesystem(&amp;sock_fs_type);</div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		<span class="keyword">goto</span> out_fs;</div><div class="line">	sock_mnt = kern_mount(&amp;sock_fs_type);</div><div class="line">	<span class="keyword">if</span> (IS_ERR(sock_mnt)) &#123;</div><div class="line">		err = PTR_ERR(sock_mnt);</div><div class="line">		<span class="keyword">goto</span> out_mount;</div><div class="line">	...</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> <span class="title">sock_fs_type</span> = &#123;</span></div><div class="line">	.name =		<span class="string">"sockfs"</span>,</div><div class="line">	.mount =	sockfs_mount,</div><div class="line">	.kill_sb =	kill_anon_super,</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">static</span> struct dentry *<span class="title">sockfs_mount</span><span class="params">(struct file_system_type *fs_type,</span></span></div><div class="line">			 <span class="keyword">int</span> flags, <span class="keyword">const</span> <span class="keyword">char</span> *dev_name, <span class="keyword">void</span> *data)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> mount_pseudo(fs_type, <span class="string">"socket:"</span>, &amp;sockfs_ops,</div><div class="line">		&amp;sockfs_dentry_operations, SOCKFS_MAGIC);</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> <span class="title">sockfs_ops</span> = &#123;</span></div><div class="line">	.alloc_inode	= sock_alloc_inode,</div><div class="line">	.destroy_inode	= sock_destroy_inode,</div><div class="line">	.statfs		= simple_statfs,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>sock_init -&gt; register mount -&gt; sock_fs_type-&gt;sockfs_mount-&gt;sockfs_ops-&gt;sock_alloc_node</li>
</ul>
<h3 id="4-5-pf-gt-create-即TCP／IP协议族的创建函数inet-create初始化步骤"><a href="#4-5-pf-gt-create-即TCP／IP协议族的创建函数inet-create初始化步骤" class="headerlink" title="(4.5).pf-&gt;create 即TCP／IP协议族的创建函数inet_create初始化步骤"></a>(4.5).pf-&gt;create 即TCP／IP协议族的创建函数inet_create初始化步骤</h3><h4 id="4-5-1-PF-INET协议族的create函数inet-create会被组册"><a href="#4-5-1-PF-INET协议族的create函数inet-create会被组册" class="headerlink" title="(4.5.1).PF_INET协议族的create函数inet_create会被组册"></a>(4.5.1).PF_INET协议族的create函数inet_create会被组册</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">void</span>)sock_register(&amp;inet_family_ops);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">net_proto_family</span> <span class="title">inet_family_ops</span> = &#123;</span></div><div class="line">	.family = PF_INET,</div><div class="line">	.create = inet_create,</div><div class="line">	.owner	= THIS_MODULE,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="4-5-2-注册过程"><a href="#4-5-2-注册过程" class="headerlink" title="(4.5.2).注册过程"></a>(4.5.2).注册过程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_register</span><span class="params">(<span class="keyword">const</span> struct net_proto_family *ops)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ops-&gt;family &gt;= NPROTO) &#123;</div><div class="line">		printk(KERN_CRIT <span class="string">"protocol %d &gt;= NPROTO(%d)\n"</span>, ops-&gt;family,</div><div class="line">		       NPROTO);</div><div class="line">		<span class="keyword">return</span> -ENOBUFS;</div><div class="line">	&#125;</div><div class="line">	spin_lock(&amp;net_family_lock);</div><div class="line">	<span class="keyword">if</span> (rcu_dereference_protected(net_families[ops-&gt;family],</div><div class="line">				      lockdep_is_held(&amp;net_family_lock)))</div><div class="line">		err = -EEXIST;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		rcu_assign_pointer(net_families[ops-&gt;family], ops);</div><div class="line">		err = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	spin_unlock(&amp;net_family_lock);</div><div class="line">	printk(KERN_INFO <span class="string">"NET: Registered protocol family %d\n"</span>, ops-&gt;family);</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>协议族选项ops会根基协议族类型PF_INET被放置到net_families系统全局变量中</li>
</ul>
<h4 id="4-5-3-sock-create使用过程"><a href="#4-5-3-sock-create使用过程" class="headerlink" title="(4.5.3).__sock_create使用过程"></a>(4.5.3).__sock_create使用过程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">socket.c/__sock_create</div><div class="line">...</div><div class="line">rcu_read_lock();</div><div class="line">	pf = rcu_dereference(net_families[family]);</div><div class="line">	err = -EAFNOSUPPORT;</div><div class="line">	<span class="keyword">if</span> (!pf)</div><div class="line">		<span class="keyword">goto</span> out_release;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * We will call the -&gt;create function, that possibly is in a loadable</div><div class="line">	 * module, so we have to bump that loadable module refcnt first.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (!try_module_get(pf-&gt;owner))</div><div class="line">		<span class="keyword">goto</span> out_release;</div><div class="line"></div><div class="line">	<span class="comment">/* Now protected by module ref count */</span></div><div class="line">	rcu_read_unlock();</div><div class="line"></div><div class="line">	err = pf-&gt;create(net, sock, protocol, kern);</div><div class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out_module_put;</div></pre></td></tr></table></figure>
<ul>
<li>根据socket传输过来的协议族PF_INET查找全局变量net_families获取ops</li>
<li>通过ops-&gt;create调用inet_create根据具体协议创建网络层socket struct sock</li>
</ul>
<h3 id="4-6-inet-create都干了什么？"><a href="#4-6-inet-create都干了什么？" class="headerlink" title="(4.6).inet_create都干了什么？"></a>(4.6).inet_create都干了什么？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inet_create</span><span class="params">(struct net *net, struct socket *sock, <span class="keyword">int</span> protocol,</span></span></div><div class="line">		       <span class="keyword">int</span> kern)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">proto</span> *<span class="title">answer_prot</span>;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> answer_flags;</div><div class="line">	<span class="keyword">int</span> try_loading_module = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (protocol &lt; <span class="number">0</span> || protocol &gt;= IPPROTO_MAX)</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">	sock-&gt;state = SS_UNCONNECTED;<span class="comment">//步骤1:设置socket状态SS_UNCONNECTED</span></div><div class="line"></div><div class="line">	<span class="comment">/* Look for the requested type/protocol pair. */</span></div><div class="line">lookup_protocol:</div><div class="line">	err = -ESOCKTNOSUPPORT;</div><div class="line">	rcu_read_lock();／／步骤<span class="number">2</span>:根据socket协议找到inet处理函数 connect、bind、accept、listen、等</div><div class="line">	list_for_each_entry_rcu(answer, &amp;inetsw[sock-&gt;type], <span class="built_in">list</span>) &#123;</div><div class="line"></div><div class="line">		err = <span class="number">0</span>;</div><div class="line">		<span class="comment">/* Check the non-wild match. */</span></div><div class="line">		<span class="keyword">if</span> (protocol == answer-&gt;protocol) &#123;</div><div class="line">			<span class="keyword">if</span> (protocol != IPPROTO_IP)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">/* Check for the two wild cases. */</span></div><div class="line">			<span class="keyword">if</span> (IPPROTO_IP == protocol) &#123;</div><div class="line">				protocol = answer-&gt;protocol;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (IPPROTO_IP == answer-&gt;protocol)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		err = -EPROTONOSUPPORT;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(err)) &#123;</div><div class="line">		<span class="keyword">if</span> (try_loading_module &lt; <span class="number">2</span>) &#123;</div><div class="line">			rcu_read_unlock();</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Be more specific, e.g. net-pf-2-proto-132-type-1</div><div class="line">			 * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)</div><div class="line">			 */</div><div class="line">			<span class="keyword">if</span> (++try_loading_module == <span class="number">1</span>)</div><div class="line">				request_module(<span class="string">"net-pf-%d-proto-%d-type-%d"</span>,</div><div class="line">					       PF_INET, protocol, sock-&gt;type);</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Fall back to generic, e.g. net-pf-2-proto-132</div><div class="line">			 * (net-pf-PF_INET-proto-IPPROTO_SCTP)</div><div class="line">			 */</div><div class="line">			<span class="keyword">else</span></div><div class="line">				request_module(<span class="string">"net-pf-%d-proto-%d"</span>,</div><div class="line">					       PF_INET, protocol);</div><div class="line">			<span class="keyword">goto</span> lookup_protocol;</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			<span class="keyword">goto</span> out_rcu_unlock;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = -EPERM;</div><div class="line">	<span class="keyword">if</span> (sock-&gt;type == SOCK_RAW &amp;&amp; !kern &amp;&amp;</div><div class="line">	    !ns_capable(net-&gt;user_ns, CAP_NET_RAW))</div><div class="line">		<span class="keyword">goto</span> out_rcu_unlock;</div><div class="line">／／步骤<span class="number">3</span>: 把协协议的inet操作集合赋值给socket结构的ops</div><div class="line">	sock-&gt;ops = answer-&gt;ops;</div><div class="line">	answer_prot = answer-&gt;prot;</div><div class="line">	answer_flags = answer-&gt;flags;</div><div class="line">	rcu_read_unlock();</div><div class="line"></div><div class="line">	WARN_ON(answer_prot-&gt;slab == <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	err = -ENOBUFS;</div><div class="line">	／／步骤<span class="number">4</span>:申请<span class="class"><span class="keyword">struct</span> <span class="title">sock</span>结构体，并切把协议操作集合赋值给<span class="title">sock</span>结构体</span></div><div class="line">	／／<span class="title">sk</span>-&gt;<span class="title">sk_prot</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot_creator</span> =协议操作集合;</div><div class="line">	sk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot);</div><div class="line">	<span class="keyword">if</span> (sk == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	err = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (INET_PROTOSW_REUSE &amp; answer_flags)</div><div class="line">		sk-&gt;sk_reuse = SK_CAN_REUSE;</div><div class="line">／／步骤<span class="number">5</span>：inet_sock进行相关初始化</div><div class="line">	inet = inet_sk(sk);</div><div class="line">	inet-&gt;is_icsk = (INET_PROTOSW_ICSK &amp; answer_flags) != <span class="number">0</span>;</div><div class="line"></div><div class="line">	inet-&gt;nodefrag = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (SOCK_RAW == sock-&gt;type) &#123;</div><div class="line">		inet-&gt;inet_num = protocol;</div><div class="line">		<span class="keyword">if</span> (IPPROTO_RAW == protocol)</div><div class="line">			inet-&gt;hdrincl = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (net-&gt;sysctl_ip_no_pmtu_disc)</div><div class="line">		inet-&gt;pmtudisc = IP_PMTUDISC_DONT;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		inet-&gt;pmtudisc = IP_PMTUDISC_WANT;</div><div class="line"></div><div class="line">	inet-&gt;inet_id = <span class="number">0</span>;</div><div class="line"></div><div class="line">	sock_init_data(sock, sk);</div><div class="line"></div><div class="line">	sk-&gt;sk_destruct	   = inet_sock_destruct;</div><div class="line">	sk-&gt;sk_protocol	   = protocol;</div><div class="line">	sk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;</div><div class="line"></div><div class="line">	inet-&gt;uc_ttl	= <span class="number">-1</span>;</div><div class="line">	inet-&gt;mc_loop	= <span class="number">1</span>;</div><div class="line">	inet-&gt;mc_ttl	= <span class="number">1</span>;</div><div class="line">	inet-&gt;mc_all	= <span class="number">1</span>;</div><div class="line">	inet-&gt;mc_index	= <span class="number">0</span>;</div><div class="line">	inet-&gt;mc_list	= <span class="literal">NULL</span>;</div><div class="line">	inet-&gt;rcv_tos	= <span class="number">0</span>;</div><div class="line"></div><div class="line">	sk_refcnt_debug_inc(sk);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (inet-&gt;inet_num) &#123;</div><div class="line">		<span class="comment">/* It assumes that any protocol which allows</span></div><div class="line">		 * the user to assign a number at socket</div><div class="line">		 * creation time automatically</div><div class="line">		 * shares.</div><div class="line">		 */</div><div class="line">		inet-&gt;inet_sport = htons(inet-&gt;inet_num);</div><div class="line">		<span class="comment">/* Add to protocol hash chains. */</span></div><div class="line">		sk-&gt;sk_prot-&gt;hash(sk);</div><div class="line">	&#125;</div><div class="line">／／步骤<span class="number">6</span>:调用协议层初始化函数tcp_v4_init_sock()进行始化</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;init) &#123;</div><div class="line">		err = sk-&gt;sk_prot-&gt;init(sk);</div><div class="line">		<span class="keyword">if</span> (err)</div><div class="line">			sk_common_release(sk);</div><div class="line">	&#125;</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">out_rcu_unlock:</div><div class="line">	rcu_read_unlock();</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>设置socket状态SS_UNCONNECTED</li>
<li>根据协议类型找到具体的协议类型操作集合，例如协议处理函数tcp_proc和inet层处理函数集合inet_stream_ops</li>
<li>socket-&gt;ops 获得协议操作集合inet_stream_ops</li>
<li>申请sock，并把tcp_proc赋值给它 sk-&gt;sk_prot = sk-&gt;sk_prot_creator=tcp_proc</li>
<li>把申请的sock和inet_sock进行初始化</li>
<li>sk-&gt;sk_prot-&gt;init(sk) 调用tcp_proc深度初始化TCP相关信息</li>
</ul>
<p>尽管流程主要干了上述的事情，仍需要深入探究的问题是：<br>a. inet_protosw inet_protosw初始化过程如何？<br>b. inet_sock和sock是什么关系？<br>c. 从inet_protosw获取的prot和ops哪些结构体上会记录使用？</p>
<h4 id="4-6-1-inet-protosw初始化过程如何？"><a href="#4-6-1-inet-protosw初始化过程如何？" class="headerlink" title="(4.6.1).inet_protosw初始化过程如何？"></a>(4.6.1).inet_protosw初始化过程如何？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> <span class="title">inetsw_array</span>[] =</span></div><div class="line">&#123;</div><div class="line">	&#123;</div><div class="line">		.type =       SOCK_STREAM,</div><div class="line">		.protocol =   IPPROTO_TCP,</div><div class="line">		.prot =       &amp;tcp_prot,</div><div class="line">		.ops =        &amp;inet_stream_ops,</div><div class="line">		.flags =      INET_PROTOSW_PERMANENT |</div><div class="line">			      INET_PROTOSW_ICSK,</div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		.type =       SOCK_DGRAM,</div><div class="line">		.protocol =   IPPROTO_UDP,</div><div class="line">		.prot =       &amp;udp_prot,</div><div class="line">		.ops =        &amp;inet_dgram_ops,</div><div class="line">		.flags =      INET_PROTOSW_PERMANENT,</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       &#123;</div><div class="line">		.type =       SOCK_DGRAM,</div><div class="line">		.protocol =   IPPROTO_ICMP,</div><div class="line">		.prot =       &amp;ping_prot,</div><div class="line">		.ops =        &amp;inet_dgram_ops,</div><div class="line">		.flags =      INET_PROTOSW_REUSE,</div><div class="line">       &#125;,</div><div class="line">       &#123;</div><div class="line">	       .type =       SOCK_RAW,</div><div class="line">	       .protocol =   IPPROTO_IP,	<span class="comment">/* wild card */</span></div><div class="line">	       .prot =       &amp;raw_prot,</div><div class="line">	       .ops =        &amp;inet_sockraw_ops,</div><div class="line">	       .flags =      INET_PROTOSW_REUSE,</div><div class="line">       &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//inet_init</span></div><div class="line">	<span class="keyword">for</span> (q = inetsw_array; q &lt; &amp;inetsw_array[INETSW_ARRAY_LEN]; ++q)</div><div class="line">		inet_register_protosw(q);</div><div class="line">		</div><div class="line"><span class="comment">//inet_protosw放入全局inetsw管理</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_register_protosw</span><span class="params">(struct inet_protosw *p)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">lh</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></div><div class="line">	<span class="keyword">int</span> protocol = p-&gt;protocol;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">last_perm</span>;</span></div><div class="line"></div><div class="line">	spin_lock_bh(&amp;inetsw_lock);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (p-&gt;type &gt;= SOCK_MAX)</div><div class="line">		<span class="keyword">goto</span> out_illegal;</div><div class="line"></div><div class="line">	<span class="comment">/* If we are trying to override a permanent protocol, bail. */</span></div><div class="line">	answer = <span class="literal">NULL</span>;</div><div class="line">	last_perm = &amp;inetsw[p-&gt;type];</div><div class="line">	list_for_each(lh, &amp;inetsw[p-&gt;type]) &#123;</div><div class="line">		answer = list_entry(lh, struct inet_protosw, <span class="built_in">list</span>);</div><div class="line"></div><div class="line">		<span class="comment">/* Check only the non-wild match. */</span></div><div class="line">		<span class="keyword">if</span> (INET_PROTOSW_PERMANENT &amp; answer-&gt;flags) &#123;</div><div class="line">			<span class="keyword">if</span> (protocol == answer-&gt;protocol)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			last_perm = lh;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		answer = <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (answer)</div><div class="line">		<span class="keyword">goto</span> out_permanent;</div><div class="line">	<span class="comment">/* Add the new entry after the last permanent entry if any, so that</span></div><div class="line">	 * the new entry does not override a permanent entry when matched with</div><div class="line">	 * a wild-card protocol. But it is allowed to override any existing</div><div class="line">	 * non-permanent entry.  This means that when we remove this entry, the</div><div class="line">	 * system automatically returns to the old behavior.</div><div class="line">	 */</div><div class="line">	list_add_rcu(&amp;p-&gt;<span class="built_in">list</span>, last_perm);</div><div class="line">out:</div><div class="line">	spin_unlock_bh(&amp;inetsw_lock);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">out_permanent:</div><div class="line">	pr_err(<span class="string">"Attempt to override permanent protocol %d\n"</span>, protocol);</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">out_illegal:</div><div class="line">	pr_err(<span class="string">"Ignoring attempt to register invalid socket type %d\n"</span>,</div><div class="line">	       p-&gt;type);</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>inet_init 会把inet_protosw方式inet_sw中</li>
<li>inet_protosw很重要，其含有协议的具体操作函数tcp_close,tcp_v4_connect,tcp_recvmsg等</li>
<li>inet_protosw，内还包含inet层操作函数 inet_bind,inet_accept,inet_bind,inet_listen等</li>
</ul>
<h4 id="4-6-2-inet-sock和sock是什么关系？"><a href="#4-6-2-inet-sock和sock是什么关系？" class="headerlink" title="(4.6.2). inet_sock和sock是什么关系？"></a>(4.6.2). inet_sock和sock是什么关系？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function">struct sock *<span class="title">sk_alloc</span><span class="params">(struct net *net, <span class="keyword">int</span> family, <span class="keyword">gfp_t</span> priority,</span></span></div><div class="line">		      struct proto *prot)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></div><div class="line"></div><div class="line">	sk = sk_prot_alloc(prot, priority | __GFP_ZERO, family);</div><div class="line">	<span class="keyword">if</span> (sk) &#123;</div><div class="line">		sk-&gt;sk_family = family;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * See comment in struct sock definition to understand</div><div class="line">		 * why we need sk_prot_creator -acme</div><div class="line">		 */</div><div class="line">		sk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;</div><div class="line">		sock_lock_init(sk);</div><div class="line">		sock_net_set(sk, get_net(net));</div><div class="line">		atomic_set(&amp;sk-&gt;sk_wmem_alloc, <span class="number">1</span>);</div><div class="line"></div><div class="line">		sock_update_classid(sk);</div><div class="line">		sock_update_netprioidx(sk);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sk;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> struct sock *<span class="title">sk_prot_alloc</span><span class="params">(struct proto *prot, <span class="keyword">gfp_t</span> priority,</span></span></div><div class="line">		<span class="keyword">int</span> family)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab</span>;</span></div><div class="line"></div><div class="line">	slab = prot-&gt;slab;</div><div class="line">	<span class="keyword">if</span> (slab != <span class="literal">NULL</span>) &#123;</div><div class="line">		sk = kmem_cache_alloc(slab, priority &amp; ~__GFP_ZERO);</div><div class="line">		<span class="keyword">if</span> (!sk)</div><div class="line">			<span class="keyword">return</span> sk;</div><div class="line">		<span class="keyword">if</span> (priority &amp; __GFP_ZERO) &#123;</div><div class="line">			<span class="keyword">if</span> (prot-&gt;clear_sk)</div><div class="line">				prot-&gt;clear_sk(sk, prot-&gt;obj_size);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				sk_prot_clear_nulls(sk, prot-&gt;obj_size);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span></div><div class="line">		sk = kmalloc(prot-&gt;obj_size, priority);<span class="comment">//申请内存大小为prot的objsize</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sk != <span class="literal">NULL</span>) &#123;</div><div class="line">		kmemcheck_annotate_bitfield(sk, flags);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (security_sk_alloc(sk, family, priority))</div><div class="line">			<span class="keyword">goto</span> out_free;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!try_module_get(prot-&gt;owner))</div><div class="line">			<span class="keyword">goto</span> out_free_sec;</div><div class="line">		sk_tx_queue_clear(sk);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sk;</div><div class="line"></div><div class="line">out_free_sec:</div><div class="line">	security_sk_free(sk);</div><div class="line">out_free:</div><div class="line">	<span class="keyword">if</span> (slab != <span class="literal">NULL</span>)</div><div class="line">		kmem_cache_free(slab, sk);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		kfree(sk);</div><div class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>从上述sk_alloc  -&gt; sk_prot_alloc -&gt; obj_size</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> <span class="title">tcp_prot</span> = &#123;</span></div><div class="line">	.name			= <span class="string">"TCP"</span>,</div><div class="line">	.owner			= THIS_MODULE,</div><div class="line">	.close			= tcp_close,</div><div class="line">	.connect		= tcp_v4_connect,</div><div class="line">	.disconnect		= tcp_disconnect,</div><div class="line">	.accept			= inet_csk_accept,</div><div class="line">	.ioctl			= tcp_ioctl,</div><div class="line">	.init			= tcp_v4_init_sock,</div><div class="line">	.destroy		= tcp_v4_destroy_sock,</div><div class="line">	.shutdown		= tcp_shutdown,</div><div class="line">	.setsockopt		= tcp_setsockopt,</div><div class="line">	.getsockopt		= tcp_getsockopt,</div><div class="line">	.recvmsg		= tcp_recvmsg,</div><div class="line">	.sendmsg		= tcp_sendmsg,</div><div class="line">	.sendpage		= tcp_sendpage,</div><div class="line">	.backlog_rcv		= tcp_v4_do_rcv,</div><div class="line">	.release_cb		= tcp_release_cb,</div><div class="line">	.hash			= inet_hash,</div><div class="line">	.unhash			= inet_unhash,</div><div class="line">	.get_port		= inet_csk_get_port,</div><div class="line">	.enter_memory_pressure	= tcp_enter_memory_pressure,</div><div class="line">	.stream_memory_free	= tcp_stream_memory_free,</div><div class="line">	.sockets_allocated	= &amp;tcp_sockets_allocated,</div><div class="line">	.orphan_count		= &amp;tcp_orphan_count,</div><div class="line">	.memory_allocated	= &amp;tcp_memory_allocated,</div><div class="line">	.memory_pressure	= &amp;tcp_memory_pressure,</div><div class="line">	.sysctl_wmem		= sysctl_tcp_wmem,</div><div class="line">	.sysctl_rmem		= sysctl_tcp_rmem,</div><div class="line">	.max_header		= MAX_TCP_HEADER,</div><div class="line">	.obj_size		= <span class="keyword">sizeof</span>(struct tcp_sock),</div><div class="line">	.slab_flags		= SLAB_DESTROY_BY_RCU,</div><div class="line">	.twsk_prot		= &amp;tcp_timewait_sock_ops,</div><div class="line">	.rsk_prot		= &amp;tcp_request_sock_ops,</div><div class="line">	.h.hashinfo		= &amp;tcp_hashinfo,</div><div class="line">	.no_autobind		= <span class="literal">true</span>,</div><div class="line">#ifdef CONFIG_COMPAT</div><div class="line">	.compat_setsockopt	= compat_tcp_setsockopt,</div><div class="line">	.compat_getsockopt	= compat_tcp_getsockopt,</div><div class="line">#endif</div><div class="line">#ifdef CONFIG_MEMCG_KMEM</div><div class="line">	.init_cgroup		= tcp_init_cgroup,</div><div class="line">	.destroy_cgroup		= tcp_destroy_cgroup,</div><div class="line">	.proto_cgroup		= tcp_proto_cgroup,</div><div class="line">#endif</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>struct tcp_sock 包含strcut inet_sock 包含 struct sock</li>
<li>上述结构体为互相包含的关系</li>
<li>实际上在申请sock时候，申请内存大小为tcp_sock大小，也就是说三个结构体共同诞生了</li>
</ul>
<h4 id="4-6-3-从inet-protosw获取的prot和ops哪些结构体上会记录使用？"><a href="#4-6-3-从inet-protosw获取的prot和ops哪些结构体上会记录使用？" class="headerlink" title="(4.6.3). 从inet_protosw获取的prot和ops哪些结构体上会记录使用？"></a>(4.6.3). 从inet_protosw获取的prot和ops哪些结构体上会记录使用？</h4><blockquote>
<p>struct socket会在inet_create函数中获取到ops<br>    sock-&gt;ops = answer-&gt;ops;<br>struct sock在sk_allloc函数中获取pro<br>  sk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;</p>
</blockquote>
<h2 id="5-socket与文件系统"><a href="#5-socket与文件系统" class="headerlink" title="(5).socket与文件系统"></a>(5).socket与文件系统</h2><p>socket与文件系统关联通过sock_map_fd完成</p>
<p>其步骤如下：</p>
<blockquote>
<p>1:获取fd get_unused_fd_flags</p>
<blockquote>
<p>该函数从当前进程管理的files获取可用的fd</p>
</blockquote>
<p>2:申请file sock_alloc_file</p>
<blockquote>
<p>将struct socket放到file的private_data管理 file-&gt;private_data = sock</p>
</blockquote>
<p>3:将file根据当前fd安装到current-&gt;files中</p>
<blockquote>
<p>files有一个指针fdt<br>fdt-&gt;fd是一个类型为file指针的数组，数组下标为fd<br>rcu_assign_pointer(fdt-&gt;fd[fd], file); 将file安装fd为数组下标放到current-&gt;files管理</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;socket&quot;&gt;&lt;a href=&quot;#socket&quot; class=&quot;headerlink&quot; title=&quot;socket()&quot;&gt;&lt;/a&gt;socket()&lt;/h1&gt;&lt;p&gt;内核版本：3.10.0-514.16.1.el7.x86_64&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;          /* See NOTES */&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; domain, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; type, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; protocol)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fd=socket(PF_INET,SOCK_STREAM,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>systemtap使用调试记录（一）</title>
    <link href="http://vcpu.me/systemtap%E4%BD%BF%E7%94%A8%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vcpu.me/systemtap使用调试记录（一）/</id>
    <published>2017-06-05T10:15:52.000Z</published>
    <updated>2017-06-05T10:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="systemtap使用调试记录（一）"><a href="#systemtap使用调试记录（一）" class="headerlink" title="systemtap使用调试记录（一）"></a>systemtap使用调试记录（一）</h1><h2 id="一、调试环境介绍"><a href="#一、调试环境介绍" class="headerlink" title="一、调试环境介绍"></a>一、调试环境介绍</h2><pre><code>Linux 3.10.0-514.16.1.el7.x86_64 
kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm 同版本的开发头文件
kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm
kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm 同版本调试数据包
linux-3.10.0-514.16.1.el7.tar.xz 同版本的源码
</code></pre><p><a href="https://centos.pkgs.org/7/centos-updates-x86_64/kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm.html" target="_blank" rel="external"><em>kernel开发头文件下载地址</em></a><br><a href="http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm" target="_blank" rel="external"><em>kernel调试包下载地址</em></a><br><a href="http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm" target="_blank" rel="external"><em>kernel调试common包下载地址</em></a><br><a href="https://wiki.centos.org/zh/HowTos/I_need_the_Kernel_Source#head-963cd44439b8c10fa507fa0c90725029c060108a" target="_blank" rel="external">根据当前虚拟机获取内核代码的方法</a></p>
<a id="more"></a>
<h2 id="二、centos7安装方法"><a href="#二、centos7安装方法" class="headerlink" title="二、centos7安装方法"></a>二、centos7安装方法</h2><pre><code>yum install *.rpm  安装上述3个（debugifo,devel,debuginfo-common）rpm包
yum install systemtap
stap -ve &apos;probe begin { log(&quot;hello world&quot;) exit() }&apos;
</code></pre><p>测试正常结果如下：    </p>
<blockquote>
<p>[root@localhost qinlong]# stap -ve ‘probe begin { log(“hello world”) exit() }’<br>Pass 1: parsed user script and 120 library scripts using 227352virt/40488res/3260shr/37400data kb, in 260usr/30sys/338real ms.<br>Pass 2: analyzed script: 1 probe, 2 functions, 0 embeds, 0 globals using 228540virt/41804res/3420shr/38588data kb, in 10usr/0sys/6real ms.<br>Pass 3: translated to C into “/tmp/stap5CqHmN/stap_f7a5084b8a638f5ce64a31271684ef1f_1133_src.c” using 228672virt/42408res/3996shr/38720data kb, in 0usr/0sys/0real ms.<br>Pass 4: compiled C into “stap_f7a5084b8a638f5ce64a31271684ef1f_1133.ko” in 1000usr/330sys/1247real ms.<br>Pass 5: starting run.<br>hello world<br>Pass 5: run completed in 10usr/40sys/362real ms.</p>
</blockquote>
<h2 id="三、通用案例"><a href="#三、通用案例" class="headerlink" title="三、通用案例"></a>三、通用案例</h2><h3 id="1-函数调用栈打印"><a href="#1-函数调用栈打印" class="headerlink" title="1.函数调用栈打印"></a>1.函数调用栈打印</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# cat bt.stp</div><div class="line">	probe kernel.function(@1)&#123;</div><div class="line">	    print(&quot;----------------START-------------------------\n&quot;)</div><div class="line">	    printf(&quot;In process [%s]\n&quot;, execname())</div><div class="line">	    print_regs()</div><div class="line">	    print_backtrace()</div><div class="line">	    print(&quot;----------------END-------------------------\n&quot;)</div><div class="line">	    exit()</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>打印内核函数的调用栈</p>
<blockquote>
<p>[root@localhost stp]# stap bt.stp tcp_sendmsg<br>—————-START————————-<br>In process [sshd]<br>RIP: ffffffff815c1ee0<br>RSP: ffff88003d217d28  EFLAGS: 00000202<br>RAX: ffffffff81aa20a0 RBX: ffff88003d217e38 RCX: 0000000000000024<br>RDX: ffff88003d217da8 RSI: ffff88003b3b87c0 RDI: ffff88003d217e38<br>RBP: ffff88003d217d50 R08: 0000000000000000 R09: 0000000000000000<br>R10: ffff88003d217da8 R11: 0000000000000000 R12: ffff88003d217e38<br>R13: 0000000000000001 R14: ffff88003d217e28 R15: ffff8800274d3480<br>FS:  00007f03e5514840(0000) GS:ffff88003fd00000(0000) knlGS:0000000000000000<br>CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033<br>CR2: 00007f19c6dc8000 CR3: 0000000035a5c000 CR4: 00000000000406e0<br> 0xffffffff815c1ee0 : tcp_sendmsg+0x0/0xc40 [kernel]<br> 0xffffffff815ed254 : inet_sendmsg+0x64/0xb0 [kernel]<br> 0xffffffff81554e07 : sock_aio_write+0x157/0x180 [kernel]<br> 0xffffffff811fdf3d : do_sync_write+0x8d/0xd0 [kernel]<br> 0xffffffff811fe8a5 : vfs_write+0x1b5/0x1e0 [kernel]<br> 0xffffffff811ff2cf : sys_write+0x7f/0xe0 [kernel]<br> 0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]<br>—————-END————————-</p>
</blockquote>
<h3 id="2-函数的调用过程"><a href="#2-函数的调用过程" class="headerlink" title="2.函数的调用过程"></a>2.函数的调用过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# cat socket-trace.stp</div><div class="line">probe kernel.function(&quot;*@net/socket.c&quot;).call&#123;</div><div class="line">	printf(&quot;%s -&gt; %s\n&quot;,thread_indent(1),ppfunc())</div><div class="line">&#125;</div><div class="line">probe kernel.function(&quot;*@net/socket.c&quot;).return&#123;</div><div class="line">	printf(&quot;%s&lt;-%s\n&quot;,thread_indent(-1),ppfunc())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>thread_indent(1)     打印程序名称（线程id）<br>ppfunc() 打印出执行函数符号</p>
<p>kernel.function(“<em>@net/socket.c”).call<br>调用net/socket.c 文件中函数时候会触发函数体执行打印动作<br>kernel.function(“</em>@net/socket.c”).return<br>调用net/socket.c文件中函数执行完成返回后会触发函数体打印动作</p>
<blockquote>
<p>[root@localhost stp]# stap socket-trace.stp<br>  0 dndX11(3295): -&gt; SyS_recvmsg<br>  0 dndX11(3295): -&gt; <strong>sys_recvmsg<br>  0 dndX11(3295): -&gt; sockfd_lookup_light<br>  0 dndX11(3295):&lt;-sockfd_lookup<em>light<br>  1 dndX11(3295): -&gt; </em></strong>sys_recvmsg<br>  3 dndX11(3295): -&gt; sock_recvmsg<br>  7 dndX11(3295):&lt;-sock_recvmsg<br>  8 dndX11(3295):&lt;-<strong>_sys_recvmsg<br>  9 dndX11(3295):&lt;-</strong>sys_recvmsg<br> 10 dndX11(3295):&lt;-SyS_recvmsg<br>25274 dndX11(3295): -&gt; SyS_recvmsg<br>25279 dndX11(3295): -&gt; <strong>sys_recvmsg<br>25281 dndX11(3295): -&gt; sockfd_lookup_light<br>25284 dndX11(3295):&lt;-sockfd_lookup<em>light<br>25285 dndX11(3295): -&gt; </em></strong>sys_recvmsg<br>25288 dndX11(3295): -&gt; sock_recvmsg<br>25291 dndX11(3295):&lt;-sock_recvmsgx</p>
</blockquote>
<h3 id="3-打印协议栈函数中某一行数据"><a href="#3-打印协议栈函数中某一行数据" class="headerlink" title="3.打印协议栈函数中某一行数据"></a>3.打印协议栈函数中某一行数据</h3><p>/home/qinlong/rpmbuild/SOURCES/linux-3.10.0-514.16.1.el7/net/ipv4/tcp.c<br>局部源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1065 int tcp_sendmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,</div><div class="line">1066                 size_t size)</div><div class="line">1067 &#123;</div><div class="line">1068         struct iovec *iov;</div><div class="line">1069         struct tcp_sock *tp = tcp_sk(sk);</div><div class="line">1070         struct sk_buff *skb;</div><div class="line">1071         int iovlen, flags, err, copied = 0;</div><div class="line">1072         int mss_now = 0, size_goal, copied_syn = 0, offset = 0;</div><div class="line">1073         bool sg;</div><div class="line">1074         long timeo;</div><div class="line">1075</div><div class="line">1076         lock_sock(sk);</div><div class="line">1077</div><div class="line">1078         flags = msg-&gt;msg_flags;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# stap -L &apos;kernel.statement(&quot;*@net/ipv4/tcp.c:1078&quot;)&apos;</div><div class="line">kernel.statement(&quot;tcp_sendmsg@net/ipv4/tcp.c:1078&quot;) $iocb:struct kiocb* $sk:struct sock* $msg:struct msghdr* $size:size_t $copied:int $mss_now:int $size_goal:int $copied_syn:int $offset:int $timeo:long int</div></pre></td></tr></table></figure>
<p>执行上述函数，可确代码具体的函数局部变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$iocb:struct kiocb* </div><div class="line">$sk:struct sock* </div><div class="line">$msg:struct msghdr* </div><div class="line">$size:size_t </div><div class="line">$copied:int</div><div class="line">$mss_now:int </div><div class="line">$size_goal:int </div><div class="line">$copied_syn:int </div><div class="line">$offset:int </div><div class="line">$timeo:long int</div></pre></td></tr></table></figure></p>
<p>根据以上变量打印出size值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# stap -e &apos;probe kernel.statement(&quot;*@net/ipv4/tcp.c:1078&quot;) &#123;printf(&quot;size %d \n&quot;,$size)&#125;&apos;</div><div class="line">size 36</div><div class="line">size 44</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;systemtap使用调试记录（一）&quot;&gt;&lt;a href=&quot;#systemtap使用调试记录（一）&quot; class=&quot;headerlink&quot; title=&quot;systemtap使用调试记录（一）&quot;&gt;&lt;/a&gt;systemtap使用调试记录（一）&lt;/h1&gt;&lt;h2 id=&quot;一、调试环境介绍&quot;&gt;&lt;a href=&quot;#一、调试环境介绍&quot; class=&quot;headerlink&quot; title=&quot;一、调试环境介绍&quot;&gt;&lt;/a&gt;一、调试环境介绍&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Linux 3.10.0-514.16.1.el7.x86_64 
kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm 同版本的开发头文件
kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm
kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm 同版本调试数据包
linux-3.10.0-514.16.1.el7.tar.xz 同版本的源码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://centos.pkgs.org/7/centos-updates-x86_64/kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;kernel开发头文件下载地址&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;kernel调试包下载地址&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;kernel调试common包下载地址&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://wiki.centos.org/zh/HowTos/I_need_the_Kernel_Source#head-963cd44439b8c10fa507fa0c90725029c060108a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;根据当前虚拟机获取内核代码的方法&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="systemtap" scheme="http://vcpu.me/tags/systemtap/"/>
    
  </entry>
  
</feed>
