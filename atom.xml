<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>i博客</title>
  <subtitle>仰望星空前，还需脚踏实地。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vcpu.me/"/>
  <updated>2017-08-02T02:16:33.000Z</updated>
  <id>http://vcpu.me/</id>
  
  <author>
    <name>vcpu.me</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>openvSwitch</title>
    <link href="http://vcpu.me/openvswitch/"/>
    <id>http://vcpu.me/openvswitch/</id>
    <published>2017-07-31T10:00:00.000Z</published>
    <updated>2017-08-02T02:16:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openvSwitch简介"><a href="#openvSwitch简介" class="headerlink" title="openvSwitch简介"></a>openvSwitch简介</h2><p>openvSwitch 是SDN常用的虚拟交换机，其将普通交换机的数据平面和控制平面相分离，SDN交换机只负责数据的转发，而控制指令则由更上一级的控制器下发</p>
<h2 id="OpenvSwitch（虚拟交换机）常用模块"><a href="#OpenvSwitch（虚拟交换机）常用模块" class="headerlink" title="OpenvSwitch（虚拟交换机）常用模块"></a>OpenvSwitch（虚拟交换机）常用模块</h2><ul>
<li>ovs-vswitchd</li>
</ul>
<p>主要模块、实现交换功能，含有支持流交换的Linux内核模块,基于流交换<br>它和上层controller通信采用OPENFLOW协议，与ovsdb-server通信采用OVSDB协议，和内核通信采用netlink通信<br>支持多个独立datapatch(网桥)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root      2225     1  0 20:05 ?        00:00:00 ovs-vswitchd: monitoring pid 2226 (healthy)</div><div class="line">root      2226  2225  0 20:05 ?        00:00:00 ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor</div></pre></td></tr></table></figure>
<ul>
<li>ovsdb-server </li>
</ul>
<p>虚拟交换机配置信息（接口、交换内容、VLAN等）存放的数据库服务，ovs-vswitchd会根据ovsdb-server中的配置工作。<br>ovsdb-server 和ovs-vswitchd 使用OVSDB(JSON-RPC)方式通信<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root      2201     1  0 20:05 ?        00:00:00 ovsdb-server: monitoring pid 2202 (healthy)</div><div class="line">root      2202  2201  0 20:05 ?        00:00:00 ovsdb-server /etc/openvswitch/conf.db -vconsole:emer -vsyslog:err -vfile:info --remote=punix:/var/run/openvswitch/db.sock --private-key=db:Open_vSwitch,SSL,private_key --certificate=db:Open_vSwitch,SSL,certificate --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert --no-chdir --log-file=/var/log/openvswitch/ovsdb-server.log --pidfile=/var/run/openvswitch/ovsdb-server.pid --detach --monitor</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="openvSwitch编译"><a href="#openvSwitch编译" class="headerlink" title="openvSwitch编译"></a>openvSwitch编译</h2><p>编译环境：ubuntun16.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">cat build.sh</div><div class="line"></div><div class="line">apt-get install build-essential libssl-dev linux-headers-$(uname -r) </div><div class="line">apt-get install graphviz autoconf automake bzip2 debhelper dh-autoreconf libssl-dev libtool openssl procps python-all python-qt4 python-twisted-conch python-zopeinterface python-six dkms module-assistant ipsec-tools racoon  libc6-dev  module-init-tools  netbase  python-argparse  uuid-runtime -y</div><div class="line">git clone https://github.com/openvswitch/ovs.git</div><div class="line">cd ovs</div><div class="line">./boot.sh</div><div class="line">./configure --with-linux=/lib/modules/`uname -r`/build</div><div class="line">make</div><div class="line">make install</div><div class="line">make modules_install</div><div class="line">/sbin/modprobe openvswitch</div><div class="line">ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema</div><div class="line">ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \</div><div class="line">             --remote=db:Open_vSwitch,Open_vSwitch,manager_options \</div><div class="line">             --private-key=db:Open_vSwitch,SSL,private_key \</div><div class="line">             --certificate=db:Open_vSwitch,SSL,certificate \</div><div class="line">             --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \</div><div class="line">             --pidfile --detach</div><div class="line">ovs-vsctl --no-wait init</div><div class="line">ovs-vswitchd --pidfile --detach</div></pre></td></tr></table></figure></p>
<blockquote>
<p>make modules_install 错误<br>ubbuntun16.04报错如下,该错误忽略即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~/ovs# make modules_install</div><div class="line">cd datapath/linux &amp;&amp; make modules_install</div><div class="line">make[1]: Entering directory &apos;/root/ovs/datapath/linux&apos;</div><div class="line">make -C /lib/modules/4.8.0-36-generic/build M=/root/ovs/datapath/linux modules_install</div><div class="line">make[2]: Entering directory &apos;/usr/src/linux-headers-4.8.0-36-generic&apos;</div><div class="line">  INSTALL /root/ovs/datapath/linux/openvswitch.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-geneve.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-gre.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-lisp.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-stt.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  INSTALL /root/ovs/datapath/linux/vport-vxlan.ko</div><div class="line">At main.c:158:</div><div class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</div><div class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</div><div class="line">sign-file: certs/signing_key.pem: No such file or directory</div><div class="line">  DEPMOD  4.8.0-36-generic</div><div class="line">make[2]: Leaving directory &apos;/usr/src/linux-headers-4.8.0-36-generic&apos;</div><div class="line">depmod `sed -n &apos;s/#define UTS_RELEASE &quot;\([^&quot;]*\)&quot;/\1/p&apos; /lib/modules/4.8.0-36-generic/build/include/generated/utsrelease.h`</div><div class="line">make[1]: Leaving directory &apos;/root/ovs/datapath/linux&apos;</div></pre></td></tr></table></figure>
<h2 id="建立ovs接口连接两个namespace组成二层网络"><a href="#建立ovs接口连接两个namespace组成二层网络" class="headerlink" title="建立ovs接口连接两个namespace组成二层网络"></a>建立ovs接口连接两个namespace组成二层网络</h2><h3 id="环境搭建拓扑"><a href="#环境搭建拓扑" class="headerlink" title="环境搭建拓扑"></a>环境搭建拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">             br0</div><div class="line">            +--------------------------------------+</div><div class="line">            +--+                                +--+</div><div class="line">        +---+  | tap1                       tap2|  +---+</div><div class="line">        |   +--+                                +--+   |</div><div class="line">        |   |                                      |   |</div><div class="line">        |   +--------------------------------------+   |</div><div class="line">        |                                              |</div><div class="line">        |                                              |</div><div class="line">        |                                              |</div><div class="line">        |                                              |</div><div class="line">+------------------+                      +-------------------+</div><div class="line">|      tap1        |                      |           tap2    |</div><div class="line">|192.168.1.102/24  |                      | 192.168.1.102/24  |</div><div class="line">|                  |                      |                   |</div><div class="line">|                  |                      |                   |</div><div class="line">|                  |                      |                   |</div><div class="line">|  namespace ns1   |                      |    namespace ns1  |</div><div class="line">|                  |                      |                   |</div><div class="line">+------------------+                      +-------------------+</div></pre></td></tr></table></figure>
<h3 id="实现脚本"><a href="#实现脚本" class="headerlink" title="实现脚本"></a>实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line"></div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip link set dev tap2 up</div><div class="line"></div><div class="line">ip netns exec ns1 ip addr add 192.168.1.102/24 dev tap1</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.101/24 dev tap2</div><div class="line"></div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line">ip netns exec ns2 ip link set lo up</div><div class="line">ip netns exec ns1 ping -c 4 192.168.1.101</div><div class="line">ip netns exec ns1 ping -c 4 192.168.1.102</div></pre></td></tr></table></figure>
<h2 id="建立vlan二层网络"><a href="#建立vlan二层网络" class="headerlink" title="建立vlan二层网络"></a>建立vlan二层网络</h2><h3 id="环境搭建拓扑-1"><a href="#环境搭建拓扑-1" class="headerlink" title="环境搭建拓扑"></a>环境搭建拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">                        br0                trunk vlan tag 10,11           br1</div><div class="line">                +------------------------+                       +------------------------+</div><div class="line">                |                        | tag10           tag10 |                        |</div><div class="line">                |              trunk_br0 +-----------------------+trunk_br1               |</div><div class="line">                |                        +-----------------------+                        |</div><div class="line">                |                        | tag11           tag11 |                        |</div><div class="line">                |tap1               tap2 |                       |  tap3                  |</div><div class="line">                +------------------------+                       +------------------------+</div><div class="line">                  |tag 10        tag11|                         tag10|</div><div class="line">                  |                   |                              |</div><div class="line">                  |                   |                              |</div><div class="line">192.168.1.101/24  |                   | 192.168.1.102/24             | 192.168.1.103/24</div><div class="line">              +-------+          +-------+                        +-------+</div><div class="line">              | tap1  |          | tap2  |                        |tap3   |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              |       |          |       |                        |       |</div><div class="line">              +-------+          +-------+                        +-------+</div><div class="line">              ns1                 ns2                               ns3</div></pre></td></tr></table></figure>
<h3 id="环境实现脚本"><a href="#环境实现脚本" class="headerlink" title="环境实现脚本"></a>环境实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line"></div><div class="line">ovs-vsctl set Port tap1  tag=10</div><div class="line"></div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 tap2 -- set Interface tap2 type=internal</div><div class="line">ovs-vsctl set Port tap2  tag=11</div><div class="line"></div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip link set dev tap2 up</div><div class="line"></div><div class="line">ip netns exec ns1 ip addr add 192.168.1.101/24 dev tap1</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.102/24 dev tap2</div><div class="line"></div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line">ip netns exec ns2 ip link set lo up</div><div class="line"></div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br1 tap3 -- set Interface tap3 type=internal</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 trunk_br0 trunks=10,11  -- set Interface trunk_br0 type=patch options:peer=trunk_br1</div><div class="line">ovs-vsctl add-port br1 trunk_br1 trunks=10,11 -- set Interface trunk_br1 type=patch options:peer=trunk_br0</div><div class="line"></div><div class="line">ip netns add ns3</div><div class="line">ip link set tap3 netns ns3</div><div class="line">ip netns exec ns3 ip addr add 192.168.1.103/24 dev tap3</div><div class="line">ip netns exec ns3 ip link set dev tap3 up</div><div class="line">ovs-vsctl set Port tap3 tag=10</div><div class="line"></div><div class="line"></div><div class="line">ip netns exec ns3 ping -c 4 192.168.1.101</div><div class="line">ip netns exec ns3 ping -c 4 192.168.1.102</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><p>br0和br1两个交换机之间连接使用的是patch口，在创建时候需要指明peer（对端口）选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-port br0 trunk_br0 trunks=10,11  -- set Interface trunk_br0 type=patch options:peer=trunk_br1</div><div class="line">ovs-vsctl add-port br1 trunk_br1 trunks=10,11 -- set Interface trunk_br1 type=patch options:peer=trunk_br0</div></pre></td></tr></table></figure>
</li>
<li><p>br0和br1两个交换机之间连接在trunk口附加上tag10和tag11</p>
</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>  ns3:tap3:vlan10 能ping通ns1:tap1:vlan10 因为ns3和ns1属于同一个vlan；同时无法ping通ns2</p>
<h2 id="ovs-vlan报文转发原理探究"><a href="#ovs-vlan报文转发原理探究" class="headerlink" title="ovs vlan报文转发原理探究"></a>ovs vlan报文转发原理探究</h2><h3 id="环境搭建拓扑-2"><a href="#环境搭建拓扑-2" class="headerlink" title="环境搭建拓扑"></a>环境搭建拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">       first_ns         second_ns       third_ns</div><div class="line">    +-----------+    +-----------+    +-----------+</div><div class="line">    |           |    |           |    |           |</div><div class="line">    |           |    |           |    |           |</div><div class="line">    |           |    |           |    |           |</div><div class="line">    |    first_br    |      second_br |   third_br|</div><div class="line">    +-----------+    +-----------+    +-----------+</div><div class="line">10.0.0.4/24          10.0.0.5/24            |  10.0.0.6/24</div><div class="line">         |                 |                |</div><div class="line">         |                 |                |</div><div class="line">         |tag 10           | 无 tag          | trunk 11,12</div><div class="line">     +------------------------------------------+</div><div class="line">     |    first_br       second_br       third_br</div><div class="line">     |                                          |</div><div class="line">     |                   br0                    |</div><div class="line">     |                                          |</div><div class="line">     +------------------------------------------+</div><div class="line">           | tag 10</div><div class="line">           |</div><div class="line">           |</div><div class="line">           |</div><div class="line">           |</div><div class="line">           |10.0.0.1/24</div><div class="line">    +------------+</div><div class="line">    |            |</div><div class="line">    |            |</div><div class="line">    |            |</div><div class="line">    |            |</div><div class="line">    +------------+</div><div class="line">      ns1</div></pre></td></tr></table></figure>
<h3 id="搭建网络脚本"><a href="#搭建网络脚本" class="headerlink" title="搭建网络脚本"></a>搭建网络脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> ovs-vsctl add-br br0</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 first_br -- set Interface first_br type=internal</div><div class="line">ovs-vsctl set Port first_br  tag=10 </div><div class="line"></div><div class="line">ip netns add first</div><div class="line">ip link set first_br netns first</div><div class="line">ip netns exec first ip addr add 10.0.0.4/24 dev first_br</div><div class="line">ip netns exec first ip link set dev first_br up</div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ovs-vsctl set Port tap1  tag=10</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set lo up</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line">ip netns exec ns1 ip addr add 10.0.0.1/24 dev tap1</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br0 second_br -- set Interface second_br type=internal</div><div class="line"></div><div class="line">ip netns add second</div><div class="line">ip link set second_br netns second</div><div class="line">ip netns exec second ip addr add 10.0.0.5/24 dev second_br</div><div class="line">ip netns exec second  ip link set dev second_br up</div><div class="line"></div><div class="line">ovs-vsctl add-port br0 third_br trunks=11,12 -- set Interface third_br type=internal</div><div class="line"></div><div class="line">ip netns add third</div><div class="line">ip link set third_br netns third</div><div class="line">ip netns exec third ip addr add 10.0.0.6/24 dev third_br</div><div class="line">ip netns exec third ip link set dev third_br up</div></pre></td></tr></table></figure>
<p><strong>实验过程：</strong><br>进入netns1，一直ping 10.0.0.4，在netns first、second、third分别抓包</p>
<h3 id="实验记录"><a href="#实验记录" class="headerlink" title="实验记录"></a>实验记录</h3><ul>
<li>first抓取报文<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec first tcpdump  -n -e -i first_br arp</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on first_br, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:47:54.636790 9a:03:f1:61:48:9d &gt; ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 42: Request who-has 10.0.0.4 tell 10.0.0.1, length 28</div><div class="line">15:47:54.636808 4e:cc:d6:5a:53:f4 &gt; 9a:03:f1:61:48:9d, ethertype ARP (0x0806), length 42: Reply 10.0.0.4 is-at 4e:cc:d6:5a:53:f4, length 28</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>抓到arp广播包</p>
</blockquote>
<ul>
<li>second抓取报文<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec second tcpdump  -n -e -i second_br arp</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on second_br, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">15:49:40.345271 9a:03:f1:61:48:9d &gt; ff:ff:ff:ff:ff:ff, ethertype 802.1Q (0x8100), length 46: vlan 10, p 0, ethertype ARP, Request who-has 10.0.0.4 tell 10.0.0.1, length 28</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>抓到arp广播包</p>
</blockquote>
<ul>
<li>third抓取报文<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ip netns exec third tcpdump  -n -e -i third_br arp</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on third_br, link-type EN10MB (Ethernet), capture size 262144 bytes</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>没有抓到arp广播包</p>
</blockquote>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><ul>
<li>trunk port<br>（1）这个port不配置tag，配置trunks，如果trunks为空，则所有的VLAN都trunk，也就意味着对于所有的VLAN的包，本身带什么VLAN ID，就是携带者什么VLAN ID，<br>（2）如果没有设置VLAN，就属于VLAN 0，全部允许通过。<br>（3）如果trunks不为空，则仅仅带着这些VLAN ID的包通过。</li>
<li>access port<br>（1）这个port配置tag，从这个port进来的包会被打上这个tag，<br>（2）从其他的trunk port中进来的本身就带有VLAN ID的包，如果VLAN ID等于tag，则会从这个port发出，<br>（3）从其他的access port上来的包，如果tag相同，也会被forward到这个port。<br>（4）从access port发出的包不带VLAN ID。<br>（5）如果一个本身带VLAN ID的包到达access port，即便VLAN ID等于tag，也会被抛弃。</li>
</ul>
<h2 id="ovs-bonding链路冗余"><a href="#ovs-bonding链路冗余" class="headerlink" title="ovs bonding链路冗余"></a>ovs bonding链路冗余</h2><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  192.168.0.101/24</div><div class="line">+---------+            +-------------------------------+</div><div class="line">|         |            |                               |</div><div class="line">|     tap0+------------+tap0     br0                   |</div><div class="line">|         |           ++                               |</div><div class="line">|         |            |       +-------------+         |</div><div class="line">|         |            +---------|bond0|---------------+</div><div class="line">+---------+                    +-------------+</div><div class="line">   ns1                  br0_tap0  |    | br0_tap1</div><div class="line">                                  |    |</div><div class="line">                                  |    |</div><div class="line">                        br1_tap0  |    | br1_tap1</div><div class="line">  192.168.0.102/24            +--------------+</div><div class="line">+---------+            +---------|bond1|---------------+</div><div class="line">|         +------------+      +--------------+         |</div><div class="line">|         |            |                               |</div><div class="line">|         |            |      br1                      |</div><div class="line">|         |            |                               |</div><div class="line">|         |            +-------------------------------+</div><div class="line">+---------+</div><div class="line">   ns2</div></pre></td></tr></table></figure>
<h3 id="环境搭建脚本"><a href="#环境搭建脚本" class="headerlink" title="环境搭建脚本"></a>环境搭建脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ip link add br0_tap0 type veth peer name br1_tap0</div><div class="line">ip link add br0_tap1 type veth peer name br1_tap1</div><div class="line">ip link set br0_tap0 up</div><div class="line">ip link set br0_tap1 up</div><div class="line">ip link set br1_tap0 up</div><div class="line">ip link set br1_tap1 up</div><div class="line"></div><div class="line">ovs-vsctl add-bond br0 bond0 br0_tap0 br0_tap1 </div><div class="line">ovs-vsctl add-bond br1 bond1 br1_tap0 br1_tap1</div><div class="line"></div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ip netns add ns2</div><div class="line">ovs-vsctl add-port br0 tap1 -- set Interface tap1 type=internal</div><div class="line">ip link set tap1 netns ns1</div><div class="line">ip netns exec ns1 ip link set dev tap1 up</div><div class="line">ip netns exec ns1 ip addr add 192.168.1.101/24 dev tap1</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl add-port br1 tap2 -- set Interface tap2 type=internal</div><div class="line">ip link set tap2 netns ns2</div><div class="line">ip netns exec ns2 ip link set dev tap2 up</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.102/24 dev tap2</div><div class="line"></div><div class="line"></div><div class="line">ovs-vsctl set Port bond0 lacp=active </div><div class="line">ovs-vsctl set Port bond1 lacp=active</div></pre></td></tr></table></figure>
<h3 id="环境搭建完成后查看bond"><a href="#环境搭建完成后查看bond" class="headerlink" title="环境搭建完成后查看bond"></a>环境搭建完成后查看bond</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl bond/show</div><div class="line">---- bond1 ----</div><div class="line">bond_mode: active-backup</div><div class="line">bond may use recirculation: no, Recirc-ID : -1</div><div class="line">bond-hash-basis: 0</div><div class="line">updelay: 0 ms</div><div class="line">downdelay: 0 ms</div><div class="line">lacp_status: negotiated</div><div class="line">lacp_fallback_ab: false</div><div class="line">active slave mac: 9e:d9:94:98:26:85(br1_tap0)</div><div class="line"></div><div class="line">slave br1_tap0: enabled</div><div class="line">  active slave</div><div class="line">  may_enable: true</div><div class="line"></div><div class="line">slave br1_tap1: enabled</div><div class="line">  may_enable: true</div><div class="line"></div><div class="line">---- bond0 ----</div><div class="line">bond_mode: active-backup</div><div class="line">bond may use recirculation: no, Recirc-ID : -1</div><div class="line">bond-hash-basis: 0</div><div class="line">updelay: 0 ms</div><div class="line">downdelay: 0 ms</div><div class="line">lacp_status: negotiated</div><div class="line">lacp_fallback_ab: false</div><div class="line">active slave mac: 6a:d8:f8:f3:2b:6d(br0_tap0)</div><div class="line"></div><div class="line">slave br0_tap0: enabled</div><div class="line">  active slave</div><div class="line">  may_enable: true</div><div class="line"></div><div class="line">slave br0_tap1: enabled</div><div class="line">  may_enable: true</div></pre></td></tr></table></figure>
<p><strong>查看结论：</strong></p>
<blockquote>
<p>默认建立的bond为主备模式（bond_mode: active-backup）<br>br1_tap0和br0_tap0 流量走这对口</p>
</blockquote>
<h3 id="抓包结果"><a href="#抓包结果" class="headerlink" title="抓包结果"></a>抓包结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">抓取 br0_tap0</div><div class="line">root@controller-VirtualBox:~# tcpdump -n -e -i br0_tap0</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br0_tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">17:12:45.022854 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:12:45.023409 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:15.024627 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:15.025299 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:45.025411 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:13:45.025724 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line"></div><div class="line">在ns1 ping ns2，流量只走在主机接口上（br1_tap0和br0_tap0）</div><div class="line">root@controller-VirtualBox:~# tcpdump -n -e -i br0_tap0</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br0_tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">17:15:29.980585 d2:25:e0:f4:59:83 &gt; 3a:df:e7:d3:68:84, ethertype IPv4 (0x0800), length 98: 192.168.1.101 &gt; 192.168.1.102: ICMP echo request, id 6006, seq 4, length 64</div><div class="line">17:15:29.980608 3a:df:e7:d3:68:84 &gt; d2:25:e0:f4:59:83, ethertype IPv4 (0x0800), length 98: 192.168.1.102 &gt; 192.168.1.101: ICMP echo reply, id 6006, seq 4, length 64</div><div class="line">17:15:31.003922 d2:25:e0:f4:59:83 &gt; 3a:df:e7:d3:68:84, ethertype IPv4 (0x0800), length 98: 192.168.1.101 &gt; 192.168.1.102: ICMP echo request, id 6006, seq 5, length 64</div></pre></td></tr></table></figure>
<p>抓取br1_tap0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# tcpdump -n -e -i br1_tap0</div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on br1_tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</div><div class="line">17:14:15.027630 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:14:15.028468 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:14:45.028801 6a:d8:f8:f3:2b:6d &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div><div class="line">17:14:45.029541 9e:d9:94:98:26:85 &gt; 01:80:c2:00:00:02, ethertype Slow Protocols (0x8809), length 124: LACPv1, length 110</div></pre></td></tr></table></figure></p>
<h3 id="另外补充"><a href="#另外补充" class="headerlink" title="另外补充"></a>另外补充</h3><ul>
<li><p>查看lacpovs-appctl lacp/show</p>
</li>
<li><p>active-backup 主-备 无法提升吞吐</p>
</li>
<li><p>balance-slb, 根据包的 source MAC + vlan tag來均衡流量</p>
</li>
<li><p>banlnce-tcp, 根据包的 L2/L3/L4 header来均衡流量</p>
<blockquote>
<p>banlance-tcp必须让硬件交换机设置802.3ad，balance-slb则设不设均可，设了流量提高比较大。</p>
</blockquote>
</li>
<li><p>ovs-vsctl set Port bond0 bond_mode=balance-slb </p>
</li>
<li><p>观察流量命令 cat /proc/net/dev</p>
</li>
<li><p>LACP是链路汇聚控制协议（具体研究待定）</p>
</li>
</ul>
<h2 id="openvswitch概念补充"><a href="#openvswitch概念补充" class="headerlink" title="openvswitch概念补充"></a>openvswitch概念补充</h2><h3 id="几个重要的概念"><a href="#几个重要的概念" class="headerlink" title="几个重要的概念"></a>几个重要的概念</h3><ul>
<li>Bridge: Bridge 代表一个以太网交换机（Switch），一个主机中可以创建一个或者多个 Bridge 设备。</li>
<li>Port: 端口与物理交换机的端口概念类似，每个 Port 都隶属于一个 Bridge。</li>
<li>Interface: 连接到 Port 的网络接口设备。在通常情况下，Port 和 Interface 是一对一的关系, 只有在配置 Port 为 bond 模式后，Port 和 Interface 是一对多的关系。</li>
<li>Controller: OpenFlow 控制器。OVS 可以同时接受一个或者多个 OpenFlow 控制器的管理。</li>
<li>datapath: 在 OVS 中，datapath 负责执行数据交换，也就是把从接收端口收到的数据包在流表中进行匹配，并执行匹配到的动作。</li>
<li>Flow table: 每个 datapath 都和一个“flow table”关联，当 datapath 接收到数据之后， OVS 会在 flow table 中查找可以匹配的 flow，执行对应的操作, 例如转发数据到另外的端口。</li>
</ul>
<h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>内核模块实现了多个“数据路径（DataPath）”（类似于网桥），每个都可以有多个“vports”（类似于桥内的端口）。每个数据路径也通过关联流表（flow table）来设置操作，而这些流表中的流都是用户空间在报文头和元数据的基础上映射的关键信息，一般的操作都是将数据包转发到另一个vport。当一个数据包到达一个vport，内核模块所做的处理是提取其流的关键信息并在流表中查找这些关键信息。当有一个匹配的流时它执行对应的操作。如果没有匹配，它会将数据包送到用户空间的处理队列中（作为处理的一部分，用户空间可能会设置一个流用于以后遇到相同类型的数据包可以在内核中执行操作）。细节如下图所示：</p>
<p><img src="/myimages/openvswitch.png" alt="openvswitch"></p>
<h3 id="ovs管理组件"><a href="#ovs管理组件" class="headerlink" title="ovs管理组件"></a>ovs管理组件</h3><ul>
<li>ovs-dpctl：一个工具，用来配置交换机内核模块，可以控制转发规则。</li>
<li>ovs-vsctl：主要是获取或者更改ovs-vswitchd的配置信息，此工具操作的时候会更新ovsdb-server中的数据库。</li>
<li>ovs-appctl：主要是向OVS守护进程发送命令的，一般用不上。 a utility that sends commands to running Open vSwitch daemons (ovs-vswitchd)</li>
<li>ovsdbmonitor：GUI工具来显示ovsdb-server中数据信息。（Ubuntu下是可以使用apt-get安装，可以远程获取OVS数据库和OpenFlow的流表）</li>
<li>ovs-controller：一个简单的OpenFlow控制器</li>
<li>ovs-ofctl：用来控制OVS作为OpenFlow交换机工作时候的流表内容。</li>
<li>ovs-pki：OpenFlow交换机创建和管理公钥框架；</li>
<li>ovs-tcpundump：tcpdump的补丁，解析OpenFlow的消息；</li>
<li>brocompat.ko : Linux bridge compatibility module</li>
<li>openvswitch.ko : Open vSwitch switching datapath</li>
</ul>
<h2 id="ovs流表实验"><a href="#ovs流表实验" class="headerlink" title="ovs流表实验"></a>ovs流表实验</h2><h3 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h3><p><img src="/myimages/ovs-flow.png" alt="ovs-flow"></p>
<h3 id="拓扑实现脚本"><a href="#拓扑实现脚本" class="headerlink" title="拓扑实现脚本"></a>拓扑实现脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ovs-vsctl add-br ovs-switch</div><div class="line"></div><div class="line">ovs-vsctl add-port ovs-switch p0 -- set Interface p0 ofport_request=100</div><div class="line">ovs-vsctl set Interface p0 type=internal</div><div class="line"></div><div class="line">ip netns add ns0</div><div class="line">ip link set p0 netns ns0 </div><div class="line">ip netns exec ns0 ip addr add 192.168.1.100/24 dev p0</div><div class="line">ip netns exec ns0 ifconfig p0 promisc up</div><div class="line"></div><div class="line">ovs-vsctl add-port ovs-switch p1 -- set Interface p1 ofport_request=101</div><div class="line">ovs-vsctl set Interface p1 type=internal</div><div class="line"></div><div class="line">ip netns add ns1</div><div class="line">ip link set p1 netns ns1</div><div class="line">ip netns exec ns1 ip addr add 192.168.1.101/24 dev p1 </div><div class="line">ip netns exec ns1 ifconfig p1 promisc up</div><div class="line"></div><div class="line">ovs-vsctl add-port ovs-switch p2 -- set Interface p2 ofport_request=102</div><div class="line">ovs-vsctl set Interface p2 type=internal</div><div class="line"></div><div class="line">ip netns add ns2</div><div class="line">ip link set p2 netns ns2</div><div class="line">ip netns exec ns2 ip addr add 192.168.1.102/24 dev p2</div><div class="line">ip netns exec ns2 ifconfig p2 promisc up</div></pre></td></tr></table></figure>
<h3 id="ovs-ofctl-show-ovs-switch-显示虚拟交换机流表的统计信息"><a href="#ovs-ofctl-show-ovs-switch-显示虚拟交换机流表的统计信息" class="headerlink" title="ovs-ofctl show ovs-switch 显示虚拟交换机流表的统计信息"></a>ovs-ofctl show ovs-switch 显示虚拟交换机流表的统计信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-ofctl show ovs-switch</div><div class="line">OFPT_FEATURES_REPLY (xid=0x2): dpid:0000aaa801224e40</div><div class="line">n_tables:254, n_buffers:0</div><div class="line">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class="line">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class="line"> 100(p0): addr:fc:7f:00:00:36:b8</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 101(p1): addr:56:a7:a1:27:a9:b8</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> 102(p2): addr:d2:af:d5:d2:c9:52</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line"> LOCAL(ovs-switch): addr:aa:a8:01:22:4e:40</div><div class="line">     config:     PORT_DOWN</div><div class="line">     state:      LINK_DOWN</div><div class="line">     speed: 0 Mbps now, 0 Mbps max</div><div class="line">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure>
<h3 id="ovs-dpctl-show-查看内核接口状态"><a href="#ovs-dpctl-show-查看内核接口状态" class="headerlink" title="ovs-dpctl show 查看内核接口状态"></a>ovs-dpctl show 查看内核接口状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-dpctl show</div><div class="line">system@ovs-system:</div><div class="line">  lookups: hit:334 missed:22 lost:0</div><div class="line">  flows: 0</div><div class="line">  masks: hit:371 total:0 hit/pkt:1.04</div><div class="line">  port 0: ovs-system (internal)</div><div class="line">  port 1: ovs-switch (internal)</div><div class="line">  port 2: p0 (internal)</div><div class="line">  port 3: p1 (internal)</div><div class="line">  port 4: p2 (internal)</div></pre></td></tr></table></figure>
<h3 id="ovs-ofctl-dump-flows-ovs-switch查看ovs-switch的流表"><a href="#ovs-ofctl-dump-flows-ovs-switch查看ovs-switch的流表" class="headerlink" title="ovs-ofctl dump-flows ovs-switch查看ovs-switch的流表"></a>ovs-ofctl dump-flows ovs-switch查看ovs-switch的流表</h3><h3 id="接口p1发出去的icmp发包源地址变成10-10-10-10"><a href="#接口p1发出去的icmp发包源地址变成10-10-10-10" class="headerlink" title="接口p1发出去的icmp发包源地址变成10.10.10.10"></a>接口p1发出去的icmp发包源地址变成10.10.10.10</h3><h3 id="ovs-ofctl-del-flows-ovs-switch-“in-port-100”删除in-port-100的流表"><a href="#ovs-ofctl-del-flows-ovs-switch-“in-port-100”删除in-port-100的流表" class="headerlink" title="ovs-ofctl del-flows ovs-switch “in_port=100”删除in_port=100的流表"></a>ovs-ofctl del-flows ovs-switch “in_port=100”删除in_port=100的流表</h3><h3 id="接口p1发出去的icmp报文源地址均变成10-10-10-10"><a href="#接口p1发出去的icmp报文源地址均变成10-10-10-10" class="headerlink" title="接口p1发出去的icmp报文源地址均变成10.10.10.10"></a>接口p1发出去的icmp报文源地址均变成10.10.10.10</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow ovs-switch &quot;priority=1 idle_timeout=0,in_port=100,actions=mod_nw_src:10.10.10.10,normal&quot;</div></pre></td></tr></table></figure>
<h3 id="所有的icmp定向到p2-in-port-102"><a href="#所有的icmp定向到p2-in-port-102" class="headerlink" title="所有的icmp定向到p2(in_port=102)"></a>所有的icmp定向到p2(in_port=102)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow ovs-switch idle_timeout=0,dl_type=0x0800,nw_proto=1,actions=output:102</div></pre></td></tr></table></figure>
<h3 id="在该组网下数据包转发过程测试"><a href="#在该组网下数据包转发过程测试" class="headerlink" title="在该组网下数据包转发过程测试"></a>在该组网下数据包转发过程测试</h3><h4 id="产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8"><a href="#产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8" class="headerlink" title="产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)"></a>产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=100,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. priority 0</div><div class="line">    NORMAL</div><div class="line">     -&gt; no learned MAC for destination, flooding</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=100,vlan_tci=0x0000/0x1fff,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line">Datapath actions: 1,3,4</div></pre></td></tr></table></figure>
<p><strong>数据包转发过程：</strong><br>上述产生的数据包最终被广播到接口1，3，4<br>  port 1: ovs-switch (internal)<br>  port 2: p0 (internal)<br>  port 3: p1 (internal)<br>  port 4: p2 (internal)</p>
<h4 id="配置接口p1为tag101后-产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8"><a href="#配置接口p1为tag101后-产生数据包源-p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8" class="headerlink" title="配置接口p1为tag101后 产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)"></a>配置接口p1为tag101后 产生数据包源 p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-vsctl set Port p1 tag=101</div><div class="line"></div><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=100,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. priority 0</div><div class="line">    NORMAL</div><div class="line">     -&gt; no learned MAC for destination, flooding</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=100,vlan_tci=0x0000/0x1fff,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div></pre></td></tr></table></figure>
<p><strong> 数据包转发过程：</strong><br>上述产生数据包最终被广播到接口1，4 因为接口2已经配置了tag101和产生数据包不在同一个广播域</p>
<h4 id="修改从p0口发出的数据包强制加上vlantag-101-产生数据包p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8"><a href="#修改从p0口发出的数据包强制加上vlantag-101-产生数据包p0-06-fc-2c-fd-84-f5-gt-p1-56-a7-a1-27-a9-b8" class="headerlink" title="修改从p0口发出的数据包强制加上vlantag 101, 产生数据包p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)"></a>修改从p0口发出的数据包强制加上vlantag 101, 产生数据包p0(06:fc:2c:fd:84:f5) -&gt; p1(56:a7:a1:27:a9:b8)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ovs-ofctl add-flow ovs-switch &quot;priority=3,in_port=100,dl_vlan=0xffff,actions=mod_vlan_vid:101,normal&quot;</div><div class="line"></div><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=100,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. in_port=100,vlan_tci=0x0000, priority 3</div><div class="line">    mod_vlan_vid:101</div><div class="line">    NORMAL</div><div class="line">     -&gt; learned that 06:fc:2c:fd:84:f5 is on port p0 in VLAN 101</div><div class="line">     -&gt; forwarding to learned port</div><div class="line"></div><div class="line">Final flow: in_port=100,dl_vlan=101,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line">Megaflow: recirc_id=0,in_port=100,vlan_tci=0x0000,dl_src=06:fc:2c:fd:84:f5,dl_dst=56:a7:a1:27:a9:b8,dl_type=0x0000</div><div class="line">Datapath actions: 3</div></pre></td></tr></table></figure>
<p><strong> 数据包转发过程 </strong><br>产生的流从p0-&gt;p1 ，数据包被完整转发到port 3 ，也就是说明该数据包被完整添加上了tag101</p>
<h4 id="产生一条p1-gt-p0流量，该流量携带tag101，发送给接口p0"><a href="#产生一条p1-gt-p0流量，该流量携带tag101，发送给接口p0" class="headerlink" title="产生一条p1-&gt;p0流量，该流量携带tag101，发送给接口p0"></a>产生一条p1-&gt;p0流量，该流量携带tag101，发送给接口p0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# ovs-appctl ofproto/trace ovs-switch in_port=101,dl_dst=06:fc:2c:fd:84:f5,dl_src=56:a7:a1:27:a9:b8 -generate</div><div class="line">Flow: in_port=101,vlan_tci=0x0000,dl_src=56:a7:a1:27:a9:b8,dl_dst=06:fc:2c:fd:84:f5,dl_type=0x0000</div><div class="line"></div><div class="line">bridge(&quot;ovs-switch&quot;)</div><div class="line">--------------------</div><div class="line"> 0. priority 0</div><div class="line">    NORMAL</div><div class="line">     -&gt; forwarding to learned port</div><div class="line"></div><div class="line">Final flow: unchanged</div><div class="line">Megaflow: recirc_id=0,in_port=101,vlan_tci=0x0000/0x1fff,dl_src=56:a7:a1:27:a9:b8,dl_dst=06:fc:2c:fd:84:f5,dl_type=0x0000</div><div class="line">Datapath actions: push_vlan(vid=101,pcp=0),2</div></pre></td></tr></table></figure>
<h2 id="ovs配合使用Controller之一-Floodlight"><a href="#ovs配合使用Controller之一-Floodlight" class="headerlink" title="ovs配合使用Controller之一 Floodlight"></a>ovs配合使用Controller之一 Floodlight</h2><p>操作系统环境：ubuntun 16.04<br>ovs版本信息：(Open vSwitch) 2.5.2<br>10.30.10.145/24</p>
<h3 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install build-essential ant maven python-dev</div><div class="line">apt-get install build-essential openjdk-8-jdk ant maven python-dev</div></pre></td></tr></table></figure>
<h3 id="下载floodlight"><a href="#下载floodlight" class="headerlink" title="下载floodlight"></a>下载floodlight</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/floodlight/floodlight.git</div><div class="line">cd floodlight/</div><div class="line">git submodule init</div><div class="line">git submodule update</div><div class="line">ant</div><div class="line">java -jar target/floodlight.jar</div><div class="line"></div><div class="line"># nohup java -jar target/floodlight.jar &gt; floodlight.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<h3 id="在被管理的ovs上虚拟机上执行加入命令"><a href="#在被管理的ovs上虚拟机上执行加入命令" class="headerlink" title="在被管理的ovs上虚拟机上执行加入命令"></a>在被管理的ovs上虚拟机上执行加入命令</h3><p>ovs-vsctl set-controller ovs-switch tcp:10.30.10.145:6653<br>ovs-vsctl set Bridge ovs-switch fail-mode=secure</p>
<p>其它说明：<br>（1）10.30.10.145为floodlight controller的安装服务地址<br>（2）一堆教程说端口是6633，新版本发生了变化更改为了6653，具体变化版本号未研究<br>（3）采用的是secure，不停的连接Controller</p>
<blockquote>
<p>当 OVS 交换机连接到 Floodlight 控制器后，理论上所有的流表规则应该交给控制器来建立。由于 OVS 交换机和控制器之间是通过网络通讯来传递数据的，所以网络连接失败会影响到 Flow 的建立，为了处理该问题提供两种模式：</p>
<ul>
<li>standlone: 默认模式。如果 OVS 交换机超过三次无法正常连接到 OpenFlow 控制器，OVS 交换机自己会负责建立流表。在这种模式下，OVS 和常见的 L2 交换机相似。与此同时，OVS 也会继续尝试连接控制器，一旦网络连接恢复，OVS 会再次切换到使用控制器进行流表管理。</li>
<li>secure: 在 secure 模式下，如果 OVS 无法正常连接到 OpenFlow 控制器，OVS 会不停的尝试与控制器重新建立连接，而不会自己负责建立流表。</li>
</ul>
</blockquote>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p><a href="http://10.30.10.145:8080/ui/pages/index.html" target="_blank" rel="external">http://10.30.10.145:8080/ui/pages/index.html</a><br><img src="/myimages/floodlight.png" alt="floodlight"></p>
<h2 id="备注说明"><a href="#备注说明" class="headerlink" title="备注说明"></a>备注说明</h2><p>博文的篇幅太长有碍观瞻，深入研究内容请见后续博文openvSwitch XX。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;openvSwitch简介&quot;&gt;&lt;a href=&quot;#openvSwitch简介&quot; class=&quot;headerlink&quot; title=&quot;openvSwitch简介&quot;&gt;&lt;/a&gt;openvSwitch简介&lt;/h2&gt;&lt;p&gt;openvSwitch 是SDN常用的虚拟交换机，其将普通交换机的数据平面和控制平面相分离，SDN交换机只负责数据的转发，而控制指令则由更上一级的控制器下发&lt;/p&gt;
&lt;h2 id=&quot;OpenvSwitch（虚拟交换机）常用模块&quot;&gt;&lt;a href=&quot;#OpenvSwitch（虚拟交换机）常用模块&quot; class=&quot;headerlink&quot; title=&quot;OpenvSwitch（虚拟交换机）常用模块&quot;&gt;&lt;/a&gt;OpenvSwitch（虚拟交换机）常用模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ovs-vswitchd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要模块、实现交换功能，含有支持流交换的Linux内核模块,基于流交换&lt;br&gt;它和上层controller通信采用OPENFLOW协议，与ovsdb-server通信采用OVSDB协议，和内核通信采用netlink通信&lt;br&gt;支持多个独立datapatch(网桥)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root      2225     1  0 20:05 ?        00:00:00 ovs-vswitchd: monitoring pid 2226 (healthy)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root      2226  2225  0 20:05 ?        00:00:00 ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach --monitor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;ovsdb-server &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟交换机配置信息（接口、交换内容、VLAN等）存放的数据库服务，ovs-vswitchd会根据ovsdb-server中的配置工作。&lt;br&gt;ovsdb-server 和ovs-vswitchd 使用OVSDB(JSON-RPC)方式通信&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root      2201     1  0 20:05 ?        00:00:00 ovsdb-server: monitoring pid 2202 (healthy)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root      2202  2201  0 20:05 ?        00:00:00 ovsdb-server /etc/openvswitch/conf.db -vconsole:emer -vsyslog:err -vfile:info --remote=punix:/var/run/openvswitch/db.sock --private-key=db:Open_vSwitch,SSL,private_key --certificate=db:Open_vSwitch,SSL,certificate --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert --no-chdir --log-file=/var/log/openvswitch/ovsdb-server.log --pidfile=/var/run/openvswitch/ovsdb-server.pid --detach --monitor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ovs" scheme="http://vcpu.me/tags/ovs/"/>
    
      <category term="虚拟交换机" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
      <category term="ubuntun16.04" scheme="http://vcpu.me/tags/ubuntun16-04/"/>
    
  </entry>
  
  <entry>
    <title>iptables</title>
    <link href="http://vcpu.me/iptables/"/>
    <id>http://vcpu.me/iptables/</id>
    <published>2017-07-27T10:00:00.000Z</published>
    <updated>2017-07-27T03:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filter表"><a href="#filter表" class="headerlink" title="filter表"></a>filter表</h2><p>根据已配置好的规则操作本机的包（INPUT）、转发的包（FORWARD）、本机发出的包（OUTPUT）；最终决定是否放行（ACCEPT）、丢弃（DROP）、拒绝（REJECT）、产生告警日志（LOG）。</p>
<h2 id="nat表"><a href="#nat表" class="headerlink" title="nat表"></a>nat表</h2><p>根据配置好的规则，在包刚刚到达FW时修改目的地址（PREROUTING）、本机产生包修改目的地址（OUTPUT）、离开转发系统前修改源地址（POSTROUTING）；最终实现网络SNAT、REDIRECT、DNAT</p>
<h2 id="mangle表"><a href="#mangle表" class="headerlink" title="mangle表"></a>mangle表</h2><p>主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。</p>
<a id="more"></a>
<h2 id="iptables工作的netfilter框架挂载点转发流程"><a href="#iptables工作的netfilter框架挂载点转发流程" class="headerlink" title="iptables工作的netfilter框架挂载点转发流程"></a>iptables工作的netfilter框架挂载点转发流程</h2><p><img src="/myimages/netfilter.png" alt="netfilter"></p>
<ul>
<li><p>1.数据包从网络A经过网卡中断送入内核协议栈，首先进入prerouting挂载点，路由前的操作可加入到此挂载点完成，如图的对目的地址的修改，修改后的地址会跟进修改后的地址会继续进入转发路由查找但是查找路由的目的地址变成了目的NAT后的地</p>
</li>
<li><p>2.经过转发路由查找，如果是发给本机的报文，交给本机的应用程序处理；在具体的应用程序处理之前<br>会经过input挂载点，如图你可以进行上本机的报文限制，直接在input挂载点丢弃报文，使其无法到达具体的应用程序。</p>
</li>
<li><blockquote>
<p>2-1.应用程序在处理完成后，根据本机路由表酱数据发出，在本机报文发出前，会经过output挂载点，此处你的策略只针对于本机发出报文有效。如果你想修改本机发出报文的源地址，你需要在此实现。</p>
</blockquote>
</li>
<li><p>3.经过转发路由查找，如果是转发的报文，在具体的转发报文之前，你可以通过在forward挂载点操作进行过滤等动作。</p>
</li>
<li><p>4.无论是转发报文还是本机发出的报文，它们最终会经过postrouting挂载点，送到最终物理发包流程；也就是说postrouting是数据包离开本netfilter协议栈的最后一个流程，你可以在这个流程中修改源IP地址。</p>
</li>
</ul>
<h2 id="iptables基本命令"><a href="#iptables基本命令" class="headerlink" title="iptables基本命令"></a>iptables基本命令</h2><p><img src="/myimages/iptablecmd.png" alt="iptablecmd"></p>
<ul>
<li>[-t 表名]：该规则所操作的哪个表，可以使用filter、nat等，如果没有指定则默认为filter</li>
<li>-A：新增一条规则，到该规则链列表的最后一行</li>
<li>-I：插入一条规则，原本该位置上的规则会往后顺序移动，没有指定编号则为1</li>
<li>-D：从规则链中删除一条规则，要么输入完整的规则，或者指定规则编号加以删除</li>
<li>-R：替换某条规则，规则替换不会改变顺序，而且必须指定编号。</li>
<li>-P：设置某条规则链的默认动作</li>
<li>-nL：-L、-n，查看当前运行的防火墙规则列表</li>
<li>chain名：指定规则表的哪个链，如INPUT、OUPUT、FORWARD、PREROUTING等</li>
<li>[规则编号]：插入、删除、替换规则时用，–line-numbers显示号码</li>
<li>[-i|o 网卡名称]：i是指定数据包从哪块网卡进入，o是指定数据包从哪块网卡输出</li>
<li>[-p 协议类型]：可以指定规则应用的协议，包含tcp、udp和icmp等</li>
<li>[-s 源IP地址]：源主机的IP地址或子网地址</li>
<li>[–sport 源端口号]：数据包的IP的源端口号</li>
<li>[-d目标IP地址]：目标主机的IP地址或子网地址</li>
<li>[–dport目标端口号]：数据包的IP的目标端口号</li>
<li>-m：extend matches，这个选项用于提供更多的匹配参数，如：</li>
<li>-m state –state ESTABLISHED,RELATED</li>
<li>-m tcp –dport 22</li>
<li>-m multiport –dports 80,8080</li>
<li>-m icmp –icmp-type 8</li>
<li>&lt;-j 动作&gt;：处理数据包的动作，包括ACCEPT、DROP、REJECT等<h2 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h2></li>
</ul>
<h3 id="iptables-nL-查看当前iptables-filter规则"><a href="#iptables-nL-查看当前iptables-filter规则" class="headerlink" title="iptables -nL 查看当前iptables filter规则"></a>iptables -nL 查看当前iptables filter规则</h3><p>   iptables -nL 等价于iptables -nL -t filter</p>
<h3 id="iptables-nL-t-nat查看nat规则"><a href="#iptables-nL-t-nat查看nat规则" class="headerlink" title="iptables -nL -t nat查看nat规则"></a>iptables -nL -t nat查看nat规则</h3><h3 id="iptables-nL-–line-number-显示规则链编号"><a href="#iptables-nL-–line-number-显示规则链编号" class="headerlink" title="iptables -nL –line-number 显示规则链编号"></a>iptables -nL –line-number 显示规则链编号</h3><h3 id="iptables-D-FORWARD-2删除FORWARD链第二条规则"><a href="#iptables-D-FORWARD-2删除FORWARD链第二条规则" class="headerlink" title="iptables -D FORWARD 2删除FORWARD链第二条规则"></a>iptables -D FORWARD 2删除FORWARD链第二条规则</h3><h3 id="iptables-A-INPUT-j-REJECT-–reject-with-icmp-host-prohibited拒绝所有报文，并回应主机已被封锁"><a href="#iptables-A-INPUT-j-REJECT-–reject-with-icmp-host-prohibited拒绝所有报文，并回应主机已被封锁" class="headerlink" title="iptables -A INPUT -j REJECT –reject-with icmp-host-prohibited拒绝所有报文，并回应主机已被封锁"></a>iptables -A INPUT -j REJECT –reject-with icmp-host-prohibited拒绝所有报文，并回应主机已被封锁</h3><p>–reject-with icmp-net-prohibited 拒绝数据包回应一条icmp改造主机被封锁<br>–reject-with tcp-reset 拒绝数据包 tcp回应rst<br>–reject-with icmp-net-prohibited 拒绝数据包回应一条icmp告知网络禁止</p>
<h3 id="实现在外界和本机访问主机的80端口就相当于访问8080端口"><a href="#实现在外界和本机访问主机的80端口就相当于访问8080端口" class="headerlink" title="实现在外界和本机访问主机的80端口就相当于访问8080端口"></a>实现在外界和本机访问主机的80端口就相当于访问8080端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A PREROUTING -p -m tcp --dport 80 -j REDIRECT --to-ports 8080</div><div class="line">iptables -t nat -A OUTPUT -p tcp -m --dport 80 -j REDIRECT --to-ports 8080</div></pre></td></tr></table></figure>
<h3 id="设置input默认丢包，forward和output默认放通"><a href="#设置input默认丢包，forward和output默认放通" class="headerlink" title="设置input默认丢包，forward和output默认放通"></a>设置input默认丢包，forward和output默认放通</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P FORWARD ACCEPT</div><div class="line">iptables -P OUTPUT ACCEPT</div></pre></td></tr></table></figure>
<h3 id="iptables-m-state-–state-NEW-ESTABLISHED"><a href="#iptables-m-state-–state-NEW-ESTABLISHED" class="headerlink" title="iptables -m state –state NEW,ESTABLISHED"></a>iptables -m state –state NEW,ESTABLISHED</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -p icmp -m state --state NEW -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ping通<br>测试结果：执行上述命令后效果为：主机A ping主机B ping不通；主机B ping主机A能通一个包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -p icmp -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包<br>测试结果：主机A ping主机B能ping通，主机B ping主机A并不能ping通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -p icmp -m state --state RELATED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包<br>测结果：主机A和主机B均不通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -s 10.30.10.141 -p tcp  -m state --state NEW -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ssh连接<br>测试结果：主机A无法 telnet 主机B(10.30.10.141) 22端口， 主机B telnet 主机A 可完成三次握手</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -s 10.30.10.141 -p tcp  -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ssh连接<br>测试结果：主机A可正常ssh主机B，主机B无法ssh主机A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 3 -s 10.30.10.141 -p tcp  -m state --state NEW,ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>背景：策略放在主机A, 默认策略是INPUT丢包，没有安全策略情况下，主机A和主机B可以相互ssh连接<br>测试结果：主机A和主机B可以相互ssh连接</p>
<p><strong>其它说明</strong><br>指定要匹配包的的状态，当前有4种状态可用：INVALID，ESTABLISHED，NEW和RELATED。 </p>
<ul>
<li>INVALID意味着这个包没有已知的流或连接与之关联，也可能是它包含的数据或包头有问题。</li>
<li>ESTABLISHED意思是包是完全有效的，而且属于一个已建立的连接，这个连接的两端都已经有数据发送</li>
<li>RELATED说明包正在建立一个新的连接，这个连接是和一个已建立的连接相关的。比如，FTP data transfer，ICMP error 和一个TCP或UDP连接相关。</li>
<li>NEW状态可以理解成允许首包建立会话，这里首包不适一个包的意思（icmp是第一个包的意思、TCP是三次握手的意思）。</li>
</ul>
<h3 id="10-30-0-0-16-网断允许访问本机的80和443端口"><a href="#10-30-0-0-16-网断允许访问本机的80和443端口" class="headerlink" title="10.30.0.0/16 网断允许访问本机的80和443端口"></a>10.30.0.0/16 网断允许访问本机的80和443端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 10.30.0.0/16 -p tcp -m tcp -m multiport --dports 80,443 -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="10-30-10-0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包"><a href="#10-30-10-0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包" class="headerlink" title="10.30.10.0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包"></a>10.30.10.0／24网段所有报文均不允许访问本机tcp的80端口，直接丢弃数据包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 10.30.10.0/24 -p tcp -m tcp --dport 80 -j DROP</div></pre></td></tr></table></figure>
<h3 id="完全信任主机10-30-10-30"><a href="#完全信任主机10-30-10-30" class="headerlink" title="完全信任主机10.30.10.30"></a>完全信任主机10.30.10.30</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -s 10.30.10.30 -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="放行lo口所有规则并且插入到规则2位置"><a href="#放行lo口所有规则并且插入到规则2位置" class="headerlink" title="放行lo口所有规则并且插入到规则2位置"></a>放行lo口所有规则并且插入到规则2位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -I INPUT 2 -i lo -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="当有人连接22端口时候产生日志，并对日志写入进行限制"><a href="#当有人连接22端口时候产生日志，并对日志写入进行限制" class="headerlink" title="当有人连接22端口时候产生日志，并对日志写入进行限制"></a>当有人连接22端口时候产生日志，并对日志写入进行限制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -R INPUT 1 -p tcp --dport 22 -m limit --limit 3/minute --limit-burst 8 -j LOG</div></pre></td></tr></table></figure>
<h3 id="iptables-A-PREROUTING-i-eth0-d-202-110-123-100-j-DNAT-–to-10-30-10-30"><a href="#iptables-A-PREROUTING-i-eth0-d-202-110-123-100-j-DNAT-–to-10-30-10-30" class="headerlink" title="iptables -A PREROUTING -i eth0 -d 202.110.123.100 -j DNAT –to 10.30.10.30"></a>iptables -A PREROUTING -i eth0 -d 202.110.123.100 -j DNAT –to 10.30.10.30</h3><p>目的NAT，访问202.110.123.100，最终相当于访问10.30.10.30</p>
<h3 id="iptables-A-POSTROUTING-o-eth0-s-1-1-1-1-j-SNAT-–to-202-110-123-200"><a href="#iptables-A-POSTROUTING-o-eth0-s-1-1-1-1-j-SNAT-–to-202-110-123-200" class="headerlink" title="iptables -A POSTROUTING -o eth0 -s 1.1.1.1 -j SNAT –to 202.110.123.200"></a>iptables -A POSTROUTING -o eth0 -s 1.1.1.1 -j SNAT –to 202.110.123.200</h3><p>源NAT，1.1.1.1内网机器上外网，其报文源地址全部变成 202.110.123.200</p>
<h3 id="iptables-A-POSTROUTING-o-eth0-s-192-168-1-200-j-SNAT-–to-NASQUERADE"><a href="#iptables-A-POSTROUTING-o-eth0-s-192-168-1-200-j-SNAT-–to-NASQUERADE" class="headerlink" title="iptables -A POSTROUTING -o eth0 -s 192.168.1.200 -j SNAT –to NASQUERADE"></a>iptables -A POSTROUTING -o eth0 -s 192.168.1.200 -j SNAT –to NASQUERADE</h3><p>源NAT，1.1.1.1内网机器上外网，其报文根据接口情况进行变更</p>
<h2 id="ubuntun-iptables规则开机启动"><a href="#ubuntun-iptables规则开机启动" class="headerlink" title="ubuntun iptables规则开机启动"></a>ubuntun iptables规则开机启动</h2><p>步骤1:将规则保存到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables-save &gt; /etc/iptables.up.rules</div></pre></td></tr></table></figure></p>
<p>步骤2:系统启动时候加载这些配置,vim /etc/network/interfaces;在最后一行加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller:~# cat /etc/network/interfaces</div><div class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line">pre-up iptables-restore &lt; /etc/iptables.up.rules</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;filter表&quot;&gt;&lt;a href=&quot;#filter表&quot; class=&quot;headerlink&quot; title=&quot;filter表&quot;&gt;&lt;/a&gt;filter表&lt;/h2&gt;&lt;p&gt;根据已配置好的规则操作本机的包（INPUT）、转发的包（FORWARD）、本机发出的包（OUTPUT）；最终决定是否放行（ACCEPT）、丢弃（DROP）、拒绝（REJECT）、产生告警日志（LOG）。&lt;/p&gt;
&lt;h2 id=&quot;nat表&quot;&gt;&lt;a href=&quot;#nat表&quot; class=&quot;headerlink&quot; title=&quot;nat表&quot;&gt;&lt;/a&gt;nat表&lt;/h2&gt;&lt;p&gt;根据配置好的规则，在包刚刚到达FW时修改目的地址（PREROUTING）、本机产生包修改目的地址（OUTPUT）、离开转发系统前修改源地址（POSTROUTING）；最终实现网络SNAT、REDIRECT、DNAT&lt;/p&gt;
&lt;h2 id=&quot;mangle表&quot;&gt;&lt;a href=&quot;#mangle表&quot; class=&quot;headerlink&quot; title=&quot;mangle表&quot;&gt;&lt;/a&gt;mangle表&lt;/h2&gt;&lt;p&gt;主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iptables" scheme="http://vcpu.me/tags/iptables/"/>
    
      <category term="netfilter框架原理" scheme="http://vcpu.me/tags/netfilter%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title> vxlan</title>
    <link href="http://vcpu.me/vxlan1/"/>
    <id>http://vcpu.me/vxlan1/</id>
    <published>2017-07-19T10:00:00.000Z</published>
    <updated>2017-07-19T05:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算网络要求"><a href="#云计算网络要求" class="headerlink" title="云计算网络要求"></a>云计算网络要求</h2><h3 id="虚拟机迁移"><a href="#虚拟机迁移" class="headerlink" title="虚拟机迁移"></a>虚拟机迁移</h3><p>（1）二层网络且链路冗余可靠<br>虚拟机迁移从一个物理机迁移到另一个物理机，要求虚拟机不间断业务；因此虚拟机迁移时候必须要保证IP和MAC等网络参数维持不变，放眼此要求也迁移的两台虚拟机处于二层网络时才能满足；而且要求网络本身能多链路冗余和可靠。<br>（2）二层网络下STP（网络生成树）协议复杂，且搞不定大网络规模网络<br>（3）各个厂商虚拟化网络技术，虽然可以简化拓扑，但网络规模和灵活性上欠缺，适合小规模网络构建，例如数据中心内部网络<br>（4）大规模网络扩展TRILL/SPB/FabricPath/VPLS等技术，课解决上述问题，但是对网络硬件有要求，部署成本高</p>
<h3 id="虚拟机规模受网络规格限制"><a href="#虚拟机规模受网络规格限制" class="headerlink" title="虚拟机规模受网络规格限制"></a>虚拟机规模受网络规格限制</h3><p>大二层网络环境下，所有交换机均需要记录下所有地址和接口映射；一般场景下核心交换机可满足此需求，但是针对于接入交换机却搞不定这件事情；当然你也可以提升所有交换机档次，那么网络建设成本也相应提升。</p>
<h3 id="网络广播隔离"><a href="#网络广播隔离" class="headerlink" title="网络广播隔离"></a>网络广播隔离</h3><p>（1）主流的vlan技术，会限制vlan数目为4094个<br>（2）vlan技术的静态配置型技术，这样使得数据中心网络几乎为所有vlan被允许通过，导致任何一个vlan 的未知广播数据会在整网泛滥，无节制消耗网络交换能力和带宽。<br>（3）对于小规模的云计算虚拟化环境，现有的网络技术如虚拟机接入感知(VEPA/802.1Qbg)、数据中心二层网络扩展(IRF/vPC/TRILL/FabricPath)、数据中心间二层技术(OTV/EVI/TRILL)等可以很好的满足业务需求，上述限制不成为瓶颈。然而，完全依赖于物理网络设备本身的技术改良，目前看来并不能完全解决大规模云计算环境下的问题。<br><a id="more"></a></p>
<h2 id="如何满足云计算网络要求？-so-you-can-use-vxlan"><a href="#如何满足云计算网络要求？-so-you-can-use-vxlan" class="headerlink" title="如何满足云计算网络要求？ so you can use vxlan"></a>如何满足云计算网络要求？ so you can use vxlan</h2><p>云计算，虚拟化服务器迁移不改变IP地址，也不用修改主机路由等；这种使用场景二层网络可满足，传统网络通常采用VLAN进行通信隔离和广播隔离<br>实现2层网络；Vxlan是实现如何在三层网络中进行二层传输的overlay技术。Vxlan技术是SDN解决方案中最流行的技术。</p>
<h3 id="vxlan-amp-openflow-different？"><a href="#vxlan-amp-openflow-different？" class="headerlink" title="vxlan &amp; openflow different？"></a>vxlan &amp; openflow different？</h3><p>overlay只是一组组网方案，openflow是一个控制协议；实际使用网络中是通过openflow协议控制vSwitch构建overlay网络。</p>
<h2 id="why-vxlan（overlay）"><a href="#why-vxlan（overlay）" class="headerlink" title="why vxlan（overlay）?"></a>why vxlan（overlay）?</h2><h3 id="云计算需要弹性的二层网络，这种弹性overlay网络可满足"><a href="#云计算需要弹性的二层网络，这种弹性overlay网络可满足" class="headerlink" title="云计算需要弹性的二层网络，这种弹性overlay网络可满足"></a>云计算需要弹性的二层网络，这种弹性overlay网络可满足</h3><p>overlay网络的本质是在三层网络中实现二层网络的扩展。其也就具备了三层网络的优点。<br>三层网络优点如下：<br>（1）三层网络路由方式转发，突破网络结构限制<br>（2）具有良性大规模扩展能力<br>（3）对网络设备本身无要求<br>（4）故障自愈能力强<br>（5）负责均衡能力强</p>
<h3 id="overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小"><a href="#overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小" class="headerlink" title="overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小"></a>overlay组网，设备互联采用三层，ARP表不需要泛红到全网，tor交换机维护mac地址表页也会很小</h3><h3 id="vxlan可以解决度租户问题"><a href="#vxlan可以解决度租户问题" class="headerlink" title="vxlan可以解决度租户问题"></a>vxlan可以解决度租户问题</h3><h3 id="overlay组网避免二层带来的广播、组播、单播问题"><a href="#overlay组网避免二层带来的广播、组播、单播问题" class="headerlink" title="overlay组网避免二层带来的广播、组播、单播问题"></a>overlay组网避免二层带来的广播、组播、单播问题</h3><h2 id="vlan报文头-amp-vxlan报文头"><a href="#vlan报文头-amp-vxlan报文头" class="headerlink" title="vlan报文头 &amp; vxlan报文头"></a>vlan报文头 &amp; vxlan报文头</h2><h3 id="vlan报文结构"><a href="#vlan报文结构" class="headerlink" title="vlan报文结构"></a>vlan报文结构</h3><p><img src="/myimages/vlanframe.png" alt="vxlanframe"></p>
<h3 id="vxlan报文结构"><a href="#vxlan报文结构" class="headerlink" title="vxlan报文结构"></a>vxlan报文结构</h3><p><img src="/myimages/vxlanframe.png" alt="vxlanframe"></p>
<h3 id="vxlan封装端口默认是4798"><a href="#vxlan封装端口默认是4798" class="headerlink" title="vxlan封装端口默认是4798"></a>vxlan封装端口默认是4798</h3><h3 id="支持多达16M（（2-24-1）-1024-2）租户"><a href="#支持多达16M（（2-24-1）-1024-2）租户" class="headerlink" title="支持多达16M（（2^24-1）/1024^2）租户"></a>支持多达16M（（2^24-1）/1024^2）租户</h3><h3 id="vxlan数据平面-amp-控制平面"><a href="#vxlan数据平面-amp-控制平面" class="headerlink" title="vxlan数据平面 &amp; 控制平面"></a>vxlan数据平面 &amp; 控制平面</h3><p>（1）数据平面-隧道机制<br>已经知道，VTEP为虚拟机的数据包加上了层包头，这些新的报头之有在数据到达目的VTEP后才会被去掉。<br>中间路径的网络设备只会根据外层包头内的目的地址进行数据转发，对于转发路径上的网络来说，一个Vxlan<br>数据包跟一个普通IP包相比，除了个头大一点外没有区别。<br>     由于VXLAN的数据包在整个转发过程中保持了内部数据的完整，因此VXLAN的数据平面是一个基于隧道<br>的数据平面。</p>
<p>(2) 控制平面—-改进的二层协议<br>     VXLAN不会在虚拟机之间维持一个长连接，所以VXLAN需要一个控制平面来记录对端地址可达情况。控制<br>平面的表为(VNI，内层MAC，外层vtep_ip)。Vxlan学习地址的时候仍然保存着二层协议的特征，节点之间不会<br>周期性的交换各自的路由表，对于不认识的MAC地址，VXLAN依靠组播来获取路径信息(如果有SDN Controller，<br>可以向SDN单播获取)。<br>    另一方面，VXLAN还有自学习的功能，当VTEP收到一个UDP数据报后，会检查自己是否收到过这个虚拟机的<br>数据，如果没有，VTEP就会记录源vni/源外层ip/源内层mac对应关系，避免组播学习</p>
<h2 id="vxlan实验同网段ping主机"><a href="#vxlan实验同网段ping主机" class="headerlink" title="vxlan实验同网段ping主机"></a>vxlan实验同网段ping主机</h2><p>虚拟主机1<br><img src="/myimages/vxlan1.png" alt="vxlan1"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.151/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.188</div><div class="line"></div><div class="line">ifconfig br1 10.0.0.1/24 up</div></pre></td></tr></table></figure></p>
<p>虚拟主机2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.188/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.151</div><div class="line">ifconfig br1 10.0.0.2/24 up</div></pre></td></tr></table></figure>
<h3 id="此实验下vxlan-ARP数据包处理过程"><a href="#此实验下vxlan-ARP数据包处理过程" class="headerlink" title="此实验下vxlan ARP数据包处理过程"></a>此实验下vxlan ARP数据包处理过程</h3><p>步骤1：虚拟机1中ping 虚拟机2的10.0.0.2，arp表中无10.0.0.2的MAC地址，虚拟机1广播ARP请求<br>步骤2：br1即VTEP1会将报文封装起来。封装时候目的IP是确定的，源ip会经过路由抉择进行选择（VNI、源地址为VTEP1地址192.168.55.151、目的地址为VTEP2地址192.168.55.188）<br>步骤3：被封装流量经过物理网络到达VTEP2<br>步骤4：VTEP2接受到封装后报文，获取记录（VNI、内层源MAC、内层源IP），解除封装并在VNI中广播<br>步骤5：虚拟机2收到广播流量后，br1回复ARP请求,br1即VETP2会将ARP回复报文进行封装,因为回复数据要发给192.168.55.151，经过路由抉择发送源ip为192.168.55.188<br>步骤6：虚拟机1VTEP1收到报文后，学习收到报文的内层源MAC、内层源IP，解封将流量发给虚拟机1的br1<br>步骤7：br1获取MAC地址，ARP交互结束</p>
<h2 id="vxlan实验不同网段ping主机"><a href="#vxlan实验不同网段ping主机" class="headerlink" title="vxlan实验不同网段ping主机"></a>vxlan实验不同网段ping主机</h2><p>不同网断vxlan只需要将网关设置为开启vxlan的接口br1<br><img src="/myimages/vxlan2.png" alt="vxlan2"><br>虚拟主机1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.151/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.188</div><div class="line"></div><div class="line">ifconfig br1 10.0.0.1/24 up</div><div class="line">route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.0.0.1 dev br1</div></pre></td></tr></table></figure></p>
<p>虚拟主机2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:~# cat vxlan1.sh </div><div class="line"></div><div class="line">ovs-vsctl add-br br0</div><div class="line">ovs-vsctl add-br br1</div><div class="line">ovs-vsctl add-port br0 enp0s8</div><div class="line"></div><div class="line">ifconfig enp0s8 0 </div><div class="line">ifconfig br0 192.168.55.188/24 up</div><div class="line">route add default gw 192.168.55.254 br0</div><div class="line">ovs-vsctl add-port br1 vx1 -- set interface vx1 type=vxlan options:remote_ip=192.168.55.151</div><div class="line">ifconfig br1 10.0.1.1/24 up</div><div class="line">route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.1.1 dev br1</div></pre></td></tr></table></figure></p>
<h2 id="来自牛人的总结"><a href="#来自牛人的总结" class="headerlink" title="来自牛人的总结"></a>来自牛人的总结</h2><p>总要有结尾，此总结来自 <a href="http://www.jianshu.com/p/d8351b6bf41b" target="_blank" rel="external">http://www.jianshu.com/p/d8351b6bf41b</a></p>
<p>1、Overlay网络的优点简单说就两句话：一是在三层网络中利用封装技术提高二层网络扩展性的同时规避了传统二层网络的种种弊端；二是通过引入VNID的概念，满足了云计算多租户vlan不够，以及租户间网络隔离的问题。               </p>
<p>2、Overlay技术的诞生实际就是为了解决云计算大环境下传统网络的种种问题，从它的技术构想到落地方案都是按照云计算的思路来的，所以对于一个规模较小且相对稳定的网络环境中是没有必要用overlay技术的，用了反而把网络搞复杂了。</p>
<p>3、Overlay的所有技术路线中，VXLAN的运用最广泛，得到了最多的主流网络厂商的支持，未来很长一段时间里很可能成为overlay技术的代名词；</p>
<p>4、对于overlay的软硬件模式之争，是仁者见仁、智者见智的，我觉得目前来看软件模式更加容易落地，如果虚拟化平台是开源的需要自己去研发vSwitch是有一些落地难度的，但是vmware NSX相对还是比较成熟的，但是也需要谨慎，最好在一些测试环境或者非重要的环境中先试用。而硬件的overlay方式存在一个所有硬件交换机都需要更换的问题，成本比较高，设备的更换的风险也高，而且硬件overlay方案的捆绑太厉害，需要谨慎考虑。不过我在测试了cisco的ACI后感觉还是很有特点的，后面会单独把ACI拿出来介绍一下，如果是一个完全全新的数据中心倒是可以考虑尝试硬件的overlay模式。</p>
<p>5、在网络的世界里并不是说一个技术叫好就会叫座，比如当年的ATM和Ethernet之争，会有很多客观因素来决定的，比如用户使用习惯，技术落地难度等等，所以对于overlay的技术走向或者SDN的技术走向，还是有很多不确定因素的，各个流派间的博弈也是愈演愈烈，最终鹿死谁手真的很难说，因此这也是对我们用户来说比较头痛的事情，一个正在发展且没有什么标准化的技术，落地的风险比较大，只能抱着边尝试边观望的态度，不轻易落地也不能轻易掉队。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;云计算网络要求&quot;&gt;&lt;a href=&quot;#云计算网络要求&quot; class=&quot;headerlink&quot; title=&quot;云计算网络要求&quot;&gt;&lt;/a&gt;云计算网络要求&lt;/h2&gt;&lt;h3 id=&quot;虚拟机迁移&quot;&gt;&lt;a href=&quot;#虚拟机迁移&quot; class=&quot;headerlink&quot; title=&quot;虚拟机迁移&quot;&gt;&lt;/a&gt;虚拟机迁移&lt;/h3&gt;&lt;p&gt;（1）二层网络且链路冗余可靠&lt;br&gt;虚拟机迁移从一个物理机迁移到另一个物理机，要求虚拟机不间断业务；因此虚拟机迁移时候必须要保证IP和MAC等网络参数维持不变，放眼此要求也迁移的两台虚拟机处于二层网络时才能满足；而且要求网络本身能多链路冗余和可靠。&lt;br&gt;（2）二层网络下STP（网络生成树）协议复杂，且搞不定大网络规模网络&lt;br&gt;（3）各个厂商虚拟化网络技术，虽然可以简化拓扑，但网络规模和灵活性上欠缺，适合小规模网络构建，例如数据中心内部网络&lt;br&gt;（4）大规模网络扩展TRILL/SPB/FabricPath/VPLS等技术，课解决上述问题，但是对网络硬件有要求，部署成本高&lt;/p&gt;
&lt;h3 id=&quot;虚拟机规模受网络规格限制&quot;&gt;&lt;a href=&quot;#虚拟机规模受网络规格限制&quot; class=&quot;headerlink&quot; title=&quot;虚拟机规模受网络规格限制&quot;&gt;&lt;/a&gt;虚拟机规模受网络规格限制&lt;/h3&gt;&lt;p&gt;大二层网络环境下，所有交换机均需要记录下所有地址和接口映射；一般场景下核心交换机可满足此需求，但是针对于接入交换机却搞不定这件事情；当然你也可以提升所有交换机档次，那么网络建设成本也相应提升。&lt;/p&gt;
&lt;h3 id=&quot;网络广播隔离&quot;&gt;&lt;a href=&quot;#网络广播隔离&quot; class=&quot;headerlink&quot; title=&quot;网络广播隔离&quot;&gt;&lt;/a&gt;网络广播隔离&lt;/h3&gt;&lt;p&gt;（1）主流的vlan技术，会限制vlan数目为4094个&lt;br&gt;（2）vlan技术的静态配置型技术，这样使得数据中心网络几乎为所有vlan被允许通过，导致任何一个vlan 的未知广播数据会在整网泛滥，无节制消耗网络交换能力和带宽。&lt;br&gt;（3）对于小规模的云计算虚拟化环境，现有的网络技术如虚拟机接入感知(VEPA/802.1Qbg)、数据中心二层网络扩展(IRF/vPC/TRILL/FabricPath)、数据中心间二层技术(OTV/EVI/TRILL)等可以很好的满足业务需求，上述限制不成为瓶颈。然而，完全依赖于物理网络设备本身的技术改良，目前看来并不能完全解决大规模云计算环境下的问题。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="overlay" scheme="http://vcpu.me/tags/overlay/"/>
    
      <category term="云计算组网" scheme="http://vcpu.me/tags/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BB%84%E7%BD%91/"/>
    
      <category term="vxlan原理" scheme="http://vcpu.me/tags/vxlan%E5%8E%9F%E7%90%86/"/>
    
      <category term="vxlan实验" scheme="http://vcpu.me/tags/vxlan%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title> 虚拟网络</title>
    <link href="http://vcpu.me/network1/"/>
    <id>http://vcpu.me/network1/</id>
    <published>2017-07-14T10:00:00.000Z</published>
    <updated>2017-07-14T07:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="network-namespace"><a href="#network-namespace" class="headerlink" title="network namespace"></a>network namespace</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>当前系统的网络空间，拥有单独的网络协议栈，网络设备、网卡、路由表、转发表、ARP表、ip地址表、iptables、socket等与网络有关的组建均独立，就像进入了另一个网络环境<br>且该网络空间可以实现交换机、路由器、防火墙等功能</p>
<h2 id="使用netns在linux系统上搭建网络"><a href="#使用netns在linux系统上搭建网络" class="headerlink" title="使用netns在linux系统上搭建网络"></a>使用netns在linux系统上搭建网络</h2><p><img src="/myimages/bridge1.png" alt="bridge1"><br><strong>网络描述</strong>：<br>   该网络由四部分组成：外网、虚拟网络空间net0、虚拟网络空间net1、虚拟网络空间net2<br>   net0和net2分别为网段10.0.1.0/24 10.0.2.0/24的网络空间，并且接入网桥<br>   net1为网络空间，分别以接口eth0和eth1接入虚拟网桥，分别和net0和net2同一个网段<br>   net1为网络空间，以eth2接入网桥，和物理接口enp0s8同一个网段<br>   enp0s8为虚拟机的桥接物理网卡（虚拟机接口混杂模式开启）<br>   192.168.55.165物理机器，接入虚拟机虚拟bridge另外一端均属于ubuntun虚拟机上搭建虚拟网络<br>   淡黄色部分属于虚拟网桥<br>   net0和net2的默认网关是net1<br>   net1的默认网关是办公网络交换机192.168.55.254<br>   经过net1出去流量做snat</p>
<p><strong>搭建网络最终效果</strong>：<br>    net0和net1和net2 网络空间中均可以上外网<br><a id="more"></a></p>
<h2 id="搭建命令"><a href="#搭建命令" class="headerlink" title="搭建命令"></a>搭建命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# cat br2.sh</div><div class="line"></div><div class="line"></div><div class="line">#new bridge &amp; start</div><div class="line">ip addr flush dev enp0s8</div><div class="line">brctl addbr br0</div><div class="line">brctl addif br0 enp0s8</div><div class="line">ifconfig br0 192.168.55.244/24 up</div><div class="line">ip route add default via 192.168.55.254</div><div class="line"></div><div class="line"># ip link add br0 type bridge</div><div class="line"># ip link set dev br0 up</div><div class="line"></div><div class="line">#add net0:eth0 &lt;-&gt; br0:tap0</div><div class="line"> ip link add net0_eth0 type veth peer name tap0</div><div class="line"> ip netns add net0</div><div class="line"> ip link set dev net0_eth0 netns net0</div><div class="line"> ip netns exec net0 ip link set dev net0_eth0 name eth0</div><div class="line"> ip netns exec net0 ip addr add 10.0.1.1/24 dev eth0</div><div class="line"> ip netns exec net0 ip link set dev eth0 up</div><div class="line"> ip link set dev tap0 master br0</div><div class="line"> ip link set dev tap0 up</div><div class="line"></div><div class="line">#add net1:eth0 &lt;-&gt; br0:tap1</div><div class="line"> ip link add net1_eth0 type veth peer name tap1</div><div class="line"> ip netns add net1</div><div class="line"> ip link set dev net1_eth0 netns net1</div><div class="line"> ip netns exec net1 ip link set dev net1_eth0 name eth0</div><div class="line"> ip netns exec net1 ip addr add 10.0.1.2/24 dev eth0</div><div class="line"> ip netns exec net1 ip link set dev eth0 up</div><div class="line"> ip link set dev tap1 master br0</div><div class="line"> ip link set dev tap1 up</div><div class="line"></div><div class="line">#add net2:eth0 &lt;-&gt; br0:tap2</div><div class="line"> ip link add net2_eth0 type veth peer name tap2</div><div class="line"> ip netns add net2</div><div class="line"> ip link set dev net2_eth0 netns net2</div><div class="line"> ip netns exec net2 ip link set dev net2_eth0 name eth0</div><div class="line"> ip netns exec net2 ip addr add 10.0.2.1/24 dev eth0</div><div class="line"> ip netns exec net2 ip link set dev eth0 up</div><div class="line"> ip link set dev tap2 master br0</div><div class="line"> ip link set dev tap2 up</div><div class="line"></div><div class="line">#connect net2:eth1 &lt;-&gt; br0:tap3</div><div class="line"> ip link add net2_eth1 type veth peer name tap3</div><div class="line"> ip link set dev net2_eth1 netns net1</div><div class="line"> ip netns exec net1 ip link set dev net2_eth1 name eth1</div><div class="line"> ip netns exec net1 ip addr add 10.0.2.2/24 dev eth1</div><div class="line"> ip netns exec net1 ip link set dev eth1 up</div><div class="line"> ip link set dev tap3 master br0</div><div class="line"> ip link set dev tap3 up</div><div class="line"></div><div class="line">#add route</div><div class="line">#ip netns exec net2 ip route add 10.0.1.0/24 via 10.0.2.2 dev eth0</div><div class="line">#ip netns exec net0 ip route add 10.0.2.0/24 via 10.0.1.2 dev eth0</div><div class="line"></div><div class="line">ip netns exec net2 route add default gw 10.0.2.2</div><div class="line">ip netns exec net0 route add default gw 10.0.1.2</div><div class="line"></div><div class="line">#open gateway forward</div><div class="line">ip netns exec net1 sysctl net.ipv4.ip_forward=1</div><div class="line"></div><div class="line"></div><div class="line">#connect net1:eth2 &lt;-&gt; br0:tap4</div><div class="line"> ip link add net1_eth2 type veth peer name tap4</div><div class="line"> ip link set dev net1_eth2 netns net1</div><div class="line"> ip netns exec net1 ip link set dev net1_eth2 name eth2</div><div class="line"> ip netns exec net1 ip addr add 192.168.55.233/24 dev eth2</div><div class="line"> ip netns exec net1 ip link set dev eth2 up</div><div class="line"> ip link set dev tap4 master br0</div><div class="line"> ip link set dev tap4 up</div><div class="line"></div><div class="line">#add net1 gateway 192.168.55.254</div><div class="line">ip netns exec net1 route add default gw 192.168.55.254</div><div class="line"></div><div class="line">#add snat</div><div class="line">ip netns exec net1 iptables -t nat -A POSTROUTING -s 10.0.1.0/24 -o eth2 -j MASQUERADE</div><div class="line">ip netns exec net1 iptables -t nat -A POSTROUTING -s 10.0.2.0/24 -o eth2 -j MASQUERADE</div><div class="line"></div><div class="line">ip netns exec net0 ping -c 3 8.8.8.8</div><div class="line">ip netns exec net2 ping -c 3 8.8.8.8</div></pre></td></tr></table></figure>
<h1 id="Linux虚拟网络设备tun-tap"><a href="#Linux虚拟网络设备tun-tap" class="headerlink" title="Linux虚拟网络设备tun/tap"></a>Linux虚拟网络设备tun/tap</h1><h2 id="网络设备概念？"><a href="#网络设备概念？" class="headerlink" title="网络设备概念？"></a>网络设备概念？</h2><p>网络设备工作在驱动和协议栈之间，负责衔接它们之间的交互。它帮助驱动和协议栈只关注本身事情。</p>
<h2 id="虚拟网络设备和物理物理设备区别-？"><a href="#虚拟网络设备和物理物理设备区别-？" class="headerlink" title="虚拟网络设备和物理物理设备区别 ？"></a>虚拟网络设备和物理物理设备区别 ？</h2><p>物理网卡其实就是物理设备，比如物理网卡eth0，它分别连接内核协议栈河外面的物理网络，从物理网络收到的数据包会通过接口转发给内核协议栈，从内核协议栈发出包也会通过物理设备转发最终通过物理网络发出去</p>
<p>虚拟设备和物理设备对于内核网络设备管理模块来讲地位一致且无区别。只不过物理设备往往把数据包送到外网，虚拟设备要看具体实现了。</p>
<h2 id="tun-tap-？"><a href="#tun-tap-？" class="headerlink" title="tun/tap ？"></a>tun/tap ？</h2><p>tun/tap连接的应用程序，可以理解其为运行的另一台服务器，这台服务器可用于加密、隧道等数据加工；处理完成后从新借用一个地址将处理完后数据包封装，发出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">+----------------------------------------------------------------+</div><div class="line">|                                                                |</div><div class="line">|  +--------------------+      +--------------------+            |</div><div class="line">|  | User Application A |      | User Application B |&lt;-----+     |</div><div class="line">|  +--------------------+      +--------------------+      |     |</div><div class="line">|               | 1                    | 5                 |     |</div><div class="line">|...............|......................|...................|.....|</div><div class="line">|               ↓                      ↓                   |     |</div><div class="line">|         +----------+           +----------+              |     |</div><div class="line">|         | socket A |           | socket B |              |     |</div><div class="line">|         +----------+           +----------+              |     |</div><div class="line">|                 | 2               | 6                    |     |</div><div class="line">|.................|.................|......................|.....|</div><div class="line">|                 ↓                 ↓                      |     |</div><div class="line">|             +------------------------+                 4 |     |</div><div class="line">|             | Newwork Protocol Stack |                   |     |</div><div class="line">|             +------------------------+                   |     |</div><div class="line">|                | 7                 | 3                   |     |</div><div class="line">|................|...................|.....................|.....|</div><div class="line">|                ↓                   ↓                     |     |</div><div class="line">|        +----------------+    +----------------+          |     |</div><div class="line">|        |      eth0      |    |      tun0      |          |     |</div><div class="line">|        +----------------+    +----------------+          |     |</div><div class="line">|192.168.55.188  |                   |   10.0.1.1          |     |</div><div class="line">|                | 8                 +---------------------+     |</div><div class="line">|                |                                               |</div><div class="line">+----------------|-----------------------------------------------+</div><div class="line">                 ↓</div><div class="line">         Physical Network</div></pre></td></tr></table></figure>
<p>上述图表述的应用场景是VPN场景：发到10.0.1.0/24 网络数据通过应用程序B这个隧道，利用192.168.55.188发出到远端。</p>
<h2 id="tun-tap场景下数据包流程"><a href="#tun-tap场景下数据包流程" class="headerlink" title="tun/tap场景下数据包流程"></a>tun/tap场景下数据包流程</h2><p>1.应用程序A是一个普通的程序，通过socket A发送了一个数据包，假设这个数据包的目的IP地址是10.0.1.2<br>2.socket将这个数据包丢给协议栈<br>3.协议栈根据数据包的目的IP地址，匹配本地路由规则，知道这个数据包应该由tun0出去，于是将数据包交给tun0<br>4.tun0收到数据包之后，发现另一端被进程B打开了，于是将数据包丢给了进程B<br>5.进程B收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是192.168.55.254<br>6.socket B将数据包丢给协议栈<br>7.协议栈根据本地路由，发现这个数据包应该要通过eth0发送出去，于是将数据包交给eth0<br>8.eth0通过物理网络将数据包发送出去</p>
<p>192.168.55.254收到数据包后，打开数据包，取出原始数据，转发给10.0.1.2，收到10.0.1.2应答后，从新构造应答包并讲原始报文封装里面；走路由返回给程序B，应用程序B解封装，最终将数据包回复给应用程序A</p>
<p>至此一个完整的隧道交互完成了，tun/tap承担了奖协议栈数据包从新交付到应用程序作用，使得数据包有机会在用户态进行封装。</p>
<h3 id="tun另一端是一个用户程序"><a href="#tun另一端是一个用户程序" class="headerlink" title="tun另一端是一个用户程序"></a>tun另一端是一个用户程序</h3><p>tun0是一个Tun/Tap虚拟设备，从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，<br>而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。</p>
<h3 id="tun和tap区别"><a href="#tun和tap区别" class="headerlink" title="tun和tap区别"></a>tun和tap区别</h3><p>用户层程序通过tun设备只能读写IP数据包，而通过tap设备能读写链路层数据包，类似于普通socket和raw socket的差别一样，处理数据包的格式不一样。</p>
<h3 id="实例解析tun-tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出"><a href="#实例解析tun-tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出" class="headerlink" title="实例解析tun/tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出"></a>实例解析tun/tap可用于linux用户态从内核查路由重新收到数据包，处理完成后再发出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/if_tun.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tun_alloc</span><span class="params">(<span class="keyword">int</span> flags)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">ifr</span>;</span></div><div class="line">    <span class="keyword">int</span> fd, err;</div><div class="line">    <span class="keyword">char</span> *clonedev = <span class="string">"/dev/net/tun"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((fd = open(clonedev, O_RDWR)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> fd;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;ifr, <span class="number">0</span>, <span class="keyword">sizeof</span>(ifr));</div><div class="line">    ifr.ifr_flags = flags;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((err = ioctl(fd, TUNSETIFF, (<span class="keyword">void</span> *) &amp;ifr)) &lt; <span class="number">0</span>) &#123;</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> err;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Open tun/tap device: %s for reading...\n"</span>, ifr.ifr_name);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tun_fd, nread;</div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">1500</span>];</div><div class="line"></div><div class="line">    <span class="comment">/* Flags: IFF_TUN   - TUN device (no Ethernet headers)</span></div><div class="line">     *        IFF_TAP   - TAP device</div><div class="line">     *        IFF_NO_PI - Do not provide packet information</div><div class="line">     */</div><div class="line">    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tun_fd &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"Allocating interface"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        nread = read(tun_fd, buffer, <span class="keyword">sizeof</span>(buffer));</div><div class="line">        <span class="keyword">if</span> (nread &lt; <span class="number">0</span>) &#123;</div><div class="line">            perror(<span class="string">"Reading from interface"</span>);</div><div class="line">            close(tun_fd);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Read %d bytes from tun/tap device\n"</span>, nread);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行步骤如下：<br>（1）linux运行窗口1编译运行tun<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# gcc tun.c -o tun</div><div class="line">root@controller-VirtualBox:/home/controller# ./tun</div></pre></td></tr></table></figure></p>
<p>（2）linux运行窗口2 查看建立的网络设备tun0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 ::1/128 scope host</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</div><div class="line">    link/ether 08:00:27:5f:1b:a9 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.55.188/24 brd 192.168.55.255 scope global dynamic enp0s8</div><div class="line">       valid_lft 9908sec preferred_lft 9908sec</div><div class="line">    inet6 fe80::174:582b:9b7c:3df4/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">4: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500</div><div class="line">    link/none</div></pre></td></tr></table></figure></p>
<p>（3）linux运行窗口2给tun0配置地址并激活<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr add 10.0.1.1/24 dev tun0</div><div class="line">root@controller-VirtualBox:/home/controller#</div><div class="line">root@controller-VirtualBox:/home/controller#</div><div class="line">root@controller-VirtualBox:/home/controller# ip link set tun0 up</div></pre></td></tr></table></figure></p>
<p>（4）linux运行窗口2 ping 10.0.1.2</p>
<p>（5）linux运行窗口1 查看出现下面效果，用户态socket已经通过tun0接收到ping包了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ./tun</div><div class="line">Open tun/tap device: tun0 for reading...</div><div class="line">Read 48 bytes from tun/tap device</div><div class="line">Read 48 bytes from tun/tap device</div><div class="line">Read 48 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div><div class="line">Read 84 bytes from tun/tap device</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;network-namespace&quot;&gt;&lt;a href=&quot;#network-namespace&quot; class=&quot;headerlink&quot; title=&quot;network namespace&quot;&gt;&lt;/a&gt;network namespace&lt;/h1&gt;&lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h2&gt;&lt;p&gt;当前系统的网络空间，拥有单独的网络协议栈，网络设备、网卡、路由表、转发表、ARP表、ip地址表、iptables、socket等与网络有关的组建均独立，就像进入了另一个网络环境&lt;br&gt;且该网络空间可以实现交换机、路由器、防火墙等功能&lt;/p&gt;
&lt;h2 id=&quot;使用netns在linux系统上搭建网络&quot;&gt;&lt;a href=&quot;#使用netns在linux系统上搭建网络&quot; class=&quot;headerlink&quot; title=&quot;使用netns在linux系统上搭建网络&quot;&gt;&lt;/a&gt;使用netns在linux系统上搭建网络&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/myimages/bridge1.png&quot; alt=&quot;bridge1&quot;&gt;&lt;br&gt;&lt;strong&gt;网络描述&lt;/strong&gt;：&lt;br&gt;   该网络由四部分组成：外网、虚拟网络空间net0、虚拟网络空间net1、虚拟网络空间net2&lt;br&gt;   net0和net2分别为网段10.0.1.0/24 10.0.2.0/24的网络空间，并且接入网桥&lt;br&gt;   net1为网络空间，分别以接口eth0和eth1接入虚拟网桥，分别和net0和net2同一个网段&lt;br&gt;   net1为网络空间，以eth2接入网桥，和物理接口enp0s8同一个网段&lt;br&gt;   enp0s8为虚拟机的桥接物理网卡（虚拟机接口混杂模式开启）&lt;br&gt;   192.168.55.165物理机器，接入虚拟机虚拟bridge另外一端均属于ubuntun虚拟机上搭建虚拟网络&lt;br&gt;   淡黄色部分属于虚拟网桥&lt;br&gt;   net0和net2的默认网关是net1&lt;br&gt;   net1的默认网关是办公网络交换机192.168.55.254&lt;br&gt;   经过net1出去流量做snat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搭建网络最终效果&lt;/strong&gt;：&lt;br&gt;    net0和net1和net2 网络空间中均可以上外网&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="network namespace" scheme="http://vcpu.me/tags/network-namespace/"/>
    
      <category term="网络设备tun/tap" scheme="http://vcpu.me/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87tun-tap/"/>
    
  </entry>
  
  <entry>
    <title> 网络基本命令</title>
    <link href="http://vcpu.me/cmd1/"/>
    <id>http://vcpu.me/cmd1/</id>
    <published>2017-07-13T10:00:00.000Z</published>
    <updated>2017-07-13T10:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ARP相关命令"><a href="#ARP相关命令" class="headerlink" title="ARP相关命令"></a>ARP相关命令</h2><h3 id="ip-n显示ARP表"><a href="#ip-n显示ARP表" class="headerlink" title="ip n显示ARP表"></a>ip n显示ARP表</h3><h3 id="全部清除linux-arp表项"><a href="#全部清除linux-arp表项" class="headerlink" title="全部清除linux arp表项"></a>全部清除linux arp表项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arp -n|awk &apos;/^[1-9]/&#123;system(&quot;arp -d &quot;$1)&#125;&apos;</div></pre></td></tr></table></figure>
<h3 id="清除接口eth0所有的mac"><a href="#清除接口eth0所有的mac" class="headerlink" title="清除接口eth0所有的mac"></a>清除接口eth0所有的mac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip neigh flush  dev eth0</div></pre></td></tr></table></figure>
<h3 id="arp-v-额外显示接口类型和arp表项统计信息"><a href="#arp-v-额外显示接口类型和arp表项统计信息" class="headerlink" title="arp -v 额外显示接口类型和arp表项统计信息"></a>arp -v 额外显示接口类型和arp表项统计信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# arp -v</div><div class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</div><div class="line">10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0</div><div class="line">Entries: 1	Skipped: 0	Found: 1</div></pre></td></tr></table></figure>
<h3 id="arp-a-显示全部ARP缓存"><a href="#arp-a-显示全部ARP缓存" class="headerlink" title="arp -a 显示全部ARP缓存"></a>arp -a 显示全部ARP缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# arp -a</div><div class="line">? (10.0.1.2) at 22:dc:c1:9c:8c:b4 [ether] on eth0</div></pre></td></tr></table></figure>
<h3 id="arp-n-可快速查询ARP缓存"><a href="#arp-n-可快速查询ARP缓存" class="headerlink" title="arp -n 可快速查询ARP缓存"></a>arp -n 可快速查询ARP缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# arp -n</div><div class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</div><div class="line">10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0</div><div class="line">root@controller-VirtualBox:/home/controller#</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="arptables"><a href="#arptables" class="headerlink" title="arptables"></a>arptables</h3><h4 id="增加一条规则，限制10-0-10-220-ARP-packet进入到环境中"><a href="#增加一条规则，限制10-0-10-220-ARP-packet进入到环境中" class="headerlink" title="增加一条规则，限制10.0.10.220 ARP packet进入到环境中"></a>增加一条规则，限制10.0.10.220 ARP packet进入到环境中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arptables -A INPUT -s 10.0.10.220 -j DROP</div></pre></td></tr></table></figure>
<h4 id="删除arotables规则"><a href="#删除arotables规则" class="headerlink" title="删除arotables规则"></a>删除arotables规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arptables -D INPUT -s 10.0.10.220 -j DROP</div></pre></td></tr></table></figure>
<h4 id="查看arptables-规则"><a href="#查看arptables-规则" class="headerlink" title="查看arptables 规则"></a>查看arptables 规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arptables -L</div></pre></td></tr></table></figure>
<h3 id="arpwatch"><a href="#arpwatch" class="headerlink" title="arpwatch"></a>arpwatch</h3><p>arpwatch命令用来监听网络上arp的记录。<br>-d：启动排错模式；<br>-f&lt;记录文件&gt;：设置存储ARP记录的文件，预设为/var/lib／arpwatch/arp.dat；<br>-i&lt;接口&gt;：指定监听ARP的接口，预设的接口为eth0；<br>-r&lt;记录文件&gt;：从指定的文件中读取ARP记录，而不是从网络上监听。</p>
<h4 id="读出监听的ARP地址对应表"><a href="#读出监听的ARP地址对应表" class="headerlink" title="读出监听的ARP地址对应表"></a>读出监听的ARP地址对应表</h4><blockquote>
<p>必须要杀死arpwatch进程后才才能读出下面数据<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# cat /var/lib/arpwatch/arp.dat</div><div class="line">3c:97:0e:3c:8c:53	192.168.55.155	1499942089		br0</div><div class="line">e0:69:95:4c:d4:ac	192.168.55.169	1499942233		br0</div><div class="line">28:d2:44:86:46:be	192.168.55.193	1499942137		br0</div><div class="line">68:f7:28:89:49:bd	192.168.55.199	1499942147		br0</div><div class="line">3c:97:0e:3d:22:0c	192.168.55.137	1499942189		br0</div><div class="line">68:f7:28:63:19:4f	192.168.55.192	1499942097		br0</div><div class="line">10:c3:7b:6e:e6:95	192.168.55.174	1499942112		br0</div><div class="line">20:dc:e6:fe:d7:fe	192.168.55.253	1499942035		br0</div><div class="line">b0:83:fe:6c:ec:a9	192.168.55.135	1499942042		br0</div><div class="line">08:00:27:5f:1b:a9	192.168.55.244	1499942227		br0</div><div class="line">00:15:c6:26:4d:48	192.168.55.254	1499942227		br0</div><div class="line">90:e6:ba:ea:81:93	192.168.55.98	1499942212		br0</div><div class="line">8c:a6:df:98:94:50	192.168.55.197	1499942083		br0</div><div class="line">74:27:ea:54:8b:61	192.168.55.198	1499942096		br0</div><div class="line">3c:97:0e:a7:a8:4f	192.168.55.116	1499942182		br0</div><div class="line">50:7b:9d:f1:6e:47	192.168.55.158	1499942145		br0</div><div class="line">3c:97:0e:3c:8d:fd	192.168.55.143	1499942234		br0</div><div class="line">28:d2:44:bd:02:89	192.168.55.113	1499942210		br0</div><div class="line">d4:61:fe:2b:73:13	192.168.55.220	1499942214		br0</div><div class="line">68:f7:28:06:1a:02	192.168.55.132	1499942226		br0</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="路由相关命令"><a href="#路由相关命令" class="headerlink" title="路由相关命令"></a>路由相关命令</h2><h3 id="route-n"><a href="#route-n" class="headerlink" title="route -n"></a>route -n</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# route -n</div><div class="line">Kernel IP routing table</div><div class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</div><div class="line">0.0.0.0         10.0.1.2        0.0.0.0         UG    0      0        0 eth0</div><div class="line">10.0.1.0        0.0.0.0         255.255.255.0   U     0      0        0 eth0</div></pre></td></tr></table></figure>
<h3 id="ip-r-查看路由"><a href="#ip-r-查看路由" class="headerlink" title="ip r 查看路由"></a>ip r 查看路由</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip r</div><div class="line">default via 192.168.55.254 dev br0</div><div class="line">169.254.0.0/16 dev br0  scope link  metric 1000</div><div class="line">192.168.55.0/24 dev br0  proto kernel  scope link  src 192.168.55.244</div></pre></td></tr></table></figure>
<h3 id="ip-r-get-xx-xx-xx-xx"><a href="#ip-r-get-xx-xx-xx-xx" class="headerlink" title="ip r get xx.xx.xx.xx"></a>ip r get xx.xx.xx.xx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip r get 8.8.8.8</div><div class="line">8.8.8.8 via 10.0.1.2 dev eth0  src 10.0.1.1</div><div class="line">    cache</div></pre></td></tr></table></figure>
<h3 id="增加默认路由"><a href="#增加默认路由" class="headerlink" title="增加默认路由"></a>增加默认路由</h3><p>route add default gw 10.0.1.2<br>ip route add default via 10.0.1.2</p>
<h3 id="ip-s-link-查看网络统计数据"><a href="#ip-s-link-查看网络统计数据" class="headerlink" title="ip -s link 查看网络统计数据"></a>ip -s link 查看网络统计数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip -s link</div><div class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    RX: bytes  packets  errors  dropped overrun mcast</div><div class="line">    0          0        0       0       0       0</div><div class="line">    TX: bytes  packets  errors  dropped carrier collsns</div><div class="line">    0          0        0       0       0       0</div><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    RX: bytes  packets  errors  dropped overrun mcast</div><div class="line">    4621478    12933    0       17      0       0</div><div class="line">    TX: bytes  packets  errors  dropped carrier collsns</div><div class="line">    2720       32       0       0       0       0</div></pre></td></tr></table></figure>
<h3 id="ip-s-s-link-ls-eth0-显示具体接口的详细信息"><a href="#ip-s-s-link-ls-eth0-显示具体接口的详细信息" class="headerlink" title="ip -s -s link ls eth0 显示具体接口的详细信息"></a>ip -s -s link ls eth0 显示具体接口的详细信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    RX: bytes  packets  errors  dropped overrun mcast</div><div class="line">    5197968    14512    0       20      0       0</div><div class="line">    RX errors: length   crc     frame   fifo    missed</div><div class="line">               0        0       0       0       0</div><div class="line">    TX: bytes  packets  errors  dropped carrier collsns</div><div class="line">    9034       97       0       0       0       0</div><div class="line">    TX errors: aborted  fifo   window heartbeat transns</div><div class="line">               0        0       0       0       2</div><div class="line">root@controller-VirtualBox:/home/controller#</div></pre></td></tr></table></figure>
<h2 id="地址配置相关命令"><a href="#地址配置相关命令" class="headerlink" title="地址配置相关命令"></a>地址配置相关命令</h2><h3 id="配置地址"><a href="#配置地址" class="headerlink" title="配置地址"></a>配置地址</h3><p>ip addr add 10.0.1.1/24 dev eth0</p>
<h3 id="ip-addr-显示所有接口信息"><a href="#ip-addr-显示所有接口信息" class="headerlink" title="ip addr 显示所有接口信息"></a>ip addr 显示所有接口信息</h3><h3 id="ip-addr-show-eth0-显示eth0接口信息"><a href="#ip-addr-show-eth0-显示eth0接口信息" class="headerlink" title="ip addr show eth0 显示eth0接口信息"></a>ip addr show eth0 显示eth0接口信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr show eth0</div><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    inet 10.0.1.1/24 scope global eth0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 fe80::8c90:7eff:fe35:808e/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure>
<h3 id="ip-addr-del-x-x-x-x-mask-dev-eth0-删除接口eth0地址"><a href="#ip-addr-del-x-x-x-x-mask-dev-eth0-删除接口eth0地址" class="headerlink" title="ip addr del x.x.x.x/mask dev eth0 删除接口eth0地址"></a>ip addr del x.x.x.x/mask dev eth0 删除接口eth0地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip addr del 10.0.1.1/24 dev eth0</div><div class="line">root@controller-VirtualBox:/home/controller# ip addr</div><div class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">5: eth0@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</div><div class="line">    link/ether 8e:90:7e:35:80:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0</div><div class="line">    inet6 fe80::8c90:7eff:fe35:808e/64 scope link</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure>
<h3 id="关闭和开启接口"><a href="#关闭和开启接口" class="headerlink" title="关闭和开启接口"></a>关闭和开启接口</h3><p>ip link set eth0 up/down</p>
<h2 id="linux网桥相关"><a href="#linux网桥相关" class="headerlink" title="linux网桥相关"></a>linux网桥相关</h2><h3 id="brctl-show-查看网桥配置"><a href="#brctl-show-查看网桥配置" class="headerlink" title="brctl show 查看网桥配置"></a>brctl show 查看网桥配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# brctl show</div><div class="line">bridge name	bridge id		STP enabled	interfaces</div><div class="line">br0		8000.0800275f1ba9	no		enp0s8</div><div class="line">							tap0</div><div class="line">							tap1</div><div class="line">							tap2</div><div class="line">							tap3</div><div class="line">							tap4</div><div class="line"></div><div class="line">### brctl showmacs br0 查看网桥学习的mac表项</div></pre></td></tr></table></figure>
<h3 id="brctl-showmacs-br0查看br0的mac表项"><a href="#brctl-showmacs-br0查看br0的mac表项" class="headerlink" title="brctl showmacs br0查看br0的mac表项"></a>brctl showmacs br0查看br0的mac表项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# brctl showmacs br0</div><div class="line">port no	mac addr		is local?	ageing timer</div><div class="line">  1	00:0c:29:1f:73:38	no		 202.66</div><div class="line">  1	00:0c:29:f1:60:5d	no		 248.12</div><div class="line">  1	00:0e:c6:cf:da:c7	no		   0.00</div><div class="line">  1	00:15:c6:26:4d:22	no		   1.22</div><div class="line">  1	00:15:c6:26:4d:48	no		   0.73</div><div class="line">  1	00:50:56:9f:cc:e2	no		 161.74</div></pre></td></tr></table></figure>
<h3 id="brctl-showstp-bbr0查看接口信息"><a href="#brctl-showstp-bbr0查看接口信息" class="headerlink" title="brctl showstp bbr0查看接口信息"></a>brctl showstp bbr0查看接口信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# brctl showstp br0</div><div class="line">br0</div><div class="line"> bridge id		8000.0800275f1ba9</div><div class="line"> designated root	8000.0800275f1ba9</div><div class="line"> root port		   0			path cost		   0</div><div class="line"> max age		  20.00			bridge max age		  20.00</div><div class="line"> hello time		   2.00			bridge hello time	   2.00</div><div class="line"> forward delay		  15.00			bridge forward delay	  15.00</div><div class="line"> ageing time		 300.00</div><div class="line"> hello timer		   0.00			tcn timer		   0.00</div><div class="line"> topology change timer	   0.00			gc timer		  14.22</div><div class="line"> flags</div></pre></td></tr></table></figure>
<h2 id="虚拟命名空间相关命令"><a href="#虚拟命名空间相关命令" class="headerlink" title="虚拟命名空间相关命令"></a>虚拟命名空间相关命令</h2><h3 id="增加虚拟网络命名空间"><a href="#增加虚拟网络命名空间" class="headerlink" title="增加虚拟网络命名空间"></a>增加虚拟网络命名空间</h3><p>ip netns add net0</p>
<h3 id="显示所有的虚拟网络命名空间"><a href="#显示所有的虚拟网络命名空间" class="headerlink" title="显示所有的虚拟网络命名空间"></a>显示所有的虚拟网络命名空间</h3><p>EULER:~ # ip netns list<br>net0<br>也可通过查看/var/run/netns目录下的文件来list<br>EULER:~ # ls /var/run/netns/<br>net0</p>
<h3 id="进入虚拟机网络环境"><a href="#进入虚拟机网络环境" class="headerlink" title="进入虚拟机网络环境"></a>进入虚拟机网络环境</h3><p>ip netns exec net0 <code>command</code></p>
<p>如<br>EULER:~ # ip netns exec net0 bash  #打开虚拟网络环境net0的bash窗口<br>EULER:~ # ip addr #显示所有虚拟网络环境的设备<br>EULER:~ # exit #退出该网络虚拟环境<br>exit</p>
<h3 id="增加一对veth虚拟网卡"><a href="#增加一对veth虚拟网卡" class="headerlink" title="增加一对veth虚拟网卡"></a>增加一对veth虚拟网卡</h3><p>EULER:~ # ip link add type veth</p>
<h3 id="将veth0添加到net0虚拟网络环境"><a href="#将veth0添加到net0虚拟网络环境" class="headerlink" title="将veth0添加到net0虚拟网络环境"></a>将veth0添加到net0虚拟网络环境</h3><p>ip link set veth0 netns net0</p>
<h3 id="将虚拟网卡veth1改名并添加到net1虚拟网络环境中"><a href="#将虚拟网卡veth1改名并添加到net1虚拟网络环境中" class="headerlink" title="将虚拟网卡veth1改名并添加到net1虚拟网络环境中"></a>将虚拟网卡veth1改名并添加到net1虚拟网络环境中</h3><p>ip link set dev veth1 name net1-bridge netns net1</p>
<h3 id="设置虚拟网络环境net0的veth0设备处于激活状态"><a href="#设置虚拟网络环境net0的veth0设备处于激活状态" class="headerlink" title="设置虚拟网络环境net0的veth0设备处于激活状态"></a>设置虚拟网络环境net0的veth0设备处于激活状态</h3><p>ip netns exec net0 ip link set veth0 up</p>
<h3 id="为虚拟网络环境net0的veth0设备增加IP地址"><a href="#为虚拟网络环境net0的veth0设备增加IP地址" class="headerlink" title="为虚拟网络环境net0的veth0设备增加IP地址"></a>为虚拟网络环境net0的veth0设备增加IP地址</h3><p>ip netns exec net0 ip address add 10.0.1.1/24 dev veth0</p>
<h3 id="ip-netns-列出当前网络虚拟的namespace"><a href="#ip-netns-列出当前网络虚拟的namespace" class="headerlink" title="ip netns 列出当前网络虚拟的namespace"></a>ip netns 列出当前网络虚拟的namespace</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@controller-VirtualBox:/home/controller# ip netns</div><div class="line">net2 (id: 2)</div><div class="line">net1 (id: 1)</div><div class="line">net0 (id: 0)</div></pre></td></tr></table></figure>
<h3 id="ls-var-run-netns-列出当前网络虚拟的namespace"><a href="#ls-var-run-netns-列出当前网络虚拟的namespace" class="headerlink" title="ls /var/run/netns/ 列出当前网络虚拟的namespace"></a>ls /var/run/netns/ 列出当前网络虚拟的namespace</h3><p>root@controller-VirtualBox:/home/controller# ls /var/run/netns/<br>net0  net1  net2</p>
<h3 id="ip-netns-monitor"><a href="#ip-netns-monitor" class="headerlink" title="ip netns monitor"></a>ip netns monitor</h3><p>监控虚拟网络namespace行为<br>root@controller-VirtualBox:/home/controller# ip netns monitor<br>delete ddd</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ARP相关命令&quot;&gt;&lt;a href=&quot;#ARP相关命令&quot; class=&quot;headerlink&quot; title=&quot;ARP相关命令&quot;&gt;&lt;/a&gt;ARP相关命令&lt;/h2&gt;&lt;h3 id=&quot;ip-n显示ARP表&quot;&gt;&lt;a href=&quot;#ip-n显示ARP表&quot; class=&quot;headerlink&quot; title=&quot;ip n显示ARP表&quot;&gt;&lt;/a&gt;ip n显示ARP表&lt;/h3&gt;&lt;h3 id=&quot;全部清除linux-arp表项&quot;&gt;&lt;a href=&quot;#全部清除linux-arp表项&quot; class=&quot;headerlink&quot; title=&quot;全部清除linux arp表项&quot;&gt;&lt;/a&gt;全部清除linux arp表项&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;arp -n|awk &amp;apos;/^[1-9]/&amp;#123;system(&amp;quot;arp -d &amp;quot;$1)&amp;#125;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;清除接口eth0所有的mac&quot;&gt;&lt;a href=&quot;#清除接口eth0所有的mac&quot; class=&quot;headerlink&quot; title=&quot;清除接口eth0所有的mac&quot;&gt;&lt;/a&gt;清除接口eth0所有的mac&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ip neigh flush  dev eth0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arp-v-额外显示接口类型和arp表项统计信息&quot;&gt;&lt;a href=&quot;#arp-v-额外显示接口类型和arp表项统计信息&quot; class=&quot;headerlink&quot; title=&quot;arp -v 额外显示接口类型和arp表项统计信息&quot;&gt;&lt;/a&gt;arp -v 额外显示接口类型和arp表项统计信息&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller# arp -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Address                  HWtype  HWaddress           Flags Mask            Iface&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Entries: 1	Skipped: 0	Found: 1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arp-a-显示全部ARP缓存&quot;&gt;&lt;a href=&quot;#arp-a-显示全部ARP缓存&quot; class=&quot;headerlink&quot; title=&quot;arp -a 显示全部ARP缓存&quot;&gt;&lt;/a&gt;arp -a 显示全部ARP缓存&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller# arp -a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;? (10.0.1.2) at 22:dc:c1:9c:8c:b4 [ether] on eth0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;arp-n-可快速查询ARP缓存&quot;&gt;&lt;a href=&quot;#arp-n-可快速查询ARP缓存&quot; class=&quot;headerlink&quot; title=&quot;arp -n 可快速查询ARP缓存&quot;&gt;&lt;/a&gt;arp -n 可快速查询ARP缓存&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller# arp -n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Address                  HWtype  HWaddress           Flags Mask            Iface&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10.0.1.2                 ether   22:dc:c1:9c:8c:b4   C                     eth0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root@controller-VirtualBox:/home/controller#&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="arp相关命令" scheme="http://vcpu.me/tags/arp%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
      <category term="路由相关命令" scheme="http://vcpu.me/tags/%E8%B7%AF%E7%94%B1%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
      <category term="地址配置相关命令" scheme="http://vcpu.me/tags/%E5%9C%B0%E5%9D%80%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
      <category term="虚拟命名空间相关命令" scheme="http://vcpu.me/tags/%E8%99%9A%E6%8B%9F%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>二三层转发-基本原理</title>
    <link href="http://vcpu.me/switchtech/"/>
    <id>http://vcpu.me/switchtech/</id>
    <published>2017-07-07T10:00:00.000Z</published>
    <updated>2017-07-07T03:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交换机的工作原理"><a href="#交换机的工作原理" class="headerlink" title="交换机的工作原理"></a>交换机的工作原理</h2><pre><code>1. 交换机根据收到数据帧中的源MAC地址建立该地址同交换机端口的映射，并将其写入MAC地址表中。
</code></pre><p>　　2. 交换机将数据帧中的目的MAC地址同已建立的MAC地址表进行比较，以决定由哪个端口进行转发。<br>　　3. 如数据帧中的目的MAC地址不在MAC地址表中，则向所有端口转发。这一过程称为泛洪（flood）。<br>　　4. 广播帧和组播帧向所有的端口转发。<br>交换机的工作原理（二、三、四层交换原理）</p>
<h2 id="交换机的三个主要功能"><a href="#交换机的三个主要功能" class="headerlink" title="交换机的三个主要功能"></a>交换机的三个主要功能</h2><p>　　 学习：以太网交换机了解每一端口相连设备的MAC地址，并将地址同相应的端口映射起来存放在交换机缓存中的MAC地址表中。<br>　　转发/过滤：当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）。<br>　　 消除回路：当交换机包括一个冗余回路时，以太网交换机通过生成树协议避免回路的产生，同时允许存在后备路径。</p>
<h2 id="交换机的工作特性"><a href="#交换机的工作特性" class="headerlink" title="交换机的工作特性"></a>交换机的工作特性</h2><p>　　 1. 交换机的每一个端口所连接的网段都是一个独立的冲突域。<br>　　 2. 交换机所连接的设备仍然在同一个广播域内，也就是说，交换机不隔绝广播（惟一的例外是在配有VLAN的环境中）。<br>　　 3. 交换机依据帧头的信息进行转发，因此说交换机是工作在数据链路层的网络设备（此处所述交换机仅指传统的二层交换设备）。</p>
<h2 id="交换机的分类"><a href="#交换机的分类" class="headerlink" title="交换机的分类"></a>交换机的分类</h2><p>　　 依照交换机处理帧时不同的操作模式，主要可分为两类：<br>　　存储转发：交换机在转发之前必须接收整个帧，并进行错误校检，如无错误再将这一帧发往目的地址。帧通过交换机的转发时延随帧长度的不同而变化。<br>　　直通式：交换机只要检查到帧头中所包含的目的地址就立即转发该帧，而无需等待帧全部的被接收，也不进行错误校验。由于以太网帧头的长度总是固定的，因此帧通过交换机的转发时延也保持不变。<br><a id="more"></a>　　</p>
<h2 id="二三四层交换机"><a href="#二三四层交换机" class="headerlink" title="二三四层交换机"></a>二三四层交换机</h2><p>　　多种理解的说法：</p>
<h3 id="理解1"><a href="#理解1" class="headerlink" title="理解1"></a>理解1</h3><p>　　二层交换（也称为桥接）是基于硬件的桥接。基于每个末端站点的唯一MAC地址转发数据包。二层交换的高性能可以产生增加各子网主机数量的网络设计。其仍然有桥接所具有的特性和限制。<br>　　三层交换是基于硬件的路由选择。路由器和第三层交换机对数据包交换操作的主要区别在于物理上的实施。<br>　　四层交换的简单定义是：不仅基于MAC（第二层桥接）或源/目的地IP地址（第三层路由选择），同时也基于TCP/UDP应用端口来做出转发决定的能力。其使网络在决定路由时能够区分应用。能够基于具体应用对数据流进行优先级划分。它为基于策略的服务质量技术提供了更加细化的解决方案。提供了一种可以区分应用类型的方法。</p>
<h3 id="理解2"><a href="#理解2" class="headerlink" title="理解2"></a>理解2</h3><p>　　二层交换机 基于MAC地址<br>　　三层交换机 具有VLAN功能 有交换和路由 ///基于IP，就是网络<br>　　四层交换机 基于端口，就是应用</p>
<h3 id="理解3"><a href="#理解3" class="headerlink" title="理解3"></a>理解3</h3><p>　　二层交换技术从网桥发展到VLAN（虚拟局域网），在局域网建设和改造中得到了广泛的应用。第二层交换技术是工作在OSI七层网络模型中的第二层，即数据链路层。它按照所接收到数据包的目的MAC地址来进行转发，对于网络层或者高层协议来说是透明的。它不处理网络层的IP地址，不处理高层协议的诸如TCP、UDP的端口地址，它只需要数据包的物理地址即MAC地址，数据交换是靠硬件来实现的，其速度相当快，这是二层交换的一个显著的优点。但是，它不能处理不同IP子网之间的数据交换。传统的路由器可以处理大量的跨越IP子网的数据包，但是它的转发效率比二层低，因此要想利用二层转发效率高这一优点，又要处理三层IP数据包，三层交换技术就诞生了。<br>　　三层交换技术的工作原理<br>　　第三层交换工作在OSI七层网络模型中的第三层即网络层，是利用第三层协议中的IP包的包头信息来对后续数据业务流进行标记，具有同一标记的业务流的后续报文被交换到第二层数据链路层，从而打通源IP地址和目的IP地址之间的一条通路。这条通路经过第二层链路层。有了这条通路，三层交换机就没有必要每次将接收到的数据包进行拆包来判断路由，而是直接将数据包进行转发，将数据流进行交换</p>
<h3 id="理解4"><a href="#理解4" class="headerlink" title="理解4"></a>理解4</h3><p>　　</p>
<h4 id="二层交换技术"><a href="#二层交换技术" class="headerlink" title="二层交换技术"></a>二层交换技术</h4><p>　　二层交换技术是发展比较成熟，二层交换机属数据链路层设备，可以识别数据包中的MAC地址信息，根据MAC地址进行转发，并将这些MAC地址与对应的端口记录在自己内部的一个地址表中。具体的工作流程如下：<br>　　（1）当交换机从某个端口收到一个数据包，它先读取包头中的源MAC地址，这样它就知道源MAC地址的机器是连在哪个端口上的；<br>　　（2） 再去读取包头中的目的MAC地址，并在地址表中查找相应的端口；<br>　　（3） 如表中有与这目的MAC地址对应的端口，把数据包直接复制到这端口上；<br>　　（4）如表中找不到相应的端口则把数据包广播到所有端口上，当目的机器对源机器回应时，交换机又可以学习一目的MAC地址与哪个端口对应，在下次传送数据时就不再需要对所有端口进行广播了。<br>　　不断的循环这个过程，对于全网的MAC地址信息都可以学习到，二层交换机就是这样建立和维护它自己的地址表。<br>　　从二层交换机的工作原理可以推知以下三点：<br>　　（1）由于交换机对多数端口的数据进行同时交换，这就要求具有很宽的交换总线带宽，如果二层交换机有N个端口，每个端口的带宽是M，交换机总线带宽超过N×M，那么这交换机就可以实现线速交换；<br>　　（2） 学习端口连接的机器的MAC地址，写入地址表，地址表的大小（一般两种表示方式：一为BEFFER RAM，一为MAC表项数值），地址表大小影响交换机的接入容量；<br>　　（3） 还有一个就是二层交换机一般都含有专门用于处理数据包转发的ASIC （Application specific Integrated Circuit）芯片，因此转发速度可以做到非常快。由于各个厂家采用ASIC不同，直接影响产品性能。<br>　　以上三点也是评判二三层交换机性能优劣的主要技术参数，这一点请大家在考虑设备选型时注意比较。</p>
<h3 id="路由技术"><a href="#路由技术" class="headerlink" title="路由技术"></a>路由技术</h3><p>　　路由器工作在OSI模型的第三层—网络层操作，其工作模式与二层交换相似，但路由器工作在第三层，这个区别决定了路由和交换在传递包时使用不同的控制信息，实现功能的方式就不同。工作原理是在路由器的内部也有一个表，这个表所标示的是如果要去某一个地方，下一步应该向那里走，如果能从路由表中找到数据包下一步往那里走，把链路层信息加上转发出去；如果不能知道下一步走向那里，则将此包丢弃，然后返回一个信息交给源地址。<br>　　路由技术实质上来说不过两种功能：决定最优路由和转发数据包。路由表中写入各种信息，由路由算法计算出到达目的地址的最佳路径，然后由相对简单直接的转发机制发送数据包。接受数据的下一台路由器依照相同的工作方式继续转发，依次类推，直到数据包到达目的路由器。<br>　　而路由表的维护，也有两种不同的方式。一种是路由信息的更新，将部分或者全部的路由信息公布出去，路由器通过互相学习路由信息，就掌握了全网的拓扑结构，这一类的路由协议称为距离矢量路由协议；另一种是路由器将自己的链路状态信息进行广播，通过互相学习掌握全网的路由信息，进而计算出最佳的转发路径，这类路由协议称为链路状态路由协议。<br>　　由于路由器需要做大量的路径计算工作，一般处理器的工作能力直接决定其性能的优劣。当然这一判断还是对中低端路由器而言，因为高端路由器往往采用分布式处理系统体系设计。</p>
<h4 id="三层交换技术"><a href="#三层交换技术" class="headerlink" title="三层交换技术"></a>三层交换技术</h4><p>　　近年来的对三层技术的宣传，耳朵都能起茧子，到处都在喊三层技术，有人说这是个非常新的技术，也有人说，三层交换嘛，不就是路由器和二层交换机的堆叠，也没有什么新的玩意，事实果真如此吗？下面先来通过一个简单的网络来看看三层交换机的工作过程。<br>　　组网比较简单<br>　　使用IP的设备A————三层交换机———–使用IP的设备B<br>　　比如A要给B发送数据，已知目的IP，那么A就用子网掩码取得网络地址，判断目的IP是否与自己在同一网段。<br>　　如果在同一网段，但不知道转发数据所需的MAC地址，A就发送一个ARP请求，B返回其MAC地址，A用此MAC封装数据包并发送给交换机，交换机起用二层交换模块，查找MAC地址表，将数据包转发到相应的端口。<br>　　如果目的IP地址显示不是同一网段的，那么A要实现和B的通讯，在流缓存条目中没有对应MAC地址条目，就将第一个正常数据包发送向一个缺省网关，这个缺省网关一般在操作系统中已经设好，对应第三层路由模块，所以可见对于不是同一子网的数据，最先在MAC表中放的是缺省网关的MAC地址；然后就由三层模块接收到此数据包，查询路由表以确定到达B的路由，将构造一个新的帧头，其中以缺省网关的MAC地址为源MAC地址，以主机B的MAC地址为目的MAC地址。通过一定的识别触发机制，确立主机A与B的MAC地址及转发端口的对应关系，并记录进流缓存条目表，以后的A到B的数据，就直接交由二层交换模块完成。这就通常所说的一次路由多次转发。<br>　　以上就是三层交换机工作过程的简单概括，可以看出三层交换的特点：<br>　　由硬件结合实现数据的高速转发。<br>　　这就不是简单的二层交换机和路由器的叠加，三层路由模块直接叠加在二层交换的高速背板总线上，突破了传统路由器的接口速率限制，速率可达几十Gbit/s。算上背板带宽，这些是三层交换机性能的两个重要参数。<br>　　简洁的路由软件使路由过程简化。<br>　　大部分的数据转发，除了必要的路由选择交由路由软件处理，都是又二层模块高速转发，路由软件大多都是经过处理的高效优化软件，并不是简单照搬路由器中的软件。<br>　　结论：<br>　　二层交换机用于小型的局域网络。这个就不用多言了，在小型局域网中，广播包影响不大，二层交换机的快速交换功能、多个接入端口和低谦价格为小型网络用户提供了很完善的解决方案。<br>　　路由器的优点在于接口类型丰富，支持的三层功能强大，路由能力强大，适合用于大型的网络间的路由，它的优势在于选择最佳路由，负荷分担，链路备份及和其他网络进行路由信息的交换等等路由器所具有功能。<br>　　三层交换机的最重要的功能是加快大型局域网络内部的数据的快速转发，加入路由功能也是为这个目的服务的。如果把大型网络按照部门，地域等等因素划分成一个个小局域网，这将导致大量的网际互访，单纯的使用二层交换机不能实现网际互访；如单纯的使用路由器，由于接口数量有限和路由转发速度慢，将限制网络的速度和网络规模，采用具有路由功能的快速转发的三层交换机就成为首选。<br>　　一般来说，在内网数据流量大，要求快速转发响应的网络中，如全部由三层交换机来做这个工作，会造成三层交换机负担过重，响应速度受影响，将网间的路由交由路由器去完成，充分发挥不同设备的优点，不失为一种好的组网策略，当然，前提是客户的腰包很鼓，不然就退而求其次，让三层交换机也兼为网际互连。</p>
<h4 id="第四层交换技术"><a href="#第四层交换技术" class="headerlink" title="第四层交换技术"></a>第四层交换技术</h4><p>　　第四层交换的一个简单定义是：它是一种功能，它决定传输不仅仅依据MAC地址(第二层网桥)或源/目标IP地址(第三层路由),而且依据TCP/UDP(第四层) 应用端口号。第四层交换功能就象是虚IP，指向物理服务器。它传输的业务服从的协议多种多样，有HTTP、FTP、NFS、Telnet或其他协议。这些业务在物理服务器基础上，需要复杂的载量平衡算法。在IP世界，业务类型由终端TCP或UDP端口地址来决定，在第四层交换中的应用区间则由源端和终端IP地址、TCP和UDP端口共同决定。<br>　　在第四层交换中为每个供搜寻使用的服务器组设立虚IP地址（VIP），每组服务器支持某种应用。在域名服务器（DNS）中存储的每个应用服务器地址是VIP，而不是真实的服务器地址。<br>　　当某用户申请应用时，一个带有目标服务器组的VIP连接请求（例如一个TCP SYN包）发给服务器交换机。服务器交换机在组中选取最好的服务器，将终端地址中的VIP用实际服务器的IP取代，并将连接请求传给服务器。这样，同一区间所有的包由服务器交换机进行映射，在用户和同一服务器间进行传输。<br>　　第四层交换的原理<br>　　OSI模型的第四层是传输层。传输层负责端对端通信，即在网络源和目标系统之间协调通信。在IP协议栈中这是TCP（一种传输协议）和UDP（用户数据包协议）所在的协议层。<br>　　在第四层中，TCP和UDP标题包含端口号（portnumber），它们可以唯一区分每个数据包包含哪些应用协议（例如HTTP、FTP等）。端点系统利用这种信息来区分包中的数据，尤其是端口号使一个接收端计算机系统能够确定它所收到的IP包类型，并把它交给合适的高层软件。端口号和设备IP地址的组合通常称作“插口（socket）”。<br>　　1和255之间的端口号被保留，他们称为“熟知”端口，也就是说，在所有主机TCP/IP协议栈实现中，这些端口号是相同的。除了“熟知”端口外，标准UNIX服务分配在256到1024端口范围，定制的应用一般在1024以上分配端口号.<br>　　分配端口号的最近清单可以在RFc1700”Assigned Numbers”上找到。TCP／UDP端口号提供的附加信息可以为网络交换机所利用，这是第4层交换的基础。<br>　　熟知的端口号举例:<br>　　　　应用协议 　端口号<br>　　　　FTP　　　　20（数据），21（控制）<br>　　　　TELNET　　23<br>　　　　SMTP 　 　25<br>　　　　HTTP 　 　80<br>　　　　NNTP 　 　119<br>　　　　NNMP 　　16，162（SNMP traps）<br>　　TCP/UDP端口号提供的附加信息可以为网络交换机所利用，这是第四层交换的基础。<br>　　具有第四层功能的交换机能够起到与服务器相连接的“虚拟IP”(VIP)前端的作用。<br>　　每台服务器和支持单一或通用应用的服务器组都配置一个VIP地址。这个VIP地址被发送出去并在域名系统上注册。<br>　　在发出一个服务请求时，第四层交换机通过判定TCP开始，来识别一次会话的开始。然后它利用复杂的算法来确定处理这个请求的最佳服务器。一旦做出这种决定，交换机就将会话与一个具体的IP地址联系在一起，并用该服务器真正的IP地址来代替服务器上的VIP地址。<br>　　每台第四层交换机都保存一个与被选择的服务器相配的源IP地址以及源TCP 端口相关联的连接表。然后第四层交换机向这台服务器转发连接请求。所有后续包在客户机与服务器之间重新影射和转发，直到交换机发现会话为止。<br>　　在使用第四层交换的情况下，接入可以与真正的服务器连接在一起来满足用户制定的规则，诸如使每台服务器上有相等数量的接入或根据不同服务器的容量来分配传输流。</p>
<p>本文章来网络</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;交换机的工作原理&quot;&gt;&lt;a href=&quot;#交换机的工作原理&quot; class=&quot;headerlink&quot; title=&quot;交换机的工作原理&quot;&gt;&lt;/a&gt;交换机的工作原理&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 交换机根据收到数据帧中的源MAC地址建立该地址同交换机端口的映射，并将其写入MAC地址表中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　2. 交换机将数据帧中的目的MAC地址同已建立的MAC地址表进行比较，以决定由哪个端口进行转发。&lt;br&gt;　　3. 如数据帧中的目的MAC地址不在MAC地址表中，则向所有端口转发。这一过程称为泛洪（flood）。&lt;br&gt;　　4. 广播帧和组播帧向所有的端口转发。&lt;br&gt;交换机的工作原理（二、三、四层交换原理）&lt;/p&gt;
&lt;h2 id=&quot;交换机的三个主要功能&quot;&gt;&lt;a href=&quot;#交换机的三个主要功能&quot; class=&quot;headerlink&quot; title=&quot;交换机的三个主要功能&quot;&gt;&lt;/a&gt;交换机的三个主要功能&lt;/h2&gt;&lt;p&gt;　　 学习：以太网交换机了解每一端口相连设备的MAC地址，并将地址同相应的端口映射起来存放在交换机缓存中的MAC地址表中。&lt;br&gt;　　转发/过滤：当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）。&lt;br&gt;　　 消除回路：当交换机包括一个冗余回路时，以太网交换机通过生成树协议避免回路的产生，同时允许存在后备路径。&lt;/p&gt;
&lt;h2 id=&quot;交换机的工作特性&quot;&gt;&lt;a href=&quot;#交换机的工作特性&quot; class=&quot;headerlink&quot; title=&quot;交换机的工作特性&quot;&gt;&lt;/a&gt;交换机的工作特性&lt;/h2&gt;&lt;p&gt;　　 1. 交换机的每一个端口所连接的网段都是一个独立的冲突域。&lt;br&gt;　　 2. 交换机所连接的设备仍然在同一个广播域内，也就是说，交换机不隔绝广播（惟一的例外是在配有VLAN的环境中）。&lt;br&gt;　　 3. 交换机依据帧头的信息进行转发，因此说交换机是工作在数据链路层的网络设备（此处所述交换机仅指传统的二层交换设备）。&lt;/p&gt;
&lt;h2 id=&quot;交换机的分类&quot;&gt;&lt;a href=&quot;#交换机的分类&quot; class=&quot;headerlink&quot; title=&quot;交换机的分类&quot;&gt;&lt;/a&gt;交换机的分类&lt;/h2&gt;&lt;p&gt;　　 依照交换机处理帧时不同的操作模式，主要可分为两类：&lt;br&gt;　　存储转发：交换机在转发之前必须接收整个帧，并进行错误校检，如无错误再将这一帧发往目的地址。帧通过交换机的转发时延随帧长度的不同而变化。&lt;br&gt;　　直通式：交换机只要检查到帧头中所包含的目的地址就立即转发该帧，而无需等待帧全部的被接收，也不进行错误校验。由于以太网帧头的长度总是固定的，因此帧通过交换机的转发时延也保持不变。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="二三层转发" scheme="http://vcpu.me/tags/%E4%BA%8C%E4%B8%89%E5%B1%82%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>集线器、网桥、交换机、中继器原理</title>
    <link href="http://vcpu.me/hub/"/>
    <id>http://vcpu.me/hub/</id>
    <published>2017-07-07T09:22:34.000Z</published>
    <updated>2017-08-02T02:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h2><p>集线器（HUB），它是工作在物理层的设备，由于它只是工作在物理层的设备，所以它并不关心也不可能关心OSI上面几层所涉及的，它的工作机制流程 是：从一个端口接收到数据包时，会在其他端口把这个包转发一次，因为它不知道也不可能知道这个包是发给谁的（物理层设备只关心电压这些物理概念），它也只能对所有人广播(这里和下文提到的广播该词的意思和ARP请求时的广播有些不同。</p>
<p>这里的广播意思是：使用物理层转发设备，如HUB，导致的广播，可以说这个广播是被逼的，因为设备的问题！是设备转发包引起的广播！而ARP请求的 广播是自己要求的，主动的，因为ARP请求包的目标地址IP是255.255.255.255，但ARP请求的广播涉及IP层的知识，不在这篇文章讨论的 范围，所以这里提到的广播，除非特别说明，否则都是第一个意思，也就说是”因设备转发数据包引起的广播” )，让他们自己处理了。</p>
<p>这样一来会有不少问题，你发的数据其他人都收到了，私隐这总东西是不存在的！别入可以随便监听你信息！所以会话劫持在那个年代相当容易（记得俺第一次接触会话劫持这个概念的时候还是高2，那是2001~2002，呵，那时候集线器还是比较普遍的）。<br><a id="more"></a><br>另外一个比较严重的问题是，如果一个大型的局域网，比如有500台机器，全部用HUB连接的，后果会怎么样呢？？相当慢，网络的效率极差！为什么？ 如果500台机器都发一个包，那就是说每台机器，都需要接收差不多499个无用包…并且如果是需要回应的话……无用的数据包会充斥着整个的局 域网，这就是传说中的广播风暴！</p>
<p>为了减少广播风暴，网桥产生了（注意这里用的时候“减少”，不是“杜绝”，仅仅是减少!如果仅仅用网桥说能杜绝广播风暴，个人觉得还是不太准确，后来交换机的出现才可以说是完全杜绝了广播风暴的发生）！</p>
<p>在介绍网桥之前，还想简单介绍另一个物理层的设备：“中继器”，这种设备的作用是把物理层传输的信号放大，由于长距离的传输，信号会有一定的损耗的，这种设备主要解决的就是这个问题。它和HUB的区别是：HUB主要是为了在物理层上转发数据的，所以它不关心电压值的大小，也不会放大物理信号；而中继器它的作用就是为了放大信号用的，SO…..</p>
<h2 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h2><p>网桥又称桥接器，英文名Network Bridge，数据链路层设备。它也是转发数据包的设备，但和HUB不一样的是，它工作在数据链路层，HUB只能看懂物理层上的东西（比如一段物理信号），网桥却能看懂一些帧的信息（在链路层上，把上面传下来的数据封装后，封装好了的数据就是帧，但这里我用“数据包”这样的泛指去代替“帧”这个专业术语）。</p>
<p>在以太网构造的局域网上，最终的寻址是以数据链路层的MAC地址作为标识的(就是用MAC地址可以在局域网上找到一台唯一的机器)，网桥能从发来的 数据包中提取MAC信息，并且根据MAC信息对数据包进行有目的的转发，而不采用广播的方式，这样就能减少广播风暴的出现，提升整个网络的效率，在详细说网桥这东西之前，我想先介绍一下交换机。</p>
<p>交换机：</p>
<p>这是大家最熟悉的设备之一</p>
<p>交换机Switch，数据链路层设备，作用是转发数据包。和网桥一样它也是通过识别帧中的MAC地址，然后对特定的端口进行转发的。</p>
<h2 id="网络基础之网桥和交换机的工作原理及区别"><a href="#网络基础之网桥和交换机的工作原理及区别" class="headerlink" title="网络基础之网桥和交换机的工作原理及区别"></a>网络基础之网桥和交换机的工作原理及区别</h2><p>网桥和交换机区别在叙述前，我们先一起看两幅图：</p>
<h3 id="网桥的连接模式：-红点处为HUB"><a href="#网桥的连接模式：-红点处为HUB" class="headerlink" title="网桥的连接模式：(红点处为HUB)"></a>网桥的连接模式：(红点处为HUB)</h3><p><img src="/myimages/bridge.png" alt="bridge"><br><img src="/myimages/switch.png" alt="switch"></p>
<h3 id="交换机连接模式："><a href="#交换机连接模式：" class="headerlink" title="交换机连接模式："></a>交换机连接模式：</h3><p>从图中可以看到，网桥只有2个（输入/出）端口，而交换机有8个。嗯，是的，一开始的时候(那时候只有HUB这种设备)，由于硬件水平不是很发达，人们为了提高局域网效率，减少广播风暴的出现，他们生产了网桥（一个只有两个输入/出端口的链路层设备，这时的网桥已经是个比较先进的设备），然后他们把一个局域网一分为2，中间用网桥连接，这样A发给BCD的数据就不会再广播到EFGH了(网桥发现如果数据包不是转发给下面这个子网的，它会自动丢弃此包)，只有从A 发到EFGH的数据包才能通过网桥，到达另外一个子网(网桥发现如果数据包是转发给下面这个子网的，它才会把包转发给这个子网)。</p>
<p>这样一来，非必要的传输减少了，整个网络的效率也随之提高可不少！人们发现网桥真是个好东西呀，随着硬件发展，出现了4个，8个端口的链路层设备，这就是交换机，由于交换机可以使得网络更安全(数据不容易被监听，因为数据不再广播了，注意：只是不容易而已，要搞你其实还是可以的)，网络效率更高(还是因为数据不再广播！)，交换机渐渐替代了HUB，成为组建局域网的重要设备。</p>
<p>所以说，网桥和交换机，基本上是一样的，嗯，只是基本上而已，细看还是有些不一样的，但在说明他们之间有什么不一样之前，我想先简单介绍一下网桥和交换机的工作原理。</p>
<h3 id="网桥的工作原理："><a href="#网桥的工作原理：" class="headerlink" title="网桥的工作原理："></a>网桥的工作原理：</h3><p><img src="/myimages/bridgeprinciples.png" alt="bridgeprinciples"></p>
<p>上图是用一个网桥连接的两个网络，网桥的A端口连接A子网，B端口连接B子网，为什么网桥知道哪些数据包该转发，哪些包不该转发呢？那是因为它有两个表A和B，当有数据包进入端口A时，网桥从数据包中提取出源MAC地址和目的MAC地址。</p>
<p>一开始的时候，表A和表B都是空的，没有一条记录，这时，网桥会把数据包转发给B网络，并且在表A中增加一条MAC地址(把源MAC地址记录表中)，说明这个MAC地址的机器是A子网的，同理，当B子网发送数据包到B端口时，网桥也会记录源MAC地址到B表。</p>
<p>当网桥工作一段时候后，表A基本上记录了A子网所有的机器的MAC地址，表B同理，当再有一个数据包从A子网发送给网桥时，网桥会先看看数据包的目的MAC 地址是属于A子网还是B子网的，如果从A表中找到对应则，抛弃该包，如果不是，则转发给B子网，然后检查源MAC地址，是否在表中已经存在，如果不存在，在表A中增加一条记录。</p>
<p>噢，或许你现在会问了，为什么需要两张表呢，一张表不行么？？嗯～刚才把表一分为二是为了便于理解，实际上，真正的网桥里面存的应该是一张表(当然有可能为了提速，或者其他原因，它也可能把信息存为多张表，这个得看它怎么实现了～)，如果是一张信息表，表里记录的应该是：MAC-PortNum。</p>
<h3 id="交换机有些许不同，如图："><a href="#交换机有些许不同，如图：" class="headerlink" title="交换机有些许不同，如图："></a>交换机有些许不同，如图：</h3><p><img src="/myimages/switch2.png" alt="switch2"></p>
<p>交换机也有一张MAC-PORT对应表(这张表的学名为：CAM)，和网桥不一样的是，网桥的表是一对多的(一个端口号对多个MAC地址)，但交换机的CAM表却是一对一的，如果一个端口有新的MAC地址，它不会新增MAC－PORT记录，而是修改原有的记录</p>
<p>例如：现在交换机记录表里已经有一项：MAC1-Port1，如果此刻端口1又来了一个数据包，里面的源MAC地址是MAC2，此时，交换机会刷新交换机记录表：MAC1-Port1记录被修改为MAC2－Port1，因为交换机认为是端口1的计算机MAC地址变了，如果端口1连接的一台物理机器，MAC一般是不会变的，如果连接的是另外一个交换机，那这个端口的记录会变化得比较频繁(如上图的Port12，它是对外的接口，与一个局域网连接)，另外，如果 CAM表中没有找到和数据包的目的MAC地址对应的记录，交换机会对此数据包进行广播，发给本交换机的每一个端口。</p>
<h3 id="网桥和交换机的缓存对比"><a href="#网桥和交换机的缓存对比" class="headerlink" title="网桥和交换机的缓存对比"></a>网桥和交换机的缓存对比</h3><p>网桥和交换机除了用CAM表指导数据包转发这点和HUB不一样外，网桥和交换机还有一个特点：缓存！对，网桥和交换机都有一定量的缓存，因为网桥和交换机转发数据包需要一些额外的操作，所以可能会占用一些时间，为了避免出现因来不及转发数据，导致大量数据丢失的情况，网桥和交换机就出现了缓存。</p>
<p>当然，缓存不是万能的，当网桥或交换机处理不及并且缓存用完了，以后再来的数据还是会丢失的。还一个网桥需要缓存的原因是：桥接两个传输速率不同的局域网，比如：802.3的传输速率说10mb/s，但实际上并不是真的10Mb/s，而 802.4(几乎)确实为10Mb/s，但两个局域网桥接时候必须是速率一样的，否则会有包丢失，而缓存也正好可以为不同速率网络连接时所使用。</p>
<p>网桥的缓存量是大于交换机的缓存量，因为网桥天生是为了连接两个网络的，两个网络桥接时所要处理的数据量会比一般的交换机需要处理的数据量要多，所以网桥的缓存也一般要比交换机大一点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集线器&quot;&gt;&lt;a href=&quot;#集线器&quot; class=&quot;headerlink&quot; title=&quot;集线器&quot;&gt;&lt;/a&gt;集线器&lt;/h2&gt;&lt;p&gt;集线器（HUB），它是工作在物理层的设备，由于它只是工作在物理层的设备，所以它并不关心也不可能关心OSI上面几层所涉及的，它的工作机制流程 是：从一个端口接收到数据包时，会在其他端口把这个包转发一次，因为它不知道也不可能知道这个包是发给谁的（物理层设备只关心电压这些物理概念），它也只能对所有人广播(这里和下文提到的广播该词的意思和ARP请求时的广播有些不同。&lt;/p&gt;
&lt;p&gt;这里的广播意思是：使用物理层转发设备，如HUB，导致的广播，可以说这个广播是被逼的，因为设备的问题！是设备转发包引起的广播！而ARP请求的 广播是自己要求的，主动的，因为ARP请求包的目标地址IP是255.255.255.255，但ARP请求的广播涉及IP层的知识，不在这篇文章讨论的 范围，所以这里提到的广播，除非特别说明，否则都是第一个意思，也就说是”因设备转发数据包引起的广播” )，让他们自己处理了。&lt;/p&gt;
&lt;p&gt;这样一来会有不少问题，你发的数据其他人都收到了，私隐这总东西是不存在的！别入可以随便监听你信息！所以会话劫持在那个年代相当容易（记得俺第一次接触会话劫持这个概念的时候还是高2，那是2001~2002，呵，那时候集线器还是比较普遍的）。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="http://vcpu.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="集线器" scheme="http://vcpu.me/tags/%E9%9B%86%E7%BA%BF%E5%99%A8/"/>
    
      <category term="网桥" scheme="http://vcpu.me/tags/%E7%BD%91%E6%A1%A5/"/>
    
      <category term="中继器" scheme="http://vcpu.me/tags/%E4%B8%AD%E7%BB%A7%E5%99%A8/"/>
    
      <category term="交换机" scheme="http://vcpu.me/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>拥塞控制</title>
    <link href="http://vcpu.me/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    <id>http://vcpu.me/TCP拥塞控制/</id>
    <published>2017-07-04T10:00:00.000Z</published>
    <updated>2017-07-05T01:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP拥塞控制设计概念"><a href="#TCP拥塞控制设计概念" class="headerlink" title="TCP拥塞控制设计概念"></a>TCP拥塞控制设计概念</h2><h3 id="延迟确认定时器"><a href="#延迟确认定时器" class="headerlink" title="延迟确认定时器"></a>延迟确认定时器</h3><blockquote>
<p>TCP延时确认定时器是指在一个TCP连接中，当一方收到另一端的数据后，并不是立刻ACK确认，而是等待200ms（2.6内核 40ms），如果这段时间内有新的数据要发往对方，本地奖ACK和数据封装在一个数据包中捎带发送；如果这段时间内没有新的数据要发往对方，200ms后ack确认。</p>
</blockquote>
<p>优点：减少传输消耗<br>缺点：增加了延迟    </p>
<h3 id="超时重传定时器"><a href="#超时重传定时器" class="headerlink" title="超时重传定时器"></a>超时重传定时器</h3><p>超时重传是TCP协议栈保障数据可靠性的一个重要机制<br>原理：</p>
<blockquote>
<p>发送一个数据后同时开启定时器，在一定时间内如果没有收到对方确认，定时器激活重新发送数据包，直到发送成功或者到达最大重传次数。<br><a id="more"></a></p>
<p> RTO(重传超时时间)</p>
<blockquote>
<p>如果RTO值被设置过大，将会使得发送端经过很长时间等待才能发现报文段丢失，会降低吞吐<br>如果RTO值被设置很小，发送端尽管可以很快的检测出报文段的丢失，但也可能将一些延迟大的报文段误认为是丢失，造成不必要重传，浪费网络资源。</p>
</blockquote>
</blockquote>
<h3 id="慢启动阈值"><a href="#慢启动阈值" class="headerlink" title="慢启动阈值"></a>慢启动阈值</h3><p>慢启动阈值是慢启动算法和拥塞避免的分水岭，当拥塞窗口大于慢启动阈值时，就用拥塞避免慢启动阈值门限就用慢启动</p>
<h3 id="SACK机制"><a href="#SACK机制" class="headerlink" title="SACK机制"></a>SACK机制</h3><p>SACK TCP选项<br>    SACK是TCP一个选项，握手过程中会协商判断是否支持SACK，如果支持会在TCP选项中SACK permitted。<br>SACK 选项格式<br>    TCP不能超过四组SACK边界，因为TCP选项最大支持40个字节</p>
<p>作用描述<br>    SACK通常是由数据接收方产生，收到的SYN包中有SACK-Permitted选项为true，同时自己也支持SACK，可以在接收数据异常时候，产生SACK option。SACK中需要携带接收队列中没有被确认的数据信息，已经确认的数据信息不会通过SACK携带。<br>发送端SACK含义：<br>    第一个block指出是哪个segment触发了SACK 选项，发sack人认为是谁乱序了才导致SACK<br>    尽可能填满SACK<br>    SACK需要报告最近接收的不连续的数据块<br>接收端：<br>    数据没有被确认前都会保持在滑动窗口内<br>    每一个数据包都有一个sakced标记，发送数据会忽略被sacked的数据<br>    如果SACK丢失，超时重传后重置所有数据包的SACKed标记<br>SACK分析<br>    适用于多包丢失情况，可以快速退出快速恢复阶段；如果丢包率很低，或者丢包时常常只丢一个包，那么SACK就是多余的。</p>
<h3 id="D-SACK"><a href="#D-SACK" class="headerlink" title="D-SACK"></a>D-SACK</h3><p>D-SACK主要是使用SACK来告诉发送方有哪些数据被重复接收了，如果是D-SACK；D-SACK option的第一个block代表呗重复发送的序号片段。<br>注意：<br>D_SACK仅仅是接收端的报告重复连续的片段<br>每个重复连续片段只能在第一个block，其它block是接收端已经收到但是还没有ACK的数包<br>汇报重复收到片段<br>    此时数据发送端，可以知道，是对方的ACK丢失了导致此种情况</p>
<h3 id="慢启动过程"><a href="#慢启动过程" class="headerlink" title="慢启动过程"></a>慢启动过程</h3><p>最初的TCP在建立完成后会向网络中发送大量的数据包，这样很容易导致网络中路由缓存空间耗尽，从而发生拥塞。慢启动就是为解决该问题，其思想是一开始不是发大量的数据包而是根据网络情况逐步增加每次的发送的数量，以避免上述现象的发生。<br>其基本做法为：<br>新建连接时候，CWND初始化1个最大报文段大小，每当一个报文段被确认，拥塞窗口就增价1个mss大小，在发出的报文段均被正常确认情况 下，拥塞窗会随着往返时间指数增长。慢启动并不慢。RTTlogW 时间可占满带宽。</p>
<h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>拥塞窗口不能一直增长下去，其受慢启动阈值（一开始为65535）限制；如果超过该阈值，进入拥塞避免阶段。<br>    拥塞避免思想<br>    拥塞窗口的加法增大，拥塞窗口随着RTT开始线性增加，这样可以避免增长过快导致网络拥塞，慢慢调整到网络的最佳值。</p>
<h2 id="如何确定拥塞状态"><a href="#如何确定拥塞状态" class="headerlink" title="如何确定拥塞状态"></a>如何确定拥塞状态</h2><h4 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h4><p>此时发出去的报文在RTT时间内没有被确认，此时发生拥塞可能性较大，TCP协议栈强烈反应为：</p>
<blockquote>
<p>慢启动阈值 降低为当前拥塞窗口的一半<br>拥塞窗口设置为1，从新进入慢启动</p>
</blockquote>
<h4 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h4><p>收到3个相同的ACK，TCP在收到乱序包时就会立即发送ACK，TCP利用3个相同的ACK判定数据包失效，发送快速重传，TCP协议栈强烈反应为：</p>
<blockquote>
<p>慢启动阈值降低设置为拥塞窗口的一半<br>拥塞窗口设置为慢启动阈值，从新进入拥塞避免阶段 </p>
</blockquote>
<h4 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h4><p>当收到三个重复ACK时，随着TCP协议栈改进TCP进入的不是拥塞避免，而是快速恢复。<br>快速恢复思想是：</p>
<blockquote>
<p>数据包守恒原则，当老的数据包离开了网络后，才能向网络中发送一个新的数据包。<br>    如果收到一个重复ACK，代表已经有一个数据包离开了网络，于是拥塞窗口加1，此时能向网络中发一个新的数据包。</p>
</blockquote>
<p>具体步骤：</p>
<blockquote>
<p>当收到3个重复ACK，慢启动阈值会降为拥塞窗口的一半，把拥塞窗口设置为慢启动阈值大小+3（3个数据包离开网络）；<br>        再收到重复ACK时，拥塞窗口+1<br>        当收到新的数据包ACK时候，拥塞窗口设置为慢启动阈值，快速恢复结束，可以回到拥塞避免阶段了<br>    上述算法是reno算法，新版本的reno算法差异为：<br>        reno算法发再收到一个新的数据ACK退出快速恢复状态，new reno 需要收等到改窗口所有的数据包确认才会推出快速恢复。</p>
</blockquote>
<h3 id="TCP协议栈拥塞窗口改变时机"><a href="#TCP协议栈拥塞窗口改变时机" class="headerlink" title="TCP协议栈拥塞窗口改变时机"></a>TCP协议栈拥塞窗口改变时机</h3><p>拥塞窗口改变只发生在收到ACK和重传定时器超时。</p>
<h2 id="LINUX协议栈拥塞控制状态划分"><a href="#LINUX协议栈拥塞控制状态划分" class="headerlink" title="LINUX协议栈拥塞控制状态划分"></a>LINUX协议栈拥塞控制状态划分</h2><h3 id="open状态"><a href="#open状态" class="headerlink" title="open状态"></a>open状态</h3><p>慢启动和拥塞避免状态都是没有发生拥塞，网络畅通的状态，linux协议栈使用open状态来表示慢启动和拥塞避免。</p>
<blockquote>
<p>当TCP会话初次建立连接时，还没有发生拥塞，这时慢启动阈值无法估计，linux协议栈设置为极大值0xffffffff；Reno和Cubic算法在慢启动阶段都是当有n个数据报被确认，拥塞窗口就自增n，但是两者在拥塞避免和慢启动阈值计算上，是不同的。</p>
</blockquote>
<h3 id="diorder状态"><a href="#diorder状态" class="headerlink" title="diorder状态"></a>diorder状态</h3><p>在Linux内核TCP实现中，有一个disorder状态，此状态是open状态向快速重传过度的一个状态，收到3个重复确认才开开始快速重传，从收到第一个重复确认到收到第三个重复确认这段时间，处于disorder状态。</p>
<blockquote>
<p>设置disorder状态的必要性在于，当收到重复确认比较少时，我们还没法判断当前是否发生丢包，因为对端收到乱序报文，也会发送选择确认。如果重复确认足够多比如3个重复确认，就进入recovery状态，而如果在收到1-2个重复确认再收到数据确认，则回到open状态。</p>
<p>从disorder状态回到open状态时，拥塞窗口和慢启动阈值不发生变化，会继续进行慢启动或者拥塞避免。</p>
</blockquote>
<h3 id="reocvery状态"><a href="#reocvery状态" class="headerlink" title="reocvery状态"></a>reocvery状态</h3><p>在linux内核实现中快速重传（动作）和快速恢复（阶段）用recovery状态表示。<br>快速恢复阶段，指的是从快速重传开始，到网络上没有丢失的报文，可以回到open状态的这段时间，拥塞窗口和慢启动阈值也调整回去。</p>
<h3 id="LOSS状态"><a href="#LOSS状态" class="headerlink" title="LOSS状态"></a>LOSS状态</h3><p>重传定时器超时以后所处状态就是Loss状态。</p>
<blockquote>
<p>重传定时器超时时，代表网络环境已经极差，此时会拥塞窗口变得很小（一般1），同时调整慢启动阈值为一半，重新开始慢启动算法；认为之前发出去的所有数据包均已经丢失，重新开始慢启动算法。<br>    重传定时器超时之前所有已发的数据包被确认后才退出快速loss状态。<br>    Loss状态和Open状态差别<br>    Loss状态是采用慢启动来重传丢失的报文，知道丢失的报文被确认后才发新的数据包，而Open状态没有丢失数据包，一直再发新的数据包。</p>
</blockquote>
<h2 id="Linux协议栈拥塞控制的初始化"><a href="#Linux协议栈拥塞控制的初始化" class="headerlink" title="Linux协议栈拥塞控制的初始化"></a>Linux协议栈拥塞控制的初始化</h2><p>当TCP从syn sent或者syn recv进入 established状态时，初始话拥塞窗口和慢启动阈值。<br>kernel2.6版本拥塞窗口会根据mss大小来进行初始话，mss值越大窗口就越小。<br>    因为网络最初建立时候，网络情况很难估计，一半慢启动阈值会被设置很大0x7fffffff<br>直到察觉到拥塞发生时才做调整。<br>    Linux在TCP实现中，当TCP连接进入TW和LAST_ACK准备关闭连接时候，会选者性地将拥塞窗口和慢启动阈值保存下来。作为下一次同一条线路TCP会话建立时的拥塞窗口和慢启动阈值初始值。</p>
<h2 id="Linux协议栈拥塞控制相关杂谈"><a href="#Linux协议栈拥塞控制相关杂谈" class="headerlink" title="Linux协议栈拥塞控制相关杂谈"></a>Linux协议栈拥塞控制相关杂谈</h2><h3 id="发送数据包的限制"><a href="#发送数据包的限制" class="headerlink" title="发送数据包的限制"></a>发送数据包的限制</h3><blockquote>
<p>发送数据包实际上受三个条件限制：<br>条件1:发送端的拥塞窗口<br>条件2:接收端的接收窗口<br>条件3:发送队列上实际数据包量</p>
</blockquote>
<h3 id="慢启动阶段拥塞窗口调整策略"><a href="#慢启动阶段拥塞窗口调整策略" class="headerlink" title="慢启动阶段拥塞窗口调整策略"></a>慢启动阶段拥塞窗口调整策略</h3><p>慢启动阶段，有多少数据包被确认久增加多少数据包。一般的描述为一个传输轮次，拥塞窗口翻倍。这与有多少数据包被确认，拥塞窗口增加多少是一个意思。后者更适合于写代码。<br>拥塞避免阶段拥塞窗口调整<br>    没收到一定个数的ACK拥塞窗口加1<br>reno算法拥塞避免表现为：<br>    拥塞窗口在维持一段时间内的恒定值后，自增1</p>
<h3 id="disorder阶段拥塞窗口调整"><a href="#disorder阶段拥塞窗口调整" class="headerlink" title="disorder阶段拥塞窗口调整"></a>disorder阶段拥塞窗口调整</h3><blockquote>
<p>disorder是一个观望状态，拥塞窗口和慢启动阈值保持不变。即此时满足in_flight &lt; 拥塞窗口，对端能接收，并且发送队列中还有数据，则会继续发送数据。</p>
<p>disorder收到数据确认时候，先前引发重复确认报文段已经到达了接收端，这时会重新回到open状态，拥塞窗口和慢启动阈值没有发生任何变化。</p>
<p>disorder接收到足够多的重复确认数据包时（一般3个），会进入revocery状态。</p>
</blockquote>
<h3 id="快速恢复阶段拥塞窗口调整"><a href="#快速恢复阶段拥塞窗口调整" class="headerlink" title="快速恢复阶段拥塞窗口调整"></a>快速恢复阶段拥塞窗口调整</h3><p>进入快速恢复之前，调整慢启动阈值，等退出快速恢复阶段时，拥塞窗口等于慢启动阈值。快速恢复阶段不同恢复算法用不同的拥塞窗口调整策略。</p>
<h4 id="快速恢复阶段突降式调整"><a href="#快速恢复阶段突降式调整" class="headerlink" title="快速恢复阶段突降式调整"></a>快速恢复阶段突降式调整</h4><p>突降方式调整是指进入快速恢复阶段，就立刻调整拥塞窗口。windows采用的就是这种调整方法。</p>
<h4 id="快速恢复阶段比例式拥塞窗口调整"><a href="#快速恢复阶段比例式拥塞窗口调整" class="headerlink" title="快速恢复阶段比例式拥塞窗口调整"></a>快速恢复阶段比例式拥塞窗口调整</h4><p>拥塞窗口缓慢过度至慢启动阈值。</p>
<h3 id="快速重传阶段继续收到重复确认处理"><a href="#快速重传阶段继续收到重复确认处理" class="headerlink" title="快速重传阶段继续收到重复确认处理"></a>快速重传阶段继续收到重复确认处理</h3><p>Linux协议栈采用的方法为：</p>
<blockquote>
<p>如果拥塞窗口没有降到慢启动阈值，每收到两个重复ACK，拥塞窗口减1，并发送丢失的数据段。否则拥塞窗口不变，每收到一个重复ACK就重传一次。<br>在此期间不发送新的数据段。    </p>
</blockquote>
<h3 id="快速重传部分确认处理"><a href="#快速重传部分确认处理" class="headerlink" title="快速重传部分确认处理"></a>快速重传部分确认处理</h3><p>Linux2.6的处理是：<br>    ACK确认了新数据时候，有两种可能性。第一种，重传数据到达对端<br>    第二种，正常数据到达对端<br>为了区分这两种情况，协议栈会比较新数据ack的时间戳和发生重传数据时间戳。如果后发的重传数据，则说明数据包没有丢失，只是晚到达了，慢启动阈值会被恢复到之前的值；此时不重传此ACK的数据包。<br>    如果是重传到达对端，导致的新数据ACK产生；此时重传ACK报文，如果拥塞窗口允许，就发数据。</p>
<h3 id="Loss状态收到ACK"><a href="#Loss状态收到ACK" class="headerlink" title="Loss状态收到ACK"></a>Loss状态收到ACK</h3><p>如果从ack判断出这个ack报文在我们最后一次重传前就已经发出，这种情况代表重传是没有必要重传，其重传数据段已经到达了对端。把慢启动窗口和阈值恢复到loss状态前的值，就当什么也没有发生过，继续发送数据。<br>    否则：<br>    继续重传队列中剩余的数据，重传过程中不发新数据；重传完成后按照拥塞窗口进行发送。进入Loss时候会记录至少重传最大序列号；在确认这些数据传输完成，协议栈从Loss退出进入open。</p>
<h3 id="拥塞控制的误判"><a href="#拥塞控制的误判" class="headerlink" title="拥塞控制的误判"></a>拥塞控制的误判</h3><p>发生在进入Recovery和Loss状态时，会发送误判。<br>并不是收到三个重复ACK就一定代表需要快速从传，并不是重传定时器超时就一定是网络拥塞。</p>
<h4 id="误判进入recovery状态导致问题："><a href="#误判进入recovery状态导致问题：" class="headerlink" title="误判进入recovery状态导致问题："></a>误判进入recovery状态导致问题：</h4><p>拥塞窗口和慢启动阈值减小是不必要的，会导致不必要的性能下降。</p>
<h4 id="超时误判："><a href="#超时误判：" class="headerlink" title="超时误判："></a>超时误判：</h4><p>由于网络状态的不稳定性，RTT会经常变化，超时时有可能发生的。单相对恢复误判，超时误判发生可能性小，因为重传定时器RTO比RTT大。</p>
<h4 id="误判的判定："><a href="#误判的判定：" class="headerlink" title="误判的判定："></a>误判的判定：</h4><p>recovery误判：如果重传数据到达之前，ack就确认了这个数据包，则说明为误判，直接回到以前状态。</p>
<p>这种误判恢复linux需要时间戳的支持。</p>
<p>误判发生经常伴随着时间戳和sack出现。</p>
<h4 id="重定序临界值"><a href="#重定序临界值" class="headerlink" title="重定序临界值"></a>重定序临界值</h4><p>这个临界值就是我们经常说的3个重复ACK的值，在kernel的描述；实际上该值是可能变化的，例如误判发生时，该临界值会变大。这也是linux较为保守的实现。</p>
<h2 id="Linux拥塞控制概述"><a href="#Linux拥塞控制概述" class="headerlink" title="Linux拥塞控制概述"></a>Linux拥塞控制概述</h2><blockquote>
<p>慢启动阶段涨的很快，拥塞避免阶段探测性增长，收到重复确认先观望，收到足够多的重复确认时开始快速重传；在快速恢复阶段争取把可能丢失的报文重传出去，并适当发送新的数据包以维持协议栈正常运转。当退出快速重传时，拥塞窗口和慢启动阈值按预期的值变小。并会到拥塞避免阶段。同时挂一个定时器来处理长时间未收到报文的情况。当重传定时器超时时，批量重传，重新开始慢启动。</p>
</blockquote>
<p>慢启动大家基本默认翻倍增长，在一次TCP的生命周期中，只要不断网，超时重传可能性很小，所以拥塞控制算法的主要集中在拥塞避免阶段，偶尔处在recovery状态；即<br>    拥塞避免-recovery-拥塞避免-recovery<br>拥塞控制性能差异，主要来源于：<br>    1 拥塞避免阶段初始窗口大小，即推出快速恢复状态时的慢启动阈值<br>    2.拥塞避免阶段的拥塞窗口调整策略<br>    3.快速恢复状态的快慢（指不支持sack）</p>
<p>拥塞控制状态图<br>  <img src="/myimages/tcp.jpg" alt="tcp"></p>
<h3 id="慢启动阶段"><a href="#慢启动阶段" class="headerlink" title="慢启动阶段"></a>慢启动阶段</h3><p>1.发出去数据均能被ack</p>
<blockquote>
<p>拥塞窗口持续指数增加，另外一种描述发出去的数据包被ACK多少就额外增加多少数据包。这个情况下拥塞窗口会持续增加。</p>
</blockquote>
<p>2.收到重复ACK但是还没有达到3个</p>
<blockquote>
<p>拥塞窗口和慢启动阈值不会变化，此时发包行为取决于当前和拥塞窗口接收端的窗口，以及当前发送队列上的数据量。如果其后续收到了新的数据ack，会继续进行慢启动，就好像什么也没有发生一样。<br>    如果没有收到新数据ack，会引发快速重传。</p>
</blockquote>
<p>3.收到足够重复ACK</p>
<blockquote>
<p>足够的重复ack引发快速重传，慢启动阈值降低为当前拥塞窗口的一半，拥塞窗口设置为慢启动阈值+3（已经收到3个重复ack，代表3个数据包已经离开网络到达对端）；此时此刻会重传丢失的数据包，具体要不要发新数据包完全取决于当前的拥塞窗口。如果丢失的数据包统统确认已经到达对端，会退出快速恢复从新进入open状态；进入open状态后因为拥塞窗口大于慢启动阈值，所以 会进入拥塞避免阶段。</p>
</blockquote>
<p>4.发送数据包超时</p>
<blockquote>
<p>慢启动阈值变为当前拥塞窗口一半，拥塞窗口减少到1，会按照慢启动发包行为发送认为已经丢失的报文；待这些报文被确认后退出超时阶段从新回到open。按照当前的拥塞窗口和慢启动阈值进行慢启动或者拥塞避免发包。</p>
</blockquote>
<h3 id="拥塞避免阶段"><a href="#拥塞避免阶段" class="headerlink" title="拥塞避免阶段"></a>拥塞避免阶段</h3><p>1.发出去数据均被ack</p>
<blockquote>
<p>拥塞窗口会继续线性增长，慢启动阈值保持不变。</p>
</blockquote>
<p>2.收到重复ack但是还没有达到3个</p>
<blockquote>
<p>此状态属于TCP协议栈的disorder状态，慢启动阈值保持不变，拥塞窗口保持不变，协议栈发包行为收协议栈拥塞窗口的限制。如果后续收到新数据的ACK，将从disorder状态回到拥塞避免阶段，从新线性增长方式发包。</p>
</blockquote>
<p>3.收到足够重复ack</p>
<blockquote>
<p>足够的重复ack引发快速重传，慢启动阈值降低为当前拥塞窗口的一半，拥塞窗口设置为慢启动阈值+3；此时此刻会重传丢失的数据包，具体要不要发新数据取决于当前的拥塞窗口。如果丢失数据包通通被确认已经到达对端，会退出快速恢复阶段进入拥塞避免阶段。</p>
</blockquote>
<p>4.发送数据包超时</p>
<blockquote>
<p>慢启动阈值变成当前拥塞窗口一半，拥塞窗口减少到1，会按照慢启动发包行为完成已经发送数据包的重传。待这些报文被确认后退出loss阶段，从新回到open状态，根据慢启动阈值和拥塞窗口大小进行慢启动或者拥塞避免发包。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP拥塞控制设计概念&quot;&gt;&lt;a href=&quot;#TCP拥塞控制设计概念&quot; class=&quot;headerlink&quot; title=&quot;TCP拥塞控制设计概念&quot;&gt;&lt;/a&gt;TCP拥塞控制设计概念&lt;/h2&gt;&lt;h3 id=&quot;延迟确认定时器&quot;&gt;&lt;a href=&quot;#延迟确认定时器&quot; class=&quot;headerlink&quot; title=&quot;延迟确认定时器&quot;&gt;&lt;/a&gt;延迟确认定时器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TCP延时确认定时器是指在一个TCP连接中，当一方收到另一端的数据后，并不是立刻ACK确认，而是等待200ms（2.6内核 40ms），如果这段时间内有新的数据要发往对方，本地奖ACK和数据封装在一个数据包中捎带发送；如果这段时间内没有新的数据要发往对方，200ms后ack确认。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优点：减少传输消耗&lt;br&gt;缺点：增加了延迟    &lt;/p&gt;
&lt;h3 id=&quot;超时重传定时器&quot;&gt;&lt;a href=&quot;#超时重传定时器&quot; class=&quot;headerlink&quot; title=&quot;超时重传定时器&quot;&gt;&lt;/a&gt;超时重传定时器&lt;/h3&gt;&lt;p&gt;超时重传是TCP协议栈保障数据可靠性的一个重要机制&lt;br&gt;原理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发送一个数据后同时开启定时器，在一定时间内如果没有收到对方确认，定时器激活重新发送数据包，直到发送成功或者到达最大重传次数。&lt;br&gt;
    
    </summary>
    
      <category term="TCP" scheme="http://vcpu.me/categories/TCP/"/>
    
    
      <category term="拥塞控制" scheme="http://vcpu.me/tags/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="Linux拥塞控制基本概念" scheme="http://vcpu.me/tags/Linux%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>软中断和硬中断</title>
    <link href="http://vcpu.me/interrupt/"/>
    <id>http://vcpu.me/interrupt/</id>
    <published>2017-07-04T04:00:00.000Z</published>
    <updated>2017-07-04T03:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中断概述"><a href="#中断概述" class="headerlink" title="中断概述"></a>中断概述</h2><p>Linux内核需要对连接到计算机上所有硬件设备进行管理，毫无疑问这是它分内的事情。其通过中断机制让管理的硬件设备主动通知，而不是其主动轮询。<br>中断是一种电信号，由硬件设备产生送入中断控制器的输入引脚，然后中断控制器会想处理器发出信号；处理器收到该信号后，停下当前正在处理的事情，跳到中断处理程序的入口点，进行中断处理。当然处理器会通知操作系统已经产生中断；操作系统也可能会进行适当的处理。</p>
<p>处理器通过中断向量识别产生的中断，linux系统下Intel X86支持256中断向量,中断编号0-255</p>
<blockquote>
<p>0-31  异常 非屏蔽 固定不变<br>32-47 屏蔽中断（IO设备）<br>48-25 软中断</p>
</blockquote>
<h2 id="硬件中断"><a href="#硬件中断" class="headerlink" title="硬件中断"></a>硬件中断</h2><p>硬中断是外部设备对CPU的中断，硬中断可抢占软中断，优先级高执行较快。<br>硬中断的本质是接收到中断信号后，跳转到公共段代码执行do_IRQ，并切换到硬中断请求栈，执行中断回调函数。<br><a id="more"></a></p>
<h3 id="硬件中断流程"><a href="#硬件中断流程" class="headerlink" title="硬件中断流程"></a>硬件中断流程</h3><p>硬中断的汇编处理-&gt;do_IRQ-&gt;handle_irq-&gt;handle_edge_irq(handle_level_irq)-&gt;handle_irq_event-&gt;具体设备的硬中断处理</p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>linux下硬件中断可以嵌套，且无优先级别；除同种中断外，一个中断可打断另一个中断。此种机制短时间内可以接受更多的中断，可以有大的设备控制吞吐量；无优先级可以简化内核。<br>同种中断处理机制可以描述为，中断数据结构会设置IRQD_IRQ_INPROGRESS中断不处理标识，本地CPU或者其它CPU如果检查到此种中断的该标记，会直接退出，置上IRQS_PENDING后续处理标记。</p>
<h2 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h2><p>软中断是硬中断服务程序对内核的中断，软中断时一种推后执行的机制，软中断是bottom half，上半部在屏蔽中断的上下文中运行，软中断相对来讲不是非常紧急，通常还比较耗时，不会在中断上下文中执行系统会自行安排运行时机。软中断不会抢占另一个软中断。</p>
<h3 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h3><p>1.软中断通过open_softirq注册一个软中断处理函数，在软中断向量表softirq_vec数组中添加新的action函数<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//定时器init_timers调用初始化软中断调用函数</div><div class="line">open_softirq(TIMER_SOFTIRQ, run_timer_softirq);</div><div class="line">...</div><div class="line">void open_softirq(int nr, void (*action)(struct softirq_action *))</div><div class="line">&#123;</div><div class="line">	softirq_vec[nr].action = action;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.调用raise_softirq软中断触发函数，即软中断标记为挂起状态<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This function must run with irqs disabled!</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">raise_softirq_irqoff</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//设置</span></div><div class="line">	__raise_softirq_irqoff(nr);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * If we're in an interrupt or softirq, we're done</div><div class="line">	 * (this also catches softirq-disabled code). We will</div><div class="line">	 * actually run the softirq once we return from</div><div class="line">	 * the irq or softirq.</div><div class="line">	 *</div><div class="line">	 * Otherwise we wake up ksoftirqd to make sure we</div><div class="line">	 * schedule the softirq soon.</div><div class="line">	 */</div><div class="line">	 <span class="comment">//不能在硬中断，必须要硬中断处理完</span></div><div class="line">	 <span class="comment">//不能在软中断里，软中断不能嵌套</span></div><div class="line">	<span class="keyword">if</span> (!in_interrupt())</div><div class="line">		wakeup_softirqd();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">raise_softirq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nr)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line">	<span class="comment">//关闭本地CPU中断</span></div><div class="line">	local_irq_save(flags);</div><div class="line">	raise_softirq_irqoff(nr);</div><div class="line">	local_irq_restore(flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内核会在一些位置检查是否有挂起状态的软中断，如果有的话调用do_softirq执行软中断处理action函数<br>3.do_softirq完成两件事情<br>（1）切换到软件请求栈，让其处于软中断上下文<br>（2）执行<strong>do_softirq<br>4.</strong>do_softirq<br>（1）执行软中断处理函数<br>（2）如果软中处理函数超过10个，唤醒内核线程让其处理本地CPU软中断。</p>
<p>软中断本质就是内核在某些位置检查是否有挂起的软中断（local_software_pending()不为0指有挂起软中断），若有则调用do_softirq切换到软中断请求栈，调用__do_softirq。</p>
<h3 id="进程角度看软中断执行过程"><a href="#进程角度看软中断执行过程" class="headerlink" title="进程角度看软中断执行过程"></a>进程角度看软中断执行过程</h3><p>步骤1:将返回四值和CPU状态寄存器压栈<br>步骤2:修改特权级别（系统程序需要核心态特权才能运行，用户态函数只能通过软中断调用系统API）,设置中断事务标记<br>步骤3:唤醒守护线程，检测中断状态寄存器，发现软中断事务<br>步骤4:根据中断号通过查找中断向量表，找到ISR中断服务历程地址，跳转执行<br>步骤5:中断服务程序执行完成后，返回压栈的函数执行点</p>
<h3 id="嵌套-1"><a href="#嵌套-1" class="headerlink" title="嵌套"></a>嵌套</h3><p>软中断不打断软中断，相同软中断可在所有CPU上同时执行</p>
<h3 id="软中断触发时机"><a href="#软中断触发时机" class="headerlink" title="软中断触发时机"></a>软中断触发时机</h3><p>（1）调用do_IRQ完成I/O中断时调用irq_exit<br>    irq_exit-&gt;invoke_softirq-&gt;do_softirq<br>（2）如果系统使用I/O APIC，在处理完本地时钟中断时<br>（3）local_bh_enable-&gt;do_softirq<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">local_bh_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	_local_bh_enable_ip(_RET_IP_);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（4）在SMP中，当CPU处理完被CALL_FUNCTION_VECTOR处理器间中断所触发的函数时：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">smp_trace_call_function_interrupt</span><span class="params">(struct pt_regs *regs)</span></span></div><div class="line">&#123;</div><div class="line">	smp_entering_irq();</div><div class="line">	trace_call_function_entry(CALL_FUNCTION_VECTOR);</div><div class="line">	__smp_call_function_interrupt();</div><div class="line">	trace_call_function_exit(CALL_FUNCTION_VECTOR);</div><div class="line">	exiting_irq();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>exiting_irq-&gt;irq_exit</p>
<p>__do_softirq</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">asmlinkage <span class="keyword">void</span> __do_softirq(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">softirq_action</span> *<span class="title">h</span>;</span></div><div class="line">	__u32 pending;</div><div class="line">	<span class="comment">//软中断结束时间</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> end = jiffies + MAX_SOFTIRQ_TIME;</div><div class="line">	<span class="keyword">int</span> cpu;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> old_flags = current-&gt;flags;</div><div class="line">	<span class="comment">//软中断执行次数10次</span></div><div class="line">	<span class="keyword">int</span> max_restart = MAX_SOFTIRQ_RESTART;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Mask out PF_MEMALLOC s current task context is borrowed for the</div><div class="line">	 * softirq. A softirq handled such as network RX might set PF_MEMALLOC</div><div class="line">	 * again if the socket is related to swap</div><div class="line">	 */</div><div class="line">	current-&gt;flags &amp;= ~PF_MEMALLOC;</div><div class="line"></div><div class="line">	<span class="comment">//获得CPU的软中断掩码，这时候仍然是关中断，可安全获得掩码</span></div><div class="line">	pending = local_softirq_pending();</div><div class="line">	<span class="comment">//统计信息：进程被中断使用时间</span></div><div class="line">	account_irq_enter_time(current);</div><div class="line">	<span class="comment">//执行完该函数后，关闭软中断，后续即使硬件再次触发新的软中断，也不会重新进入__do_softirq</span></div><div class="line">	__local_bh_disable(_RET_IP_, SOFTIRQ_OFFSET);</div><div class="line">	lockdep_softirq_enter();<span class="comment">//just for debugging</span></div><div class="line"></div><div class="line">	cpu = smp_processor_id();</div><div class="line">	</div><div class="line">restart:</div><div class="line">	<span class="comment">/* Reset the pending bitmask before enabling irqs */</span></div><div class="line">	<span class="comment">//中断掩码清0，当然局部变量pending已经存储下来了，开启硬件中断后，可设置上新的软中断了</span></div><div class="line">	set_softirq_pending(<span class="number">0</span>);</div><div class="line">	<span class="comment">//开硬件中断，由于软中断执行时间一般较长，这里将中断打开避免长时间关中断，这段处理时间硬件中断就不会丢失了</span></div><div class="line">	local_irq_enable();</div><div class="line"></div><div class="line">	h = softirq_vec;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		<span class="keyword">if</span> (pending &amp; <span class="number">1</span>) &#123;<span class="comment">//中断挂起</span></div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">int</span> vec_nr = h - softirq_vec;<span class="comment">//获取中断号</span></div><div class="line">			<span class="comment">//保存抢占计数，后续无法破坏该计数了</span></div><div class="line">			<span class="keyword">int</span> prev_count = preempt_count();</div><div class="line">			<span class="comment">//软中断在每个核上执行计数</span></div><div class="line">			kstat_incr_softirqs_this_cpu(vec_nr);</div><div class="line"></div><div class="line">			trace_softirq_entry(vec_nr);</div><div class="line">			<span class="comment">//执行回调函数</span></div><div class="line">			h-&gt;action(h);</div><div class="line">			trace_softirq_exit(vec_nr);</div><div class="line">			<span class="comment">//软中断回调函数破坏了抢占计数，打印高级别警告信息，并恢复抢占计数</span></div><div class="line">			<span class="keyword">if</span> (unlikely(prev_count != preempt_count())) &#123;</div><div class="line">				printk(KERN_ERR <span class="string">"huh, entered softirq %u %s %p"</span></div><div class="line">				       <span class="string">"with preempt_count %08x,"</span></div><div class="line">				       <span class="string">" exited with %08x?\n"</span>, vec_nr,</div><div class="line">				       softirq_to_name[vec_nr], h-&gt;action,</div><div class="line">				       prev_count, preempt_count());</div><div class="line">				preempt_count() = prev_count;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			rcu_bh_qs(cpu);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//处理下一个软中断</span></div><div class="line">		h++;</div><div class="line">		pending &gt;&gt;= <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">while</span> (pending);<span class="comment">//无软中断循环结束</span></div><div class="line"><span class="comment">//处理完一轮软中断后，因为处理时候中断是开启的，可能发生了硬件中断重新触发了软中断</span></div><div class="line"><span class="comment">//我们就关中断保障中断掩码再被修改</span></div><div class="line">	local_irq_disable();</div><div class="line"></div><div class="line">	<span class="comment">//如果没有超过10次，且处理时间也在合法范围内，继续处理,否则唤醒ksoftirqd守护线程处理软中断</span></div><div class="line">	pending = local_softirq_pending();</div><div class="line">	<span class="keyword">if</span> (pending) &#123;</div><div class="line">		<span class="keyword">if</span> (time_before(jiffies, end) &amp;&amp; !need_resched() &amp;&amp;</div><div class="line">		    --max_restart)</div><div class="line">			<span class="keyword">goto</span> restart;</div><div class="line">			<span class="comment">//调用线程处理剩下的中断</span></div><div class="line">		wakeup_softirqd();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	lockdep_softirq_exit();</div><div class="line"></div><div class="line">	account_irq_exit_time(current);</div><div class="line">	__local_bh_enable(SOFTIRQ_OFFSET);</div><div class="line">	tsk_restore_flags(current, old_flags, PF_MEMALLOC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>防止软中断嵌套的流程：关软中断中肯定有一句原子地加1的关键语句，如果当前内核路径A在该原子操作之前被另一个内核路径B打断，则B执行完硬中断和软中断后，返回到A的此处，A接着执行该原子操作，之后的软中断处理应该是空转，因为肯定已经被B处理完了。如果在该原子操作之后被B打断，则B执行完硬中断，不会执行自己的软中断而是会直接退出（因为软中断嵌套了），返回到A的此处，A接着执行，这次A除了处理自己软中断，还会额外地处理B的软中断。<br>对于preempt_count中的软中断位，由上述可以知道，它的作用有两个：防止软中断在单cpu上嵌套；保证了在执行软中断期间不被抢占。</p>
<h3 id="ksoftirqd进程"><a href="#ksoftirqd进程" class="headerlink" title="ksoftirqd进程"></a>ksoftirqd进程</h3><p>run_ksoftirqd是ksoftirqd线程的核心处理函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run_ksoftirqd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> cpu)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//1.把当前CPU中断中断关掉</span></div><div class="line">	local_irq_disable();</div><div class="line">	<span class="comment">//2.当前CPU是否有软中断</span></div><div class="line">	<span class="keyword">if</span> (local_softirq_pending()) &#123;</div><div class="line">	<span class="comment">//3.处理软中断</span></div><div class="line">		__do_softirq();</div><div class="line">		rcu_note_context_switch(cpu);</div><div class="line">		local_irq_enable();</div><div class="line">		cond_resched();</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	local_irq_enable();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该内核线程的优先级较低，且采用关闭中断保护方式，而不是关闭抢占保护方式，让更多的软中断被其它人调用执行。达到ksoftirqd进程的辅助作用。<br>一旦开始执行中断就不允许抢占了，软中断和硬中断都是这个做法，在执行期间不允许调度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中断概述&quot;&gt;&lt;a href=&quot;#中断概述&quot; class=&quot;headerlink&quot; title=&quot;中断概述&quot;&gt;&lt;/a&gt;中断概述&lt;/h2&gt;&lt;p&gt;Linux内核需要对连接到计算机上所有硬件设备进行管理，毫无疑问这是它分内的事情。其通过中断机制让管理的硬件设备主动通知，而不是其主动轮询。&lt;br&gt;中断是一种电信号，由硬件设备产生送入中断控制器的输入引脚，然后中断控制器会想处理器发出信号；处理器收到该信号后，停下当前正在处理的事情，跳到中断处理程序的入口点，进行中断处理。当然处理器会通知操作系统已经产生中断；操作系统也可能会进行适当的处理。&lt;/p&gt;
&lt;p&gt;处理器通过中断向量识别产生的中断，linux系统下Intel X86支持256中断向量,中断编号0-255&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0-31  异常 非屏蔽 固定不变&lt;br&gt;32-47 屏蔽中断（IO设备）&lt;br&gt;48-25 软中断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;硬件中断&quot;&gt;&lt;a href=&quot;#硬件中断&quot; class=&quot;headerlink&quot; title=&quot;硬件中断&quot;&gt;&lt;/a&gt;硬件中断&lt;/h2&gt;&lt;p&gt;硬中断是外部设备对CPU的中断，硬中断可抢占软中断，优先级高执行较快。&lt;br&gt;硬中断的本质是接收到中断信号后，跳转到公共段代码执行do_IRQ，并切换到硬中断请求栈，执行中断回调函数。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="软中断" scheme="http://vcpu.me/tags/%E8%BD%AF%E4%B8%AD%E6%96%AD/"/>
    
      <category term="硬中断" scheme="http://vcpu.me/tags/%E7%A1%AC%E4%B8%AD%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>惊群探究</title>
    <link href="http://vcpu.me/%E6%83%8A%E7%BE%A4/"/>
    <id>http://vcpu.me/惊群/</id>
    <published>2017-06-29T04:00:00.000Z</published>
    <updated>2017-06-29T03:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="惊群"><a href="#惊群" class="headerlink" title="惊群"></a>惊群</h2><p>发生在多进程或者多线程，等待同一个socket事件，当该事件发生，这些进程或者线程都被唤醒</p>
<h2 id="发生位置"><a href="#发生位置" class="headerlink" title="发生位置"></a>发生位置</h2><p>2.6版本内核accept已经解决该问题了，但是select／poll或者epool_wait仍然存在该问题</p>
<h2 id="产生影响"><a href="#产生影响" class="headerlink" title="产生影响"></a>产生影响</h2><p>一个连接来临时，多个子进程同时被唤醒，却只有一个子进程accept成功，其余都失败，重新休眠；产生了没有必要的唤醒和上下文切换，造成性能浪费。</p>
<h2 id="惊群实例分析"><a href="#惊群实例分析" class="headerlink" title="惊群实例分析"></a>惊群实例分析</h2><p>总体结论：accept linux内核已经解决惊群问题3.10.0-514.16.1.el7.x86_64，具体唤醒方式实现参见<a href="http://vcpu.me/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/">socket信号处理博文</a><br>select/pool和epool内核并没有支持解决惊群问题。<br>之前一直觉得epool和select使用非常平凡，为什么操作系统不直接自己解决惊群问题？应该是epool和select不仅仅使用在socket监听中，会存在需要唤醒多个进程的使用场景。</p>
<a id="more"></a>
<h3 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h3><p>实例背景：3.10.0-514.16.1.el7.x86_64内核下，在创建、绑定和监听后，创建多进程accept 建立好的fd，当一个客户端访问该服务端时候，观察进程的连接获取情况<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT  9999</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">int</span> listenfd,connfd;</div><div class="line">     <span class="keyword">pid_t</span>  childpid,childpid2;</div><div class="line">     <span class="keyword">socklen_t</span> clilen;</div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>,<span class="title">servaddr</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">     listenfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">     bzero(&amp;servaddr,<span class="keyword">sizeof</span>(servaddr));</div><div class="line">     servaddr.sin_family = AF_INET;</div><div class="line">     servaddr.sin_addr.s_addr = htonl (INADDR_ANY);</div><div class="line">     servaddr.sin_port = htons (SERV_PORT);</div><div class="line"></div><div class="line"></div><div class="line">     bind(listenfd,  (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">    listen(listenfd,<span class="number">1000</span>);</div><div class="line"></div><div class="line">     clilen = <span class="keyword">sizeof</span>(cliaddr);</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">         &#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"fork 1 is [%d],error is %m\n"</span>,connfd);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid2 = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line"></div><div class="line">         <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"fork 2 is [%d]，error is %m\n"</span>,connfd);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     sleep(<span class="number">100</span>);</div><div class="line">     <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>窗口1:编译运行例子</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]# gcc jq.c -o jq</div><div class="line">[root@localhost demo]# ./jq</div><div class="line">fork 1 is [4],error is Success</div></pre></td></tr></table></figure>
<p>窗口2：访问9999端口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# curl http://127.0.0.1:9999</div></pre></td></tr></table></figure></p>
<p>结果：在创建、绑定和监听后，创建多进程监听后，只有一个进程被唤醒接收处理fd，其它进程均在休眠阶段，在linux内核3.10.0-514.16.1.el7.x86_64版本下，多进程accept连接时候不存在惊群现象。</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>实例背景：3.10.0-514.16.1.el7.x86_64内核下，在创建、绑定和监听后，创建多进程select监听 建立好的fd，当一个客户端访问该服务端时候，多进程活动情况</p>
<p>jingqunselect.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT  8888</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">int</span> listenfd,connfd;</div><div class="line">     <span class="keyword">pid_t</span>  childpid,childpid2;</div><div class="line">     <span class="keyword">socklen_t</span> clilen;</div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>,<span class="title">servaddr</span>;</span></div><div class="line"></div><div class="line"></div><div class="line">     listenfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">     bzero(&amp;servaddr,<span class="keyword">sizeof</span>(servaddr));</div><div class="line">     servaddr.sin_family = AF_INET;</div><div class="line">     servaddr.sin_addr.s_addr = htonl (INADDR_ANY);</div><div class="line">     servaddr.sin_port = htons (SERV_PORT);</div><div class="line"></div><div class="line"></div><div class="line">     bind(listenfd,  (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">    listen(listenfd,<span class="number">1000</span>);</div><div class="line"></div><div class="line">     clilen = <span class="keyword">sizeof</span>(cliaddr);</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">int</span> maxsock = listenfd+<span class="number">1</span>;</div><div class="line">         fd_set fdsr;</div><div class="line">         FD_ZERO(&amp;fdsr);</div><div class="line">        FD_SET(listenfd, &amp;fdsr);</div><div class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line">         tv.tv_sec = <span class="number">30</span>;</div><div class="line">         tv.tv_usec = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>   ret = select(maxsock, &amp;fdsr,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;tv);</div><div class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d]child err 1 \n"</span>,getpid());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"time out\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] rcv singal \n"</span>,getpid());</div><div class="line">             <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"[%d] [%d],error is %m\n"</span>,getpid(),connfd);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span>( (childpid2 = fork()) == <span class="number">0</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">int</span> maxsock = listenfd+<span class="number">1</span>;</div><div class="line">         fd_set fdsr;</div><div class="line">         FD_ZERO(&amp;fdsr);</div><div class="line">         FD_SET(listenfd, &amp;fdsr);</div><div class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line">         tv.tv_sec = <span class="number">30</span>;</div><div class="line">         tv.tv_usec = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> ret = select(maxsock, &amp;fdsr,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;tv);</div><div class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d]child 2 err\n"</span>,getpid());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"time out\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] rcv singal \n"</span>,getpid());</div><div class="line">             <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">             connfd = accept(listenfd,(struct sockaddr *) &amp;cliaddr,&amp;clilen);</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"[%d] [%d],error is %m\n"</span>,getpid(),connfd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     sleep(<span class="number">100</span>);</div><div class="line">     <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>窗口1:编译运行上述代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]# gcc jingqunselect.c -o jqselect</div><div class="line">[root@localhost demo]#</div><div class="line">[root@localhost demo]# ./jqselect</div><div class="line">[23954] rcv singal</div><div class="line">[23955]rcv singal</div><div class="line">[23954] [4],error is Success</div></pre></td></tr></table></figure></p>
<p>窗口2:[root@localhost ~]# curl <a href="http://127.0.0.1:8888" target="_blank" rel="external">http://127.0.0.1:8888</a><br>结论：有连接建立信号时候两个监听进程均被唤醒，也就是存在惊群问题。</p>
<h3 id="epool"><a href="#epool" class="headerlink" title="epool"></a>epool</h3><p>实例背景：3.10.0-514.16.1.el7.x86_64内核下，在创建、绑定和监听后，创建10个子进程epool监听 建立好的fd，当一个客户端访问该服务端时候，多进程活动情况<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]<span class="meta"># cat epjq.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_NUM 10</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">create_and_bind</span> <span class="params">(<span class="keyword">char</span> *port)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></div><div class="line">    serveraddr.sin_family = AF_INET;</div><div class="line">    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">    serveraddr.sin_port = htons(atoi(port));</div><div class="line">    bind(fd, (struct sockaddr*)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> flags, s;</div><div class="line"></div><div class="line">    flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flags |= O_NONBLOCK;</div><div class="line">    s = fcntl (sfd, F_SETFL, flags);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sfd, s;</div><div class="line">    <span class="keyword">int</span> efd;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></div><div class="line"></div><div class="line">    sfd = create_and_bind(<span class="string">"8888"</span>);</div><div class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = make_socket_non_blocking (sfd);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = listen(sfd, SOMAXCONN);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    efd = epoll_create(MAXEVENTS);</div><div class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_create"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    event.data.fd = sfd;</div><div class="line">    <span class="comment">//event.events = EPOLLIN | EPOLLET;</span></div><div class="line">    event.events = EPOLLIN;</div><div class="line">    s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &amp;event);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_ctl"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Buffer where events are returned */</span></div><div class="line">    events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span> event);</div><div class="line">            <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; PROCESS_NUM; k++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> pid = fork();</div><div class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="comment">/* The event loop */</span></div><div class="line">            <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> n, i;</div><div class="line">                n = epoll_wait(efd, events, MAXEVENTS, <span class="number">-1</span>);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"process %d return from epoll_wait!\n"</span>, getpid());</div><div class="line">                                       <span class="comment">/* sleep here is very important!*/</span></div><div class="line">                sleep(<span class="number">2</span>);</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp;                                    EPOLLIN)))</div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">/* An error has occured on this fd, or the socket is not</span></div><div class="line">                        ready for reading (why were we notified then?) */</div><div class="line">                        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);</div><div class="line">                        close (events[i].data.fd);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd)</div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">/* We have a notification on the listening socket, which</span></div><div class="line">                        means one or more incoming connections. */</div><div class="line">                        struct sockaddr in_addr;</div><div class="line">                        <span class="keyword">socklen_t</span> in_len;</div><div class="line">                        <span class="keyword">int</span> infd;</div><div class="line">                        <span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];</div><div class="line"></div><div class="line">                        in_len = <span class="keyword">sizeof</span> in_addr;</div><div class="line">                        infd = accept(sfd, &amp;in_addr, &amp;in_len);</div><div class="line">                        <span class="keyword">if</span> (infd == <span class="number">-1</span>)</div><div class="line">                        &#123;</div><div class="line">                            <span class="built_in">printf</span>(<span class="string">"process %d accept failed!\n"</span>, getpid());</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"process %d accept successed!\n"</span>, getpid());</div><div class="line"></div><div class="line">                        <span class="comment">/* Make the incoming socket non-blocking and add it to the</span></div><div class="line">                        list of fds to monitor. */</div><div class="line">                        close(infd);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line">    wait(&amp;status);</div><div class="line">    <span class="built_in">free</span> (events);</div><div class="line">    close (sfd);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>窗口1:编译运行epooldemo<br>[root@localhost demo]# ./epjq<br>process 24197 return from epoll_wait!<br>process 24198 return from epoll_wait!<br>process 24196 return from epoll_wait!<br>process 24195 return from epoll_wait!<br>process 24194 return from epoll_wait!<br>process 24193 return from epoll_wait!<br>process 24192 return from epoll_wait!<br>process 24191 return from epoll_wait!<br>process 24190 return from epoll_wait!<br>process 24189 return from epoll_wait!<br>process 24193 accept successed!<br>process 24194 accept failed!<br>process 24197 accept failed!<br>process 24195 accept failed!<br>process 24192 accept failed!<br>process 24191 accept failed!<br>process 24196 accept failed!<br>process 24198 accept failed!<br>process 24189 accept failed!<br>process 24190 accept failed!</p>
<p>窗口2:[root@localhost ~]# curl <a href="http://127.0.0.1:8888" target="_blank" rel="external">http://127.0.0.1:8888</a></p>
<p>结论:epoll_wait监听事件时候没有解决惊群问题；所有监听进程均会被打扰惊醒，进行上下文切换后然后进入睡眠。</p>
<h3 id="how-to-slove"><a href="#how-to-slove" class="headerlink" title="how to slove ?"></a>how to slove ?</h3><p>多进程需要从某一个端口获取连接，为了高性能我们摒弃直接accept而根据具体使用场景选用epool／poll／select等多socket管控机制，这种管控机制会带来惊群问题（具体内容上述实验已经表达）。<br>目前标准解决方案有两种：</p>
<blockquote>
<p>1.锁机制（见后文详细说明）<br>2.复用端口</p>
<blockquote>
<p>kernel 3.9增加了SO_REUSEPORT socket option，该选项允许服务端socket复用端口，通过hash机制将连接分配客户端到具体的进程；而这一切都是内核在处理。</p>
</blockquote>
</blockquote>
<p>实例背景：3.10.0-514.16.1.el7.x86_64内核，fork多个进程，通过设置SO_REUSEPORT标记，多进程一起监听端口8888，具体实验demo程序如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_NUM 10</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">create_and_bind</span> <span class="params">(<span class="keyword">char</span> *port)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> optval = <span class="number">1</span>;</div><div class="line">    setsockopt(fd,SOL_SOCKET,SO_REUSEPORT,&amp;optval,<span class="keyword">sizeof</span>(optval));</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></div><div class="line">    serveraddr.sin_family = AF_INET;</div><div class="line">    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">    serveraddr.sin_port = htons(atoi(port));</div><div class="line">    bind(fd, (struct sockaddr*)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</div><div class="line">    <span class="keyword">return</span> fd;</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> flags, s;</div><div class="line"></div><div class="line">    flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flags |= O_NONBLOCK;</div><div class="line">    s = fcntl (sfd, F_SETFL, flags);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"fcntl"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">socket_proc</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sfd, s;</div><div class="line">    <span class="keyword">int</span> efd;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></div><div class="line"></div><div class="line">    sfd = create_and_bind(<span class="string">"8888"</span>);</div><div class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = make_socket_non_blocking (sfd);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line"></div><div class="line">    s = listen(sfd, SOMAXCONN);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror (<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">abort</span> ();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    efd = epoll_create(MAXEVENTS);</div><div class="line">    <span class="keyword">if</span> (efd == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_create"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    event.data.fd = sfd;</div><div class="line">    <span class="comment">//event.events = EPOLLIN | EPOLLET;</span></div><div class="line">    event.events = EPOLLIN;</div><div class="line">    s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &amp;event);</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"epoll_ctl"</span>);</div><div class="line">        <span class="built_in">abort</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Buffer where events are returned */</span></div><div class="line">    events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span> event);</div><div class="line"></div><div class="line">	  <span class="comment">/* The event loop */</span></div><div class="line">	  <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">	  &#123;</div><div class="line">	      <span class="keyword">int</span> n, i;</div><div class="line">	      n = epoll_wait(efd, events, MAXEVENTS, <span class="number">-1</span>);</div><div class="line">	      <span class="built_in">printf</span>(<span class="string">"process %d return from epoll_wait!\n"</span>, getpid());</div><div class="line">	                             <span class="comment">/* sleep here is very important!*/</span></div><div class="line">	    <span class="comment">//  sleep(2);</span></div><div class="line">	</div><div class="line">	      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">	      &#123;</div><div class="line">	          <span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp; EPOLLIN)))</div><div class="line">	          &#123;</div><div class="line">	              <span class="comment">/* An error has occured on this fd, or the socket is not</span></div><div class="line">	              ready for reading (why were we notified then?) */</div><div class="line">	              <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);</div><div class="line">	              close (events[i].data.fd);</div><div class="line">	              <span class="keyword">continue</span>;</div><div class="line">	          &#125;</div><div class="line">	          <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd)</div><div class="line">	          &#123;</div><div class="line">	              <span class="comment">/* We have a notification on the listening socket, which</span></div><div class="line">	              means one or more incoming connections. */</div><div class="line">	              struct sockaddr in_addr;</div><div class="line">	              <span class="keyword">socklen_t</span> in_len;</div><div class="line">	              <span class="keyword">int</span> infd;</div><div class="line">	              <span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];</div><div class="line">	</div><div class="line">	              in_len = <span class="keyword">sizeof</span> in_addr;</div><div class="line">	              infd = accept(sfd, &amp;in_addr, &amp;in_len);</div><div class="line">	              <span class="keyword">if</span> (infd == <span class="number">-1</span>)</div><div class="line">	              &#123;</div><div class="line">	                  <span class="built_in">printf</span>(<span class="string">"process %d accept failed!\n"</span>, getpid());</div><div class="line">	                  <span class="keyword">break</span>;</div><div class="line">	              &#125;</div><div class="line">	              <span class="built_in">printf</span>(<span class="string">"process %d accept successed!\n"</span>, getpid());</div><div class="line">	</div><div class="line">	              <span class="comment">/* Make the incoming socket non-blocking and add it to the</span></div><div class="line">	              list of fds to monitor. */</div><div class="line">	              close(infd);</div><div class="line">	          &#125;</div><div class="line">	      &#125;</div><div class="line">	  &#125;</div><div class="line">    <span class="built_in">free</span> (events);</div><div class="line">    close (sfd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span></span></div><div class="line"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">     <span class="keyword">int</span> k;</div><div class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; PROCESS_NUM; k++)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> pid = fork();</div><div class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            socket_proc();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     <span class="keyword">int</span> status;</div><div class="line">    wait(&amp;status);</div><div class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost demo]#</div><div class="line">[root@localhost demo]# gcc epjqreuseport.c -o e.out</div><div class="line">[root@localhost demo]# ./e.out</div><div class="line">process 31071 return from epoll_wait!</div><div class="line">process 31071 accept successed!</div><div class="line">process 31075 return from epoll_wait!</div><div class="line">process 31075 accept successed!</div></pre></td></tr></table></figure></p>
<p>总结：SO_REUSEPORT允许多进程共同bind同一个端口，内核会按照一定机制分配访问连接到不同的进程</p>
<h3 id="nginx采用epool模型，怎么解决惊群？"><a href="#nginx采用epool模型，怎么解决惊群？" class="headerlink" title="nginx采用epool模型，怎么解决惊群？"></a>nginx采用epool模型，怎么解决惊群？</h3><blockquote>
<p>如果进程并没有处于过载状态，那么就会去争用锁，当然，实际上是争用监听套接口的监控权.</p>
<ul>
<li>争锁成功就会把所有监听套接口加入到自身的事件监控机制里（如果原本不在）</li>
<li>争锁失败就会把监听套接口从自身的事件监控机制里删除（如果原本在）</li>
</ul>
<p>争抢成功的进程，可以调用epoll_ctl把所有要监听的端口加入该进程的epool事件中，然后epool_wait阻塞及时获取客户端的新建tcp事件，如果获取到相应事件，该进程调用accept正式建立建立连接；然后释放锁。当锁被释放后所有进程可以共同争抢锁了。</p>
<p>也就是说，因为锁的原因，同一时间只能有一个进程拥有监听端口的监控权利（将监听端口放入自己epool中中控制并且调用epoolwait监控新建事件）。这种机制保障了不会有多进程共同拥有套接口的监控权，从而避免了惊群问题。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;惊群&quot;&gt;&lt;a href=&quot;#惊群&quot; class=&quot;headerlink&quot; title=&quot;惊群&quot;&gt;&lt;/a&gt;惊群&lt;/h2&gt;&lt;p&gt;发生在多进程或者多线程，等待同一个socket事件，当该事件发生，这些进程或者线程都被唤醒&lt;/p&gt;
&lt;h2 id=&quot;发生位置&quot;&gt;&lt;a href=&quot;#发生位置&quot; class=&quot;headerlink&quot; title=&quot;发生位置&quot;&gt;&lt;/a&gt;发生位置&lt;/h2&gt;&lt;p&gt;2.6版本内核accept已经解决该问题了，但是select／poll或者epool_wait仍然存在该问题&lt;/p&gt;
&lt;h2 id=&quot;产生影响&quot;&gt;&lt;a href=&quot;#产生影响&quot; class=&quot;headerlink&quot; title=&quot;产生影响&quot;&gt;&lt;/a&gt;产生影响&lt;/h2&gt;&lt;p&gt;一个连接来临时，多个子进程同时被唤醒，却只有一个子进程accept成功，其余都失败，重新休眠；产生了没有必要的唤醒和上下文切换，造成性能浪费。&lt;/p&gt;
&lt;h2 id=&quot;惊群实例分析&quot;&gt;&lt;a href=&quot;#惊群实例分析&quot; class=&quot;headerlink&quot; title=&quot;惊群实例分析&quot;&gt;&lt;/a&gt;惊群实例分析&lt;/h2&gt;&lt;p&gt;总体结论：accept linux内核已经解决惊群问题3.10.0-514.16.1.el7.x86_64，具体唤醒方式实现参见&lt;a href=&quot;http://vcpu.me/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/&quot;&gt;socket信号处理博文&lt;/a&gt;&lt;br&gt;select/pool和epool内核并没有支持解决惊群问题。&lt;br&gt;之前一直觉得epool和select使用非常平凡，为什么操作系统不直接自己解决惊群问题？应该是epool和select不仅仅使用在socket监听中，会存在需要唤醒多个进程的使用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="nginx" scheme="http://vcpu.me/tags/nginx/"/>
    
      <category term="惊群" scheme="http://vcpu.me/tags/%E6%83%8A%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>epool基本用法</title>
    <link href="http://vcpu.me/epool/"/>
    <id>http://vcpu.me/epool/</id>
    <published>2017-06-28T04:00:00.000Z</published>
    <updated>2017-07-04T03:23:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="epool基本概念"><a href="#epool基本概念" class="headerlink" title="epool基本概念"></a>epool基本概念</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>改进的pool，一种I/O多路复用技术，可管理大批量文件描述符。</p>
<h3 id="工作原理？"><a href="#工作原理？" class="headerlink" title="工作原理？"></a>工作原理？</h3><blockquote>
<p>内核中，一切皆文件，epoll向内核注册一个文件系统，用于存储要管理的文件描述符号。调用epoll_create时，会在虚拟文件系统中创建一个file节点服务epool同时也会创建就绪事件list链表。<br>操作系统启动后，会开辟出自己的高速cache，socket问价描述符会以红黑树存入cache，方便查找、插入、删除。<br>    epool_ctl，把socket放到epool文件系统里file对应的红黑树，也会注册一个回调函数，文件描述符有信号后，会调用该组册函数，内核把网卡数据copy到内核中把socket插入就绪列表中。<br>    epoll_wait调用时候，看一眼就绪列表，所以效率很高。监控百万描述符，但是准备就绪fd却很少。</p>
</blockquote>
<a id="more"></a>
<h3 id="适用场景？"><a href="#适用场景？" class="headerlink" title="适用场景？"></a>适用场景？</h3><p>非常适用大量并发连接中只有少量活跃连接情况，且在该情况下CPU适用率很低。</p>
<h3 id="可能缺点？"><a href="#可能缺点？" class="headerlink" title="可能缺点？"></a>可能缺点？</h3><p>所有socket基本都是活跃的，比如在一个高速的LAN环境，使用epool可能会比select／pool效率低</p>
<h3 id="分为LT和ET"><a href="#分为LT和ET" class="headerlink" title="分为LT和ET"></a>分为LT和ET</h3><p>LT和ET作用在epool_wait过程中，LT模式下，只要一个文件描述符没有处理完，后续再次调用epool_wait时也会返回。实现过程为，内核会把socket事件插入就绪链表，epool_wait调用会被把就绪的文件描述符拷入用户态，清空就绪链表，如果是ET则额外检测如果存在没有处理文件描述符，则将再次放入就绪列表中。</p>
<h2 id="epool例子"><a href="#epool例子" class="headerlink" title="epool例子"></a>epool例子</h2><h3 id="epoll-create函数"><a href="#epoll-create函数" class="headerlink" title="epoll_create函数"></a>epoll_create函数</h3><p>用途：创建一个epool事件管理并返回描述符号<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数：size 最大fd数<br>返回值：epool使用的文件描述符</p>
<ul>
<li>-1 失败</li>
<li>>= 0 成功</li>
</ul>
<h3 id="epoll-ctl函数"><a href="#epoll-ctl函数" class="headerlink" title="epoll_ctl函数"></a>epoll_ctl函数</h3><p>用途：控制epoll事件，添加修改删除事件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数：</p>
<blockquote>
<p>epfd:epoll_create的返回值<br>op:要进行的操作例如注册事件，可能的取值EPOLL_CTL_ADD 注册、EPOLL_CTL_MOD 修 改、EPOLL_CTL_DEL 删除<br>fd:要在epool事件管理上加入删除或者修改的文件描述符<br>event:event.data.fd 要处理的文件描述符<br>event:event.events = EPOLLIN|EPOLLET;<br>EPOLLIN ：表示对应的文件描述符可以读；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET：边缘触发；</p>
</blockquote>
<p>返回值：成功返回0，失败返回-1<br>    When successful, epoll_ctl() returns zero.  When an error occurs, epoll_ctl() returns -1 and errno is set appropriately</p>
<h3 id="epool-wait函数"><a href="#epool-wait函数" class="headerlink" title="epool_wait函数"></a>epool_wait函数</h3><p>用途：返回IO事件就绪的fd<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></div><div class="line">                      <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout);</div></pre></td></tr></table></figure></p>
<p>参数：<br>epfd：epoll_create的返回值<br>events：取出内核结果的事件数组<br>maxevents：要处理的事件数<br>timeout：等待IO发生超时值<br>            -1 阻塞直到有事件<br>            0 非阻塞</p>
<pre><code>&gt;0： 阻塞时间，单位毫秒
</code></pre><h3 id="epoool函数实例"><a href="#epoool函数实例" class="headerlink" title="epoool函数实例"></a>epoool函数实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;sys/types.h&gt;       /* basic system data types */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;sys/socket.h&gt;      /* basic socket definitions */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;netinet/in.h&gt;      /* sockaddr_in&#123;&#125; and other Internet defns */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;arpa/inet.h&gt;       /* inet(3) functions */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt; /* epoll function */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;     /* nonblocking */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt; /*setrlimit */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEPOLLSIZE 10000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 10240</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> connfd)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFD, <span class="number">0</span>)|O_NONBLOCK) == <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>  servPort = <span class="number">8080</span>;</div><div class="line">    <span class="keyword">int</span> listenq = <span class="number">1024</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> listenfd, connfd, kdpfd, nfds, n, nread, curfds,acceptCount = <span class="number">0</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>, <span class="title">cliaddr</span>;</span></div><div class="line">    <span class="keyword">socklen_t</span> socklen = <span class="keyword">sizeof</span>(struct sockaddr_in);</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">MAXEPOLLSIZE</span>];</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">rt</span>;</span></div><div class="line">    <span class="keyword">char</span> buf[MAXLINE];</div><div class="line"></div><div class="line">    <span class="comment">/* 设置每个进程允许打开的最大文件数 */</span></div><div class="line">    rt.rlim_max = rt.rlim_cur = MAXEPOLLSIZE;</div><div class="line">    <span class="keyword">if</span> (setrlimit(RLIMIT_NOFILE, &amp;rt) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"setrlimit error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">    servaddr.sin_family = AF_INET;</div><div class="line">    servaddr.sin_addr.s_addr = htonl (INADDR_ANY);</div><div class="line">    servaddr.sin_port = htons (servPort);</div><div class="line"></div><div class="line">    listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (listenfd == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"can't create socket file"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> opt = <span class="number">1</span>;</div><div class="line">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setnonblocking(listenfd) &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"setnonblock error"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bind(listenfd, (struct sockaddr *) &amp;servaddr, <span class="keyword">sizeof</span>(struct sockaddr)) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"bind error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (listen(listenfd, listenq) == <span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"listen error"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* 创建 epoll 句柄，把监听 socket 加入到 epoll 集合里 */</span></div><div class="line">    kdpfd = epoll_create(MAXEPOLLSIZE);</div><div class="line">    ev.events = EPOLLIN | EPOLLET;</div><div class="line">    ev.data.fd = listenfd;</div><div class="line">    <span class="keyword">if</span> (epoll_ctl(kdpfd, EPOLL_CTL_ADD, listenfd, &amp;ev) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"epoll set insertion error: fd=%d\n"</span>, listenfd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    curfds = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"epollserver startup,port %d, max connection is %d, backlog is %d\n"</span>, servPort, MAXEPOLLSIZE, listenq);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="comment">/* 等待有事件发生 */</span></div><div class="line">        nfds = epoll_wait(kdpfd, events, curfds, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span> (nfds == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"epoll_wait"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 处理所有事件 */</span></div><div class="line">        <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; nfds; ++n)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (events[n].data.fd == listenfd)</div><div class="line">            &#123;</div><div class="line">                connfd = accept(listenfd, (struct sockaddr *)&amp;cliaddr,&amp;socklen);</div><div class="line">                <span class="keyword">if</span> (connfd &lt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"accept error"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="built_in">sprintf</span>(buf, <span class="string">"accept form %s:%d\n"</span>, inet_ntoa(cliaddr.sin_addr), cliaddr.sin_port);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d:%s"</span>, ++acceptCount, buf);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (curfds &gt;= MAXEPOLLSIZE) &#123;</div><div class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many connection, more than %d\n"</span>, MAXEPOLLSIZE);</div><div class="line">                    close(connfd);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (setnonblocking(connfd) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    perror(<span class="string">"setnonblocking error"</span>);</div><div class="line">                &#125;</div><div class="line">                ev.events = EPOLLIN | EPOLLET;</div><div class="line">                ev.data.fd = connfd;</div><div class="line">                <span class="keyword">if</span> (epoll_ctl(kdpfd, EPOLL_CTL_ADD, connfd, &amp;ev) &lt; <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"add socket '%d' to epoll failed: %s\n"</span>, connfd, strerror(errno));</div><div class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">                &#125;</div><div class="line">                curfds++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 处理客户端请求</span></div><div class="line">            <span class="keyword">if</span> (handle(events[n].data.fd) &lt; <span class="number">0</span>) &#123;</div><div class="line">                epoll_ctl(kdpfd, EPOLL_CTL_DEL, events[n].data.fd,&amp;ev);</div><div class="line">                curfds--;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    close(listenfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> connfd)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> nread;</div><div class="line">    <span class="keyword">char</span> buf[MAXLINE];</div><div class="line">    nread = read(connfd, buf, MAXLINE);<span class="comment">//读取客户端socket流</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nread == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"client close the connection\n"</span>);</div><div class="line">        close(connfd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (nread &lt; <span class="number">0</span>) &#123;</div><div class="line">        perror(<span class="string">"read error"</span>);</div><div class="line">        close(connfd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"recv:%s\n"</span>,buf);</div><div class="line">    write(connfd, buf, nread);<span class="comment">//响应客户端</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"send:%s\n"</span>,buf);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;epool基本概念&quot;&gt;&lt;a href=&quot;#epool基本概念&quot; class=&quot;headerlink&quot; title=&quot;epool基本概念&quot;&gt;&lt;/a&gt;epool基本概念&lt;/h2&gt;&lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h3&gt;&lt;p&gt;改进的pool，一种I/O多路复用技术，可管理大批量文件描述符。&lt;/p&gt;
&lt;h3 id=&quot;工作原理？&quot;&gt;&lt;a href=&quot;#工作原理？&quot; class=&quot;headerlink&quot; title=&quot;工作原理？&quot;&gt;&lt;/a&gt;工作原理？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;内核中，一切皆文件，epoll向内核注册一个文件系统，用于存储要管理的文件描述符号。调用epoll_create时，会在虚拟文件系统中创建一个file节点服务epool同时也会创建就绪事件list链表。&lt;br&gt;操作系统启动后，会开辟出自己的高速cache，socket问价描述符会以红黑树存入cache，方便查找、插入、删除。&lt;br&gt;    epool_ctl，把socket放到epool文件系统里file对应的红黑树，也会注册一个回调函数，文件描述符有信号后，会调用该组册函数，内核把网卡数据copy到内核中把socket插入就绪列表中。&lt;br&gt;    epoll_wait调用时候，看一眼就绪列表，所以效率很高。监控百万描述符，但是准备就绪fd却很少。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="epoll" scheme="http://vcpu.me/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>socket信号处理</title>
    <link href="http://vcpu.me/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    <id>http://vcpu.me/socket信号处理/</id>
    <published>2017-06-26T11:10:34.000Z</published>
    <updated>2017-06-26T09:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="socket-I-O事件处理"><a href="#socket-I-O事件处理" class="headerlink" title="socket I/O事件处理"></a>socket I/O事件处理</h2><p>以TCP socket为例<br>kernel: 3.10.0-514.16.1.el7.x86_64</p>
<h3 id="socket-IO处理函数"><a href="#socket-IO处理函数" class="headerlink" title="socket IO处理函数"></a>socket IO处理函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> &#123;</span></div><div class="line">	...</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> __<span class="title">rcu</span> *<span class="title">sk_wq</span>;</span> <span class="comment">/*等待队列和异步队列*/</span></div><div class="line">	...</div><div class="line">	<span class="keyword">void</span>			(*sk_state_change)(struct sock *sk);</div><div class="line">	<span class="keyword">void</span>			(*sk_data_ready)(struct sock *sk, <span class="keyword">int</span> bytes);</div><div class="line">	<span class="keyword">void</span>			(*sk_write_space)(struct sock *sk);</div><div class="line">	<span class="keyword">void</span>			(*sk_error_report)(struct sock *sk);</div><div class="line">	<span class="keyword">int</span>			(*sk_backlog_rcv)(struct sock *sk);</div><div class="line">	...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p>sk_wq</p>
<blockquote>
<p>含有等待队列用来睡眠唤醒程序使用，异步队列异步socket使用</p>
</blockquote>
</li>
<li><p>sk_state_change </p>
<blockquote>
<p>从SYN_SEND或者SYN_RECV到ES状态，从ES到CLOSE_WAIT状态，当协议栈遇到这些事件时候会调用</p>
</blockquote>
</li>
<li><p>sk_data_ready</p>
</li>
<li><p>sk_write_space</p>
<blockquote>
<p>sock有数据可读和可写时候调用</p>
</blockquote>
</li>
<li><p>sk_error_report</p>
<blockquote>
<p>sock上存在错误时调用，比如收到RST包</p>
<a id="more"></a>
</blockquote>
</li>
</ul>
<h3 id="处理函数初始化"><a href="#处理函数初始化" class="headerlink" title="处理函数初始化"></a>处理函数初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">----------------START-------------------------</div><div class="line"> 0xffffffff81557ed0 : sock_init_data+0x0/0x220 [kernel]</div><div class="line"> 0xffffffff815ec9f4 : inet_create+0x154/0x360 [kernel]</div><div class="line"> 0xffffffff81555200 : __sock_create+0x110/0x260 [kernel]</div><div class="line"> 0xffffffff81556521 : SyS_socket+0x61/0xf0 [kernel]</div><div class="line"> 0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]</div><div class="line">----------------END-------------------------</div></pre></td></tr></table></figure>
<p>步骤1:通用初始化<br>socket-&gt;SyS_socket-&gt;__sock_create-&gt;inet_create-&gt;sock_init_data</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sock_init_data：</div><div class="line"></div><div class="line">sk-&gt;sk_state_change	=	sock_def_wakeup;</div><div class="line">sk-&gt;sk_data_ready	=	sock_def_readable;</div><div class="line">sk-&gt;sk_write_space	=	sock_def_write_space;</div><div class="line">sk-&gt;sk_error_report	=	sock_def_error_report;</div><div class="line">sk-&gt;sk_destruct		=	sock_def_destruct;</div></pre></td></tr></table></figure>
<p>步骤2:对于TCP socket，特有更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">0xffffffff815be170 : tcp_init_sock+0x0/0x200 [kernel]</div><div class="line">0xffffffff815d4212 : tcp_v4_init_sock+0x12/0x30 [kernel]</div><div class="line">0xffffffff815eca71 : inet_create+0x1d1/0x360 [kernel]</div><div class="line">0xffffffff81555200 : __sock_create+0x110/0x260 [kernel]</div><div class="line">0xffffffff81556521 : SyS_socket+0x61/0xf0 [kernel]</div><div class="line">0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]</div></pre></td></tr></table></figure></p>
<p>inet_create-&gt;tcp_v4_init_sock-&gt;tcp_init_sock<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tcp_init_sock:</div><div class="line">sk-&gt;sk_write_space = sk_stream_write_space;</div></pre></td></tr></table></figure></p>
<h2 id="sock-def-wakeup"><a href="#sock-def-wakeup" class="headerlink" title="sock_def_wakeup"></a>sock_def_wakeup</h2><h3 id="信号触发时机"><a href="#信号触发时机" class="headerlink" title="信号触发时机"></a>信号触发时机</h3><blockquote>
<p>无论是作为客户端还是服务端<br>socket TCP协议栈进入到ES或者CLOSE_WAIT时候，会触发sock_def_wakeup通知用户态进程TCP状态变更<br>具体来讲：sock_def_wakeup可以唤醒connect或者accept，或者因收到结束喜欢fin而正常结束<br>send/recv返回值为0</p>
</blockquote>
<h3 id="作为客户端主动连接对方获取资源"><a href="#作为客户端主动连接对方获取资源" class="headerlink" title="作为客户端主动连接对方获取资源"></a>作为客户端主动连接对方获取资源</h3><p>访问方式：curl -v <a href="http://180.97.33.107" target="_blank" rel="external">http://180.97.33.107</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost socketdemo]# curl -v http://180.97.33.107</div><div class="line">* About to connect() to 180.97.33.107 port 80 (#0)</div><div class="line">*   Trying 180.97.33.107...</div><div class="line">* Connected to 180.97.33.107 (180.97.33.107) port 80 (#0)</div><div class="line"><span class="meta">&gt;</span> GET / HTTP/1.1</div><div class="line"><span class="meta">&gt;</span> User-Agent: curl/7.29.0</div><div class="line"><span class="meta">&gt;</span> Host: 180.97.33.107</div><div class="line"><span class="meta">&gt;</span> Accept: */*</div><div class="line"><span class="meta">&gt;</span></div><div class="line">&lt; HTTP/1.1 200 OK</div><div class="line">&lt; Server: bfe/1.0.8.18</div><div class="line">&lt; Date: Fri, 23 Jun 2017 10:02:40 GMT</div><div class="line">&lt; Content-Type: text/html</div><div class="line">&lt; Content-Length: 2381</div><div class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:28:20 GMT</div><div class="line">&lt; Connection: Keep-Alive</div><div class="line">&lt; ETag: "588604f4-94d"</div><div class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</div><div class="line">&lt; Pragma: no-cache</div><div class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</div><div class="line">&lt; Accept-Ranges: bytes</div></pre></td></tr></table></figure>
<p>systemtap探测sock_def_wakeup被调用情况，并打出调用栈，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">调用情况：收到对端回复synack后，发出ack时候客户端connect结束，从SYN_SEND跳转到ES状态唤醒用户态进程，此时连接已经成功，可以发送数据了</div><div class="line">sock_def_wakeup:[2017/6/23,18:00:59]local=10.0.2.15:60162,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]</div><div class="line"> 0xffffffff815cbc09 : tcp_finish_connect+0xc9/0x120 [kernel]</div><div class="line"> 0xffffffff815cc297 : tcp_rcv_state_process+0x637/0xf20 [kernel]</div><div class="line"> 0xffffffff815d5ffb : tcp_v4_do_rcv+0x17b/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00472fc [e1000]</div><div class="line">WARNING: Missing unwind data for a module, rerun with 'stap -d e1000'</div><div class="line"></div><div class="line">情况2:访问的服务端主动关闭连接，则客户端从ES进入CLOSE_WAIT,通知用户态进程</div><div class="line">sock_def_wakeup:[2017/6/23,18:00:59]local=10.0.2.15:60162,remote=180.97.33.107:80 state:CLOSE_WAIT</div><div class="line"> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]</div><div class="line"> 0xffffffff815c5ca9 : tcp_fin+0x169/0x1e0 [kernel]</div><div class="line"> 0xffffffff815c84f8 : tcp_data_queue+0x7f8/0xdd0 [kernel]</div><div class="line"> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00472fc [e1000]</div></pre></td></tr></table></figure>
<h3 id="作为服务端"><a href="#作为服务端" class="headerlink" title="作为服务端"></a>作为服务端</h3><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>作为服务端堵塞在accept时，收到客户端请求，三次握手建立完成后，服务端状态进入ES状态，会调用sock_def_wakeup通知用户态进程<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sock_def_wakeup:[2017/6/26,10:47:00]local=192.168.55.178:8080,remote=192.168.55.165:50536 state:ESTABLISHED</div><div class="line"> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]</div><div class="line"> 0xffffffff815cc3bf : tcp_rcv_state_process+0x75f/0xf20 [kernel]</div><div class="line"> 0xffffffff815d7dde : tcp_child_process+0x3e/0x130 [kernel]</div><div class="line"> 0xffffffff815d60d5 : tcp_v4_do_rcv+0x255/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div></pre></td></tr></table></figure></p>
<h4 id="服务端测试程序如下"><a href="#服务端测试程序如下" class="headerlink" title="服务端测试程序如下"></a>服务端测试程序如下</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//#include &lt;sys/types.h&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="comment">//#include &lt;sys/wait.h&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVPORT 8080</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CONNECTED_NO 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_sockaddr</span>,<span class="title">client_sockaddr</span>;</span></div><div class="line">    <span class="keyword">int</span> sin_size,recvbytes,flags;</div><div class="line">    <span class="keyword">int</span> sockfd,client_fd;</div><div class="line">    <span class="keyword">char</span> buf[MAXDATASIZE];</div><div class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))==<span class="number">-1</span>)&#123;</div><div class="line">        perror(<span class="string">"socket"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"socket success!,sockfd=%d\n"</span>,sockfd);</div><div class="line"></div><div class="line">    server_sockaddr.sin_family=AF_INET;</div><div class="line">    server_sockaddr.sin_port=htons(SERVPORT);</div><div class="line">    server_sockaddr.sin_addr.s_addr=INADDR_ANY;</div><div class="line">    bzero(&amp;(server_sockaddr.sin_zero),<span class="number">8</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(bind(sockfd,(struct sockaddr *)&amp;server_sockaddr,<span class="keyword">sizeof</span>(struct sockaddr))==<span class="number">-1</span>)&#123;</div><div class="line">        perror(<span class="string">"bind"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"bind success!\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(listen(sockfd,BACKLOG)==<span class="number">-1</span>)&#123;</div><div class="line">        perror(<span class="string">"listen"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listening....\n"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((flags=fcntl( sockfd, F_SETFL, <span class="number">0</span>))&lt;<span class="number">0</span>)</div><div class="line">            perror(<span class="string">"fcntl F_SETFL"</span>);</div><div class="line">    flags |= O_ASYNC;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(fcntl( sockfd, F_SETFL,flags)&lt;<span class="number">0</span>)</div><div class="line">        perror(<span class="string">"fcntl"</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        sin_size=<span class="keyword">sizeof</span>(struct sockaddr_in);</div><div class="line">        <span class="keyword">if</span>((client_fd=accept(sockfd,(struct sockaddr*)&amp;client_sockaddr,&amp;sin_size))==<span class="number">-1</span>)&#123;</div><div class="line">            perror(<span class="string">"accept"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,client_sockaddr.sin_port);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>((recvbytes=recv(client_fd,buf,MAXDATASIZE,<span class="number">0</span>))==<span class="number">-1</span>)&#123;</div><div class="line">            perror(<span class="string">"recv"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"recvbytes: %d %s \n "</span>,recvbytes,buf);</div><div class="line"></div><div class="line">        close(client_fd);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行过程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost socketdemo]# gcc server.c -o server</div><div class="line">[root@localhost socketdemo]#</div><div class="line">[root@localhost socketdemo]# ./server</div><div class="line">socket success!,sockfd=3</div><div class="line">bind success!</div><div class="line">listening....</div></pre></td></tr></table></figure></p>
<h4 id="服务端stap探测脚本"><a href="#服务端stap探测脚本" class="headerlink" title="服务端stap探测脚本"></a>服务端stap探测脚本</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]<span class="comment"># cat socketsingtal.stp</span></div><div class="line">%&#123;</div><div class="line">  <span class="comment">#include &lt;linux/tcp.h&gt;</span></div><div class="line">  <span class="comment">#include&lt;linux/rtc.h&gt;</span></div><div class="line">  <span class="comment">#include &lt;net/tcp.h&gt;</span></div><div class="line"></div><div class="line">    static const char tcp_state_array[][<span class="number">16</span>] = &#123;</div><div class="line">        <span class="string">"NULL"</span>,</div><div class="line">        <span class="string">"ESTABLISHED"</span>,</div><div class="line">        <span class="string">"SYN_SENT"</span>,</div><div class="line">        <span class="string">"SYN_RECV"</span>,</div><div class="line">        <span class="string">"FIN_WAIT1"</span>,</div><div class="line">        <span class="string">"FIN_WAIT2"</span>,</div><div class="line">        <span class="string">"TIME_WAIT"</span>,</div><div class="line">        <span class="string">"CLOSE"</span>,</div><div class="line">        <span class="string">"CLOSE_WAIT"</span>,</div><div class="line">        <span class="string">"LAST_ACK"</span>,</div><div class="line">        <span class="string">"LISTEN"</span>,</div><div class="line">        <span class="string">"CLOSING"</span></div><div class="line">    &#125;;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_short_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_full_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%d/%d/%d,%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_year+<span class="number">1900</span>, tm.tm_mon+<span class="number">1</span>, tm.tm_mday,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_lifetime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    STAP_RETVALUE = jiffies_to_msecs(tcp_time_stamp - info-&gt;estab_t);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_data:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct tcp_sock *tp = tcp_sk(sk);</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    u32 len = tp-&gt;snd_nxt - info-&gt;isn;</div><div class="line"></div><div class="line">    STAP_RETVALUE = len ? len - <span class="number">1</span> : len;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function filter_http_transtime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line"></div><div class="line">    STAP_RETVALUE = info-&gt;http_filter;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_addr:string (sk:long)</div><div class="line">&#123;</div><div class="line">    laddr = tcpmib_local_addr(sk)</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    raddr = tcpmib_remote_addr(sk)</div><div class="line">    rport = tcpmib_remote_port(sk)</div><div class="line"></div><div class="line">    local_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(laddr)), lport)</div><div class="line">    remote_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(raddr)), rport)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">sprintf</span>(<span class="string">"local=%s,remote=%s"</span>, local_addr, remote_addr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function get_socket_state:string (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[sk-&gt;sk_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_sk_sndbuf:string(sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk=(struct sock*)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE,<span class="string">"%d:%d"</span>, sk-&gt;sk_wmem_queued, sk-&gt;sk_sndbuf);</div><div class="line">%&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">function socket_state_num2str:string (<span class="keyword">state</span>:long)</div><div class="line">%&#123;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[STAP_ARG_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function sshfilter:long(sk:long)</div><div class="line">&#123;</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    <span class="keyword">if</span>(lport == <span class="number">22</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sock_def_wakeup"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sock_def_wakeup:[%s]%s state:%s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk))</div><div class="line">    print_backtrace()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行过程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# stap -g socketsingtal.stp</div></pre></td></tr></table></figure></p>
<h3 id="sock-def-wakeup状态改变事件实现分析"><a href="#sock-def-wakeup状态改变事件实现分析" class="headerlink" title="sock_def_wakeup状态改变事件实现分析"></a>sock_def_wakeup状态改变事件实现分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断等待队列释放存在进程</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">wq_has_sleeper</span><span class="params">(struct socket_wq *wq)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//同步使用，具体实现未分析</span></div><div class="line">	smp_mb();</div><div class="line">	<span class="keyword">return</span> wq &amp;&amp; waitqueue_active(&amp;wq-&gt;wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sock_def_wakeup</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	rcu_read_lock();</div><div class="line">	wq = rcu_dereference(sk-&gt;sk_wq);</div><div class="line">	<span class="comment">//如果等待队列有进程，全部唤醒</span></div><div class="line">	<span class="keyword">if</span> (wq_has_sleeper(wq))</div><div class="line">		wake_up_interruptible_all(&amp;wq-&gt;wait);</div><div class="line">	rcu_read_unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唤醒进程实现如下wake_up_interruptible_all -&gt;<strong>wake_up-&gt;</strong>wake_up_common<br>比较特殊点是，__wake_up的nr_exclusive为0时候唤醒所有进程。<br>其它说明是：nr_exclusive为1时候，是为了惊鸿设置的，只唤醒一个进程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up_interruptible_all(x)	__wake_up(x, TASK_INTERRUPTIBLE, 0, NULL)</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> __wake_up(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</div><div class="line">			<span class="keyword">int</span> nr_exclusive, <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line"></div><div class="line">	spin_lock_irqsave(&amp;q-&gt;lock, flags);</div><div class="line">	__wake_up_common(q, mode, nr_exclusive, <span class="number">0</span>, key);</div><div class="line">	spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(__wake_up);</div></pre></td></tr></table></figure></p>
<p>__wake_up_common 参数nr_exclusive为0时候，break不可能被执行<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __wake_up_common(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</div><div class="line">			<span class="keyword">int</span> nr_exclusive, <span class="keyword">int</span> wake_flags, <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">wait_queue_t</span> *curr, *next;</div><div class="line"></div><div class="line">	list_for_each_entry_safe(curr, next, &amp;q-&gt;task_list, task_list) &#123;</div><div class="line">		<span class="keyword">unsigned</span> flags = curr-&gt;flags;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (curr-&gt;func(curr, mode, wake_flags, key) &amp;&amp;</div><div class="line">				(flags &amp; WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>__wake_up_common 中curr-&gt;func是什么呢？</p>
<p>是autoremove_wake_function，将socket睡眠时候，会调用DEFINE_WAIT将autoremove_wake_function设置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFINE_WAIT_FUNC(name, function)\</span></div><div class="line">	wait_queue_t name = &#123;		\</div><div class="line">		.private	= current,		\</div><div class="line">		.func		= function,		\</div><div class="line">		.task_list	= LIST_HEAD_INIT((name).task_list),x\</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFINE_WAIT(name) DEFINE_WAIT_FUNC(name, autoremove_wake_function)</span></div></pre></td></tr></table></figure></p>
<p>autoremove_wake_function 干了什么？<br>1:default_wake_function -&gt;try_to_wake_up<br>    把进程状态设置为TASK_RUNNING，并把其插入CPU运行队列，从而唤醒睡眠进程<br>2:待进程状态唤醒后，把等待事件从等待队列中删除</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">autoremove_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ret = default_wake_function(wait, mode, sync, key);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ret)</div><div class="line">		list_del_init(&amp;wait-&gt;task_list);<span class="comment">//等待队列删除</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(autoremove_wake_function);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">default_wake_function</span><span class="params">(<span class="keyword">wait_queue_t</span> *curr, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> wake_flags,</span></span></div><div class="line">			  <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//把进程状态设置为TASK_RUNNING，并把其插入CPU运行队列，从而唤醒睡眠进程</span></div><div class="line">	<span class="keyword">return</span> try_to_wake_up(curr-&gt;<span class="keyword">private</span>, mode, wake_flags);</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(default_wake_function);</div></pre></td></tr></table></figure>
<h2 id="sock-def-readable"><a href="#sock-def-readable" class="headerlink" title="sock_def_readable"></a>sock_def_readable</h2><p>sock_def_readable调用时机，sock数据可读会调用此函数唤醒进程</p>
<p>作为服务端<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//收到syn包后</span></div><div class="line">sock_def_wakeup:[<span class="number">2017</span>/<span class="number">6</span>/<span class="number">26</span>,<span class="number">11</span>:<span class="number">52</span>:<span class="number">07</span>]local=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>,remote=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span> state:LISTEN</div><div class="line"> <span class="number">0xffffffff81558220</span> : sock_def_readable+<span class="number">0x0</span>/<span class="number">0x70</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d7eb8</span> : tcp_child_process+<span class="number">0x118</span>/<span class="number">0x130</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d60d5</span> : tcp_v4_do_rcv+<span class="number">0x255</span>/<span class="number">0x340</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d76d9</span> : tcp_v4_rcv+<span class="number">0x799</span>/<span class="number">0x9a0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1094</span> : ip_local_deliver_finish+<span class="number">0xb4</span>/<span class="number">0x1f0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1379</span> : ip_local_deliver+<span class="number">0x59</span>/<span class="number">0xd0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b0d1a</span> : ip_rcv_finish+<span class="number">0x8a</span>/<span class="number">0x350</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b16a6</span> : ip_rcv+<span class="number">0x2b6</span>/<span class="number">0x410</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815700d2</span> : __netif_receive_skb_core+<span class="number">0x582</span>/<span class="number">0x800</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81570368</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815703f0</span> : netif_receive_skb_internal+<span class="number">0x40</span>/<span class="number">0xc0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81571578</span> : napi_gro_receive+<span class="number">0xd8</span>/<span class="number">0x130</span> [kernel]</div><div class="line"> <span class="number">0xffffffffa00a72fc</span> [e1000]</div><div class="line"><span class="comment">//收到数据包后</span></div><div class="line">sock_def_wakeup:</div><div class="line">[<span class="number">2017</span>/<span class="number">6</span>/<span class="number">26</span>,<span class="number">11</span>:<span class="number">52</span>:<span class="number">07</span>]local=<span class="number">192.168</span><span class="number">.55</span><span class="number">.178</span>:<span class="number">8080</span>,remote=<span class="number">192.168</span><span class="number">.55</span><span class="number">.165</span>:<span class="number">50843</span> state:ESTABLISHED</div><div class="line"> <span class="number">0xffffffff81558220</span> : sock_def_readable+<span class="number">0x0</span>/<span class="number">0x70</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815c8197</span> : tcp_data_queue+<span class="number">0x497</span>/<span class="number">0xdd0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815cb4a7</span> : tcp_rcv_established+<span class="number">0x217</span>/<span class="number">0x760</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d5f8a</span> : tcp_v4_do_rcv+<span class="number">0x10a</span>/<span class="number">0x340</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815d76d9</span> : tcp_v4_rcv+<span class="number">0x799</span>/<span class="number">0x9a0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1094</span> : ip_local_deliver_finish+<span class="number">0xb4</span>/<span class="number">0x1f0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b1379</span> : ip_local_deliver+<span class="number">0x59</span>/<span class="number">0xd0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b0d1a</span> : ip_rcv_finish+<span class="number">0x8a</span>/<span class="number">0x350</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815b16a6</span> : ip_rcv+<span class="number">0x2b6</span>/<span class="number">0x410</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815700d2</span> : __netif_receive_skb_core+<span class="number">0x582</span>/<span class="number">0x800</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81570368</span> : __netif_receive_skb+<span class="number">0x18</span>/<span class="number">0x60</span> [kernel]</div><div class="line"> <span class="number">0xffffffff815703f0</span> : netif_receive_skb_internal+<span class="number">0x40</span>/<span class="number">0xc0</span> [kernel]</div><div class="line"> <span class="number">0xffffffff81571578</span> : napi_gro_receive+<span class="number">0xd8</span>/<span class="number">0x130</span> [kernel]</div><div class="line"> <span class="number">0xffffffffa00a72fc</span> [e1000]</div><div class="line">[root@localhost stp]#</div></pre></td></tr></table></figure></p>
<p>作为客户端<br>    收到ES状态服务端回复的数据在tcp_data_queue／tcp_rcv_established中调用<br>    具体实现后续分析。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815cb6c3 : tcp_rcv_established+0x433/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815c8197 : tcp_data_queue+0x497/0xdd0 [kernel]</div><div class="line"> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:ESTABLISHED</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815cb6c3 : tcp_rcv_established+0x433/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div><div class="line"> </div><div class="line"> 服务端主动关闭连接，作为客户端TCP状态机处于CLOSE_WAIT</div><div class="line">sock_def_wakeup:[2017/6/26,13:44:35]local=10.0.2.15:43188,remote=180.97.33.107:80 state:CLOSE_WAIT</div><div class="line"> 0xffffffff81558220 : sock_def_readable+0x0/0x70 [kernel]</div><div class="line"> 0xffffffff815c8197 : tcp_data_queue+0x497/0xdd0 [kernel]</div><div class="line"> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]</div><div class="line"> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00a72fc [e1000]</div></pre></td></tr></table></figure></p>
<h3 id="sock-def-readable-1"><a href="#sock-def-readable-1" class="headerlink" title="sock_def_readable"></a>sock_def_readable</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sock_def_readable</span><span class="params">(struct sock *sk, <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	rcu_read_lock();</div><div class="line">	wq = rcu_dereference(sk-&gt;sk_wq);</div><div class="line">	<span class="keyword">if</span> (wq_has_sleeper(wq))</div><div class="line">	<span class="comment">//阻塞队列通知</span></div><div class="line">		wake_up_interruptible_sync_poll(&amp;wq-&gt;wait, POLLIN | POLLPRI |</div><div class="line">						POLLRDNORM | POLLRDBAND);</div><div class="line">	<span class="comment">//异步队列通知</span></div><div class="line">	sk_wake_async(sk, SOCK_WAKE_WAITD, POLL_IN);</div><div class="line">	rcu_read_unlock();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> wake_up_interruptible_sync_poll(x, m)\</span></div><div class="line">	__wake_up_sync_key((x), TASK_INTERRUPTIBLE, 1, (void *) (m))</div><div class="line">	</div><div class="line"></div><div class="line"><span class="keyword">void</span> __wake_up_sync_key(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">unsigned</span> <span class="keyword">int</span> mode,</div><div class="line">			<span class="keyword">int</span> nr_exclusive, <span class="keyword">void</span> *key)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line">	<span class="keyword">int</span> wake_flags = WF_SYNC;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(!q))</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(!nr_exclusive))</div><div class="line">		wake_flags = <span class="number">0</span>;</div><div class="line"></div><div class="line">	spin_lock_irqsave(&amp;q-&gt;lock, flags);</div><div class="line">	__wake_up_common(q, mode, nr_exclusive, wake_flags, key);</div><div class="line">	spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL_GPL(__wake_up_sync_key);</div></pre></td></tr></table></figure>
<p>wake_up_interruptible_sync_poll传递的nr_exclusive为1，表示只允许唤醒一个等待进程。</p>
<h2 id="sk-stream-write-space"><a href="#sk-stream-write-space" class="headerlink" title="sk_stream_write_space"></a>sk_stream_write_space</h2><p>sk-&gt;sk_write_space的实例为sock_def_write_space()。<br>如果socket是SOCK_STREAM类型的，那么函数指针的值会更新为sk_stream_write_space()。<br>sk_stream_write_space()在TCP中的调用路径为：<br>tcp_rcv_established / tcp_rcv_state_process<br>    tcp_data_snd_check<br>        tcp_check_space<br>            tcp_new_space</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sk_stream_write_space</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span> = <span class="title">sk</span>-&gt;<span class="title">sk_socket</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	<span class="comment">//发送缓存大小，当要发送数据没有到达发送缓存的2／3 下限</span></div><div class="line">	<span class="comment">//尚未发送数据缓冲区大小数据，没有大于用户设定值sysctl_tcp_notsent_lowat时候才能触发写数据</span></div><div class="line">	<span class="comment">//针对于下限，要发送数据还不多</span></div><div class="line">	<span class="comment">//针对于上限，要发送数据已经很多的话，不变要再发了，否则会使用过多内存</span></div><div class="line">	<span class="keyword">if</span> (sk_stream_is_writeable(sk) &amp;&amp; sock) &#123;</div><div class="line">		<span class="comment">//经过sk_stream_is_writeable判别说明缓冲是足够的SOCK_NOSPACE标记清除</span></div><div class="line">		clear_bit(SOCK_NOSPACE, &amp;sock-&gt;flags);</div><div class="line"></div><div class="line">		rcu_read_lock();</div><div class="line">		wq = rcu_dereference(sk-&gt;sk_wq);</div><div class="line">		<span class="keyword">if</span> (wq_has_sleeper(wq))</div><div class="line">		<span class="comment">//唤醒等待队列一个进程</span></div><div class="line">			wake_up_interruptible_poll(&amp;wq-&gt;wait, POLLOUT |</div><div class="line">						POLLWRNORM | POLLWRBAND);</div><div class="line">		<span class="comment">//异步队列允许发送数据，通知异步队列</span></div><div class="line">		<span class="keyword">if</span> (wq &amp;&amp; wq-&gt;fasync_list &amp;&amp; !(sk-&gt;sk_shutdown &amp; SEND_SHUTDOWN))</div><div class="line">			sock_wake_async(sock, SOCK_WAKE_SPACE, POLL_OUT);</div><div class="line">		rcu_read_unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;socket-I-O事件处理&quot;&gt;&lt;a href=&quot;#socket-I-O事件处理&quot; class=&quot;headerlink&quot; title=&quot;socket I/O事件处理&quot;&gt;&lt;/a&gt;socket I/O事件处理&lt;/h2&gt;&lt;p&gt;以TCP socket为例&lt;br&gt;kernel: 3.10.0-514.16.1.el7.x86_64&lt;/p&gt;
&lt;h3 id=&quot;socket-IO处理函数&quot;&gt;&lt;a href=&quot;#socket-IO处理函数&quot; class=&quot;headerlink&quot; title=&quot;socket IO处理函数&quot;&gt;&lt;/a&gt;socket IO处理函数&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sock&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;socket_wq&lt;/span&gt; __&lt;span class=&quot;title&quot;&gt;rcu&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;sk_wq&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*等待队列和异步队列*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_state_change)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_data_ready)(struct sock *sk, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; bytes);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_write_space)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;			(*sk_error_report)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;			(*sk_backlog_rcv)(struct sock *sk);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sk_wq&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;含有等待队列用来睡眠唤醒程序使用，异步队列异步socket使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_state_change &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从SYN_SEND或者SYN_RECV到ES状态，从ES到CLOSE_WAIT状态，当协议栈遇到这些事件时候会调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_data_ready&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_write_space&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sock有数据可读和可写时候调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sk_error_report&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sock上存在错误时调用，比如收到RST包&lt;/p&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket信号处理" scheme="http://vcpu.me/tags/socket%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>socket读写条件</title>
    <link href="http://vcpu.me/socket_rw_proc/"/>
    <id>http://vcpu.me/socket_rw_proc/</id>
    <published>2017-06-26T11:10:34.000Z</published>
    <updated>2017-06-26T08:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h2><p>1.接收缓存区低水位标记（用于读）和发送缓存区低水位标记（用于写）：<br>每个套接字有一个接收低水位和一个发送低水位。他们由select函数使用。<br>接收低水位标记是让select返回”可读”时套接字接收缓冲区中所需的数据量。对于TCP,其默认值为1。<br>发送低水位标记是让select返回”可写”时套接字发送缓冲区中所需的可用空间。对于TCP，其默认值常为2048</p>
<p>通俗的解释一下，缓存区我们当成一个大小为 n bytes的空间，那么：<br>接收区缓存的作用就是，接收对面的数据放在缓存区，供应用程序读。当然了，只有当缓存区可读的数据量(接收低水位标记)到达一定程度（eg:1）的时候，我们才能读到数据，不然不就读不到数据了吗。<br>发送区缓存的作用就是，发送应用程序的数据到缓存区，然后一起发给对面。当然了，只有当缓存区剩余一定空间(发送低水位标记)（eg:2048）,你才能写数据进去，不然可能导致空间不够。</p>
<p>2.FIN: (结束标志,Finish)用来结束一个TCP回话.但对应端口仍处于开放状态,准备接收后续数据.</p>
<p>特别纠正说明：</p>
<blockquote>
<p>经过测试在3.10.0-514.16.1.el7.x86_64 内核情况下SO_SNDLOWAT/SO_RCVLOWAT<br>默认发送和接收最低水位均为1，也就是说默认情况下低水位值可以不考虑，系统缓冲区有数据就读<br>有空闲就写</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> value =<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> v_len = <span class="keyword">sizeof</span>(value);</div><div class="line">getsockopt(sockfd, SOL_SOCKET, SO_SNDLOWAT, (<span class="keyword">void</span>*)&amp;value, &amp;v_len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"snd low at value: %d\n"</span>,value);</div><div class="line">value = <span class="number">0</span>;</div><div class="line">getsockopt(sockfd, SOL_SOCKET, SO_RCVLOWAT, (<span class="keyword">void</span>*)&amp;value, &amp;v_len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"rcv low at value: %d\n"</span>,value);</div></pre></td></tr></table></figure>
<h2 id="socket可读的条件"><a href="#socket可读的条件" class="headerlink" title="socket可读的条件"></a>socket可读的条件</h2><p>下列四个条件中的任何一个满足时,socket准备好读:<br>1.socket的接收缓冲区中的数据字节大于等于该socket的接收缓冲区低水位标记的当前大小。对这样的socket的读操作将不阻塞并返回一个大于0的值 {也就是返回准备好读入的数据}。我们可以用SO_RCVLOWATsocket选项来设置该socket的低水位标记。对于TCP和UDP .socket而言，其缺省值为1</p>
<p>2.该连接的读这一半关闭{也就是接收了FIN的TCP连接}。对这样的socket的读操作将不阻塞并返回0</p>
<p>3.socket是一个用于监听的socket,并且已经完成的连接数为非0.这样的soocket处于可读状态,是因为socket收到了对方的connect请求,执行了三次握手的第一步:对方发送SYN请求过来,使监听socket处于可读状态;正常情况下,这样的socket上的accept操作不会阻塞;</p>
<p>4.有一个socket有异常错误条件待处理。对于这样的socket的读操作将不会阻塞,并且返回一个错误-1,errno则设置成明确的错误条件。这些待处理的错误也可通过指定socket选项SO_ERROR调用getsockopt来取得并清除</p>
<h2 id="socket可写的条件"><a href="#socket可写的条件" class="headerlink" title="socket可写的条件"></a>socket可写的条件</h2><p>1.socket发送缓冲区中数据字节大于等于该socket发送缓冲区低水位大小。写操作不会被阻塞，会直接返回写入的数据大小，SO_SNDLOWAT socket选项设置socket可写低水位大小。经过测试默认大小为1。<br>2.如果你已经关闭连接，或者主动fin半关闭。这种情况下socket再些将要产生SIGPIPE信号，你没有对这个信号处理的话，你的进程将会被关闭。<br>3.有socket异常错误待处理，这种情况下写操作并不会被阻塞会直接返回一个错误-1，想知道错误原因erron可以帮助你。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="http://blog.csdn.net/szcarewell/article/details/51227540" target="_blank" rel="external">http://blog.csdn.net/szcarewell/article/details/51227540</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念说明&quot;&gt;&lt;a href=&quot;#概念说明&quot; class=&quot;headerlink&quot; title=&quot;概念说明&quot;&gt;&lt;/a&gt;概念说明&lt;/h2&gt;&lt;p&gt;1.接收缓存区低水位标记（用于读）和发送缓存区低水位标记（用于写）：&lt;br&gt;每个套接字有一个接收低水位和一个发送低水位。他们
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
  </entry>
  
  <entry>
    <title>select</title>
    <link href="http://vcpu.me/select/"/>
    <id>http://vcpu.me/select/</id>
    <published>2017-06-26T09:00:57.000Z</published>
    <updated>2017-06-26T09:00:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span></div><div class="line">           fd_set *exceptfds, struct timeval *timeout);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>nfds 是最大文件描述符号 +1   怎么可能这么简单，它限制的是最大值而不是个数</li>
<li>readfds 用来记录可读fd集合</li>
<li>writefds 用来记录可写fd集合</li>
<li>exceptfds 用来检查带外数据</li>
<li>timeout 决定select等待I/O时间</li>
</ul>
<blockquote>
<p>1.timeout该值为NULL，会阻塞一定等到监控的文件描述符集合中产生状态变化（可读，可写等）<br>2.timeout值为0分0毫秒，非阻塞，不关注文件描述符是否变化立刻返回<br>3.timeout正常值，timeout这段时间内阻塞，如果监控集合中有信号来临，select将返回，否则超时返回</p>
</blockquote>
<a id="more"></a>
<p>返回值：</p>
<ul>
<li>0 出发信号的fd数目</li>
<li>=0 超时</li>
<li>-1 出错 </li>
</ul>
<p>作用：<br>    用来管理fd集合，实现多fd集合监听操作</p>
<h2 id="select用户态用法"><a href="#select用户态用法" class="headerlink" title="select用户态用法"></a>select用户态用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPORT 1234    <span class="comment">// the port users will be connecting to</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 5     <span class="comment">// how many pending connections queue will hold</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 200</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> fd_A[BACKLOG];    <span class="comment">// accepted connection fd</span></div><div class="line"><span class="keyword">int</span> conn_amount;    <span class="comment">// current connection amount</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showclient</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"client amount: %d\n"</span>, conn_amount);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[%d]:%d  "</span>, i, fd_A[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sock_fd, new_fd;  <span class="comment">// listen on sock_fd, new connection on new_fd</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span>    <span class="comment">// server address information</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span> <span class="comment">// connector's address information</span></div><div class="line">    <span class="keyword">socklen_t</span> sin_size;</div><div class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</div><div class="line">    <span class="keyword">int</span> ret;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"socket"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"setsockopt"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    server_addr.sin_port = htons(MYPORT);</div><div class="line">    server_addr.sin_addr.s_addr = INADDR_ANY;</div><div class="line">    <span class="built_in">memset</span>(server_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(server_addr.sin_zero));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bind(sock_fd, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"bind"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (listen(sock_fd, BACKLOG) == <span class="number">-1</span>) &#123;</div><div class="line">        perror(<span class="string">"listen"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen port %d\n"</span>, MYPORT);</div><div class="line"></div><div class="line">    fd_set fdsr;</div><div class="line">    <span class="keyword">int</span> maxsock;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line"></div><div class="line">    conn_amount = <span class="number">0</span>;</div><div class="line">    sin_size = <span class="keyword">sizeof</span>(client_addr);</div><div class="line">    maxsock = sock_fd;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// initialize file descriptor set</span></div><div class="line">        FD_ZERO(&amp;fdsr);</div><div class="line">        FD_SET(sock_fd, &amp;fdsr);</div><div class="line"></div><div class="line">        <span class="comment">// timeout setting</span></div><div class="line">        tv.tv_sec = <span class="number">30</span>;</div><div class="line">        tv.tv_usec = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// add active connection to fd set</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;</div><div class="line">                FD_SET(fd_A[i], &amp;fdsr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ret = select(maxsock + <span class="number">1</span>, &amp;fdsr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);</div><div class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">            perror(<span class="string">"select"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"timeout\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check every fd in the set</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conn_amount; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (FD_ISSET(fd_A[i], &amp;fdsr)) &#123;</div><div class="line">                ret = recv(fd_A[i], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;        <span class="comment">// client close</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] close\n"</span>, i);</div><div class="line">                    close(fd_A[i]);</div><div class="line">                    FD_CLR(fd_A[i], &amp;fdsr);</div><div class="line">                    fd_A[i] = <span class="number">0</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;        <span class="comment">// receive data</span></div><div class="line">                    <span class="keyword">if</span> (ret &lt; BUF_SIZE)</div><div class="line">                        <span class="built_in">memset</span>(&amp;buf[ret], <span class="string">'\0'</span>, <span class="number">1</span>);</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"client[%d] send:%s\n"</span>, i, buf);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// check whether a new connection comes</span></div><div class="line">        <span class="keyword">if</span> (FD_ISSET(sock_fd, &amp;fdsr)) &#123;</div><div class="line">            new_fd = accept(sock_fd, (struct sockaddr *)&amp;client_addr, &amp;sin_size);</div><div class="line">            <span class="keyword">if</span> (new_fd &lt;= <span class="number">0</span>) &#123;</div><div class="line">                perror(<span class="string">"accept"</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// add to fd queue</span></div><div class="line">            <span class="keyword">if</span> (conn_amount &lt; BACKLOG) &#123;</div><div class="line">                fd_A[conn_amount++] = new_fd;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"new connection client[%d] %s:%d\n"</span>, conn_amount,</div><div class="line">                        inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));</div><div class="line">                <span class="keyword">if</span> (new_fd &gt; maxsock)</div><div class="line">                    maxsock = new_fd;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"max connections arrive, exit\n"</span>);</div><div class="line">                send(new_fd, <span class="string">"bye"</span>, <span class="number">4</span>, <span class="number">0</span>);</div><div class="line">                close(new_fd);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        showclient();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// close other connections</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BACKLOG; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (fd_A[i] != <span class="number">0</span>) &#123;</div><div class="line">            close(fd_A[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>代码实现采用select用法描述：</p>
<blockquote>
<p>1.select作为服务端使用<br>2.select监听服务的fd，如果有客户端连接此服务端时候，服务端fd会被触发，然后调用accept完成连接<br>3.select监听服务端和客户端建立好连接的fd，如果客户端发送数据过来，select可监听到读信号，然后recv读出数据。</p>
</blockquote>
</blockquote>
<h2 id="select实现分析"><a href="#select实现分析" class="headerlink" title="select实现分析"></a>select实现分析</h2><h3 id="用户态select-系统调用-sys-select"><a href="#用户态select-系统调用-sys-select" class="headerlink" title="用户态select 系统调用 sys_select"></a>用户态select 系统调用 sys_select</h3><p> 调用栈如下：<br> 0xffffffff81213f80 : sys_select+0x0/0x110 [kernel]<br> 0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]</p>
<p> 实现代码位于：fs/select.c  SYSCALL_DEFINE5(select,…</p>
<h3 id="select功能概述"><a href="#select功能概述" class="headerlink" title="select功能概述"></a>select功能概述</h3><h3 id="sys-select实现分析"><a href="#sys-select实现分析" class="headerlink" title="sys_select实现分析"></a>sys_select实现分析</h3><p>分析结论：</p>
<p>sys_select<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE5(select, <span class="keyword">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</div><div class="line">		fd_set __user *, <span class="built_in">exp</span>, struct timeval __user *, tvp)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">end_time</span>, *<span class="title">to</span> = <span class="title">NULL</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line">	<span class="keyword">int</span> ret;</div><div class="line"></div><div class="line">	<span class="comment">//用户态时间处理，将用户态时间拷入内核态并将参数规整为struct timespec以供调用</span></div><div class="line">	<span class="keyword">if</span> (tvp) &#123;</div><div class="line">		<span class="keyword">if</span> (copy_from_user(&amp;tv, tvp, <span class="keyword">sizeof</span>(tv)))</div><div class="line">			<span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">		to = &amp;end_time;</div><div class="line">		<span class="keyword">if</span> (poll_select_set_timeout(to,</div><div class="line">				tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),</div><div class="line">				(tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))</div><div class="line">			<span class="keyword">return</span> -EINVAL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//select的核心实现</span></div><div class="line">	ret = core_sys_select(n, inp, outp, <span class="built_in">exp</span>, to);</div><div class="line">	</div><div class="line">	<span class="comment">//该函数会将剩余的时间拷入到用户态的tvp 中</span></div><div class="line">	ret = poll_select_copy_remaining(&amp;end_time, tvp, <span class="number">1</span>, ret);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1.将用户态select时间参数拷入内核<br>2.调用core_sys_select<br>3.将select退出后剩余时间结果拷入用户态时间参数中</p>
</blockquote>
<p>core_sys_select<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">core_sys_select</span><span class="params">(<span class="keyword">int</span> n, fd_set __user *inp, fd_set __user *outp,</span></span></div><div class="line">			   fd_set __user *<span class="built_in">exp</span>, struct timespec *end_time)</div><div class="line">&#123;</div><div class="line">	fd_set_bits fds;</div><div class="line">	<span class="keyword">void</span> *bits;</div><div class="line">	<span class="keyword">int</span> ret, max_fds;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> size;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></div><div class="line">	<span class="comment">/* Allocate small arguments on the stack to save memory and be faster */</span></div><div class="line">	<span class="keyword">long</span> stack_fds[SELECT_STACK_ALLOC/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];</div><div class="line"></div><div class="line">	<span class="comment">//用户态给予参数nfds &lt; 0 ,直接返并报告参数非法 -EINVAL</span></div><div class="line">	ret = -EINVAL;</div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out_nofds;</div><div class="line"></div><div class="line">	<span class="comment">/* max_fds can increase, so grab it once to avoid race */</span></div><div class="line">	rcu_read_lock();</div><div class="line">	fdt = files_fdtable(current-&gt;files);</div><div class="line">	max_fds = fdt-&gt;max_fds;</div><div class="line">	rcu_read_unlock();</div><div class="line">	<span class="keyword">if</span> (n &gt; max_fds)</div><div class="line">		n = max_fds;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * We need 6 bitmaps (in/out/ex for both incoming and outgoing),</div><div class="line">	 * since we used fdset we need to allocate memory in units of</div><div class="line">	 * long-words. </div><div class="line">	 */</div><div class="line">	<span class="comment">//以一个文件描述符占1bit，传递进来的这么多fd共占多数字</span></div><div class="line">	size = FDS_BYTES(n);</div><div class="line">	bits = stack_fds;</div><div class="line">	<span class="comment">//检查默认静态数据资源是否够用</span></div><div class="line">	<span class="keyword">if</span> (size &gt; <span class="keyword">sizeof</span>(stack_fds) / <span class="number">6</span>) &#123;</div><div class="line">		<span class="comment">/* Not enough space in on-stack array; must use kmalloc */</span></div><div class="line">		ret = -ENOMEM;</div><div class="line">		bits = kmalloc(<span class="number">6</span> * size, GFP_KERNEL);</div><div class="line">		<span class="keyword">if</span> (!bits)</div><div class="line">			<span class="keyword">goto</span> out_nofds;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//fds用来指向具体的存储空间</span></div><div class="line">	fds.in      = bits;</div><div class="line">	fds.out     = bits +   size;</div><div class="line">	fds.ex      = bits + <span class="number">2</span>*size;</div><div class="line">	fds.res_in  = bits + <span class="number">3</span>*size;</div><div class="line">	fds.res_out = bits + <span class="number">4</span>*size;</div><div class="line">	fds.res_ex  = bits + <span class="number">5</span>*size;</div><div class="line"></div><div class="line"><span class="comment">//将用户空间的inp  outp exp 拷入内核空间</span></div><div class="line">	<span class="keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||</div><div class="line">	    (ret = get_fd_set(n, outp, fds.out)) ||</div><div class="line">	    (ret = get_fd_set(n, <span class="built_in">exp</span>, fds.ex)))</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	<span class="comment">//存放返回状态的字段清零，后续可用作返回结果使用</span></div><div class="line">	zero_fd_set(n, fds.res_in);</div><div class="line">	zero_fd_set(n, fds.res_out);</div><div class="line">	zero_fd_set(n, fds.res_ex);</div><div class="line"></div><div class="line">	<span class="comment">//select核心逻辑处理函数</span></div><div class="line">	ret = do_select(n, &amp;fds, end_time);</div><div class="line"></div><div class="line">	<span class="comment">//存在错误</span></div><div class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	<span class="comment">//超时情况</span></div><div class="line">	<span class="keyword">if</span> (!ret) &#123;</div><div class="line">		ret = -ERESTARTNOHAND;</div><div class="line">		<span class="keyword">if</span> (signal_pending(current))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">		ret = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//把结果集拷入用户空间</span></div><div class="line">	<span class="keyword">if</span> (set_fd_set(n, inp, fds.res_in) ||</div><div class="line">	    set_fd_set(n, outp, fds.res_out) ||</div><div class="line">	    set_fd_set(n, <span class="built_in">exp</span>, fds.res_ex))</div><div class="line">		ret = -EFAULT;</div><div class="line"></div><div class="line">out:</div><div class="line">	<span class="comment">//释放辅助内存</span></div><div class="line">	<span class="keyword">if</span> (bits != stack_fds)</div><div class="line">		kfree(bits);</div><div class="line">out_nofds:</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1.检验nfds，如果其小于0，参数异常返回；并规整nfds（最大不能超过当前进程的max_fds）<br>2.将用户态fd集合拷入内核态<br>3.运行do_select<br>4.将do_select检测结果拷入用户空间<br>5.释放select运算中辅助内存</p>
</blockquote>
<p>do_select<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_select</span><span class="params">(<span class="keyword">int</span> n, fd_set_bits *fds, struct timespec *end_time)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">ktime_t</span> expire, *to = <span class="literal">NULL</span>;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> <span class="title">table</span>;</span></div><div class="line">	poll_table *wait;</div><div class="line">	<span class="keyword">int</span> retval, i, timed_out = <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> slack = <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> busy_end = <span class="number">0</span>;</div><div class="line"></div><div class="line">	rcu_read_lock();</div><div class="line">	<span class="comment">//检查fd对应file状态，且找出最大fd</span></div><div class="line">	retval = max_select_fd(n, fds);</div><div class="line">	rcu_read_unlock();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (retval &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> retval;</div><div class="line">	n = retval;</div><div class="line"></div><div class="line">	poll_initwait(&amp;table);</div><div class="line">	wait = &amp;table.pt;</div><div class="line">	<span class="comment">//传入的时间为0s 0ms time_out标记为1 这种情况不阻塞直接返回</span></div><div class="line">	<span class="keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;</div><div class="line">		wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">		timed_out = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//正常情况处理。 超时时间转换</span></div><div class="line">	<span class="keyword">if</span> (end_time &amp;&amp; !timed_out)</div><div class="line">		slack = select_estimate_accuracy(end_time);</div><div class="line"></div><div class="line">	retval = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (;;) &#123;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">long</span> *rinp, *routp, *rexp, *inp, *outp, *<span class="built_in">exp</span>;</div><div class="line">		<span class="keyword">bool</span> can_busy_loop = <span class="literal">false</span>;</div><div class="line"></div><div class="line">		inp = fds-&gt;in; outp = fds-&gt;out; <span class="built_in">exp</span> = fds-&gt;ex;</div><div class="line">		rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;</div><div class="line"></div><div class="line">		<span class="comment">//所有监听的fd大循环</span></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">long</span> in, out, ex, all_bits, bit = <span class="number">1</span>, mask, j;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">long</span> res_in = <span class="number">0</span>, res_out = <span class="number">0</span>, res_ex = <span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="comment">//32个文件描述符号，没有任何状态被检测，进入下一轮32个</span></div><div class="line">			in = *inp++; out = *outp++; ex = *<span class="built_in">exp</span>++;</div><div class="line">			all_bits = in | out | ex;</div><div class="line">			<span class="keyword">if</span> (all_bits == <span class="number">0</span>) &#123;</div><div class="line">				i += BITS_PER_LONG;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 这一轮32个fd存在需要检测的状态</span></div><div class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></div><div class="line">				<span class="comment">//超过最大待检测fd n直接退出循环</span></div><div class="line">				<span class="keyword">if</span> (i &gt;= n)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">					</div><div class="line">				<span class="comment">//跳过没有状态检测的fd</span></div><div class="line">				<span class="keyword">if</span> (!(bit &amp; all_bits))</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">					</div><div class="line">				f = fdget(i);</div><div class="line">				<span class="keyword">if</span> (f.file) &#123;</div><div class="line">					<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">f_op</span>;</span></div><div class="line">					f_op = f.file-&gt;f_op;</div><div class="line">					</div><div class="line">					<span class="comment">//设置fd检测事件掩码，poll相关情况处理</span></div><div class="line">					mask = DEFAULT_POLLMASK;</div><div class="line">					<span class="keyword">if</span> (f_op &amp;&amp; f_op-&gt;poll) &#123;</div><div class="line">						<span class="comment">//设置用户需要探查的标记</span></div><div class="line">						wait_key_set(wait, in, out,</div><div class="line">							     bit, busy_flag);</div><div class="line">						<span class="comment">//获取fd当前对应的信号掩码</span></div><div class="line">						mask = (*f_op-&gt;poll)(f.file, wait);</div><div class="line">					&#125;</div><div class="line">					fdput(f);</div><div class="line">					</div><div class="line">					<span class="comment">//可读</span></div><div class="line">					<span class="keyword">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;</div><div class="line">						res_in |= bit;</div><div class="line">						retval++;</div><div class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">//可写</span></div><div class="line">					<span class="keyword">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;</div><div class="line">						res_out |= bit;</div><div class="line">						retval++;</div><div class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;</div><div class="line">						res_ex |= bit;</div><div class="line">						retval++;</div><div class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">/* got something, stop busy polling */</span></div><div class="line">					<span class="keyword">if</span> (retval) &#123;</div><div class="line">						can_busy_loop = <span class="literal">false</span>;</div><div class="line">						busy_flag = <span class="number">0</span>;</div><div class="line"></div><div class="line">					<span class="comment">/*</span></div><div class="line">					 * only remember a returned</div><div class="line">					 * POLL_BUSY_LOOP if we asked for it</div><div class="line">					 */</div><div class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (busy_flag &amp; mask)</div><div class="line">						can_busy_loop = <span class="literal">true</span>;</div><div class="line"></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//将检测结果存下来</span></div><div class="line">			<span class="keyword">if</span> (res_in)</div><div class="line">				*rinp = res_in;</div><div class="line">			<span class="keyword">if</span> (res_out)</div><div class="line">				*routp = res_out;</div><div class="line">			<span class="keyword">if</span> (res_ex)</div><div class="line">				*rexp = res_ex;</div><div class="line">				</div><div class="line">			<span class="comment">//增加抢占点 该抢占点可达到效果是：判断是否有进程需要抢占当前进程，如果是将立即发生调度</span></div><div class="line">			<span class="comment">//已经检查过的fd如果此时被唤醒，则会在此产生调度</span></div><div class="line">			cond_resched();</div><div class="line">		&#125;</div><div class="line">		wait-&gt;_qproc = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">if</span> (retval || timed_out || signal_pending(current))</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">			</div><div class="line">		<span class="comment">//设备就绪异常超时终止灯信号触发，直接break，可跳出大循环结束程序</span></div><div class="line">		<span class="keyword">if</span> (table.error) &#123;</div><div class="line">			retval = table.error;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span></div><div class="line">		<span class="keyword">if</span> (can_busy_loop &amp;&amp; !need_resched()) &#123;</div><div class="line">			<span class="keyword">if</span> (!busy_end) &#123;</div><div class="line">				busy_end = busy_loop_end_time();</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!busy_loop_timeout(busy_end))</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		busy_flag = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * If this is the first loop and we have a timeout</div><div class="line">		 * given, then we convert to ktime_t and set the to</div><div class="line">		 * pointer to the expiry value.</div><div class="line">		 */</div><div class="line">		<span class="keyword">if</span> (end_time &amp;&amp; !to) &#123;</div><div class="line">			expire = timespec_to_ktime(*end_time);</div><div class="line">			to = &amp;expire;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">//当前用户进程从这里进入睡眠，超时后timed_out 置1 直接退出</span></div><div class="line">		<span class="keyword">if</span> (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,</div><div class="line">					   to, slack))</div><div class="line">			timed_out = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	poll_freewait(&amp;table);</div><div class="line">	<span class="keyword">return</span> retval;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>do_select为select的核心实现，其处理过程如下：</p>
<blockquote>
<p>1.调用poll_initwait初始化poll_wqueues对象table，包括其成员poll_table；</p>
<p>2.如果用户传入的timeout不为NULL，但是设定的时间为0，那么设置poll_table指针wait(即 &amp;table.pt）为NULL；当&amp;table.pt为NULL，它并不会被加到等到队列中。</p>
<p>3.将in,out和exception进行或运算，得到all_bits，然后遍历all_bits中bit为1的fd，根据进程的fd_table查找到file指针filp，然后设置wait的key值（POLLEX_SET, POLLIN_SET,POLLIN_SET三者的或运算，取决于用户输入），并调用filp-&gt;poll(filp, wait)，获得返回值mask。 再根据mask值检查该文件是否立即满足条件，如果满足，设置res_in/res_out/res_exception的值，执行retval++, 并设置wait为NULL。</p>
<p>4.在每遍历32（取决于long型整数的位数）个文件后，调用1次cond_resched()，主动寻求调度，可以等待已经遍历过的文件是否有唤醒的；</p>
<p>5.在遍历完所有文件之后，设置wait为NULL，并检查是否有满足条件的文件（retval值是否为0），或者是否超时，或者是否有未决信号，如果有那么直接跳出循环，进入步骤7；</p>
<p>6.否则调用poll_schedule_timeout，使进程进入睡眠，直到超时（如果未设置超时，那么是直接调用的schedule()）。如果是超时后进程继续执行，那么设置pwq-&gt;triggered为0；如果是被文件对应的驱动程序唤醒的，那么pwq-&gt;triggered被设置为1.</p>
<p>   7.最终，函数调用poll_freewait，将本进程从所有文件的等待队列中删掉，并删除分配的poll_table_page对象，回收内存，并返回retval值。</p>
<p> 8.拷贝res_in, res_out和res_exception到传入的in, out, exception，并返回ret。</p>
</blockquote>
<h3 id="select睡眠过程"><a href="#select睡眠过程" class="headerlink" title="select睡眠过程"></a>select睡眠过程</h3><p>do_select</p>
<p>…<br>    步骤1<br>    poll_initwait(&amp;table);<br>    wait = &amp;table.pt;<br>…<br>    步骤2<br>    if (f_op &amp;&amp; f_op-&gt;poll) {<br>    wait_key_set(wait, in, out,<br>             bit, busy_flag);<br>    //如果是socket此处调用的是sock_poll<br>    mask = (*f_op-&gt;poll)(f.file, wait);<br>}<br>    步骤3<br>…<br>    if (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,<br>                       to, slack))</p>
<p>步骤1:初始化table<br>    struct poll_wqueues table;</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">poll_initwait</span><span class="params">(struct poll_wqueues *pwq)</span></span></div><div class="line">&#123;</div><div class="line">	init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);</div><div class="line">	pwq-&gt;polling_task = current;</div><div class="line">	pwq-&gt;triggered = <span class="number">0</span>;</div><div class="line">	pwq-&gt;error = <span class="number">0</span>;</div><div class="line">	pwq-&gt;table = <span class="literal">NULL</span>;</div><div class="line">	pwq-&gt;inline_index = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(poll_initwait);</div></pre></td></tr></table></figure>
<ul>
<li>将当前进程标志current给table让其记录下来</li>
<li>将__pollwait给table-&gt;pt-&gt;_qproc让其记录下来</li>
</ul>
<p>步骤2:调用sock_poll最终调用tcp_pool<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* No kernel lock held - perfect */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sock_poll</span><span class="params">(struct file *file, poll_table *wait)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> busy_flag = <span class="number">0</span>;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *      We can't return errors to poll, so it's either yes or no.</div><div class="line">	 */</div><div class="line">	sock = file-&gt;private_data;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sk_can_busy_loop(sock-&gt;sk)) &#123;</div><div class="line">		<span class="comment">/* this socket can poll_ll so tell the system call */</span></div><div class="line">		busy_flag = POLL_BUSY_LOOP;</div><div class="line"></div><div class="line">		<span class="comment">/* once, only if requested by syscall */</span></div><div class="line">		<span class="keyword">if</span> (wait &amp;&amp; (wait-&gt;_key &amp; POLL_BUSY_LOOP))</div><div class="line">			sk_busy_loop(sock-&gt;sk, <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">							<span class="comment">//针对于tcpsocket来讲此处调用tcp_pool</span></div><div class="line">	<span class="keyword">return</span> busy_flag | sock-&gt;ops-&gt;poll(file, sock, wait);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *	Wait for a TCP event.</div><div class="line"> *</div><div class="line"> *	Note that we don't need to lock the socket, as the upper poll layers</div><div class="line"> *	take care of normal races (between the test and the event) and we don't</div><div class="line"> *	go look at any of the socket buffers directly.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">tcp_poll</span><span class="params">(struct file *file, struct socket *sock, poll_table *wait)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> mask;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line"></div><div class="line">	sock_rps_record_flow(sk);</div><div class="line"></div><div class="line">	sock_poll_wait(file, sk_sleep(sk), wait);</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state == TCP_LISTEN)</div><div class="line">		<span class="keyword">return</span> inet_csk_listen_poll(sk);</div><div class="line"></div><div class="line">	<span class="comment">/* Socket is not locked. We are protected from async events</span></div><div class="line">	 * by poll logic and correct handling of state changes</div><div class="line">	 * made by other threads is impossible in any case.</div><div class="line">	 */</div><div class="line"></div><div class="line">	mask = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_shutdown == SHUTDOWN_MASK || sk-&gt;sk_state == TCP_CLOSE)</div><div class="line">		mask |= POLLHUP;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_shutdown &amp; RCV_SHUTDOWN)</div><div class="line">		mask |= POLLIN | POLLRDNORM | POLLRDHUP;</div><div class="line"></div><div class="line">	<span class="comment">/* Connected or passive Fast Open socket? */</span></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state != TCP_SYN_SENT &amp;&amp;</div><div class="line">	    (sk-&gt;sk_state != TCP_SYN_RECV || tp-&gt;fastopen_rsk != <span class="literal">NULL</span>)) &#123;</div><div class="line">		<span class="keyword">int</span> target = sock_rcvlowat(sk, <span class="number">0</span>, INT_MAX);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (tp-&gt;urg_seq == tp-&gt;copied_seq &amp;&amp;</div><div class="line">		    !sock_flag(sk, SOCK_URGINLINE) &amp;&amp;</div><div class="line">		    tp-&gt;urg_data)</div><div class="line">			target++;</div><div class="line"></div><div class="line">		<span class="comment">/* Potential race condition. If read of tp below will</span></div><div class="line">		 * escape above sk-&gt;sk_state, we can be illegally awaken</div><div class="line">		 * in SYN_* states. */</div><div class="line">		<span class="keyword">if</span> (tp-&gt;rcv_nxt - tp-&gt;copied_seq &gt;= target)</div><div class="line">			mask |= POLLIN | POLLRDNORM;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!(sk-&gt;sk_shutdown &amp; SEND_SHUTDOWN)) &#123;</div><div class="line">			<span class="keyword">if</span> (sk_stream_is_writeable(sk)) &#123;</div><div class="line">				mask |= POLLOUT | POLLWRNORM;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;  <span class="comment">/* send SIGIO later */</span></div><div class="line">				set_bit(SOCK_ASYNC_NOSPACE,</div><div class="line">					&amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line">				set_bit(SOCK_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line"></div><div class="line">				<span class="comment">/* Race breaker. If space is freed after</span></div><div class="line">				 * wspace test but before the flags are set,</div><div class="line">				 * IO signal will be lost.</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (sk_stream_is_writeable(sk))</div><div class="line">					mask |= POLLOUT | POLLWRNORM;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			mask |= POLLOUT | POLLWRNORM;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (tp-&gt;urg_data &amp; TCP_URG_VALID)</div><div class="line">			mask |= POLLPRI;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/* This barrier is coupled with smp_wmb() in tcp_reset() */</span></div><div class="line">	smp_rmb();</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_err)</div><div class="line">		mask |= POLLERR;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>收集信号状态以mask方式返回</li>
<li>调用sock_poll_wait然后poll_wait最终调用_qproc也就是__pollwait</li>
<li>__pollwait</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Add a new entry */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __pollwait(struct file *filp, <span class="keyword">wait_queue_head_t</span> *wait_address,</div><div class="line">				poll_table *p)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> *<span class="title">pwq</span> = <span class="title">container_of</span>(<span class="title">p</span>, <span class="title">struct</span> <span class="title">poll_wqueues</span>, <span class="title">pt</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_table_entry</span> *<span class="title">entry</span> = <span class="title">poll_get_entry</span>(<span class="title">pwq</span>);</span></div><div class="line">	<span class="keyword">if</span> (!entry)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	entry-&gt;filp = get_file(filp);</div><div class="line">	entry-&gt;wait_address = wait_address;</div><div class="line">	entry-&gt;key = p-&gt;_key;</div><div class="line">	init_waitqueue_func_entry(&amp;entry-&gt;wait, pollwake);</div><div class="line">	entry-&gt;wait.<span class="keyword">private</span> = pwq;</div><div class="line">	add_wait_queue(wait_address, &amp;entry-&gt;wait);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>为每个fd对应文件分配 poll_table_entry</li>
<li>将fd对应poll_table_entry加入到等待队列中</li>
</ul>
<p>步骤3:<br>    poll_schedule_timeout，作用是使进程进入睡眠，直到超时或者被唤醒<br>    如果超时后进程继续执行设置pwq-&gt;triggered为0<br>    如果是被文件对应的驱动程序唤醒pwq-&gt;triggered为1</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll_schedule_timeout</span><span class="params">(struct poll_wqueues *pwq, <span class="keyword">int</span> state,</span></span></div><div class="line">			  <span class="keyword">ktime_t</span> *expires, <span class="keyword">unsigned</span> <span class="keyword">long</span> slack)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> rc = -EINTR;</div><div class="line"></div><div class="line">	set_current_state(state);</div><div class="line">	<span class="keyword">if</span> (!pwq-&gt;triggered)</div><div class="line">		rc = freezable_schedule_hrtimeout_range(expires, slack,</div><div class="line">							HRTIMER_MODE_ABS);</div><div class="line">	__set_current_state(TASK_RUNNING);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Prepare for the next iteration.</div><div class="line">	 *</div><div class="line">	 * The following set_mb() serves two purposes.  First, it's</div><div class="line">	 * the counterpart rmb of the wmb in pollwake() such that data</div><div class="line">	 * written before wake up is always visible after wake up.</div><div class="line">	 * Second, the full barrier guarantees that triggered clearing</div><div class="line">	 * doesn't pass event check of the next iteration.  Note that</div><div class="line">	 * this problem doesn't exist for the first iteration as</div><div class="line">	 * add_wait_queue() has full barrier semantics.</div><div class="line">	 */</div><div class="line">	set_mb(pwq-&gt;triggered, <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> rc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="select唤醒过程"><a href="#select唤醒过程" class="headerlink" title="select唤醒过程"></a>select唤醒过程</h3><p> 0xffffffff81213130 : pollwake+0x0/0x90 [kernel]<br> 0xffffffff810ba628 : <strong>wake_up_common+0x58/0x90 [kernel]<br> 0xffffffff810bc4a4 : </strong>wake_up_sync_key+0x44/0x60 [kernel]<br> 0xffffffff8155825a : sock_def_readable+0x3a/0x70 [kernel]<br> 0xffffffff815c8197 : tcp_data_queue+0x497/0xdd0 [kernel]<br> 0xffffffff815cb4a7 : tcp_rcv_established+0x217/0x760 [kernel]<br> 0xffffffff815d5f8a : tcp_v4_do_rcv+0x10a/0x340 [kernel]<br> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]<br> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]<br> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]<br> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]<br> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]<br> 0xffffffff815700d2 : <strong>netif_receive_skb_core+0x582/0x800 [kernel]<br> 0xffffffff81570368 : </strong>netif_receive_skb+0x18/0x60 [kernel]<br> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]<br> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]<br> 0xffffffffa00472fc [e1000]</p>
<p> pollwake -&gt;__pollwake-&gt;default_wake_function-&gt;try_to_wake_up</p>
<p> try_to_wake_up会把进程的状态设置为TASK_RUNNING，并把进程插入CPU运行队列，来唤醒睡眠的进程</p>
<h2 id="linux-select-1024限制魔咒"><a href="#linux-select-1024限制魔咒" class="headerlink" title="linux select 1024限制魔咒"></a>linux select 1024限制魔咒</h2><p>__FD_SETSIZE 默认最大为1024，一个int占用4个byte，也就是32个bit，所以使用了一个int数组大小为32位来表示了我们要操作的fd的数值，每个bit代表了一个handle数值</p>
<p>需要注意的问题是，这里的最大为1024，如果handle数值为1025是不能处理的（而且很容易导致破坏堆栈），不是说可以容纳1024个网络客户端句柄，而是最大的handle数值为1024，再算上系统本身使用的stdout,stdin, stderr默认的3个，因此最多也就是1021个，再算上程序打开的文件句柄等等，实际上使用可能要比1024少上好多。</p>
<p>另外，ulimit对每个进程打开的句柄也有限制。</p>
<h3 id="why-1024"><a href="#why-1024" class="headerlink" title="why 1024 ?"></a>why 1024 ?</h3><p>内核参数适用结构体是fd_set</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE5(select, <span class="keyword">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</div><div class="line">		fd_set __user *, <span class="built_in">exp</span>, struct timeval __user *, tvp)</div><div class="line">&#123;</div></pre></td></tr></table></figure>
<p>fd_set是 __kernel_fd_set</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> __kernel_fd_set		fd_set;</div></pre></td></tr></table></figure>
<p>__kernel_fd_set 中fds_bits 最大只能1024 </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __FD_SETSIZE	1024</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> fds_bits[__FD_SETSIZE / (<span class="number">8</span> * <span class="keyword">sizeof</span>(<span class="keyword">long</span>))];</div><div class="line">&#125; __kernel_fd_set;</div></pre></td></tr></table></figure>
<h3 id="我该怎么办才能突破1024限制？"><a href="#我该怎么办才能突破1024限制？" class="headerlink" title="我该怎么办才能突破1024限制？"></a>我该怎么办才能突破1024限制？</h3><p>修改掉此宏重新编译吧，当然还有其他办法，但是没必要这么复杂，直接用pool或者epool解决吧<br>当然你也可以多进程或者多线程，每个进程／线程 分别select</p>
<h2 id="select缺点总结"><a href="#select缺点总结" class="headerlink" title="select缺点总结"></a>select缺点总结</h2><blockquote>
<p>select效率低下，用户空间和内核空间来回拷贝，select内部吧存进程上下文切换，大型项目不适用<br>可同时监听的文件数量有限，linux平台1024个<br>每次调用select都要遍历完成所有的fd，每隔32fd需要调度一次<br>多个fd情况下，如果小的fs一直可读，会导致大的fd信号不会被收集到<br>需要在用户态和内核态来回拷贝fd_set，睡眠唤醒机制需要为fd分配poll_table_entry</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nfds, fd_set *readfds, fd_set *writefds,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           fd_set *exceptfds, struct timeval *timeout);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_CLR&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;FD_ISSET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_SET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FD_ZERO&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(fd_set *&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;nfds 是最大文件描述符号 +1   怎么可能这么简单，它限制的是最大值而不是个数&lt;/li&gt;
&lt;li&gt;readfds 用来记录可读fd集合&lt;/li&gt;
&lt;li&gt;writefds 用来记录可写fd集合&lt;/li&gt;
&lt;li&gt;exceptfds 用来检查带外数据&lt;/li&gt;
&lt;li&gt;timeout 决定select等待I/O时间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1.timeout该值为NULL，会阻塞一定等到监控的文件描述符集合中产生状态变化（可读，可写等）&lt;br&gt;2.timeout值为0分0毫秒，非阻塞，不关注文件描述符是否变化立刻返回&lt;br&gt;3.timeout正常值，timeout这段时间内阻塞，如果监控集合中有信号来临，select将返回，否则超时返回&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="select" scheme="http://vcpu.me/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>TIME_WAIT状态分析</title>
    <link href="http://vcpu.me/TIME_WAIT%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90/"/>
    <id>http://vcpu.me/TIME_WAIT状态分析/</id>
    <published>2017-06-23T03:16:59.000Z</published>
    <updated>2017-06-23T03:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TIME-WAIT状态分析"><a href="#TIME-WAIT状态分析" class="headerlink" title="TIME_WAIT状态分析"></a>TIME_WAIT状态分析</h1><p>之所以起这样一个题目是因为很久以前我曾经写过一篇介绍TIME_WAIT的文章，不过当时基本属于浅尝辄止，并没深入说明问题的来龙去脉，碰巧这段时间反复被别人问到相关的问题，让我觉得有必要全面总结一下，以备不时之需。</p>
<p>讨论前大家可以拿手头的服务器摸摸底，记住「ss」比「netstat」快：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ss -ant | awk 'NR&gt;1 &#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;</div></pre></td></tr></table></figure></p>
<p>更简单方法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/net/sockstat</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我猜你一定被巨大无比的TIME_WAIT网络连接总数吓到了！以我个人的经验，对于一台繁忙的Web服务器来说，如果主要以短连接为主，那么其TIME_WAIT网络连接总数很可能会达到几万，甚至十几万。虽然一个TIME_WAIT网络连接耗费的资源无非就是一个端口、一点内存，但是架不住基数大，所以这始终是一个需要面对的问题。</p>
<h2 id="TIMEWAIT是什么"><a href="#TIMEWAIT是什么" class="headerlink" title="TIMEWAIT是什么"></a>TIMEWAIT是什么</h2><p>因为TCP连接是双向的，所以在关闭连接的时候，两个方向各自都需要关闭。先发FIN包的一方执行的是主动关闭；后发FIN包的一方执行的是被动关闭。主动关闭的一方会进入TIME_WAIT状态，并且在此状态停留两倍的MSL时长。<br>穿插一点MSL的知识：MSL指的是报文段的最大生存时间，如果报文段在网络活动了MSL时间，还没有被接收，那么会被丢弃。关于MSL的大小，RFC 793协议中给出的建议是两分钟，不过实际上不同的操作系统可能有不同的设置，以Linux为例，通常是半分钟，两倍的MSL就是一分钟，也就是60秒，并且这个数值是硬编码在内核中的，也就是说除非你重新编译内核，否则没法修改它：</p>
<pre><code>#define TCP_TIMEWAIT_LEN (60*HZ)
</code></pre><p>如果每秒的连接数是一千的话，那么一分钟就可能会产生六万个TIME_WAIT。<br>为什么主动关闭的一方不直接进入CLOSED状态，而是进入TIME_WAIT状态，并且停留两倍的MSL时长呢？这是因为TCP是建立在不可靠网络上的可靠的协议。例子：主动关闭的一方收到被动关闭的一方发出的FIN包后，回应ACK包，同时进入TIME_WAIT状态，但是因为网络原因，主动关闭的一方发送的这个ACK包很可能延迟，从而触发被动连接一方重传FIN包。极端情况下，这一去一回，就是两倍的MSL时长。如果主动关闭的一方跳过TIME_WAIT直接进入CLOSED，或者在TIME_WAIT停留的时长不足两倍的MSL，那么当被动关闭的一方早先发出的延迟包到达后，就可能出现类似下面的问题：<br>    ▪    旧的TCP连接已经不存在了，系统此时只能返回RST包<br>    ▪    新的TCP连接被建立起来了，延迟包可能干扰新的连接<br>不管是哪种情况都会让TCP不再可靠，所以TIME_WAIT状态有存在的必要性。</p>
<h2 id="如何控制TIME-WAIT的数量？"><a href="#如何控制TIME-WAIT的数量？" class="headerlink" title="如何控制TIME_WAIT的数量？"></a>如何控制TIME_WAIT的数量？</h2><p>从前面的描述我们可以得出这样的结论：TIME_WAIT这东西没有的话不行，不过太多可能也是个麻烦事。下面让我们看看有哪些方法可以控制TIME_WAIT数量，这里只说一些常规方法，另外一些诸如SO_LINGER之类的方法太过偏门，略过不谈。<br>ip_conntrack：顾名思义就是跟踪连接。一旦激活了此模块，就能在系统参数里发现很多用来控制网络连接状态超时的设置，其中自然也包括TIME_WAIT：<br>shell&gt; modprobe ip_conntrack<br>shell&gt; sysctl net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait<br>我们可以尝试缩小它的设置，比如十秒，甚至一秒，具体设置成多少合适取决于网络情况而定，当然也可以参考相关的案例。不过就我的个人意见来说，ip_conntrack引入的问题比解决的还多，比如性能会大幅下降，所以不建议使用。</p>
<h3 id="tcp-tw-recycle："><a href="#tcp-tw-recycle：" class="headerlink" title="tcp_tw_recycle："></a>tcp_tw_recycle：</h3><p>顾名思义就是回收TIME_WAIT连接。可以说这个内核参数已经变成了大众处理TIME_WAIT的万金油，如果你在网络上搜索TIME_WAIT的解决方案，十有八九会推荐设置它，不过这里隐藏着一个不易察觉的陷阱：<br>当多个客户端通过NAT方式联网并与服务端交互时，服务端看到的是同一个IP，也就是说对服务端而言这些客户端实际上等同于一个，可惜由于这些客户端的时间戳可能存在差异，于是乎从服务端的视角看，便可能出现时间戳错乱的现象，进而直接导致时间戳小的数据包被丢弃。（tcp_tw_recycle和tcp_timestamps导致connect失败问题。同时开启情况下，60s内同一源ip主机socket 请求中timestamp必须是递增的）</p>
<h3 id="tcp-tw-reuse："><a href="#tcp-tw-reuse：" class="headerlink" title="tcp_tw_reuse："></a>tcp_tw_reuse：</h3><p>顾名思义就是复用TIME_WAIT连接。当创建新连接的时候，如果可能的话会考虑复用相应的TIME_WAIT连接。通常认为「tcp_tw_reuse」比「tcp_tw_recycle」安全一些，这是因为一来TIME_WAIT创建时间必须超过一秒才可能会被复用；二来只有连接的时间戳是递增的时候才会被复用。官方文档里是这样说的：如果从协议视角看它是安全的，那么就可以使用。这简直就是外交辞令啊！按我的看法，如果网络比较稳定，比如都是内网连接，那么就可以尝试使用。<br>不过需要注意的是在哪里使用，既然我们要复用连接，那么当然应该在连接的发起方使用，而不能在被连接方使用。举例来说：客户端向服务端发起HTTP请求，服务端响应后主动关闭连接，于是TIME_WAIT便留在了服务端，此类情况使用「tcp_tw_reuse」是无效的，因为服务端是被连接方，所以不存在复用连接一说。让我们延伸一点来看，比如说服务端是PHP，它查询另一个MySQL服务端，然后主动断开连接，于是TIME_WAIT就落在了PHP一侧，此类情况下使用「tcp_tw_reuse」是有效的，因为此时PHP相对于MySQL而言是客户端，它是连接的发起方，所以可以复用连接。<br>说明：如果使用tcp_tw_reuse，请激活tcp_timestamps，否则无效。</p>
<h3 id="tcp-max-tw-buckets："><a href="#tcp-max-tw-buckets：" class="headerlink" title="tcp_max_tw_buckets："></a>tcp_max_tw_buckets：</h3><p>顾名思义就是控制TIME_WAIT总数。官网文档说这个选项只是为了阻止一些简单的DoS攻击，平常不要人为的降低它。如果缩小了它，那么系统会将多余的TIME_WAIT删除掉，日志里会显示：「TCP: time wait bucket table overflow」。<br>需要提醒大家的是物极必反，曾经看到有人把「tcp_max_tw_buckets」设置成0，也就是说完全抛弃TIME_WAIT，这就有些冒险了，用一句围棋谚语来说：入界宜缓。<br>…<br>有时候，如果我们换个角度去看问题，往往能得到四两拨千斤的效果。前面提到的例子：客户端向服务端发起HTTP请求，服务端响应后主动关闭连接，于是TIME_WAIT便留在了服务端。这里的关键在于主动关闭连接的是服务端！在关闭TCP连接的时候，先出手的一方注定逃不开TIME_WAIT的宿命，套用一句歌词：把我的悲伤留给自己，你的美丽让你带走。如果客户端可控的话，那么在服务端打开KeepAlive，尽可能不让服务端主动关闭连接，而让客户端主动关闭连接，如此一来问题便迎刃而解了。</p>
<p>原文连接于<a href="https://huoding.com/2013/12/31/316" target="_blank" rel="external">https://huoding.com/2013/12/31/316</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TIME-WAIT状态分析&quot;&gt;&lt;a href=&quot;#TIME-WAIT状态分析&quot; class=&quot;headerlink&quot; title=&quot;TIME_WAIT状态分析&quot;&gt;&lt;/a&gt;TIME_WAIT状态分析&lt;/h1&gt;&lt;p&gt;之所以起这样一个题目是因为很久以前我曾经写过一篇介绍TIME_WAIT的文章，不过当时基本属于浅尝辄止，并没深入说明问题的来龙去脉，碰巧这段时间反复被别人问到相关的问题，让我觉得有必要全面总结一下，以备不时之需。&lt;/p&gt;
&lt;p&gt;讨论前大家可以拿手头的服务器摸摸底，记住「ss」比「netstat」快：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ss -ant | awk &#39;NR&amp;gt;1 &amp;#123;++s[$1]&amp;#125; END &amp;#123;for(k in s) print k,s[k]&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更简单方法：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cat /proc/net/sockstat&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="TCP" scheme="http://vcpu.me/categories/TCP/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统调用</title>
    <link href="http://vcpu.me/Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>http://vcpu.me/Linux系统调用/</id>
    <published>2017-06-22T10:10:14.000Z</published>
    <updated>2017-06-22T10:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么事系统调用"><a href="#什么事系统调用" class="headerlink" title="什么事系统调用"></a>什么事系统调用</h2><ul>
<li>linux虚拟地址空间分为用户空间和内核空间</li>
<li>用户空间不可直接访问内核空间，帝王班的内核空间可直接访问用户空间</li>
<li>用户空间只能通过系统调用访问内核空间</li>
<li>系统调用时内核提供的一组函数接口，使得用户空间上进程可以和内核空间交互</li>
</ul>
<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><ul>
<li>执行用户程序</li>
<li>根据glibc中实现，取得系统调用号，将其存入EAX并执行int $0x80（128号中断）</li>
<li>用户态可以传递变量、参数值给内核，内核态运行时候会保存用户进程的一些寄存器值等（上下文环境）</li>
<li>触发中断后内核根据系统调用号执行对应的中断处理函数 </li>
<li>系统调用结束将访问址存入EAX，返回中断处理函数</li>
<li>中断处理函数根据存储用户态进程上下文环境恢复用户态，同时用户态就获取了内核态函数执行的返回值</li>
</ul>
<h2 id="系统调用汇编"><a href="#系统调用汇编" class="headerlink" title="系统调用汇编"></a>系统调用汇编</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// pid = fork();</div><div class="line">asm volatile(</div><div class="line">    &quot;mov $0x2, %%eax\n\t&quot; // 将fork的系统调用号2存到eax寄存器  </div><div class="line">    &quot;int $0x80\n\t&quot;       // 产生int 0x80中断</div><div class="line">    &quot;mov %%eax,%0\n\t&quot;    // 将结果存入pid中</div><div class="line">    : &quot;=m&quot; (pid)</div></pre></td></tr></table></figure>
<h2 id="系统调用实现分析"><a href="#系统调用实现分析" class="headerlink" title="系统调用实现分析"></a>系统调用实现分析</h2><p>待续</p>
<h2 id="添加系统调用"><a href="#添加系统调用" class="headerlink" title="添加系统调用"></a>添加系统调用</h2><p>待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么事系统调用&quot;&gt;&lt;a href=&quot;#什么事系统调用&quot; class=&quot;headerlink&quot; title=&quot;什么事系统调用&quot;&gt;&lt;/a&gt;什么事系统调用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;linux虚拟地址空间分为用户空间和内核空间&lt;/li&gt;
&lt;li&gt;用户空间不可直接访问内核
    
    </summary>
    
      <category term="linux" scheme="http://vcpu.me/categories/linux/"/>
    
    
      <category term="系统调用" scheme="http://vcpu.me/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>tcp socket发送缓冲区</title>
    <link href="http://vcpu.me/tcp_sndbuf/"/>
    <id>http://vcpu.me/tcp_sndbuf/</id>
    <published>2017-06-20T10:31:48.000Z</published>
    <updated>2017-06-20T10:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcp-socket发送缓冲区探究结论"><a href="#tcp-socket发送缓冲区探究结论" class="headerlink" title="tcp socket发送缓冲区探究结论"></a>tcp socket发送缓冲区探究结论</h2><blockquote>
<p>1: 未设置SO_SNDBUF时，sk-&gt;sk_sndbuf值由tcp_finish_connect-&gt;tcp_init_buffer_space-&gt;tcp_sndbuf_expand决定，TCP协议栈会自己计算一个值出来46080，sk_sndbuf是46080和net.ipv4.tcp_wmem[2]（4194304）的较小值</p>
<p>2: 设置SO_SNDBUF后，tcp_sndbuf_expand将不会再被调用，其值情况完全由sock_setsockopt决定</p>
<blockquote>
<p>2-1: 设置值较小 value &lt;  2304 { SOCK_MIN_SNDBUF（4608）/2 }</p>
<blockquote>
<p>sk_sndbuf = 4608</p>
</blockquote>
<p>2-2: 设置值适中 { SOCK_MIN_SNDBUF（4608）/2 }  &lt;  value  &lt;  net.core.wmem_max</p>
<blockquote>
<p>sk_sndbuf = value*2</p>
</blockquote>
<p>2-3: 设置值较大 value &gt; net.core.wmem_max</p>
<blockquote>
<p>sk_sndbuf = net.core.wmem_max* 2</p>
</blockquote>
</blockquote>
</blockquote>
<a id="more"></a>
<h2 id="默认情况下（未设置SO-SNDBUF）"><a href="#默认情况下（未设置SO-SNDBUF）" class="headerlink" title="默认情况下（未设置SO_SNDBUF）"></a>默认情况下（未设置SO_SNDBUF）</h2><p>net.core.wmem_default = 212992<br>net.core.wmem_max = 212992<br>net.ipv4.tcp_wmem = 4096    16384 4194304</p>
<ul>
<li>TCPsocket未connect之前 sendbuf:16384 sk-&gt;sk_sndbuf是sysctl_tcp_wmem[1]的值</li>
<li>connect之后，sendbuf:46080</li>
</ul>
<p>通过调试机制可知，sendbuf默认大小为sysctl_tcp_wmem[1] 为16384<br>connect连接连接到服务端后，sendbuf变为46080，该值不是尚书配置中任何一个值</p>
<h3 id="原因探究"><a href="#原因探究" class="headerlink" title="原因探究"></a>原因探究</h3><p>阶段1:tcp_init_sock初始化，sk-&gt;sk_sndbuf = sysctl_tcp_wmem[1]</p>
<p>阶段2:主动连接进入ES状态时候，状态切换时候调用tcp_sndbuf_expand调整sk_sndbuf</p>
<p>stp脚本探测结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">tcp_v4_connect[2017/6/20,10:57:56]local=0.0.0.0:3000,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:16384</div><div class="line">tcp_v4_connect return [2017/6/20,10:57:56]local=192.168.55.178:3000,remote=180.97.33.108:80 state:SYN_SENT,sndbubf 1280:16384</div><div class="line">tcp_input:302 return [2017/6/20,10:57:56]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:16384 sndmem : 46080 permss 2304</div><div class="line"> 0xffffffff815c3527 : tcp_sndbuf_expand+0x67/0x90 [kernel]</div><div class="line"> 0xffffffff815c7ba8 : tcp_init_buffer_space+0x178/0x190 [kernel]</div><div class="line"> 0xffffffff815cbbae : tcp_finish_connect+0x6e/0x120 [kernel]</div><div class="line"> 0xffffffff815cc297 : tcp_rcv_state_process+0x637/0xf20 [kernel]</div><div class="line"> 0xffffffff815d5ffb : tcp_v4_do_rcv+0x17b/0x340 [kernel]</div><div class="line"> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]</div><div class="line"> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]</div><div class="line"> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]</div><div class="line"> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]</div><div class="line"> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]</div><div class="line"> 0xffffffff815700d2 : __netif_receive_skb_core+0x582/0x800 [kernel]</div><div class="line"> 0xffffffff81570368 : __netif_receive_skb+0x18/0x60 [kernel]</div><div class="line"> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]</div><div class="line"> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]</div><div class="line"> 0xffffffffa00472fc [e1000]</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tcp_sndbuf_expand</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="keyword">int</span> sndmem, per_mss;</div><div class="line">	u32 nr_segs;</div><div class="line"></div><div class="line">	<span class="comment">/* Worst case is non GSO/TSO : each frame consumes one skb</span></div><div class="line">	 * and skb-&gt;head is kmalloced using power of two area of memory</div><div class="line">	 */</div><div class="line">	per_mss = <span class="keyword">max_t</span>(u32, tp-&gt;rx_opt.mss_clamp, tp-&gt;mss_cache) +</div><div class="line">		  MAX_TCP_HEADER +</div><div class="line">		  SKB_DATA_ALIGN(<span class="keyword">sizeof</span>(struct skb_shared_info));</div><div class="line"></div><div class="line">	per_mss = roundup_pow_of_two(per_mss) +</div><div class="line">		  SKB_DATA_ALIGN(<span class="keyword">sizeof</span>(struct sk_buff));</div><div class="line"></div><div class="line">	nr_segs = <span class="keyword">max_t</span>(u32, TCP_INIT_CWND, tp-&gt;snd_cwnd);</div><div class="line">	nr_segs = <span class="keyword">max_t</span>(u32, nr_segs, tp-&gt;reordering + <span class="number">1</span>);</div><div class="line"></div><div class="line">	<span class="comment">/* Fast Recovery (RFC 5681 3.2) :</span></div><div class="line">	 * Cubic needs 1.7 factor, rounded to 2 to include</div><div class="line">	 * extra cushion (application might react slowly to POLLOUT)</div><div class="line">	 */</div><div class="line">	sndmem = <span class="number">2</span> * nr_segs * per_mss;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_sndbuf &lt; sndmem)</div><div class="line">		sk-&gt;sk_sndbuf = min(sndmem, sysctl_tcp_wmem[<span class="number">2</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置发送缓冲区大小为较小值"><a href="#设置发送缓冲区大小为较小值" class="headerlink" title="设置发送缓冲区大小为较小值"></a>设置发送缓冲区大小为较小值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">0</span>;</div><div class="line"><span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(sendbuflen);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"default,sendbuf:%d\n"</span>, sendbuflen);</div><div class="line"></div><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">100</span>;</div><div class="line">setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, len);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"now,sendbuf:%d\n"</span>, sendbuflen);</div></pre></td></tr></table></figure>
<p>输出信息如下：<br>default,sendbuf:16384<br>now,sendbuf:4608</p>
<p>输出信息总结：设置sendbubf为100时，没有生效，反而设置出来一个较大的值4608</p>
<h3 id="原因探究-1"><a href="#原因探究-1" class="headerlink" title="原因探究"></a>原因探究</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *	This is meant for all protocols to use and covers goings on</div><div class="line"> *	at the socket level. Everything here is generic.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_setsockopt</span><span class="params">(struct socket *sock, <span class="keyword">int</span> level, <span class="keyword">int</span> optname,</span></span></div><div class="line">		    <span class="keyword">char</span> __user *optval, <span class="keyword">unsigned</span> <span class="keyword">int</span> optlen)</div><div class="line">&#123;</div><div class="line">	···</div><div class="line">	<span class="keyword">case</span> SO_SNDBUF:</div><div class="line">		<span class="comment">/* Don't error on this BSD doesn't and if you think</span></div><div class="line">		 * about it this is right. Otherwise apps have to</div><div class="line">		 * play 'guess the biggest size' games. RCVBUF/SNDBUF</div><div class="line">		 * are treated in BSD as hints</div><div class="line">		 */</div><div class="line">		val = <span class="keyword">min_t</span>(u32, val, sysctl_wmem_max);</div><div class="line">set_sndbuf:</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_SNDBUF_LOCK;</div><div class="line">		sk-&gt;sk_sndbuf = <span class="keyword">max_t</span>(<span class="keyword">int</span>, val * <span class="number">2</span>, SOCK_MIN_SNDBUF);</div><div class="line">		<span class="comment">/* Wake up sending tasks if we upped the value. */</span></div><div class="line">		sk-&gt;sk_write_space(sk);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		···</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		ret = -ENOPROTOOPT;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TCP_SKB_MIN_TRUESIZE	(2048 + SKB_DATA_ALIGN(sizeof(struct sk_buff)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SOCK_MIN_SNDBUF		(TCP_SKB_MIN_TRUESIZE * 2)</span></div></pre></td></tr></table></figure>
<p>设置socket选项SO_SNDBUF会触发系统调用最终调用sock_setsockopt函数，其处理设置选项过程如上：<br>其会将用户设置的缓冲区大小乘以2，然后和SOCK_MIN_SNDBUF（4608）比较，取较大值<br>因此最终较小的缓冲区设置值200没有生效，生效的是4608</p>
<h2 id="设置发送缓冲区大小为中间值"><a href="#设置发送缓冲区大小为中间值" class="headerlink" title="设置发送缓冲区大小为中间值"></a>设置发送缓冲区大小为中间值</h2><p>缓冲区系统设置值大小：<br>net.core.wmem_max = 212992<br>net.ipv4.tcp_wmem = 4096    16384 4194304</p>
<p>实验动作将缓冲区大小设置为3000<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">0</span>;</div><div class="line"><span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(sendbuflen);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"default,sendbuf:%d\n"</span>, sendbuflen);</div><div class="line"></div><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">3000</span>;</div><div class="line">setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, len);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"now,sendbuf:%d\n"</span>, sendbuflen);</div></pre></td></tr></table></figure></p>
<p>实验程序输出：<br>default,sendbuf:16384<br>now,sendbuf:6000<br>输出信息总结：设置大小3000生效，sndbuf大小会被设置成为3000*2</p>
<h2 id="设置发送缓冲区大小威较大值"><a href="#设置发送缓冲区大小威较大值" class="headerlink" title="设置发送缓冲区大小威较大值"></a>设置发送缓冲区大小威较大值</h2><p>缓冲区系统设置值大小：<br>net.core.wmem_max = 212992<br>net.ipv4.tcp_wmem = 4096    16384 4194304</p>
<p>实验动作将缓冲区大小设置为230000<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">0</span>;</div><div class="line"><span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(sendbuflen);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"default,sendbuf:%d\n"</span>, sendbuflen);</div><div class="line"></div><div class="line"><span class="keyword">socklen_t</span> sendbuflen = <span class="number">230000</span>;</div><div class="line">setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, len);</div><div class="line">getsockopt(fd, SOL_SOCKET, SO_SNDBUF, (<span class="keyword">void</span>*)&amp;sendbuflen, &amp;len);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"now,sendbuf:%d\n"</span>, sendbuflen);</div></pre></td></tr></table></figure></p>
<p>实现程序输出：<br>default,sendbuf:16384<br>now,sendbuf:425984<br>实验结果分析：设置大小23000（大于系统212992），sendbuf最终结果为212992*2 </p>
<h3 id="原因探究-2"><a href="#原因探究-2" class="headerlink" title="原因探究"></a>原因探究</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> SO_SNDBUF:</div><div class="line">		val = <span class="keyword">min_t</span>(u32, val, sysctl_wmem_max);</div><div class="line">set_sndbuf:</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_SNDBUF_LOCK;</div><div class="line">		sk-&gt;sk_sndbuf = <span class="keyword">max_t</span>(<span class="keyword">int</span>, val * <span class="number">2</span>, SOCK_MIN_SNDBUF);</div><div class="line">		<span class="comment">/* Wake up sending tasks if we upped the value. */</span></div><div class="line">		sk-&gt;sk_write_space(sk);</div><div class="line">		<span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>val为用户set的值，其在选择时候会同sysctl_wmem_max比较，选取一个较小的值，如果设置值大于sysctl_wmem_max值的话，val就取系统wmem的最大值。</p>
<p>如上可知：230000 &gt; net.core.wmem_max ,所以用户设置SO_SNDBUF选项最大只能取net.core.wmem_max，所以最终sk_sndbubf值为net.core.wmem_max*2 即425984</p>
<h2 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h2><p>tcp socket记录当前发送队列的占用缓冲区大小的变量为sk_wmem_queued<br>和发送缓冲区判断函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">sk_stream_memory_free</span><span class="params">(<span class="keyword">const</span> struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_wmem_queued &gt;= sk-&gt;sk_sndbuf)</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sk-&gt;sk_prot-&gt;stream_memory_free ?</div><div class="line">		sk-&gt;sk_prot-&gt;stream_memory_free(sk) : <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上述判别中我们可以知道，发送缓冲区记录和比对单位均是字节</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tcp-socket发送缓冲区探究结论&quot;&gt;&lt;a href=&quot;#tcp-socket发送缓冲区探究结论&quot; class=&quot;headerlink&quot; title=&quot;tcp socket发送缓冲区探究结论&quot;&gt;&lt;/a&gt;tcp socket发送缓冲区探究结论&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1: 未设置SO_SNDBUF时，sk-&amp;gt;sk_sndbuf值由tcp_finish_connect-&amp;gt;tcp_init_buffer_space-&amp;gt;tcp_sndbuf_expand决定，TCP协议栈会自己计算一个值出来46080，sk_sndbuf是46080和net.ipv4.tcp_wmem[2]（4194304）的较小值&lt;/p&gt;
&lt;p&gt;2: 设置SO_SNDBUF后，tcp_sndbuf_expand将不会再被调用，其值情况完全由sock_setsockopt决定&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2-1: 设置值较小 value &amp;lt;  2304 { SOCK_MIN_SNDBUF（4608）/2 }&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sk_sndbuf = 4608&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2-2: 设置值适中 { SOCK_MIN_SNDBUF（4608）/2 }  &amp;lt;  value  &amp;lt;  net.core.wmem_max&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sk_sndbuf = value*2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2-3: 设置值较大 value &amp;gt; net.core.wmem_max&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sk_sndbuf = net.core.wmem_max* 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>PF_INET和AF_INET区别</title>
    <link href="http://vcpu.me/pf_inet/"/>
    <id>http://vcpu.me/pf_inet/</id>
    <published>2017-06-20T10:12:51.000Z</published>
    <updated>2017-06-20T10:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PF-INET和AF-INET区别"><a href="#PF-INET和AF-INET区别" class="headerlink" title="PF_INET和AF_INET区别"></a>PF_INET和AF_INET区别</h1><ul>
<li>在初始化socket时候socket(PF_INET,SOCK_SRTEAM,0) 用PF_INET，表示ip协议</li>
<li>指定地址协议族时候用AF_INET，表示地址为IP协议</li>
<li>Linux AF_INET和PF_INET值相同均为2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">socket.h</div><div class="line"></div><div class="line">#define AF_INET		2	/* Internet IP Protocol *</div><div class="line"></div><div class="line">...</div><div class="line">#define PF_INET		AF_INET</div></pre></td></tr></table></figure>
<h1 id="socket通信协议类型"><a href="#socket通信协议类型" class="headerlink" title="socket通信协议类型"></a>socket通信协议类型</h1><ul>
<li>SOCKET_STREAM: 面向连接TCP</li>
<li>SOCK_DGRAM: 无保障UDP</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PF-INET和AF-INET区别&quot;&gt;&lt;a href=&quot;#PF-INET和AF-INET区别&quot; class=&quot;headerlink&quot; title=&quot;PF_INET和AF_INET区别&quot;&gt;&lt;/a&gt;PF_INET和AF_INET区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在初始化
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="PF_INET" scheme="http://vcpu.me/tags/PF-INET/"/>
    
      <category term="AF_INET" scheme="http://vcpu.me/tags/AF-INET/"/>
    
  </entry>
  
  <entry>
    <title>sockaddr_in和sockaddr的区别</title>
    <link href="http://vcpu.me/sockaddr_in/"/>
    <id>http://vcpu.me/sockaddr_in/</id>
    <published>2017-06-20T07:18:11.000Z</published>
    <updated>2017-06-20T07:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sockaddr-in在头文件-usr-include-netinet-in-h"><a href="#sockaddr-in在头文件-usr-include-netinet-in-h" class="headerlink" title="sockaddr_in在头文件/usr/include/netinet/in.h"></a>sockaddr_in在头文件/usr/include/netinet/in.h</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/* Structure describing an Internet socket address.  */</div><div class="line">struct sockaddr_in</div><div class="line">  &#123;</div><div class="line">    __SOCKADDR_COMMON (sin_);</div><div class="line">    in_port_t sin_port;			/* Port number.  */</div><div class="line">    struct in_addr sin_addr;		/* Internet address.  */</div><div class="line"></div><div class="line">    /* Pad to size of `struct sockaddr&apos;.  */</div><div class="line">    unsigned char sin_zero[sizeof (struct sockaddr) -</div><div class="line">			   __SOCKADDR_COMMON_SIZE -</div><div class="line">			   sizeof (in_port_t) -</div><div class="line">			   sizeof (struct in_addr)];</div><div class="line">  &#125;;</div><div class="line">  or</div><div class="line">  struct  sockaddr_in &#123;</div><div class="line">	short  int  sin_family;                 /* Address family */</div><div class="line">	unsigned  short  int  sin_port;         /* Port number */</div><div class="line">	struct  in_addr  sin_addr;              /* Internet address */</div><div class="line">	unsigned  char  sin_zero[8];            /* Same size as struct sockaddr */</div><div class="line">&#125;;</div><div class="line">  </div><div class="line">   </div><div class="line"> struct   in_addr   &#123;</div><div class="line"> 		union &#123;</div><div class="line">          	struct &#123; u_char s_b1,s_b2,s_b3,s_b4; &#125; S_un_b;</div><div class="line">          	struct &#123; u_short s_w1,s_w2; &#125; S_un_w;</div><div class="line">          	u_long S_addr; </div><div class="line">          	&#125; S_un;</div><div class="line">          	 #define s_addr  S_un.S_addr</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<ul>
<li>组成包含协议家族、端口、地址、填充</li>
<li>端口和地址，需要是网络字节序号</li>
<li>inet_addr(“127.0.0.1”)把字符串点分十进制地址按照网络字节序转换为4字节的地址</li>
</ul>
<a id="more"></a>
<h2 id="sockaddr为通用的socket地址"><a href="#sockaddr为通用的socket地址" class="headerlink" title="sockaddr为通用的socket地址"></a>sockaddr为通用的socket地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct sockaddr &#123;    </div><div class="line">      unsigned short sa_family;  // address family, AF_INET    </div><div class="line">      char sa_data[14];          // 14 bytes of protocol address    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>bind、connect、recv、send等socket参数使用的就是这个结构体</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sockaddr-in在头文件-usr-include-netinet-in-h&quot;&gt;&lt;a href=&quot;#sockaddr-in在头文件-usr-include-netinet-in-h&quot; class=&quot;headerlink&quot; title=&quot;sockaddr_in在头文件/usr/include/netinet/in.h&quot;&gt;&lt;/a&gt;sockaddr_in在头文件/usr/include/netinet/in.h&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* Structure describing an Internet socket address.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct sockaddr_in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    __SOCKADDR_COMMON (sin_);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    in_port_t sin_port;			/* Port number.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr sin_addr;		/* Internet address.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /* Pad to size of `struct sockaddr&amp;apos;.  */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char sin_zero[sizeof (struct sockaddr) -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   __SOCKADDR_COMMON_SIZE -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   sizeof (in_port_t) -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			   sizeof (struct in_addr)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  or&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  struct  sockaddr_in &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	short  int  sin_family;                 /* Address family */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned  short  int  sin_port;         /* Port number */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	struct  in_addr  sin_addr;              /* Internet address */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	unsigned  char  sin_zero[8];            /* Same size as struct sockaddr */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; struct   in_addr   &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 		union &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	struct &amp;#123; u_char s_b1,s_b2,s_b3,s_b4; &amp;#125; S_un_b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	struct &amp;#123; u_short s_w1,s_w2; &amp;#125; S_un_w;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	u_long S_addr; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	&amp;#125; S_un;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          	 #define s_addr  S_un.S_addr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;组成包含协议家族、端口、地址、填充&lt;/li&gt;
&lt;li&gt;端口和地址，需要是网络字节序号&lt;/li&gt;
&lt;li&gt;inet_addr(“127.0.0.1”)把字符串点分十进制地址按照网络字节序转换为4字节的地址&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="sockaddr_in" scheme="http://vcpu.me/tags/sockaddr-in/"/>
    
      <category term="sockaddr" scheme="http://vcpu.me/tags/sockaddr/"/>
    
  </entry>
  
  <entry>
    <title>systemtap使用调试记录（二）</title>
    <link href="http://vcpu.me/socket_stp/"/>
    <id>http://vcpu.me/socket_stp/</id>
    <published>2017-06-20T06:52:23.000Z</published>
    <updated>2017-06-20T06:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="socket-sendbubf探究stp脚本"><a href="#socket-sendbubf探究stp脚本" class="headerlink" title="socket sendbubf探究stp脚本"></a>socket sendbubf探究stp脚本</h2><ul>
<li>centos7 3.10.0-514.16.1.el7.x86_64</li>
</ul>
<p>该systap脚本是在调用协议栈sk-&gt;sk_sndbuf可能改变的位置增加探测点，探究snd_buf变更规律使用</p>
<a id="more"></a>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>socket.stp<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line">  <span class="comment">#include &lt;linux/tcp.h&gt;</span></div><div class="line">  <span class="comment">#include&lt;linux/rtc.h&gt;</span></div><div class="line">  <span class="comment">#include &lt;net/tcp.h&gt;</span></div><div class="line"></div><div class="line">    static const char tcp_state_array[][<span class="number">16</span>] = &#123;</div><div class="line">        <span class="string">"NULL"</span>,</div><div class="line">        <span class="string">"ESTABLISHED"</span>,</div><div class="line">        <span class="string">"SYN_SENT"</span>,</div><div class="line">        <span class="string">"SYN_RECV"</span>,</div><div class="line">        <span class="string">"FIN_WAIT1"</span>,</div><div class="line">        <span class="string">"FIN_WAIT2"</span>,</div><div class="line">        <span class="string">"TIME_WAIT"</span>,</div><div class="line">        <span class="string">"CLOSE"</span>,</div><div class="line">        <span class="string">"CLOSE_WAIT"</span>,</div><div class="line">        <span class="string">"LAST_ACK"</span>,</div><div class="line">        <span class="string">"LISTEN"</span>,</div><div class="line">        <span class="string">"CLOSING"</span></div><div class="line">    &#125;;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_short_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_full_time:string()</div><div class="line">%&#123;</div><div class="line">    struct timeval tv;</div><div class="line">    struct rtc_time tm;</div><div class="line">    unsigned long <span class="keyword">time</span>;</div><div class="line"></div><div class="line">    do_gettimeofday(&amp;tv);</div><div class="line">    <span class="keyword">time</span> = tv.tv_sec + <span class="number">8</span> * <span class="number">3600</span>;</div><div class="line">    rtc_time_to_tm(<span class="keyword">time</span>, &amp;tm);</div><div class="line"></div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%d/%d/%d,%02d:%02d:%02d"</span>,</div><div class="line">        tm.tm_year+<span class="number">1900</span>, tm.tm_mon+<span class="number">1</span>, tm.tm_mday,</div><div class="line">        tm.tm_hour, tm.tm_min, tm.tm_sec);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_lifetime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    STAP_RETVALUE = jiffies_to_msecs(tcp_time_stamp - info-&gt;estab_t);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_conn_data:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct tcp_sock *tp = tcp_sk(sk);</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line">    u32 len = tp-&gt;snd_nxt - info-&gt;isn;</div><div class="line"></div><div class="line">    STAP_RETVALUE = len ? len - <span class="number">1</span> : len;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function filter_http_transtime:long (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    struct stap_info *info = sk-&gt;sk_protinfo;</div><div class="line"></div><div class="line">    STAP_RETVALUE = info-&gt;http_filter;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_addr:string (sk:long)</div><div class="line">&#123;</div><div class="line">    laddr = tcpmib_local_addr(sk)</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    raddr = tcpmib_remote_addr(sk)</div><div class="line">    rport = tcpmib_remote_port(sk)</div><div class="line"></div><div class="line">    local_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(laddr)), lport)</div><div class="line">    remote_addr = <span class="keyword">sprintf</span>(<span class="string">"%s:%d"</span>, ip_ntop(htonl(raddr)), rport)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">sprintf</span>(<span class="string">"local=%s,remote=%s"</span>, local_addr, remote_addr)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function get_socket_state:string (sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk = (struct sock *)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[sk-&gt;sk_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function get_socket_sk_sndbuf:string(sk:long)</div><div class="line">%&#123;</div><div class="line">    struct sock *sk=(struct sock*)STAP_ARG_sk;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE,<span class="string">"%d:%d"</span>, sk-&gt;sk_wmem_queued, sk-&gt;sk_sndbuf);</div><div class="line">%&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">function socket_state_num2str:string (<span class="keyword">state</span>:long)</div><div class="line">%&#123;</div><div class="line">    <span class="keyword">sprintf</span>(STAP_RETVALUE, <span class="string">"%s"</span>, tcp_state_array[STAP_ARG_state]);</div><div class="line">%&#125;</div><div class="line"></div><div class="line">function sshfilter:long(sk:long)</div><div class="line">&#123;</div><div class="line">    lport = tcpmib_local_port(sk)</div><div class="line">    <span class="keyword">if</span>(lport == <span class="number">22</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_send_ack"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_send_ack[%s]%s state:%s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_sendmsg"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_sendmsg[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_sendmsg"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_sendmsg return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/core/sock.c:711"</span>)&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sock:711 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/core/sock.c:715"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sock:715 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/ipv4/ip_output.c:1581"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"ip_output:1581 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/ipv4/ip_output.c:1583"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"ip_output:1583 return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.statement(<span class="string">"*@net/ipv4/tcp_input.c:304"</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_input:304 return [%s]%s state:%s,sndbubf %s sndmem : %d permss %d\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk),$sndmem,$per_mss);</div><div class="line">    print_backtrace()</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"__sk_mem_schedule"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"__sk_mem_schedule[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"__sk_mem_schedule"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"__sk_mem_schedule return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_page_frag_refill"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_page_frag_refill[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_page_frag_refill"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_page_frag_refill return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_stream_alloc_skb"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_stream_alloc_skb[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"sk_stream_alloc_skb"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"sk_stream_alloc_skb return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_v4_connect"</span>).call&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_v4_connect[%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div><div class="line"></div><div class="line">probe kernel.function(<span class="string">"tcp_v4_connect"</span>).<span class="keyword">return</span>&#123;</div><div class="line">    <span class="keyword">if</span>(sshfilter($sk))</div><div class="line">        <span class="keyword">next</span></div><div class="line">    <span class="keyword">printf</span>(<span class="string">"tcp_v4_connect return [%s]%s state:%s,sndbubf %s\n"</span>,get_full_time(),get_socket_addr($sk),get_socket_state($sk),get_socket_sk_sndbuf($sk));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><p>stap -g socket.stp</p>
<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# stap -g socket.stp</div><div class="line">WARNING: Eliding unused function 'filter_http_transtime': identifier 'filter_http_transtime' at socket.stp:68:10</div><div class="line"> source: function filter_http_transtime:long (sk:long)</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'get_conn_data': identifier 'get_conn_data' at :58:10</div><div class="line"> source: function get_conn_data:long (sk:long)</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'get_conn_lifetime': identifier 'get_conn_lifetime' at :51:10</div><div class="line"> source: function get_conn_lifetime:long (sk:long)</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'get_short_time': identifier 'get_short_time' at :22:10</div><div class="line"> source: function get_short_time:string()</div><div class="line">                  ^</div><div class="line">WARNING: Eliding unused function 'socket_state_num2str': identifier 'socket_state_num2str' at :104:10</div><div class="line"> source: function socket_state_num2str:string (state:long)</div><div class="line">                  ^</div><div class="line">sock:711 return [2017/6/20,14:42:35]local=0.0.0.0:0,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:16384</div><div class="line">sock:715 return [2017/6/20,14:42:35]local=0.0.0.0:0,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:32768</div><div class="line">tcp_v4_connect[2017/6/20,14:42:35]local=0.0.0.0:3000,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:32768</div><div class="line">tcp_v4_connect return [2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:SYN_SENT,sndbubf 1280:32768</div><div class="line">tcp_send_ack[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED</div><div class="line">tcp_sendmsg[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:32768</div><div class="line">sk_stream_alloc_skb[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:32768</div><div class="line">sk_stream_alloc_skb return [2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 0:32768</div><div class="line">tcp_sendmsg return [2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED,sndbubf 2304:32768</div><div class="line">tcp_send_ack[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED</div><div class="line">tcp_send_ack[2017/6/20,14:42:35]local=192.168.55.178:3000,remote=180.97.33.108:80 state:ESTABLISHED</div><div class="line">ip_output:1583 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1581 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1583 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1581 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1583 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div><div class="line">ip_output:1581 return [2017/6/20,14:42:35]local=0.0.0.0:6,remote=0.0.0.0:0 state:CLOSE,sndbubf 0:212992</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;socket-sendbubf探究stp脚本&quot;&gt;&lt;a href=&quot;#socket-sendbubf探究stp脚本&quot; class=&quot;headerlink&quot; title=&quot;socket sendbubf探究stp脚本&quot;&gt;&lt;/a&gt;socket sendbubf探究stp脚本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;centos7 3.10.0-514.16.1.el7.x86_64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该systap脚本是在调用协议栈sk-&amp;gt;sk_sndbuf可能改变的位置增加探测点，探究snd_buf变更规律使用&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
      <category term="systemtap" scheme="http://vcpu.me/tags/systemtap/"/>
    
  </entry>
  
  <entry>
    <title>socket send</title>
    <link href="http://vcpu.me/socketsend1/"/>
    <id>http://vcpu.me/socketsend1/</id>
    <published>2017-06-19T04:43:31.000Z</published>
    <updated>2017-06-19T04:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户态发送函数列表"><a href="#用户态发送函数列表" class="headerlink" title="用户态发送函数列表"></a>用户态发送函数列表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> send(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags);</div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,</div><div class="line">                            <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen);</div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> sendmsg(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct msghdr *msg, <span class="keyword">int</span> flags);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendmmsg</span><span class="params">(<span class="keyword">int</span> sockfd, struct mmsghdr *msgvec, <span class="keyword">unsigned</span> <span class="keyword">int</span> vlen,</span></span></div><div class="line">                                                            <span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</div><div class="line">                                                            </div><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="发送函数之间差别"><a href="#发送函数之间差别" class="headerlink" title="发送函数之间差别"></a>发送函数之间差别</h2><blockquote>
<p>send 有连接协议发送数据使用，send第四个参数flags为0时候，等价于write</p>
<blockquote>
<p>send(sockfd, buf, len, 0) 等价 write（sockfd, buf, len）</p>
</blockquote>
<p>send是sendto一部分,send可被sendto替换</p>
<blockquote>
<p>send(sockfd, buf, len, flags) 等价于  sendto(sockfd, buf, len, flags, NULL, 0)</p>
</blockquote>
<p>sendto 无连接和有连接发包都可以使用</p>
<p>sendmsg 可替换上树所有的发包函数</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> &#123;</span></div><div class="line">     <span class="keyword">void</span>         *msg_name;       <span class="comment">/* optional address */</span></div><div class="line">     <span class="keyword">socklen_t</span>     msg_namelen;    <span class="comment">/* size of address */</span></div><div class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">msg_iov</span>;</span>        <span class="comment">/* scatter/gather array */</span></div><div class="line">     <span class="keyword">size_t</span>        msg_iovlen;     <span class="comment">/* # elements in msg_iov */</span></div><div class="line">     <span class="keyword">void</span>         *msg_control;    <span class="comment">/* ancillary data, see below */</span></div><div class="line">     <span class="keyword">size_t</span>        msg_controllen; <span class="comment">/* ancillary data buffer len */</span></div><div class="line">     <span class="keyword">int</span>           msg_flags;      <span class="comment">/* flags (unused) */</span></div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
</blockquote>
<p> /proc/sys/net/core/optmem_max可控制每个socket的msg_control大小<br> sendmsg不使用msg_flags参数</p>
</blockquote>
<h2 id="send发包过程概述"><a href="#send发包过程概述" class="headerlink" title="send发包过程概述"></a>send发包过程概述</h2><ul>
<li><p>阻塞模式下<br> 调用send函数时候，比较要发送数据和套接字发送缓冲区长度（net.ipv4.tcp_wmem）；如果发送缓冲区较小，函数直接返回SOCKET_ERR;</p>
 <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> send_len &lt;= tcp_wmem&#123;</div><div class="line">	<span class="keyword">if</span> is sending&#123;</div><div class="line">		wait</div><div class="line">		<span class="keyword">if</span> network err</div><div class="line">			<span class="keyword">return</span> SCOKET_ERR</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">if</span> len &gt; tcp_wmem left&#123;</div><div class="line">			wait</div><div class="line">			<span class="keyword">if</span> network err</div><div class="line">				<span class="keyword">return</span> SCOKET_ERR</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			copy data to tcp buf</div><div class="line">			<span class="keyword">if</span> copy err</div><div class="line">				<span class="keyword">return</span> SCOKET_ERR</div><div class="line">			<span class="keyword">return</span> copy data size</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 剩余缓冲区能容纳发送数据，则直接将数据拷贝到缓冲区中，send直接返回。如果剩余缓冲区不足，发送端阻塞等待，对端在协议栈层接收到数据后会发送ack确认，发送方接收到ack后释放缓冲区空间；如果此时剩余缓冲区大小可放置要发送数据，则直接将数据拷入缓冲区，返回。<br> Tips：阻塞模式下，数据发送正常，其返回的数据长度一定是发送数据的长度。</p>
</li>
</ul>
<ul>
<li>非阻塞模式下<br>  send函数将数据拷入协议栈缓冲区，如果缓冲区不足，则send尽力拷贝，并返回拷贝大小；如果缓冲区满则返回-1，同时errno为EAGAIN，让发送端再次尝试发送数据。</li>
</ul>
<h2 id="发送缓冲区设置"><a href="#发送缓冲区设置" class="headerlink" title="发送缓冲区设置"></a>发送缓冲区设置</h2><pre><code>socklen_t sendbuflen = 0;  
socklen_t len = sizeof(sendbuflen);  
getsockopt(clientSocket, SOL_SOCKET, SO_SNDBUF, (void*)&amp;sendbuflen, &amp;len);  
printf(&quot;default,sendbuf:%d\n&quot;, sendbuflen);      
sendbuflen = 10240;  
setsockopt(clientSocket, SOL_SOCKET, SO_SNDBUF, (void*)&amp;sendbuflen, len);  
getsockopt(clientSocket, SOL_SOCKET, SO_SNDBUF, (void*)&amp;sendbuflen, &amp;len);  
printf(&quot;now,sendbuf:%d\n&quot;, sendbuflen); 
</code></pre><h2 id="send发包实例解析"><a href="#send发包实例解析" class="headerlink" title="send发包实例解析"></a>send发包实例解析</h2><p>实际socket使用过程中，常用的是非阻塞模式，我们就以非阻塞模式为例进行分析，预设多种场景如下：</p>
<ul>
<li><p>场景1：发送端10k数据已经安全放入缓冲区，已实际发出2k（收到对端ack），接收端正在处理数据，此时发送端因为10k数据发送完毕，关闭了socket。</p>
<blockquote>
<p>场景分析：</p>
<blockquote>
<p>发送端关闭socket，主动fin告诉对端发送端数据发送完毕想关闭TCP连接，发送完fin后发送端处于fin wait1状态等待接收端ack确认；发送端协议栈剩余8k数据依然在独立发送，待数据发送完成后，协议栈才会把fin发给接收端；接收端在接收ack完10k数据后，且收到fin信号后，接收端回复ack确认fin信号，两者协商关闭socket。</p>
</blockquote>
</blockquote>
</li>
<li><p>场景2：发送端预期发送10k数据，已将2k数据拷入缓冲区并实际发出拷入的2k数据（收到对端ack），接收端正在处理数据，此时发送端又发送了8k新数据；（缓冲区充足(8k新数据会被拷入缓冲区)情况我们不讨论）缓冲区不足时候会发生什么？</p>
<blockquote>
<p>场景分析</p>
<blockquote>
<p>新发送的10k数据会尽力拷入缓冲区，send返回拷入缓冲区数据长度2k，如果此时缓冲区剩余空间为0时候，客户端强制send数据，会收到EAGAIN信号；其实这种情况客户端正确处理方式是读出缓冲区可写信号再发送数据，而不是自己进行发送尝试。</p>
</blockquote>
</blockquote>
</li>
<li><p>场景3:发送端10k数据已经安全放入缓冲区，已实际发出2k（收到对端ack），接收端正在处理接收到1k数据，处理完成后数据接收端关闭了socket，会发发生什么？</p>
<blockquote>
<p>场景分析</p>
<blockquote>
<ul>
<li>数据发送端有监听机制，数据发送端用户态会得到接收端端关闭信号（socket可读信号），这时候用户正确打开方式是调用close关闭socket</li>
<li>如果数据发送端未处理该关闭信号，且数据接收端没有rst强制关闭连接，数据发送端仍然可正常发送数据</li>
<li>如果数据发送端未处理该关闭信号，但是数据接收端已经rst强制关闭连接，数据发送端仍然在send发送数据，send将返回-1</li>
<li>如果是阻塞情况，但是因缓冲区满正在阻塞，如果接收端发送rst，阻塞发送端会退出阻塞返回，发送成功字节数，如果在此调用send，将返回-1</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><p>场景4：发送端10k数据已经安全放入缓冲区，已实际发出2k（收到对端ack），接收端正在处理接收到1k数据，此时网络出现异常</p>
<blockquote>
<p>场景分析</p>
<blockquote>
<p>接收应用程序在处理完已收到的1k数据后,会继续从缓存区读取余下的1k数据,然后就表现为无数据可读的现象,这种情况需要应用程序来处理超时.一般做法是设定一个select等待的最大时间,如果超出这个时间依然没有数据可读,则认为socket已不可用.<br>发送应用程序会不断的将余下的数据发送到网络上,但始终得不到确认,所以缓存区的可用空间持续为0,这种情况也需要应用程序来处理.如果不由应用程序来处理这种情况超时的情况,也可以通过tcp协议本身来处理,具体可以查看sysctl项中的:<br>net.ipv4.tcp_keepalive_intvl<br>net.ipv4.tcp_keepalive_probes<br>net.ipv4.tcp_keepalive_time</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="send特点"><a href="#send特点" class="headerlink" title="send特点"></a>send特点</h2><ul>
<li>send只是将数据放入缓冲区中，并不是真正已经发给对方</li>
<li>非阻塞发送字节可以是1-n，其发送多少完全依赖于剩余的发送缓冲区</li>
</ul>
<h2 id="socket发送函数解析"><a href="#socket发送函数解析" class="headerlink" title="socket发送函数解析"></a>socket发送函数解析</h2><h3 id="发送流程图"><a href="#发送流程图" class="headerlink" title="发送流程图"></a>发送流程图</h3><blockquote>
<p>send<br>sendto<br>sendmmsg<br>sendmsg </p>
</blockquote>
<p>上述流程调用过程如下：<br>-&gt;socketcall -&gt;sock_sendmsg -&gt; __sock_sendmsg -&gt; sock-&gt;ops-&gt;sendmsg(inet_sendmsg)<br>-&gt;[tcp_prot]tcp_sendmsg</p>
<h3 id="内核系统调用"><a href="#内核系统调用" class="headerlink" title="内核系统调用"></a>内核系统调用</h3><p>send    、sendto、sendmsg、sendmmsg发送函数由glibc提供，声明于/usr/include/sys/socket.h<br>用户态在调用后会进入到sys_socketcall系统调用中，下面代码部分就是其入口<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE2(socketcall, <span class="keyword">int</span>, call, <span class="keyword">unsigned</span> <span class="keyword">long</span> __user *, args)</div><div class="line">&#123;</div><div class="line">...</div><div class="line">	<span class="keyword">switch</span> (call) &#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">case</span> SYS_SEND:</div><div class="line">		err = sys_send(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_SENDTO:</div><div class="line">		err = sys_sendto(a0, (<span class="keyword">void</span> __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>],</div><div class="line">				 (struct sockaddr __user *)a[<span class="number">4</span>], a[<span class="number">5</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	...</div><div class="line">	<span class="keyword">case</span> SYS_SENDMSG:</div><div class="line">		err = sys_sendmsg(a0, (struct msghdr __user *)a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_SENDMMSG:</div><div class="line">		err = sys_sendmmsg(a0, (struct mmsghdr __user *)a1, a[<span class="number">2</span>], a[<span class="number">3</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	...</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>send 是sendto的一种特殊情况,(sendto发送地址为NULL发送地址长度为0)</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE4(send, <span class="keyword">int</span>, fd, <span class="keyword">void</span> __user *, buff, <span class="keyword">size_t</span>, len,</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>, flags)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> sys_sendto(fd, buff, len, flags, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sendto -&gt; sock_sendmsg -&gt; __sock_sendmsg -&gt; sock-&gt;ops-&gt;sendmsg(inet_sendmsg)</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE6(sendto, <span class="keyword">int</span>, fd, <span class="keyword">void</span> __user *, buff, <span class="keyword">size_t</span>, len,</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>, flags, struct sockaddr __user *, addr,</div><div class="line">		<span class="keyword">int</span>, addr_len)</div><div class="line">&#123;</div><div class="line"> ...</div><div class="line">	err = sock_sendmsg(sock, &amp;msg, len);</div><div class="line"></div><div class="line">out_put:</div><div class="line">	fput_light(sock-&gt;file, fput_needed);</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sendmsg 和sendmmsg 完成用户态数据拷贝到内核态后，最终也是调用inet_sendmsg处理，在此就拿sendto情况详细分析</li>
</ul>
<h3 id="sendto源码实现分析"><a href="#sendto源码实现分析" class="headerlink" title="sendto源码实现分析"></a>sendto源码实现分析</h3><p>sendto -&gt; sock_sendmsg -&gt; “<strong>sock_sendmsg” -&gt;”</strong>sock_sendmsg_nosec” -&gt; sock-&gt;ops-&gt;sendmsg(inet_sendmsg)</p>
<ul>
<li>首先分析sock_sendmsg实现</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_sendmsg</span><span class="params">(struct socket *sock, struct msghdr *msg, <span class="keyword">size_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kiocb</span> <span class="title">iocb</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock_iocb</span> <span class="title">siocb</span>;</span></div><div class="line">	<span class="keyword">int</span> ret;</div><div class="line">	<span class="comment">/*异步IO控制块初始化*/</span></div><div class="line">	init_sync_kiocb(&amp;iocb, <span class="literal">NULL</span>);</div><div class="line">	iocb.<span class="keyword">private</span> = &amp;siocb;</div><div class="line">	<span class="comment">/*异步控制块调用完毕后，可调用__sock_sendmsg发送数据*/</span></div><div class="line">	ret = __sock_sendmsg(&amp;iocb, sock, msg, size);</div><div class="line">	<span class="keyword">if</span> (-EIOCBQUEUED == ret)</div><div class="line">		ret = wait_on_sync_kiocb(&amp;iocb);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> __sock_sendmsg(struct kiocb *iocb, struct socket *sock,</div><div class="line">				 struct msghdr *msg, <span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> err = security_socket_sendmsg(sock, msg, size);</div><div class="line">	<span class="comment">/*调用__sock_sendmsg_nosec*/</span></div><div class="line">	<span class="keyword">return</span> err ?: __sock_sendmsg_nosec(iocb, sock, msg, size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> __sock_sendmsg_nosec(struct kiocb *iocb, struct socket *sock,</div><div class="line">				       struct msghdr *msg, <span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock_iocb</span> *<span class="title">si</span> = <span class="title">kiocb_to_siocb</span>(<span class="title">iocb</span>);</span></div><div class="line"></div><div class="line">	si-&gt;sock = sock;</div><div class="line">	si-&gt;scm = <span class="literal">NULL</span>;</div><div class="line">	si-&gt;msg = msg;</div><div class="line">	si-&gt;size = size;</div><div class="line">	</div><div class="line">	<span class="comment">/*调用inet_sendnsg*/</span></div><div class="line">	<span class="keyword">return</span> sock-&gt;ops-&gt;sendmsg(iocb, sock, msg, size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_sendmsg</span><span class="params">(struct kiocb *iocb, struct socket *sock, struct msghdr *msg,</span></span></div><div class="line">		 <span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line"></div><div class="line">	sock_rps_record_flow(sk);</div><div class="line">	<span class="comment">/*如果连接没有分配本地端口且允许分配本地端口，我们就给连接绑定一个本地端口</span></div><div class="line">	*/</div><div class="line">	<span class="comment">/* We may need to bind the socket. */</span></div><div class="line">	<span class="keyword">if</span> (!inet_sk(sk)-&gt;inet_num &amp;&amp; !sk-&gt;sk_prot-&gt;no_autobind &amp;&amp;</div><div class="line">	    inet_autobind(sk))</div><div class="line">	   </div><div class="line">		<span class="keyword">return</span> -EAGAIN;</div><div class="line">	<span class="comment">/*传输层是TCP情况下，调用tcp_sendmsg()*/</span></div><div class="line">	<span class="keyword">return</span> sk-&gt;sk_prot-&gt;sendmsg(iocb, sk, msg, size);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其次分析inet_autobind ，获取可用端口并给，获取后的端口会赋值给inet-&gt;inet_sport/inet_num</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inet_autobind</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span>;</span></div><div class="line">	<span class="comment">/* We may need to bind the socket. */</span></div><div class="line">	lock_sock(sk);</div><div class="line">	inet = inet_sk(sk);</div><div class="line">	<span class="keyword">if</span> (!inet-&gt;inet_num) &#123;</div><div class="line">		<span class="comment">/*针对于TCP情况sk-&gt;sk_prot-&gt;get_port调用的是inet_csk_get_port</span></div><div class="line">		* inet_csk_get_port工作获取端口，并将其赋值给inet-&gt;inet_num</div><div class="line">		*/</div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;get_port(sk, <span class="number">0</span>)) &#123;</div><div class="line">			release_sock(sk);</div><div class="line">			<span class="keyword">return</span> -EAGAIN;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/*获取inet-&gt;inet_num赋值给inet-&gt;inet_sport*/</span></div><div class="line">		inet-&gt;inet_sport = htons(inet-&gt;inet_num);</div><div class="line">	&#125;</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后分析tcp_sendmsg</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_sendmsg</span><span class="params">(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,</span></span></div><div class="line">		<span class="keyword">size_t</span> size)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">iov</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">skb</span>;</span></div><div class="line">	<span class="keyword">int</span> iovlen, flags, err, copied = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> mss_now = <span class="number">0</span>, size_goal, copied_syn = <span class="number">0</span>, offset = <span class="number">0</span>;</div><div class="line">	<span class="keyword">bool</span> sg;</div><div class="line">	<span class="keyword">long</span> timeo;</div><div class="line"></div><div class="line">	lock_sock(sk);</div><div class="line">	</div><div class="line">	flags = msg-&gt;msg_flags;</div><div class="line">	<span class="keyword">if</span> (flags &amp; MSG_FASTOPEN) &#123;</div><div class="line">		err = tcp_sendmsg_fastopen(sk, msg, &amp;copied_syn, size);</div><div class="line">		<span class="keyword">if</span> (err == -EINPROGRESS &amp;&amp; copied_syn &gt; <span class="number">0</span>)</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (err)</div><div class="line">			<span class="keyword">goto</span> out_err;</div><div class="line">		offset = copied_syn;</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">    <span class="comment">/*</span></div><div class="line">	* 获取数据发送超时时间</div><div class="line">	*/</div><div class="line">	timeo = sock_sndtimeo(sk, flags &amp; MSG_DONTWAIT);</div><div class="line"></div><div class="line">	<span class="comment">/* Wait for a connection to finish. One exception is TCP Fast Open</span></div><div class="line">	 * (passive side) where data is allowed to be sent before a connection</div><div class="line">	 * is fully established.</div><div class="line">	 */</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * TCP状态检查，ES和CLOSE_WAIT状态才能发送数据，其它状态都要等待连接建立起来</div><div class="line">	 * 否则直接返回错误</div><div class="line">	 * </div><div class="line">	 * 随着协议栈进步，增加一种情况tcp_passive_fastopen即tcp被动快速打开时候，不区分当前TCP处于状态</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (((<span class="number">1</span> &lt;&lt; sk-&gt;sk_state) &amp; ~(TCPF_ESTABLISHED | TCPF_CLOSE_WAIT)) &amp;&amp;</div><div class="line">	    !tcp_passive_fastopen(sk)) &#123;</div><div class="line">	    <span class="comment">/*等待连接建立，连接建立成功则返回0*/</span></div><div class="line">		<span class="keyword">if</span> ((err = sk_stream_wait_connect(sk, &amp;timeo)) != <span class="number">0</span>)</div><div class="line">			<span class="keyword">goto</span> do_error;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*开启repair功能处理*/</span></div><div class="line">	<span class="keyword">if</span> (unlikely(tp-&gt;repair)) &#123;</div><div class="line">		<span class="keyword">if</span> (tp-&gt;repair_queue == TCP_RECV_QUEUE) &#123;</div><div class="line">			copied = tcp_send_rcvq(sk, msg, size);</div><div class="line">			<span class="keyword">goto</span> out_nopush;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">if</span> (tp-&gt;repair_queue == TCP_NO_QUEUE)</div><div class="line">			<span class="keyword">goto</span> out_err;</div><div class="line"></div><div class="line">		<span class="comment">/* 'common' sending to sendq */</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**/</span></div><div class="line">	<span class="comment">/* This should be in poll */</span></div><div class="line">	clear_bit(SOCK_ASYNC_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line"></div><div class="line">	<span class="comment">/*获取发送mss*/</span></div><div class="line">	mss_now = tcp_send_mss(sk, &amp;size_goal, flags);</div><div class="line"></div><div class="line">	<span class="comment">/* Ok commence sending. */</span></div><div class="line">	iovlen = msg-&gt;msg_iovlen;<span class="comment">//应用层要发送数据块个数</span></div><div class="line">	iov = msg-&gt;msg_iov;<span class="comment">//要发送数据地址</span></div><div class="line">	copied = <span class="number">0</span>;<span class="comment">//已经放到缓冲区的数据长度</span></div><div class="line"></div><div class="line">	err = -EPIPE;</div><div class="line">	<span class="comment">/*在发送数据前，如果sk已经关闭或者出现err，直接返回 -EPIPE*/</span></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_err || (sk-&gt;sk_shutdown &amp; SEND_SHUTDOWN))</div><div class="line">		<span class="keyword">goto</span> out_err;</div><div class="line"></div><div class="line">	<span class="comment">/*网卡分散聚合*/</span></div><div class="line">	sg = !!(sk-&gt;sk_route_caps &amp; NETIF_F_SG);</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (--iovlen &gt;= <span class="number">0</span>) &#123;</div><div class="line">	</div><div class="line">		<span class="comment">/*获取用户态数据长度和数据指针并指向下一个用户态要发送数据块*/</span></div><div class="line">		<span class="keyword">size_t</span> seglen = iov-&gt;iov_len;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span> __user *from = iov-&gt;iov_base;</div><div class="line">		iov++;</div><div class="line">		</div><div class="line">		<span class="comment">/*TCP fast open涉及*/</span></div><div class="line">		<span class="keyword">if</span> (unlikely(offset &gt; <span class="number">0</span>)) &#123;  <span class="comment">/* Skip bytes copied in SYN */</span></div><div class="line">			<span class="keyword">if</span> (offset &gt;= seglen) &#123;</div><div class="line">				offset -= seglen;</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			seglen -= offset;</div><div class="line">			from += offset;</div><div class="line">			offset = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (seglen &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> copy = <span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> max = size_goal;</div><div class="line">			<span class="comment">/*从发送队列尾部取skb，尝试将用户态数据放入skb-&gt;data剩余空间*/</span></div><div class="line">			skb = tcp_write_queue_tail(sk);</div><div class="line">			<span class="keyword">if</span> (tcp_send_head(sk)) &#123;</div><div class="line">			</div><div class="line">				<span class="comment">/*另一种mss情况，GSO*/</span></div><div class="line">				<span class="keyword">if</span> (skb-&gt;ip_summed == CHECKSUM_NONE)</div><div class="line">					max = mss_now;</div><div class="line">				copy = max - skb-&gt;len;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (copy &lt;= <span class="number">0</span>) &#123;<span class="comment">/*skb已经装满数据，后续会申请新的skb来发送数据*/</span></div><div class="line">new_segment:</div><div class="line">				<span class="comment">/* Allocate new segment. If the interface is SG,</span></div><div class="line">				 * allocate skb fitting to single page.</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (!sk_stream_memory_free(sk))</div><div class="line">					<span class="keyword">goto</span> wait_for_sndbuf;</div><div class="line">				</div><div class="line">				<span class="comment">/*申请内存大小为select_size（线性数据区+协议头），申请失败或者不合法，睡眠等待*/</span></div><div class="line">				skb = sk_stream_alloc_skb(sk,</div><div class="line">							  select_size(sk, sg),</div><div class="line">							  sk-&gt;sk_allocation);</div><div class="line">				<span class="keyword">if</span> (!skb)</div><div class="line">					<span class="keyword">goto</span> wait_for_memory;</div><div class="line"></div><div class="line">				<span class="comment">/*</span></div><div class="line">				 * Check whether we can use HW checksum.</div><div class="line">				 * 检查释放网卡硬件释放可以计算校验和</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (sk-&gt;sk_route_caps &amp; NETIF_F_CSUM_MASK)</div><div class="line">					skb-&gt;ip_summed = CHECKSUM_PARTIAL;</div><div class="line"></div><div class="line">				<span class="comment">/*将新分配的skb入sk_write_queue数据发送队列*/</span></div><div class="line">				skb_entail(sk, skb);</div><div class="line">				copy = size_goal;</div><div class="line">				max = size_goal;</div><div class="line"></div><div class="line">				<span class="comment">/* All packets are restored as if they have</span></div><div class="line">				 * already been sent. skb_mstamp isn't set to</div><div class="line">				 * avoid wrong rtt estimation.</div><div class="line">				 * TCP repair</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (tp-&gt;repair)</div><div class="line">					TCP_SKB_CB(skb)-&gt;sacked |= TCPCB_REPAIRED;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">/* Try to append data to the end of skb. */</span></div><div class="line">			<span class="keyword">if</span> (copy &gt; seglen)</div><div class="line">				copy = seglen;</div><div class="line"></div><div class="line">			<span class="comment">/* Where to copy to? */</span></div><div class="line">			<span class="comment">/*如果数据还有线性区间，直接将数据拷入冰计算校验和*/</span></div><div class="line">			<span class="keyword">if</span> (skb_availroom(skb) &gt; <span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">/* We have some space in skb head. Superb! */</span></div><div class="line">				copy = <span class="keyword">min_t</span>(<span class="keyword">int</span>, copy, skb_availroom(skb));</div><div class="line">				err = skb_add_data_nocache(sk, skb, from, copy);</div><div class="line">				<span class="keyword">if</span> (err)</div><div class="line">					<span class="keyword">goto</span> do_fault;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;<span class="comment">/*如果没有了线性空间*/</span></div><div class="line">				<span class="comment">/*</span></div><div class="line">				*  数据会被复制到分页中</div><div class="line">				*  </div><div class="line">				*/</div><div class="line">				<span class="keyword">bool</span> merge = <span class="literal">true</span>;</div><div class="line">				<span class="comment">/*取得当前SKB的分片段数*/</span></div><div class="line">				<span class="keyword">int</span> i = skb_shinfo(skb)-&gt;nr_frags;</div><div class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">page_frag</span> *<span class="title">pfrag</span> = <span class="title">sk_page_frag</span>(<span class="title">sk</span>);</span></div><div class="line">				<span class="comment">/*检查分也可用空间，如果没有就申请新的页，如果系统内存不足就睡眠等待*/</span></div><div class="line">				<span class="keyword">if</span> (!sk_page_frag_refill(sk, pfrag))</div><div class="line">					<span class="keyword">goto</span> wait_for_memory;</div><div class="line">				</div><div class="line">				<span class="comment">/*如果不能将数据最佳到最后一个分片*/</span></div><div class="line">				<span class="keyword">if</span> (!skb_can_coalesce(skb, i, pfrag-&gt;page,</div><div class="line">						      pfrag-&gt;offset)) &#123;</div><div class="line">					<span class="comment">/*分页已经达到最大规格，将当前数据发出去，跳到new_segment重新申请skb*/</span></div><div class="line">					<span class="keyword">if</span> (i == MAX_SKB_FRAGS || !sg) &#123;</div><div class="line">						tcp_mark_push(tp, skb);</div><div class="line">						<span class="keyword">goto</span> new_segment;</div><div class="line">					&#125;</div><div class="line">					merge = <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				copy = <span class="keyword">min_t</span>(<span class="keyword">int</span>, copy, pfrag-&gt;size - pfrag-&gt;offset);</div><div class="line">				</div><div class="line">				<span class="comment">/*系统对发送缓冲区申请合法性判断*/</span></div><div class="line">				<span class="keyword">if</span> (!sk_wmem_schedule(sk, copy))</div><div class="line">					<span class="keyword">goto</span> wait_for_memory;</div><div class="line">				<span class="comment">/*拷贝用户空间数据，同时计算校验和，更新数据skb长度和缓存*/</span></div><div class="line">				err = skb_copy_to_page_nocache(sk, from, skb,</div><div class="line">							       pfrag-&gt;page,</div><div class="line">							       pfrag-&gt;offset,</div><div class="line">							       copy);</div><div class="line">				<span class="keyword">if</span> (err)</div><div class="line">					<span class="keyword">goto</span> do_error;</div><div class="line"></div><div class="line">				<span class="comment">/* Update the skb. */</span></div><div class="line">				<span class="comment">/*最后一个分页可以放数据数据页被放入了，就更新分也大小记录*/</span></div><div class="line">				<span class="keyword">if</span> (merge) &#123;</div><div class="line">					skb_frag_size_add(&amp;skb_shinfo(skb)-&gt;frags[i - <span class="number">1</span>], copy);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">/*如果不能分页就新增页，并初始化*/</span></div><div class="line">					skb_fill_page_desc(skb, i, pfrag-&gt;page,</div><div class="line">							   pfrag-&gt;offset, copy);</div><div class="line">					get_page(pfrag-&gt;page);</div><div class="line">				&#125;</div><div class="line">				pfrag-&gt;offset += copy;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">/*如果复制数据长度为0，不用加PSH标记*/</span></div><div class="line">			<span class="keyword">if</span> (!copied)</div><div class="line">				TCP_SKB_CB(skb)-&gt;tcp_flags &amp;= ~TCPHDR_PSH;</div><div class="line">			<span class="comment">/*更新发送队列中最后一个序号，数据包的最后一个序号*/</span></div><div class="line">			tp-&gt;write_seq += copy;</div><div class="line">			TCP_SKB_CB(skb)-&gt;end_seq += copy;</div><div class="line">			skb_shinfo(skb)-&gt;gso_segs = <span class="number">0</span>;</div><div class="line">			</div><div class="line">			<span class="comment">/*已经拷入了copy大小数据，用户态指针后移且更新已经拷贝数据增加*/</span></div><div class="line">			from += copy;</div><div class="line">			copied += copy;</div><div class="line">			</div><div class="line">			<span class="comment">/*所有数据处理完毕，直接退出*/</span></div><div class="line">			<span class="keyword">if</span> ((seglen -= copy) == <span class="number">0</span> &amp;&amp; iovlen == <span class="number">0</span>)</div><div class="line">				<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">			<span class="comment">/*如果skbb还可以继续填充数据或者是带外数据或者是有REPAIR选项，继续使用skb*/</span></div><div class="line">			<span class="keyword">if</span> (skb-&gt;len &lt; max || (flags &amp; MSG_OOB) || unlikely(tp-&gt;repair))</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">			<span class="comment">/*检查释放必须立即发送，即检查自上次发送后产生的数据是否已经超过对方通告过的最大接收窗口的一半。如果必须发送则设置紧急数据标示，然后将数据发出去*/</span></div><div class="line">			<span class="keyword">if</span> (forced_push(tp)) &#123;</div><div class="line">				tcp_mark_push(tp, skb);</div><div class="line">				__tcp_push_pending_frames(sk, mss_now, TCP_NAGLE_PUSH);</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (skb == tcp_send_head(sk))</div><div class="line">				<span class="comment">/*数据不必立即发送，且数据上只存在这段数据，则将这段数据发出*/</span></div><div class="line">				tcp_push_one(sk, mss_now);</div><div class="line">				</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">wait_for_sndbuf:</div><div class="line"><span class="comment">/*套接口缓冲区大小超过限制，此时无法再申请skb放数据，我们设置socket满标志*/</span></div><div class="line">			set_bit(SOCK_NOSPACE, &amp;sk-&gt;sk_socket-&gt;flags);</div><div class="line">			</div><div class="line"><span class="comment">/*系统内存不足处理*/</span></div><div class="line">wait_for_memory:</div><div class="line">	<span class="comment">/*skb分配失败了，已经拷入发送队列数据，直接调用tcp_push发出去</span></div><div class="line">	～MSG_MORE表示无更多数据</div><div class="line">	TCP_NAGLE_PUSH 选项调用NAGLE，尽量减少小字节发送数据</div><div class="line">	*/</div><div class="line">			<span class="keyword">if</span> (copied)</div><div class="line">				tcp_push(sk, flags &amp; ~MSG_MORE, mss_now,</div><div class="line">					 TCP_NAGLE_PUSH, size_goal);</div><div class="line">		<span class="comment">/*等待内存空闲，超过timeo时间后返回错误*/</span></div><div class="line">			<span class="keyword">if</span> ((err = sk_stream_wait_memory(sk, &amp;timeo)) != <span class="number">0</span>)</div><div class="line">				<span class="keyword">goto</span> do_error;</div><div class="line">			<span class="comment">/*啊，内存来了，重新获取MSS和TSO，继续将用户态数据拷入缓冲区*/</span></div><div class="line">			mss_now = tcp_send_mss(sk, &amp;size_goal, flags);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">out:</div><div class="line">	<span class="comment">/*如果数据已经拷入发送队列，则立即发送*/</span></div><div class="line">	<span class="keyword">if</span> (copied)</div><div class="line">		tcp_push(sk, flags, mss_now, tp-&gt;nonagle, size_goal);</div><div class="line">out_nopush:</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> copied + copied_syn;</div><div class="line"></div><div class="line">do_fault:</div><div class="line">	<span class="comment">/*复制数据异常时才进入这里</span></div><div class="line">	* skb无负载数据，从发送队列上去除，并更新发送队列等参数*/</div><div class="line">	<span class="keyword">if</span> (!skb-&gt;len) &#123;</div><div class="line">		tcp_unlink_write_queue(skb, sk);</div><div class="line">		<span class="comment">/* It is the one place in all of TCP, except connection</span></div><div class="line">		 * reset, where we can be unlinking the send_head.</div><div class="line">		 */</div><div class="line">		tcp_check_send_head(sk, skb);</div><div class="line">		sk_wmem_free_skb(sk, skb);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">do_error:</div><div class="line">	<span class="comment">/*如果已经复制了部分数据，即使发生了错误也可以发送，跳到out就是去发送数据去了*/</span></div><div class="line">	<span class="keyword">if</span> (copied + copied_syn)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">out_err:</div><div class="line">	err = sk_stream_error(sk, flags, err);</div><div class="line">	release_sock(sk);</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>tcp_sendmsg()做了以下事情：</p>
<ol>
<li>如果使用了TCP Fast Open，则会在发送SYN包的同时携带上数据。</li>
<li>如果连接尚未建立好，不处于ESTABLISHED或者CLOSE_WAIT状态，<br> 那么进程进行睡眠，等待三次握手的完成。</li>
<li>获取当前的MSS、网络设备支持的最大数据长度size_goal。<br> 如果支持GSO，size_goal会是MSS的整数倍。</li>
<li>遍历用户层的数据块数组：<br> 4.1 获取发送队列的最后一个skb，如果是尚未发送的，且长度尚未达到size_goal，<pre><code>那么可以往此skb继续追加数据。
</code></pre> 4.2 否则需要申请一个新的skb来装载数据。<br> 4.2.1 如果发送队列的总大小sk_wmem_queued大于等于发送缓存的上限sk_sndbuf，<pre><code>或者发送缓存中尚未发送的数据量超过了用户的设置值：
设置同步发送时发送缓存不够的标志。
如果此时已有数据复制到发送队列了，就尝试立即发送。
等待发送缓存，直到sock有发送缓存可写事件唤醒进程，或者等待超时。
</code></pre> 4.2.2 申请一个skb，其线性数据区的大小为：<pre><code>通过select_size()得到的线性数据区中TCP负荷的大小 + 最大的协议头长度。
如果申请skb失败了，或者虽然申请skb成功，但是从系统层面判断此次申请不合法，
等待可用内存，等待时间为2~202ms之间的一个随机数。
</code></pre> 4.2.3 如果以上两步成功了，就更新skb的TCP控制块字段，把skb加入到sock发送队列的尾部，<pre><code>增加发送队列的大小，减小预分配缓存的大小。
</code></pre> 4.3 接下来就是拷贝消息头中的数据到skb中了。<pre><code>如果skb的线性数据区还有剩余空间，就复制数据到线性数据区中，同时计算校验和。
</code></pre> 4.4 如果skb的线性数据区已经用完了，那么就使用分页区：<br> 4.4.1 检查分页是否有可用空间，如果没有就申请新的page。如果申请失败，说明系统内存不足。<pre><code>之后会设置TCP内存压力标志，减小发送缓冲区的上限，睡眠等待内存。
</code></pre> 4.4.2 判断能否往最后一个分页追加数据。不能追加时，检查分页数是否达到了上限、<pre><code>或网卡不支持分散聚合。如果是的话，就为此skb设置PSH标志。
然后跳转到4.2处申请新的skb，来继续填装数据。
</code></pre> 4.4.3 从系统层面判断此次分页发送缓存的申请是否合法。<br> 4.4.4 拷贝用户空间的数据到skb的分页中，同时计算校验和。<pre><code>更新skb的长度字段，更新sock的发送队列大小和预分配缓存。
</code></pre> 4.4.5 如果把数据追加到最后一个分页了，更新最后一个分页的数据大小。否则初始化新的分页。<br> 4.5 拷贝成功后更新：发送队列的最后一个序号、skb的结束序号、已经拷贝到发送队列的数据量。<br> 4.6 尽可能的将发送队列中的skb发送出去。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>  <a href="http://blog.csdn.net/zhangskd/article/details/48207553" target="_blank" rel="external">http://blog.csdn.net/zhangskd/article/details/48207553</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用户态发送函数列表&quot;&gt;&lt;a href=&quot;#用户态发送函数列表&quot; class=&quot;headerlink&quot; title=&quot;用户态发送函数列表&quot;&gt;&lt;/a&gt;用户态发送函数列表&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; send(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; sendto(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; struct sockaddr *dest_addr, &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; addrlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; sendmsg(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; struct msghdr *msg, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendmmsg&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, struct mmsghdr *msgvec, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; vlen,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; write(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="send" scheme="http://vcpu.me/tags/send/"/>
    
      <category term="sendto" scheme="http://vcpu.me/tags/sendto/"/>
    
      <category term="sendmsg" scheme="http://vcpu.me/tags/sendmsg/"/>
    
      <category term="sendmmsg" scheme="http://vcpu.me/tags/sendmmsg/"/>
    
  </entry>
  
  <entry>
    <title>centos环境下脚本执行顺序探究</title>
    <link href="http://vcpu.me/centos%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://vcpu.me/centos脚本执行顺序/</id>
    <published>2017-06-15T07:42:10.000Z</published>
    <updated>2017-06-15T07:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos脚本执行顺序"><a href="#centos脚本执行顺序" class="headerlink" title="centos脚本执行顺序"></a>centos脚本执行顺序</h1><p>通用角度分析，centos 7 系统中存在如下以下5种常用的脚本路径<br>/etc/rc.d/rc.local<br>/etc/profile<br>/etc/bashrc<br>~/.bash_profile<br>~/.bashrc</p>
<p>通过在除rc外的脚本中加入echo信息，reboot虚拟机并ssh登陆用户，打印出顺序如下<br>I am etc profile<br>i am etc bashrc<br>i am ~ bash rc<br>i am ~ bash profile</p>
<a id="more"></a>
<h2 id="脚本执行顺序和执行时机"><a href="#脚本执行顺序和执行时机" class="headerlink" title="脚本执行顺序和执行时机"></a>脚本执行顺序和执行时机</h2><table>
<thead>
<tr>
<th>脚本路径</th>
<th style="text-align:center">执行顺序</th>
<th style="text-align:right">执行时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/rc.d/rc.local</td>
<td style="text-align:center">1</td>
<td style="text-align:right">系统起机执行一次，后续均不执行</td>
</tr>
<tr>
<td>/etc/profile</td>
<td style="text-align:center">2</td>
<td style="text-align:right">ssh/su/界面登陆时执行</td>
</tr>
<tr>
<td>/etc/bashrc</td>
<td style="text-align:center">3</td>
<td style="text-align:right">ssh/su/界面登陆时执行</td>
</tr>
<tr>
<td>~/.bash_profile</td>
<td style="text-align:center">4</td>
<td style="text-align:right">ssh/su/界面登陆以当前用户身份登陆</td>
</tr>
<tr>
<td>~/.bashrc</td>
<td style="text-align:center">5</td>
<td style="text-align:right">ssh/su/界面登陆以当前用户身份登陆</td>
</tr>
</tbody>
</table>
<h2 id="脚本含义"><a href="#脚本含义" class="headerlink" title="脚本含义"></a>脚本含义</h2><p>rc.local脚本centos启动时候执行脚本，可以用作默认启动<br>/etc/profile和/etc/bashrc 属于系统的全局变量设置<br>~/profile和~/bashrc 属于给予某一个用户的变量设置</p>
<h2 id="profile和bashrc区别"><a href="#profile和bashrc区别" class="headerlink" title="profile和bashrc区别"></a>profile和bashrc区别</h2><ul>
<li>profile 是用户唯一用来设置环境变量的地方，因为用户可能有多种shell（bash、sh、zsh），环境变量没有必要在每种shell都初始化，只需要统一初始化就行，很显然，profile就是这样的地方</li>
<li>bashrc 是专门给bash做初始化设置的，相对应来讲，其它shell会有专门的shrc、zshrc文件存放</li>
</ul>
<h2 id="开机启动脚本其它说明"><a href="#开机启动脚本其它说明" class="headerlink" title="开机启动脚本其它说明"></a>开机启动脚本其它说明</h2><p>centos7 默认是没有执行权限的，想在此处加执行脚本，执行脚本不会执行到，需要增添执行权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost rc.d]# ls -alt rc.local</div><div class="line">-rw-r--r--. 1 root root 491 Jun 13 22:24 rc.local</div><div class="line">[root@localhost rc.d]# chmod +x rc.local</div><div class="line"></div><div class="line">[root@localhost qinlong]# ls -alt /etc/rc.d/rc.local</div><div class="line">-rwxr-xr-x. 1 root root 535 Jun 13 22:48 /etc/rc.d/rc.local</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;centos脚本执行顺序&quot;&gt;&lt;a href=&quot;#centos脚本执行顺序&quot; class=&quot;headerlink&quot; title=&quot;centos脚本执行顺序&quot;&gt;&lt;/a&gt;centos脚本执行顺序&lt;/h1&gt;&lt;p&gt;通用角度分析，centos 7 系统中存在如下以下5种常用的脚本路径&lt;br&gt;/etc/rc.d/rc.local&lt;br&gt;/etc/profile&lt;br&gt;/etc/bashrc&lt;br&gt;~/.bash_profile&lt;br&gt;~/.bashrc&lt;/p&gt;
&lt;p&gt;通过在除rc外的脚本中加入echo信息，reboot虚拟机并ssh登陆用户，打印出顺序如下&lt;br&gt;I am etc profile&lt;br&gt;i am etc bashrc&lt;br&gt;i am ~ bash rc&lt;br&gt;i am ~ bash profile&lt;/p&gt;
    
    </summary>
    
      <category term="centos" scheme="http://vcpu.me/categories/centos/"/>
    
    
      <category term="linux" scheme="http://vcpu.me/tags/linux/"/>
    
      <category term="centos" scheme="http://vcpu.me/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>f-stack安装运行</title>
    <link href="http://vcpu.me/f-stack%E5%AE%89%E8%A3%85/"/>
    <id>http://vcpu.me/f-stack安装/</id>
    <published>2017-06-12T09:50:55.000Z</published>
    <updated>2017-07-04T06:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-os-virtual-box跑f-stack环境搭建"><a href="#mac-os-virtual-box跑f-stack环境搭建" class="headerlink" title="mac os virtual box跑f-stack环境搭建"></a>mac os virtual box跑f-stack环境搭建</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>kernel版本3.10.0-514.el7.x86_64<br>CentOS-7-x86_64-Minimal-1611.iso<br>Mac osx<br>Oreacle Virtual Box5.1.22<br>kernel-devel</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="在Oreacle-Virtual-Box上安装centos-7虚拟机"><a href="#在Oreacle-Virtual-Box上安装centos-7虚拟机" class="headerlink" title="在Oreacle Virtual Box上安装centos 7虚拟机"></a>在Oreacle Virtual Box上安装centos 7虚拟机</h3><h4 id="配置开启NAT网卡和桥接网卡"><a href="#配置开启NAT网卡和桥接网卡" class="headerlink" title="配置开启NAT网卡和桥接网卡"></a>配置开启NAT网卡和桥接网卡</h4><ul>
<li>网卡配置芯片类型选择<br>Add two more virtual network adapters with “Intel PRO/1000 MT Server (82545EM)” type in order to provide virtual network hardware to the virtual machine that is supported by Intel DPDK.<br>  上述说明来自于一篇国外文档说明，使用的Inetl 82545EM，但是经过尝试Intel PRO/1000MT桌面(82540EN)也是可以的。所以不要太迷信啦。</li>
</ul>
<a id="more"></a>
<ul>
<li>桥接网卡用来ssh登陆管理串口，NAT网卡用来运行DPDK驱动，跑nginx<br>  在Virtual Box上制作地址映射<br>  <img src="/myimages/wk1.png" alt="wk1"><br>  <img src="/myimages/wk2.png" alt="wk2"></li>
<li>centos7虚拟机上网口配置信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s17</div><div class="line">TYPE="Ethernet"</div><div class="line">BOOTPROTO="dhcp"</div><div class="line">DEFROUTE="yes"</div><div class="line">PEERDNS="yes"</div><div class="line">PEERROUTES="yes"</div><div class="line">IPV4_FAILURE_FATAL="no"</div><div class="line">IPV6INIT="yes"</div><div class="line">IPV6_AUTOCONF="yes"</div><div class="line">IPV6_DEFROUTE="yes"</div><div class="line">IPV6_PEERDNS="yes"</div><div class="line">IPV6_PEERROUTES="yes"</div><div class="line">IPV6_FAILURE_FATAL="no"</div><div class="line">IPV6_ADDR_GEN_MODE="stable-privacy"</div><div class="line">NAME="enp0s17"</div><div class="line">UUID="2ea1ed66-7bcd-4153-a495-39c25d5f0ff9"</div><div class="line">DEVICE="enp0s17"</div><div class="line">ONBOOT="yes"</div><div class="line">[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-enp0s8</div><div class="line">TYPE=Ethernet</div><div class="line">BOOTPROTO=dhcp</div><div class="line">DEFROUTE=yes</div><div class="line">PEERDNS=yes</div><div class="line">PEERROUTES=yes</div><div class="line">IPV4_FAILURE_FATAL=no</div><div class="line">IPV6INIT=yes</div><div class="line">IPV6_AUTOCONF=yes</div><div class="line">IPV6_DEFROUTE=yes</div><div class="line">IPV6_PEERDNS=yes</div><div class="line">IPV6_PEERROUTES=yes</div><div class="line">IPV6_FAILURE_FATAL=no</div><div class="line">IPV6_ADDR_GEN_MODE=stable-privacy</div><div class="line">NAME=enp0s8</div><div class="line">UUID=6c930d05-bc17-4316-998e-f01a7233cbd3</div><div class="line">DEVICE=enp0s8</div><div class="line">ONBOOT=yes</div><div class="line">[root@localhost ~]# ifconfig</div><div class="line">enp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.55.183  netmask 255.255.255.0  broadcast 192.168.55.255</div><div class="line">        inet6 fe80::f97d:539:4010:eaff  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 08:00:27:d5:ee:00  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 521  bytes 58437 (57.0 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 155  bytes 23680 (23.1 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">enp0s17: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255</div><div class="line">        inet6 fe80::a15d:3b87:fec0:f3c1  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 08:00:27:28:39:6c  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 2  bytes 1180 (1.1 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 10  bytes 1308 (1.2 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class="line">        inet 127.0.0.1  netmask 255.0.0.0</div><div class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class="line">        loop  txqueuelen 1  (Local Loopback)</div><div class="line">        RX packets 0  bytes 0 (0.0 B)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 0  bytes 0 (0.0 B)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">```     </div><div class="line">        </div><div class="line"><span class="meta">#</span>### 开启CPU flags(SSE 4.1/SSE 4.2)</div><div class="line"></div><div class="line">```shell</div><div class="line">VBoxManage setextradata "VM name" VBoxInternal/CPUM/SSE4.1 1</div><div class="line">VBoxManage setextradata "VM name" VBoxInternal/CPUM/SSE4.2 1</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Note:</p>
<ul>
<li>上述CPU flags默认是不开启的，启动f-stack上ngx会err日志如下</li>
<li>如果不开启sse cpu选项，在启动ngx会报如下问题<br>/usr/local/nginx_fstack/sbin/nginx /data/f-stack/config.ini -c 1 –proc-type=primary –num-procs=1 –proc-id=0<br>ERROR: This system does not support “SSE4_1”.<br>Please check that RTE_MACHINE is set correctly.</li>
<li>做NAT网卡10.0.2.15需要在vbox上做主机地址和端口映射才能访问<br> <img src="/myimages/vboxaddr.png" alt="wk2"></li>
</ul>
<h3 id="安装详细步骤"><a href="#安装详细步骤" class="headerlink" title="安装详细步骤"></a>安装详细步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">yum install -y git gcc openssl-devel bc</div><div class="line">cd /data</div><div class="line">yum install kernel-devel-`uname -r` -y</div><div class="line">mkdir /data/f-stack</div><div class="line">git clone https://github.com/F-Stack/f-stack.git /data/f-stack</div><div class="line"><span class="meta"></span></div><div class="line"># Compile DPDK</div><div class="line">cd /data/f-stack/dpdk</div><div class="line">make config T=x86_64-native-linuxapp-gcc</div><div class="line">make</div><div class="line"><span class="meta"></span></div><div class="line"># set hugepage    </div><div class="line">echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</div><div class="line">mkdir /mnt/huge</div><div class="line">mount -t hugetlbfs nodev /mnt/huge</div><div class="line"><span class="meta"></span></div><div class="line"># insmod ko</div><div class="line">modprobe uio</div><div class="line">insmod build/kmod/igb_uio.ko</div><div class="line">insmod build/kmod/rte_kni.ko</div><div class="line"><span class="meta"></span></div><div class="line"># set ip address</div><div class="line">export myaddr=`ifconfig enp0s17 | grep "inet" | grep -v ":" | awk -F ' '  '&#123;print $2&#125;'`</div><div class="line">export mymask=`ifconfig enp0s17 | grep "netmask" | awk -F ' ' '&#123;print $4&#125;'`</div><div class="line">export mybc=`ifconfig enp0s17 | grep "broadcast" | awk -F ' ' '&#123;print $6&#125;'`</div><div class="line">export myhw=`ifconfig enp0s17 | grep "ether" | awk -F ' ' '&#123;print $2&#125;'`</div><div class="line">export mygw=`route -n | grep 0.0.0.0 | grep enp0s17 | grep UG | awk -F ' ' '&#123;print $2&#125;'`</div><div class="line"></div><div class="line">sed "s/addr=192.168.1.2/addr=$&#123;myaddr&#125;/" -i /data/f-stack/config.ini</div><div class="line">sed "s/netmask=255.255.255.0/netmask=$&#123;mymask&#125;/" -i /data/f-stack/config.ini</div><div class="line">sed "s/broadcast=192.168.1.255/broadcast=$&#123;mybc&#125;/" -i /data/f-stack/config.ini</div><div class="line">sed "s/gateway=192.168.1.1/gateway=$&#123;mygw&#125;/" -i /data/f-stack/config.ini</div><div class="line"><span class="meta"></span></div><div class="line"></div><div class="line"># Compile F-Stack lib</div><div class="line">export FF_PATH=/data/f-stack</div><div class="line">export FF_DPDK=/data/f-stack/dpdk/build</div><div class="line">cd /data/f-stack/lib</div><div class="line">make</div><div class="line"><span class="meta"></span></div><div class="line"># Compile Nginx</div><div class="line">cd ../app/nginx-1.11.10</div><div class="line">./configure --prefix=/usr/local/nginx_fstack --with-ff_module</div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="meta"></span></div><div class="line"># offload NIC（if there is only one NIC，the follow commands must run in a script）</div><div class="line">ifconfig enp0s17 down</div><div class="line">python /data/f-stack/dpdk/tools/dpdk-devbind.py --bind=igb_uio enp0s17</div><div class="line"><span class="meta"></span></div><div class="line"># start Nginx</div><div class="line">cd ../..</div><div class="line">./start.sh -b /usr/local/nginx_fstack/sbin/nginx -c config.ini</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在vbox主机上访问映射地址和端口192.168.55.165:8080 -&gt; 10.0.2.15:80<br>curl <a href="http://192.168.55.165:8080" target="_blank" rel="external">http://192.168.55.165:8080</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    body &#123;</div><div class="line">        width: 35em;</div><div class="line">        margin: 0 auto;</div><div class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</div><div class="line">working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.org/"</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">Commercial support is available at</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.com/"</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="f-stack-ngx配置文件"><a href="#f-stack-ngx配置文件" class="headerlink" title="f-stack ngx配置文件"></a>f-stack ngx配置文件</h3><p>/data/f-stack/config.ini<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">[dpdk]</div><div class="line"><span class="meta">#</span># Hexadecimal bitmask of cores to run on.</div><div class="line">lcore_mask=3</div><div class="line"><span class="meta">#</span># Port mask, enable and disable ports.</div><div class="line"><span class="meta">#</span># Default: all ports are enabled.</div><div class="line"><span class="meta">#</span>port_mask=1</div><div class="line">channel=4</div><div class="line"><span class="meta">#</span># Number of ports.</div><div class="line">nb_ports=1</div><div class="line">promiscuous=1</div><div class="line">numa_on=1</div><div class="line"><span class="meta">#</span># TCP segment offload, default: disabled.</div><div class="line">tso=0</div><div class="line"><span class="meta"></span></div><div class="line">## Port config section</div><div class="line"><span class="meta">#</span># According to dpdk.nb_ports: port0, port1...</div><div class="line">[port0]</div><div class="line">addr=10.0.2.15</div><div class="line">netmask=255.255.255.0</div><div class="line">broadcast=10.0.2.255</div><div class="line">gateway=10.0.2.2</div><div class="line"><span class="meta">#</span># Packet capture path, this will hurt performance</div><div class="line"><span class="meta">#</span>pcap=./a.pcap</div><div class="line"><span class="meta"></span></div><div class="line">## Kni config: if enabled and method=reject,</div><div class="line"><span class="meta">#</span># all packets that do not belong to the following tcp_port and udp_port</div><div class="line"><span class="meta">#</span># will transmit to kernel; if method=accept, all packets that belong to</div><div class="line"><span class="meta">#</span># the following tcp_port and udp_port will transmit to kernel.</div><div class="line"><span class="meta">#</span>[kni]</div><div class="line"><span class="meta">#</span>enable=1</div><div class="line"><span class="meta">#</span>method=reject</div><div class="line"><span class="meta">#</span>tcp_port=80,443</div><div class="line"><span class="meta">#</span>udp_port=53</div><div class="line"><span class="meta"></span></div><div class="line">## FreeBSD network performance tuning configurations.</div><div class="line"><span class="meta">#</span># Most native FreeBSD configurations are supported.</div><div class="line">[freebsd.boot]</div><div class="line">hz=100</div><div class="line"></div><div class="line">kern.ipc.maxsockets=262144</div><div class="line"></div><div class="line">net.inet.tcp.syncache.hashsize=4096</div><div class="line">net.inet.tcp.syncache.bucketlimit=100</div><div class="line"></div><div class="line">net.inet.tcp.tcbhashsize=65536</div><div class="line"></div><div class="line">[freebsd.sysctl]</div><div class="line">kern.ipc.somaxconn=32768</div><div class="line">kern.ipc.maxsockbuf=16777216</div><div class="line"></div><div class="line">net.inet.tcp.fast_finwait2_recycle=1</div><div class="line">net.inet.tcp.sendspace=16384</div><div class="line">net.inet.tcp.recvspace=8192</div><div class="line">net.inet.tcp.nolocaltimewait=1</div><div class="line">net.inet.tcp.cc.algorithm=htcp</div><div class="line">net.inet.tcp.sendbuf_max=16777216</div><div class="line">net.inet.tcp.recvbuf_max=16777216</div><div class="line">net.inet.tcp.sendbuf_auto=1</div><div class="line">net.inet.tcp.recvbuf_auto=1</div><div class="line">net.inet.tcp.sendbuf_inc=16384</div><div class="line">net.inet.tcp.recvbuf_inc=524288</div><div class="line">net.inet.tcp.inflight.enable=0</div><div class="line">net.inet.tcp.sack=1</div><div class="line">net.inet.tcp.blackhole=1</div><div class="line">net.inet.tcp.msl=2000</div><div class="line">net.inet.tcp.delayed_ack=0</div><div class="line"></div><div class="line">net.inet.udp.blackhole=1</div><div class="line">net.inet.ip.redirect=0</div></pre></td></tr></table></figure></p>
<h3 id="f-stack-ngx正常启动信息"><a href="#f-stack-ngx正常启动信息" class="headerlink" title="f-stack ngx正常启动信息"></a>f-stack ngx正常启动信息</h3><p>[root@localhost f-stack]# ./start.sh -b /usr/local/nginx_fstack/sbin/nginx -c config.ini<br>/usr/local/nginx_fstack/sbin/nginx config.ini -c 1 –proc-type=primary –num-procs=1 –proc-id=0</p>
<p>EAL: Detected 1 lcore(s)<br>EAL: Probing VFIO support…<br>EAL: PCI device 0000:00:08.0 on NUMA socket -1<br>EAL:   probe driver: 8086:100f rte_em_pmd<br>EAL: PCI device 0000:00:11.0 on NUMA socket -1<br>EAL:   probe driver: 8086:100f rte_em_pmd<br>create mbuf pool on socket 0<br>create ring:arp_ring_0_0 success, 2047 ring entries are now free!<br>Port 0 MAC: 08 00 27 28 39 6c<br>TSO is disabled<br>set port 0 to promiscuous mode ok</p>
<p>Checking link status………………..done<br>Port 0 Link Up - speed 1000 Mbps - full-duplex<br>link_elf_lookup_symbol: missing symbol hash table<br>link_elf_lookup_symbol: missing symbol hash table<br>netisr_init: forcing maxthreads from 1 to 0<br>Timecounters tick every 10.000 msec<br>Timecounter “ff_clock” frequency 100 Hz quality 1<br>f-stack-0: Ethernet address: 08:00:27:28:39:6c</p>
<h3 id="f-stack-环境安装完成后重启后应该重新设置的参数"><a href="#f-stack-环境安装完成后重启后应该重新设置的参数" class="headerlink" title="f-stack 环境安装完成后重启后应该重新设置的参数"></a>f-stack 环境安装完成后重启后应该重新设置的参数</h3><p>下述命令可放入/etc/rd.c/rd.local启动文件中，在机器重启后执行一次下面环境设置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</div><div class="line">mount -t hugetlbfs nodev /mnt/huge</div><div class="line">modprobe uio</div><div class="line">insmod /data/f-stack/dpdk/build/kmod/igb_uio.ko</div><div class="line">insmod /data/f-stack/dpdk/build/kmod/rte_kni.ko</div><div class="line">ifconfig enp0s17 down</div><div class="line">python /data/f-stack/dpdk/tools/dpdk-devbind.py --bind=igb_uio enp0s17</div><div class="line">/data/f-stack/start.sh -b /usr/local/nginx_fstack/sbin/nginx -c /data/f-stack/config.ini</div></pre></td></tr></table></figure></p>
<h3 id="如果kernel-devel-yum无法找到内核对应版本可去centos官网查找下载"><a href="#如果kernel-devel-yum无法找到内核对应版本可去centos官网查找下载" class="headerlink" title="如果kernel-devel yum无法找到内核对应版本可去centos官网查找下载"></a>如果kernel-devel yum无法找到内核对应版本可去centos官网查找下载</h3><p>wget <a href="https://buildlogs.centos.org/c7.1511.00/kernel/20151119220809/3.10.0-327.el7.x86_64/kernel-devel-3.10.0-327.el7.x86_64.rpm" target="_blank" rel="external">https://buildlogs.centos.org/c7.1511.00/kernel/20151119220809/3.10.0-327.el7.x86_64/kernel-devel-3.10.0-327.el7.x86_64.rpm</a><br>rpm -ivh kernel-devel-3.10.0-327.el7.x86_64.rpm</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mac-os-virtual-box跑f-stack环境搭建&quot;&gt;&lt;a href=&quot;#mac-os-virtual-box跑f-stack环境搭建&quot; class=&quot;headerlink&quot; title=&quot;mac os virtual box跑f-stack环境搭建&quot;&gt;&lt;/a&gt;mac os virtual box跑f-stack环境搭建&lt;/h1&gt;&lt;h2 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; class=&quot;headerlink&quot; title=&quot;基本环境&quot;&gt;&lt;/a&gt;基本环境&lt;/h2&gt;&lt;p&gt;kernel版本3.10.0-514.el7.x86_64&lt;br&gt;CentOS-7-x86_64-Minimal-1611.iso&lt;br&gt;Mac osx&lt;br&gt;Oreacle Virtual Box5.1.22&lt;br&gt;kernel-devel&lt;/p&gt;
&lt;h2 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;&lt;h3 id=&quot;在Oreacle-Virtual-Box上安装centos-7虚拟机&quot;&gt;&lt;a href=&quot;#在Oreacle-Virtual-Box上安装centos-7虚拟机&quot; class=&quot;headerlink&quot; title=&quot;在Oreacle Virtual Box上安装centos 7虚拟机&quot;&gt;&lt;/a&gt;在Oreacle Virtual Box上安装centos 7虚拟机&lt;/h3&gt;&lt;h4 id=&quot;配置开启NAT网卡和桥接网卡&quot;&gt;&lt;a href=&quot;#配置开启NAT网卡和桥接网卡&quot; class=&quot;headerlink&quot; title=&quot;配置开启NAT网卡和桥接网卡&quot;&gt;&lt;/a&gt;配置开启NAT网卡和桥接网卡&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;网卡配置芯片类型选择&lt;br&gt;Add two more virtual network adapters with “Intel PRO/1000 MT Server (82545EM)” type in order to provide virtual network hardware to the virtual machine that is supported by Intel DPDK.&lt;br&gt;  上述说明来自于一篇国外文档说明，使用的Inetl 82545EM，但是经过尝试Intel PRO/1000MT桌面(82540EN)也是可以的。所以不要太迷信啦。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DPDK" scheme="http://vcpu.me/categories/DPDK/"/>
    
    
      <category term="DPDK" scheme="http://vcpu.me/tags/DPDK/"/>
    
      <category term="f-stack" scheme="http://vcpu.me/tags/f-stack/"/>
    
      <category term="nginx" scheme="http://vcpu.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>bind()实现源码分析</title>
    <link href="http://vcpu.me/bind/"/>
    <id>http://vcpu.me/bind/</id>
    <published>2017-06-12T09:35:01.000Z</published>
    <updated>2017-06-12T09:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h1><p>内核版本：3.10.0-514.16.1.el7.x86_64<br>下述源码分析均以tcp socket为背景</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>socket文件描述符</li>
<li>要绑定的承载地址和端口的结构体 struct sockaddr</li>
<li>第二个参数struct sockaddr的长度</li>
</ul>
<blockquote>
<p>该函数负责绑定套接字的地址和端口，按照绑定者身份来分，会存在两种情况</p>
<blockquote>
<p>情况1:绑定者为客户端，主动发起请求方，绑定地址和端口成功后，会使用该地址和端口进行发包<br>一般情况下，客户端的地址和端口都是其自动选择的，不需要绑定动作。<br>情况2:绑定者为服务端，被动连接接收方，绑定地址和端口成功后，客户端只能向该地址和端口发送连接请求。服务端往往需要绑定地址和端口。如果服务端存在多网卡情况，其只需要绑定服务端口即可，其目的地址就是客户端访问的目的地址。<br><a id="more"></a></p>
</blockquote>
</blockquote>
<h2 id="sys-bind"><a href="#sys-bind" class="headerlink" title="sys_bind"></a>sys_bind</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE3(bind, <span class="keyword">int</span>, fd, struct sockaddr __user *, umyaddr, <span class="keyword">int</span>, addrlen)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">address</span>;</span></div><div class="line">	<span class="keyword">int</span> err, fput_needed;</div><div class="line"></div><div class="line">	sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);</div><div class="line">	<span class="keyword">if</span> (sock) &#123;</div><div class="line">		err = move_addr_to_kernel(umyaddr, addrlen, &amp;address);</div><div class="line">		<span class="keyword">if</span> (err &gt;= <span class="number">0</span>) &#123;</div><div class="line">			err = security_socket_bind(sock,</div><div class="line">						   (struct sockaddr *)&amp;address,</div><div class="line">						   addrlen);</div><div class="line">			<span class="keyword">if</span> (!err)</div><div class="line">				err = sock-&gt;ops-&gt;bind(sock,</div><div class="line">						      (struct sockaddr *)</div><div class="line">						      &amp;address, addrlen);<span class="comment">//inet_bind</span></div><div class="line">		&#125;</div><div class="line">		fput_light(sock-&gt;file, fput_needed);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sockfd_lookup_light 和move_addr_to_kernel分别为根据fd从当前进程取出socket和把参数从用户空间考入地址空间</li>
<li>bind系统调用最重要函数为sock-&gt;ops-&gt;bind</li>
<li>在TCP协议情况下inet_stream_ops中bind成员函数为inet_bind</li>
<li>后续为对此函数的分析</li>
</ul>
<h2 id="inet-bind"><a href="#inet-bind" class="headerlink" title="inet_bind"></a>inet_bind</h2><p>实现较为复杂，现在版本和原始版本相比，支持端口复用了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_bind</span><span class="params">(struct socket *sock, struct sockaddr *uaddr, <span class="keyword">int</span> addr_len)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">addr</span> = (<span class="title">struct</span> <span class="title">sockaddr_in</span> *)<span class="title">uaddr</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> snum;</div><div class="line">	<span class="keyword">int</span> chk_addr_ret;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	<span class="comment">/* If the socket has its own bind function then use it. (RAW) */</span></div><div class="line">	<span class="comment">/*raw socket才会用到，tcp_proc无此函数*/</span></div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;bind) &#123;</div><div class="line">		err = sk-&gt;sk_prot-&gt;bind(sk, uaddr, addr_len);</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line">	err = -EINVAL;</div><div class="line">	<span class="comment">/*地址长度检验*/</span></div><div class="line">	<span class="keyword">if</span> (addr_len &lt; <span class="keyword">sizeof</span>(struct sockaddr_in))</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	<span class="comment">/*bind地址中协议检查，必须是下面两种情况</span></div><div class="line">	* 1.绑定的地址协议为AF_INET</div><div class="line">	* 2.绑定协议为0（AF_UNSPEC）同时地址也为0</div><div class="line">	* 否则直接退出inet_bind ,返回地址不支持错误码</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (addr-&gt;sin_family != AF_INET) &#123;</div><div class="line">		<span class="comment">/* Compatibility games : accept AF_UNSPEC (mapped to AF_INET)</span></div><div class="line">		 * only if s_addr is INADDR_ANY.</div><div class="line">		 */</div><div class="line">		err = -EAFNOSUPPORT;</div><div class="line">		<span class="keyword">if</span> (addr-&gt;sin_family != AF_UNSPEC ||</div><div class="line">		    addr-&gt;sin_addr.s_addr != htonl(INADDR_ANY))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*获取根据IP地址得出地址类型</span></div><div class="line">		RTN_LOCAL 本机地址</div><div class="line">		RTN_MULTICAST 多播</div><div class="line">		RTN_BROADCAST 广播</div><div class="line">		RTN_UNICAST</div><div class="line">	*/</div><div class="line">	chk_addr_ret = inet_addr_type(net, addr-&gt;sin_addr.s_addr);</div><div class="line"></div><div class="line">	<span class="comment">/* Not specified by any standard per-se, however it breaks too</span></div><div class="line">	 * many applications when removed.  It is unfortunate since</div><div class="line">	 * allowing applications to make a non-local bind solves</div><div class="line">	 * several problems with systems using dynamic addressing.</div><div class="line">	 * (ie. your servers still start up even if your ISDN link</div><div class="line">	 *  is temporarily down)</div><div class="line">	 */</div><div class="line">	err = -EADDRNOTAVAIL;</div><div class="line">   <span class="comment">/*	 地址类型必须是本机，多播，组播中的一个，否则直接返回，报地址参数异常</span></div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (!net-&gt;ipv4_sysctl_ip_nonlocal_bind &amp;&amp;</div><div class="line">	    !(inet-&gt;freebind || inet-&gt;transparent) &amp;&amp;</div><div class="line">	    addr-&gt;sin_addr.s_addr != htonl(INADDR_ANY) &amp;&amp;</div><div class="line">	    chk_addr_ret != RTN_LOCAL &amp;&amp;</div><div class="line">	    chk_addr_ret != RTN_MULTICAST &amp;&amp;</div><div class="line">	    chk_addr_ret != RTN_BROADCAST)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	snum = ntohs(addr-&gt;sin_port);</div><div class="line">	err = -EACCES;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 要绑定的端口小于1024时候，要求运行该应用程序的为超级权限</div><div class="line">	* 否则返回并报权限不运行的错误</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (snum &amp;&amp; snum &lt; PROT_SOCK &amp;&amp;</div><div class="line">	    !ns_capable(net-&gt;user_ns, CAP_NET_BIND_SERVICE))</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	<span class="comment">/*      We keep a pair of addresses. rcv_saddr is the one</span></div><div class="line">	 *      used by hash lookups, and saddr is used for transmit.</div><div class="line">	 *</div><div class="line">	 *      In the BSD API these are the same except where it</div><div class="line">	 *      would be illegal to use them (multicast/broadcast) in</div><div class="line">	 *      which case the sending device address is used.</div><div class="line">	 */</div><div class="line">	lock_sock(sk);</div><div class="line"></div><div class="line">	<span class="comment">/* Check these errors (active socket, double bind). */</span></div><div class="line">	err = -EINVAL;</div><div class="line">	<span class="comment">/*bind动作发生在最初状态，其TCP状态是CLOSE且没有绑定过</span></div><div class="line">	*	否则直接判别为异常</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE || inet-&gt;inet_num)</div><div class="line">		<span class="keyword">goto</span> out_release_sock;</div><div class="line">	<span class="comment">/*inet_rcv_saddr 用作hash表查找使用</span></div><div class="line">	*inet_saddr作为发包源地址</div><div class="line">	*当为广播和组播时候发送地址为0</div><div class="line">	*/</div><div class="line">	inet-&gt;inet_rcv_saddr = inet-&gt;inet_saddr = addr-&gt;sin_addr.s_addr;</div><div class="line">	<span class="keyword">if</span> (chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST)</div><div class="line">		inet-&gt;inet_saddr = <span class="number">0</span>;  <span class="comment">/* Use device */</span></div><div class="line"></div><div class="line">	<span class="comment">/* Make sure we are allowed to bind here. */</span></div><div class="line">	<span class="comment">/* TCP时候该函数负责查询该端口是否被使用，没有被使用返回0，否则返回非0</span></div><div class="line">	*如果已经被使用，则退出bind函数，并返回地址和端口已经被使用错误-EADDRINUSE</div><div class="line">	*sk-&gt;sk_prot-&gt;get_port= inet_csk_get_port</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;get_port(sk, snum)) &#123;</div><div class="line">		inet-&gt;inet_saddr = inet-&gt;inet_rcv_saddr = <span class="number">0</span>;</div><div class="line">		err = -EADDRINUSE;</div><div class="line">		<span class="keyword">goto</span> out_release_sock;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 更新sk-&gt;sk_userlocks标记，表明本地地址和端口已经绑定</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (inet-&gt;inet_rcv_saddr)</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_BINDADDR_LOCK;</div><div class="line">	<span class="keyword">if</span> (snum)</div><div class="line">		sk-&gt;sk_userlocks |= SOCK_BINDPORT_LOCK;</div><div class="line">	inet-&gt;inet_sport = htons(inet-&gt;inet_num);</div><div class="line">	inet-&gt;inet_daddr = <span class="number">0</span>;</div><div class="line">	inet-&gt;inet_dport = <span class="number">0</span>;</div><div class="line">	sk_dst_reset(sk);</div><div class="line">	err = <span class="number">0</span>;</div><div class="line">out_release_sock:</div><div class="line">	release_sock(sk);</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(inet_bind);</div></pre></td></tr></table></figure></p>
<ul>
<li>绑定地址长度和协议检查 长度异常返回-EINVAL 表示参数异常，协议不支持 -EAFNOSUPPORT</li>
<li>对绑定地址进行类型检查inet_addr_type，必须是本机地址，组播和广播地址类型 -EADDRNOTAVAIL 否则报地址参数异常</li>
<li>如果端口小于1024 ，必须为超级权限ns_capable 否则 err = -EACCES 权限不允许</li>
<li>sk-&gt;sk_prot-&gt;get_port = inet_csk_get_port 四层端口检查，看是否被使用</li>
<li>更新sk-&gt;skuserlocks标记，代表地址和端口已经被绑定</li>
</ul>
<p>扩展函数：<br>   inet_csk_get_port TCP四层端口检查<br>   inet_addr_type    地址类型判别<br>   ns_capable        超级权限检查</p>
<h2 id="inet-csk-get-port"><a href="#inet-csk-get-port" class="headerlink" title="inet_csk_get_port"></a>inet_csk_get_port</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_get_port</span><span class="params">(struct sock *sk, <span class="keyword">unsigned</span> <span class="keyword">short</span> snum)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_hashinfo</span> *<span class="title">hashinfo</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot</span>-&gt;<span class="title">h</span>.<span class="title">hashinfo</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_hashbucket</span> *<span class="title">head</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_bind_bucket</span> *<span class="title">tb</span>;</span></div><div class="line">	<span class="keyword">int</span> ret, attempts = <span class="number">5</span>;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="keyword">int</span> smallest_size = <span class="number">-1</span>, smallest_rover;</div><div class="line">	<span class="keyword">kuid_t</span> uid = sock_i_uid(sk);</div><div class="line">	<span class="keyword">int</span> attempt_half = (sk-&gt;sk_reuse == SK_CAN_REUSE) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">/*禁止上下半部，防止进程冲突*/</span></div><div class="line">	local_bh_disable();</div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 如果没有bind端口</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> (!snum) &#123;<span class="comment">/*没有指定端口会自动选择端口*/</span></div><div class="line">		<span class="keyword">int</span> remaining, rover, low, high;</div><div class="line"></div><div class="line">again:</div><div class="line">		<span class="comment">/*获取端口的取值范围*/</span></div><div class="line">		inet_get_local_port_range(net, &amp;low, &amp;high);<span class="comment">/*后文辉对其进行分析*/</span></div><div class="line">		<span class="keyword">if</span> (attempt_half) &#123;</div><div class="line">			<span class="keyword">int</span> half = low + ((high - low) &gt;&gt; <span class="number">1</span>);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (attempt_half == <span class="number">1</span>)</div><div class="line">				high = half;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				low = half;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/*取值范围内端口数*/</span></div><div class="line">		remaining = (high - low) + <span class="number">1</span>;</div><div class="line">		<span class="comment">/*随机选择端口*/</span></div><div class="line">		smallest_rover = rover = net_random() % remaining + low;</div><div class="line"></div><div class="line">		smallest_size = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">do</span> &#123;</div><div class="line">			<span class="comment">/*保留端口检查,服务端可以设置 /proc/sys/net/ipv4/ip_local_reserved_ports */</span></div><div class="line">			<span class="keyword">if</span> (inet_is_reserved_local_port(rover))</div><div class="line">				<span class="keyword">goto</span> next_nolock;<span class="comment">/*端口加1继续*/</span></div><div class="line">				</div><div class="line">			<span class="comment">/*根据端口号和HASHsize从确定hash桶，并锁住它，后续便利查找*/</span></div><div class="line">			head = &amp;hashinfo-&gt;bhash[inet_bhashfn(net, rover,</div><div class="line">					hashinfo-&gt;bhash_size)];</div><div class="line">			spin_lock(&amp;head-&gt;lock);</div><div class="line">			inet_bind_bucket_for_each(tb, &amp;head-&gt;chain)</div><div class="line">				<span class="keyword">if</span> (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == rover) &#123;</div><div class="line">				</div><div class="line">					<span class="comment">/*判断端口是否可以复用，如果可以复用即使在链表中也一样复用*/</span></div><div class="line">					<span class="keyword">if</span> (((tb-&gt;fastreuse &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">					      sk-&gt;sk_reuse &amp;&amp;</div><div class="line">					      sk-&gt;sk_state != TCP_LISTEN) ||</div><div class="line">					     (tb-&gt;fastreuseport &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">					      sk-&gt;sk_reuseport &amp;&amp;</div><div class="line">					      uid_eq(tb-&gt;fastuid, uid))) &amp;&amp;</div><div class="line">					    (tb-&gt;num_owners &lt; smallest_size || smallest_size == <span class="number">-1</span>)) &#123;</div><div class="line">					    </div><div class="line">					    <span class="comment">/*记录下端口的使用个数和端口*/</span></div><div class="line">						smallest_size = tb-&gt;num_owners;</div><div class="line">						smallest_rover = rover;</div><div class="line">						</div><div class="line">						<span class="comment">/*系统绑定端口已经超过最大端口数了，要去检查inet_csk_bind_conflict绑定是否存在冲突*/</span></div><div class="line">						<span class="keyword">if</span> (atomic_read(&amp;hashinfo-&gt;bsockets) &gt; (high - low) + <span class="number">1</span> &amp;&amp;</div><div class="line">						    !inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb, <span class="literal">false</span>)) &#123;</div><div class="line">						   </div><div class="line">						   <span class="comment">/*ok，绑定没有冲突*/</span></div><div class="line">							snum = smallest_rover;</div><div class="line">							<span class="keyword">goto</span> tb_found;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">					<span class="comment">/*端口冲突检查*/</span></div><div class="line">					<span class="keyword">if</span> (!inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb, <span class="literal">false</span>)) &#123;</div><div class="line">						snum = rover;</div><div class="line">						<span class="keyword">goto</span> tb_found;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">/*此端口在链表中但是不能复用，继续下一个*/</span></div><div class="line">					<span class="keyword">goto</span> next;</div><div class="line">				&#125;</div><div class="line">			<span class="keyword">break</span>;<span class="comment">/*不在bind表中，端口可以使用，直接跳出循环*/</span></div><div class="line">		next:</div><div class="line">			spin_unlock(&amp;head-&gt;lock);</div><div class="line">		next_nolock:</div><div class="line">			<span class="comment">/*已经找到最大端口了，从最小开始找*/</span></div><div class="line">			<span class="keyword">if</span> (++rover &gt; high)</div><div class="line">				rover = low;</div><div class="line">		&#125; <span class="keyword">while</span> (--remaining &gt; <span class="number">0</span>);<span class="comment">/*en,最大5次查找机会*/</span></div><div class="line"></div><div class="line">		<span class="comment">/* Exhausted local port range during search?  It is not</span></div><div class="line">		 * possible for us to be holding one of the bind hash</div><div class="line">		 * locks if this test triggers, because if 'remaining'</div><div class="line">		 * drops to zero, we broke out of the do/while loop at</div><div class="line">		 * the top level, not from the 'break;' statement.</div><div class="line">		 */</div><div class="line">		ret = <span class="number">1</span>;</div><div class="line">		<span class="comment">/*没有找到端口，那就最后一次机会*/</span></div><div class="line">		<span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (smallest_size != <span class="number">-1</span>) &#123;</div><div class="line">				snum = smallest_rover;</div><div class="line">				<span class="keyword">goto</span> have_snum;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (attempt_half == <span class="number">1</span>) &#123;</div><div class="line">				<span class="comment">/* OK we now try the upper half of the range */</span></div><div class="line">				attempt_half = <span class="number">2</span>;</div><div class="line">				<span class="keyword">goto</span> again;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">goto</span> fail;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/* OK, here is the one we will use.  HEAD is</span></div><div class="line">		 * non-NULL and we hold it's mutex.</div><div class="line">		 */</div><div class="line">		<span class="comment">/*找到可用的端口了*/</span></div><div class="line">		snum = rover;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">/*指定绑定了端口，在绑定的链表中查找，如果查找到，代表已经被绑定*/</span></div><div class="line">have_snum:</div><div class="line">		head = &amp;hashinfo-&gt;bhash[inet_bhashfn(net, snum,</div><div class="line">				hashinfo-&gt;bhash_size)];</div><div class="line">		spin_lock(&amp;head-&gt;lock);</div><div class="line">		inet_bind_bucket_for_each(tb, &amp;head-&gt;chain)</div><div class="line">			<span class="keyword">if</span> (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == snum)</div><div class="line">				<span class="keyword">goto</span> tb_found;<span class="comment">/*端口已经被绑定*/</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*在绑定链表中没有发现，后续会创建*/</span></div><div class="line">	tb = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">goto</span> tb_not_found;</div><div class="line">	</div><div class="line">tb_found:</div><div class="line">	<span class="keyword">if</span> (!hlist_empty(&amp;tb-&gt;owners)) &#123;</div><div class="line">	</div><div class="line">		<span class="comment">/*要bind的sk标记SK_FORCE_REUSE可以强制复用*/</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_reuse == SK_FORCE_REUSE)</div><div class="line">			<span class="keyword">goto</span> success;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (((tb-&gt;fastreuse &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">		      sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN) ||</div><div class="line">		     (tb-&gt;fastreuseport &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">		      sk-&gt;sk_reuseport &amp;&amp; uid_eq(tb-&gt;fastuid, uid))) &amp;&amp;</div><div class="line">		    smallest_size == <span class="number">-1</span>) &#123;</div><div class="line">	<span class="comment">/* 是否可以复用的判别</span></div><div class="line">	* fastreuseport Google添加选项&amp;&amp; 已经开启端口复用 &amp;&amp; 当前socket uid和查找到的uid相符合</div><div class="line">	* 当前socket也可以放到bind hash中，后续会将其加入</div><div class="line">	*/   </div><div class="line">			<span class="keyword">goto</span> success;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ret = <span class="number">1</span>;</div><div class="line">			<span class="comment">/*端口绑定冲突，自动分配端口绑定冲突会走到此处，在自动分配端口时候进行了下列类似判别</span></div><div class="line">			*所以此判断基本不会执行知道跳到tb_not_found这个时候tb不为null的</div><div class="line">			*/</div><div class="line">			<span class="keyword">if</span> (inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict(sk, tb, <span class="literal">true</span>)) &#123;</div><div class="line">				<span class="keyword">if</span> (((sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN) ||</div><div class="line">				     (tb-&gt;fastreuseport &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">				      sk-&gt;sk_reuseport &amp;&amp; uid_eq(tb-&gt;fastuid, uid))) &amp;&amp;</div><div class="line">				    smallest_size != <span class="number">-1</span> &amp;&amp; --attempts &gt;= <span class="number">0</span>) &#123;</div><div class="line">					spin_unlock(&amp;head-&gt;lock);</div><div class="line">					<span class="keyword">goto</span> again;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">goto</span> fail_unlock;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">tb_not_found:</div><div class="line">	ret = <span class="number">1</span>;</div><div class="line">	<span class="comment">/*绑定时没有发现过tb，直接创建一个*/</span></div><div class="line">	<span class="keyword">if</span> (!tb &amp;&amp; (tb = inet_bind_bucket_create(hashinfo-&gt;bind_bucket_cachep,</div><div class="line">					net, head, snum)) == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">goto</span> fail_unlock;</div><div class="line">	<span class="keyword">if</span> (hlist_empty(&amp;tb-&gt;owners)) &#123;<span class="comment">/*没有绑定过socket*/</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_reuse &amp;&amp; sk-&gt;sk_state != TCP_LISTEN)</div><div class="line">			tb-&gt;fastreuse = <span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			tb-&gt;fastreuse = <span class="number">0</span>;</div><div class="line">			</div><div class="line">		<span class="comment">/*设置了SO_REUSEPORT选项*/</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_reuseport) &#123;</div><div class="line">			tb-&gt;fastreuseport = <span class="number">1</span>;</div><div class="line">			tb-&gt;fastuid = uid;</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			tb-&gt;fastreuseport = <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">/*如果绑定过socket*/</span></div><div class="line">		<span class="keyword">if</span> (tb-&gt;fastreuse &amp;&amp;</div><div class="line">		    (!sk-&gt;sk_reuse || sk-&gt;sk_state == TCP_LISTEN))</div><div class="line">			tb-&gt;fastreuse = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span> (tb-&gt;fastreuseport &amp;&amp;</div><div class="line">		    (!sk-&gt;sk_reuseport || !uid_eq(tb-&gt;fastuid, uid)))</div><div class="line">			tb-&gt;fastreuseport = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">success:</div><div class="line"><span class="comment">/*找到可用端口，添加绑定表*/</span></div><div class="line">	<span class="keyword">if</span> (!inet_csk(sk)-&gt;icsk_bind_hash)</div><div class="line">		inet_bind_hash(sk, tb, snum);<span class="comment">/*sk被放到tb-&gt;owners中*/</span></div><div class="line">	WARN_ON(inet_csk(sk)-&gt;icsk_bind_hash != tb);</div><div class="line">	ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">fail_unlock:</div><div class="line">	spin_unlock(&amp;head-&gt;lock);</div><div class="line">fail:</div><div class="line">	local_bh_enable();</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果端口为0；则自动选取端口选择过程如下：</p>
<blockquote>
<p>先在[low,half] or [half,high]中随机选取一个端口，作为循环获取端口的起始端口，开始以下流程</p>
</blockquote>
<pre><code>步骤1: 保留端口检查，不满足，端口加1，重试次数减1，继续从步骤1开始

步骤2: 从当前端口映射的hash桶中取出列表头，遍历检查该端口是否被使用
        步骤2-1:没有被使用，直接退出循环，tb为NULL，创建tb，跳转到tb_not_found将该端口连同创建的tb加入该hash桶的链表中，sk也被放到tb-&gt;owners中管理，结束退出
        步骤2-2: 端口被使用了，检查端口使用是否冲突
        步骤2-2-1:没有冲突，推出循环，跳转到tb_found,复用检查成功，sk被放到tb-&gt;owners中，结束退出
        步骤2-2-2:存在冲突，直接端口+1，继续循环查找

步骤3:如果上半部分已经查找完毕，继续[half,high]中选择一个端口，进行步骤1
</code></pre><h3 id="attempt-half"><a href="#attempt-half" class="headerlink" title="attempt_half"></a>attempt_half</h3><p>sk-&gt;sk_reuse == SK_CAN_REUSE<br> 取端口范围 [low ,half]<br>否则<br> 取端口范围 [half,high]</p>
<ul>
<li>该值会影响上述选择端口的流程从上半端还是从下半端选择端口</li>
<li>如果sk-&gt;sk_reuse被置SK_CAN_REUSE标记则先从下半端开始选择端口</li>
<li>否则直接从上半端选择端口</li>
</ul>
<h3 id="small-size和small-rover"><a href="#small-size和small-rover" class="headerlink" title="small_size和small_rover"></a>small_size和small_rover</h3><blockquote>
<p>what’s the fuck!!! 疑惑了好久<br>small_size和small_rover在3.10的版本中根本就没有使用基本用不到<br>3.10版本的端口查找原则是确定端口查找区间，随机选择端口，只要该端口能复用就直接使用，已经完全去除了优先选择复用端口数较小的端口这一原则了（3.2kernel）<br>So amazing！这两个变量可以去除了</p>
</blockquote>
<h2 id="inet-get-local-port-range"><a href="#inet-get-local-port-range" class="headerlink" title="inet_get_local_port_range"></a>inet_get_local_port_range</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_get_local_port_range</span><span class="params">(struct net *net, <span class="keyword">int</span> *low, <span class="keyword">int</span> *high)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> seq;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		seq = read_seqbegin(&amp;net-&gt;ipv4_sysctl_local_ports.lock);</div><div class="line"></div><div class="line">		*low = net-&gt;ipv4_sysctl_local_ports.range[<span class="number">0</span>];</div><div class="line">		*high = net-&gt;ipv4_sysctl_local_ports.range[<span class="number">1</span>];</div><div class="line">	&#125; <span class="keyword">while</span> (read_seqretry(&amp;net-&gt;ipv4_sysctl_local_ports.lock, seq));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sysctl -a|grep ip_local_port_range</div><div class="line">net.ipv4.ip_local_port_range = 32768 60999</div></pre></td></tr></table></figure>
<ul>
<li>上述读取端口范围是用户态的ip_local_port_range，默认是3w多以后的，可以调整此参数扩大端口范围</li>
<li>上述read_seqbegin这种方式读取数据，是一种顺序锁，适用于读多写少的方式用方式，后续专门处博文研究</li>
</ul>
<h2 id="tcp端口冲突检查"><a href="#tcp端口冲突检查" class="headerlink" title="tcp端口冲突检查"></a>tcp端口冲突检查</h2><p>inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock_af_ops</span> <span class="title">ipv4_specific</span> = &#123;</span></div><div class="line">	.queue_xmit	   = ip_queue_xmit,</div><div class="line">	.send_check	   = tcp_v4_send_check,</div><div class="line">	.rebuild_header	   = inet_sk_rebuild_header,</div><div class="line">	.sk_rx_dst_set	   = inet_sk_rx_dst_set,</div><div class="line">	.conn_request	   = tcp_v4_conn_request,</div><div class="line">	.syn_recv_sock	   = tcp_v4_syn_recv_sock,</div><div class="line">	.net_header_len	   = <span class="keyword">sizeof</span>(struct iphdr),</div><div class="line">	.setsockopt	   = ip_setsockopt,</div><div class="line">	.getsockopt	   = ip_getsockopt,</div><div class="line">	.addr2sockaddr	   = inet_csk_addr2sockaddr,</div><div class="line">	.sockaddr_len	   = <span class="keyword">sizeof</span>(struct sockaddr_in),</div><div class="line">	.bind_conflict	   = inet_csk_bind_conflict,</div><div class="line">#ifdef CONFIG_COMPAT</div><div class="line">	.compat_setsockopt = compat_ip_setsockopt,</div><div class="line">	.compat_getsockopt = compat_ip_getsockopt,</div><div class="line">#endif</div><div class="line">	.mtu_reduced	   = tcp_v4_mtu_reduced,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_v4_init_sock</span><span class="params">(struct sock *sk)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span></div><div class="line"></div><div class="line">	tcp_init_sock(sk);</div><div class="line"></div><div class="line">	icsk-&gt;icsk_af_ops = &amp;ipv4_specific;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_TCP_MD5SIG</span></div><div class="line">	tcp_sk(sk)-&gt;af_specific = &amp;tcp_sock_ipv4_specific;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>从上文得知inet_csk(sk)-&gt;icsk_af_ops-&gt;bind_conflict 函数是inet_csk_bind_conflict</li>
<li>af_ops在tcp_v4_init_sock初始化</li>
</ul>
<h3 id="inet-csk-bind-conflict分析"><a href="#inet-csk-bind-conflict分析" class="headerlink" title="inet_csk_bind_conflict分析"></a>inet_csk_bind_conflict分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_csk_bind_conflict</span><span class="params">(<span class="keyword">const</span> struct sock *sk,</span></span></div><div class="line">			   <span class="keyword">const</span> struct inet_bind_bucket *tb, <span class="keyword">bool</span> relax)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk2</span>;</span></div><div class="line">	<span class="keyword">int</span> reuse = sk-&gt;sk_reuse;</div><div class="line">	<span class="keyword">int</span> reuseport = sk-&gt;sk_reuseport;</div><div class="line">	<span class="keyword">kuid_t</span> uid = sock_i_uid((struct sock *)sk);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Unlike other sk lookup places we do not check</div><div class="line">	 * for sk_net here, since _all_ the socks listed</div><div class="line">	 * in tb-&gt;owners list belong to the same net - the</div><div class="line">	 * one this bucket belongs to.</div><div class="line">	 */</div><div class="line"></div><div class="line">	sk_for_each_bound(sk2, &amp;tb-&gt;owners) &#123;</div><div class="line">	</div><div class="line">		<span class="comment">/*不会冲突情况1:socket绑定设备不同*/</span></div><div class="line">		<span class="keyword">if</span> (sk != sk2 &amp;&amp;</div><div class="line">		    !inet_v6_ipv6only(sk2) &amp;&amp;</div><div class="line">		    (!sk-&gt;sk_bound_dev_if ||</div><div class="line">		     !sk2-&gt;sk_bound_dev_if ||</div><div class="line">		     sk-&gt;sk_bound_dev_if == sk2-&gt;sk_bound_dev_if)) &#123;</div><div class="line">		     <span class="comment">/*</span></div><div class="line">		     *不会冲突情况2:地址不同</div><div class="line">		     */</div><div class="line">			<span class="keyword">if</span> ((!reuse || !sk2-&gt;sk_reuse ||</div><div class="line">			    sk2-&gt;sk_state == TCP_LISTEN) &amp;&amp;</div><div class="line">			    (!reuseport || !sk2-&gt;sk_reuseport ||</div><div class="line">			    (sk2-&gt;sk_state != TCP_TIME_WAIT &amp;&amp;</div><div class="line">			     !uid_eq(uid, sock_i_uid(sk2))))) &#123;</div><div class="line">			<span class="comment">/*</span></div><div class="line">			* 不会冲突情况3:</div><div class="line">			* 条件A: (reuse &amp;&amp; sk2-&gt;sk_reuse &amp;&amp; sk2-&gt;sk_state ！= TCP_LISTEN) </div><div class="line">			* 条件B：(reuseport </div><div class="line">			*       &amp;&amp; sk2-&gt;sk_reuseport </div><div class="line">			*       &amp;&amp;(sk2-&gt;sk_state == TCP_TIME_WAIT || uid_eq(uid, sock_i_uid(sk2))))</div><div class="line">			* 条件A和条件B只要有一个成立，就不会冲突</div><div class="line">			* 条件A成立条件：</div><div class="line">			* 	链上sock和待检查sock开启地址复用且链上状态不是监听状态</div><div class="line">			* 条件B成立条件：</div><div class="line">			*      链上sock和待检查sock开启端口复用且链表上状态为TW</div><div class="line">			*      链上sock和待检查sock开启端口复用且两个sock的uid相同</div><div class="line">			*/</div><div class="line">				<span class="keyword">if</span> (!sk2-&gt;sk_rcv_saddr || !sk-&gt;sk_rcv_saddr ||</div><div class="line">				    sk2-&gt;sk_rcv_saddr == sk-&gt;sk_rcv_saddr)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">/*没有开启relax，要绑定方不能复用，已绑定方不能复用，以绑定方处理监听状态*/</span></div><div class="line">			<span class="keyword">if</span> (!relax &amp;&amp; reuse &amp;&amp; sk2-&gt;sk_reuse &amp;&amp;</div><div class="line">			    sk2-&gt;sk_state != TCP_LISTEN) &#123;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (!sk2-&gt;sk_rcv_saddr || !sk-&gt;sk_rcv_saddr ||</div><div class="line">				    sk2-&gt;sk_rcv_saddr == sk-&gt;sk_rcv_saddr)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sk2 != <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在端口自动选择时可以重用端口条件为：</p>
<p>a设备不同<br>b绑定ip地址不同<br>c要绑定sock和已绑定sock地址允许重用，且已绑定socket不处于监听状态<br>d 链上sock和待检查sock开启端口复用且链表上状态为TW<br>e 链上sock和待检查sock开启端口复用且两个sock的uid相同</p>
</blockquote>
<p> 关于条件c的补充条件：即使c满足，也需要看relax的值确定，relax为TRUE时可复用，为fase时候不能复用<br> 自动端口时候relax为false，所以条件c消失，仅仅剩下a、b、d、e四个条件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;bind&quot;&gt;&lt;a href=&quot;#bind&quot; class=&quot;headerlink&quot; title=&quot;bind()&quot;&gt;&lt;/a&gt;bind()&lt;/h1&gt;&lt;p&gt;内核版本：3.10.0-514.16.1.el7.x86_64&lt;br&gt;下述源码分析均以tcp socket为背景&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sockfd, struct sockaddr *my_addr, &lt;span class=&quot;keyword&quot;&gt;socklen_t&lt;/span&gt; addrlen)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;socket文件描述符&lt;/li&gt;
&lt;li&gt;要绑定的承载地址和端口的结构体 struct sockaddr&lt;/li&gt;
&lt;li&gt;第二个参数struct sockaddr的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数负责绑定套接字的地址和端口，按照绑定者身份来分，会存在两种情况&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;情况1:绑定者为客户端，主动发起请求方，绑定地址和端口成功后，会使用该地址和端口进行发包&lt;br&gt;一般情况下，客户端的地址和端口都是其自动选择的，不需要绑定动作。&lt;br&gt;情况2:绑定者为服务端，被动连接接收方，绑定地址和端口成功后，客户端只能向该地址和端口发送连接请求。服务端往往需要绑定地址和端口。如果服务端存在多网卡情况，其只需要绑定服务端口即可，其目的地址就是客户端访问的目的地址。&lt;br&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="bind" scheme="http://vcpu.me/tags/bind/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
  </entry>
  
  <entry>
    <title>connect()实现源码分析</title>
    <link href="http://vcpu.me/connect/"/>
    <id>http://vcpu.me/connect/</id>
    <published>2017-06-09T09:30:34.000Z</published>
    <updated>2017-06-26T03:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h2><p>内核版本：3.10.0-514.16.1.el7.x86_64<br>下述源码分析均以tcp socket为背景</p>
<h2 id="用户态函数"><a href="#用户态函数" class="headerlink" title="用户态函数"></a>用户态函数</h2><p>int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);<br>参数：</p>
<blockquote>
<p>socketfd socket文件描述索引下标<br>addr 要连接的服务端的地址<br>addrlen addr的长度</p>
</blockquote>
<p>返回值:</p>
<blockquote>
<p>-1 失败<br> strerror(errno)可帮助获取失败原因<br> 常见失败原因有：<br> ETIMEOUT Connection timed out服务端一直未回复syn ack，尝试多次syn后返回<br> ECONNREFUSED Connection refused 服务端端口没有开启，回复rst<br> EHOSTUNREACH  No route to host 服务端在同局域网内arp请求获取办不到对方mac</p>
<p>0 成功</p>
</blockquote>
<p>用法:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">remote_addr</span>;</span></div><div class="line"><span class="built_in">memset</span>(&amp;remote_addr,<span class="number">0</span>,<span class="keyword">sizeof</span>(remote_addr));</div><div class="line">remote_addr.sin_family=AF_INET;</div><div class="line">remote_addr.sin_addr.s_addr=inet_addr(<span class="string">"180.97.33.108"</span>);</div><div class="line">remote_addr.sin_port = htons(<span class="number">80</span>);</div><div class="line">connect(fd,(struct sockaddr*)&amp;remote_addr,<span class="keyword">sizeof</span>(struct sockaddr)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>实例：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 20000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">(<span class="keyword">char</span> *name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"usage: %s IP\n"</span>, name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> server_fd, client_fd, length = <span class="number">0</span>;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></div><div class="line">    <span class="keyword">socklen_t</span> socklen = <span class="keyword">sizeof</span>(server_addr);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        usage(argv[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>((client_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"create socket error, exit!\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    bzero(&amp;client_addr, <span class="keyword">sizeof</span>(client_addr));</div><div class="line">    client_addr.sin_family = AF_INET;</div><div class="line">    client_addr.sin_addr.s_addr = htons(INADDR_ANY);</div><div class="line"></div><div class="line">    bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</div><div class="line">    server_addr.sin_family = AF_INET;</div><div class="line">    inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</div><div class="line">    server_addr.sin_port = htons(SERVER_PORT);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(connect(client_fd, (struct sockaddr*)&amp;server_addr, socklen) &lt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can not connect to %s, exit!\n"</span>, argv[<span class="number">1</span>]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, strerror(errno));</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行方法：<br>[root@localhost socketdemo]# gcc connect.c -o connect<br>[root@localhost socketdemo]# ./connect 192.168.55.181</p>
<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE2(socketcall, <span class="keyword">int</span>, call, <span class="keyword">unsigned</span> <span class="keyword">long</span> __user *, args)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> a[AUDITSC_ARGS];</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> a0, a1;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> len;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (call &lt; <span class="number">1</span> || call &gt; SYS_SENDMMSG)</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">	len = nargs[call];</div><div class="line">	<span class="keyword">if</span> (len &gt; <span class="keyword">sizeof</span>(a))</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">	<span class="comment">/* copy_from_user should be SMP safe. */</span></div><div class="line">	<span class="keyword">if</span> (copy_from_user(a, args, len))</div><div class="line">		<span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">	err = audit_socketcall(nargs[call] / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>), a);</div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		<span class="keyword">return</span> err;</div><div class="line"></div><div class="line">	a0 = a[<span class="number">0</span>];</div><div class="line">	a1 = a[<span class="number">1</span>];</div><div class="line"></div><div class="line">	<span class="keyword">switch</span> (call) &#123;</div><div class="line">	<span class="keyword">case</span> SYS_SOCKET:</div><div class="line">		err = sys_socket(a0, a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_BIND:</div><div class="line">		err = sys_bind(a0, (struct sockaddr __user *)a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> SYS_CONNECT:</div><div class="line">		err = sys_connect(a0, (struct sockaddr __user *)a1, a[<span class="number">2</span>]);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	...</div><div class="line">	</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>系统调用sys_socketcall会携带（fd,serveraddr,serveraddrlen）参数</li>
<li>系统中断处理函数sys_socketcall会将参数从用户态考入到内核态局部变量a中</li>
<li>调用sys_connect函数 sys_connect(a0, (struct sockaddr __user *)a1, a[2]);</li>
</ul>
<h2 id="sys-connect执行入口分析"><a href="#sys-connect执行入口分析" class="headerlink" title="sys_connect执行入口分析"></a>sys_connect执行入口分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">SYSCALL_DEFINE3(connect, <span class="keyword">int</span>, fd, struct sockaddr __user *, uservaddr,<span class="keyword">int</span>,addrlen)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">address</span>;</span></div><div class="line">	<span class="keyword">int</span> err, fput_needed;</div><div class="line"></div><div class="line">	sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);</div><div class="line">	<span class="keyword">if</span> (!sock)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	err = move_addr_to_kernel(uservaddr, addrlen, &amp;address);</div><div class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out_put;</div><div class="line"></div><div class="line">	err =</div><div class="line">	    security_socket_connect(sock, (struct sockaddr *)&amp;address, addrlen);</div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		<span class="keyword">goto</span> out_put;</div><div class="line"></div><div class="line">	err = sock-&gt;ops-&gt;connect(sock, (struct sockaddr *)&amp;address, addrlen,</div><div class="line">				 sock-&gt;file-&gt;f_flags);</div><div class="line">out_put:</div><div class="line">	fput_light(sock-&gt;file, fput_needed);</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div></pre></td></tr></table></figure>
<ul>
<li>根据fd描述符号从当前进程current的files指针中的struct fd_table中的fd成员取出file</li>
<li>fdt-&gt;fd是一个数组用来管理当前进程的file指针</li>
<li>从file中privatedata中获取到socket变量</li>
<li>把connect连接的服务端地址存入内核空间中move_addr_to_kernel</li>
<li>sock-&gt;ops-&gt;connect 以tco为例，此处会调用inet_stream_connect 函数集合中的inet_stream_connect</li>
</ul>
<h3 id="inet-stream-connect分析"><a href="#inet-stream-connect分析" class="headerlink" title="inet_stream_connect分析"></a>inet_stream_connect分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_stream_connect</span><span class="params">(struct socket *sock, struct sockaddr *uaddr,</span></span></div><div class="line">			<span class="keyword">int</span> addr_len, <span class="keyword">int</span> flags)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	lock_sock(sock-&gt;sk);</div><div class="line">	err = __inet_stream_connect(sock, uaddr, addr_len, flags);</div><div class="line">	release_sock(sock-&gt;sk);</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>inet_stream_connect() 为tcp socket时候connect动作调用的函数<br>改函数会调用__inet_stream_connect函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,</div><div class="line">			  <span class="keyword">int</span> addr_len, <span class="keyword">int</span> flags)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> = <span class="title">sock</span>-&gt;<span class="title">sk</span>;</span></div><div class="line">	<span class="keyword">int</span> err;</div><div class="line">	<span class="keyword">long</span> timeo;</div><div class="line"></div><div class="line">	<span class="comment">//socket地址长度检查，不合法返回</span></div><div class="line">	<span class="keyword">if</span> (addr_len &lt; <span class="keyword">sizeof</span>(uaddr-&gt;sa_family))</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line">   <span class="comment">// 地址协议族检查，如果不合法则关闭连接</span></div><div class="line">	<span class="keyword">if</span> (uaddr-&gt;sa_family == AF_UNSPEC) &#123;</div><div class="line">		err = sk-&gt;sk_prot-&gt;disconnect(sk, flags);</div><div class="line">		sock-&gt;state = err ? SS_DISCONNECTING : SS_UNCONNECTED;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> (sock-&gt;state) &#123;</div><div class="line">	<span class="comment">//非法参数</span></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		err = -EINVAL;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	<span class="comment">//该socket和对端连接已经建立</span></div><div class="line">	<span class="keyword">case</span> SS_CONNECTED:</div><div class="line">		err = -EISCONN;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	<span class="comment">//该socket和对端连接建立中</span></div><div class="line">	<span class="keyword">case</span> SS_CONNECTING:</div><div class="line">		err = -EALREADY;</div><div class="line">		<span class="comment">/* Fall out of switch with err, set for this state */</span></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="comment">//该socket和对未连接</span></div><div class="line">	<span class="keyword">case</span> SS_UNCONNECTED:</div><div class="line">		err = -EISCONN;</div><div class="line">		<span class="comment">//如果未连接，但是socket还不是TCP_CLOSE状态错误返回</span></div><div class="line">		<span class="keyword">if</span> (sk-&gt;sk_state != TCP_CLOSE)</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">		<span class="comment">//tcp调用tcp_v4_connect，发送syn</span></div><div class="line">		err = sk-&gt;sk_prot-&gt;connect(sk, uaddr, addr_len);</div><div class="line">		<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">		<span class="comment">//发送syn后sock状态从未连接更新为连接中</span></div><div class="line">		sock-&gt;state = SS_CONNECTING;</div><div class="line"></div><div class="line">		<span class="comment">/* Just entered SS_CONNECTING state; the only</span></div><div class="line">		 * difference is that return value in non-blocking</div><div class="line">		 * case is EINPROGRESS, rather than EALREADY.</div><div class="line">		 */</div><div class="line">		err = -EINPROGRESS;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//默认情况下未设置非阻塞socket标志，timeo不为0，设置非阻塞，该值为0</span></div><div class="line">	timeo = sock_sndtimeo(sk, flags &amp; O_NONBLOCK);</div><div class="line"></div><div class="line">	<span class="comment">//发送syn后等待后续握手完成</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	* 阻塞socket</div><div class="line">	* inet_wait_for_connect 会等待协议栈层的处理</div><div class="line">	* 1.等待超过timeo，connect返回EINPROGRESS 表明正在处理</div><div class="line">	* 2.收到信号 </div><div class="line">	* 3.正常完成握手，返回0</div><div class="line">	* 非阻塞socket</div><div class="line">	* 直接退出connect函数并返回EINPROGRESS，表明协议栈正在处理</div><div class="line">	*/</div><div class="line">	<span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) &#123;</div><div class="line">		<span class="keyword">int</span> writebias = (sk-&gt;sk_protocol == IPPROTO_TCP) &amp;&amp;</div><div class="line">				tcp_sk(sk)-&gt;fastopen_req &amp;&amp;</div><div class="line">				tcp_sk(sk)-&gt;fastopen_req-&gt;data ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="comment">/* Error code is set above */</span></div><div class="line">		<span class="keyword">if</span> (!timeo || !inet_wait_for_connect(sk, timeo, writebias))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">		err = sock_intr_errno(timeo);</div><div class="line">		<span class="keyword">if</span> (signal_pending(current))</div><div class="line">			<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Connection was closed by RST, timeout, ICMP error</span></div><div class="line">	 * or another process disconnected us.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_state == TCP_CLOSE)</div><div class="line">		<span class="keyword">goto</span> sock_error;</div><div class="line"></div><div class="line">	<span class="comment">/* sk-&gt;sk_err may be not zero now, if RECVERR was ordered by user</span></div><div class="line">	 * and error was received after socket entered established state.</div><div class="line">	 * Hence, it is handled normally after connect() return successfully.</div><div class="line">	 */</div><div class="line">	<span class="comment">//TCP握手完成，连接已经建立</span></div><div class="line">	sock-&gt;state = SS_CONNECTED;</div><div class="line">	err = <span class="number">0</span>;</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line"></div><div class="line"><span class="comment">//异常处理，关闭连接</span></div><div class="line">sock_error:</div><div class="line">	err = sock_error(sk) ? : -ECONNABORTED;</div><div class="line">	sock-&gt;state = SS_UNCONNECTED;</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;disconnect(sk, flags))</div><div class="line">		sock-&gt;state = SS_DISCONNECTING;</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>__inet_stream_connect检查地址长度和协议族</li>
<li>检查sock状态，正常情况下状态为SS_UNCONNECTED</li>
<li>sk-&gt;sk_prot-&gt;connect tcp_v4_connect来发送syn</li>
<li>在syn包发完以后会有两种处理情况</li>
</ul>
<blockquote>
<p>情况1:立即返回，针对于非阻塞socket，此时协议栈正在处理握手connect会返回-EINPROGRESS<br>情况2:阻塞运行</p>
<blockquote>
<p>阻塞时间超时后，connect返回-EINPROGRESS<br>收到信号，connect返回-ERESTARTSYS,-EINTR</p>
</blockquote>
</blockquote>
<h3 id="inet-wait-for-connect函数分析"><a href="#inet-wait-for-connect函数分析" class="headerlink" title="inet_wait_for_connect函数分析"></a>inet_wait_for_connect函数分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">inet_wait_for_connect</span><span class="params">(struct sock *sk, <span class="keyword">long</span> timeo, <span class="keyword">int</span> writebias)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//初始化等待队列链表,设置队列唤醒后回调函数autoremove_wake_function</span></div><div class="line">    DEFINE_WAIT(wait);</div><div class="line"></div><div class="line">	prepare_to_wait(sk_sleep(sk), &amp;wait, TASK_INTERRUPTIBLE);</div><div class="line">	sk-&gt;sk_write_pending += writebias;</div><div class="line"></div><div class="line">	<span class="comment">/* Basic assumption: if someone sets sk-&gt;sk_err, he _must_</span></div><div class="line">	 * change state of the socket from TCP_SYN_*.</div><div class="line">	 * Connect() does not allow to get error notifications</div><div class="line">	 * without closing the socket.</div><div class="line">	 */</div><div class="line">	<span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) &#123;</div><div class="line">		release_sock(sk);<span class="comment">/*等下要睡眠了释放sk锁*/</span></div><div class="line">		</div><div class="line">		</div><div class="line">		timeo = schedule_timeout(timeo);</div><div class="line">		<span class="comment">/*</span></div><div class="line">		* 调用schedule_timeout sleep until timeout</div><div class="line">		* 收到信号后，timeout值返回剩余等待时间</div><div class="line">		* 超时timeout后，返回0</div><div class="line">		*/</div><div class="line">		</div><div class="line">		<span class="comment">/*进程被唤醒后新上sk锁*/</span></div><div class="line">		lock_sock(sk);</div><div class="line">		</div><div class="line">		<span class="comment">/*进程有带处理信号，或者睡眠超时，推出循环*/</span></div><div class="line">		<span class="keyword">if</span> (signal_pending(current) || !timeo)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		prepare_to_wait(sk_sleep(sk), &amp;wait, TASK_INTERRUPTIBLE);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*等待结束后，将进程从等待队列删除，标记为TASK_RUNNING*/</span></div><div class="line">	finish_wait(sk_sleep(sk), &amp;wait);</div><div class="line">	sk-&gt;sk_write_pending -= writebias;</div><div class="line">	<span class="keyword">return</span> timeo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>DEFINE_WAIT函数很重要其设置了唤醒时候删除队列成员调用的回调函数autoremove_wake_funtion</li>
<li>睡眠前进程被设置成TASK_INTERRUPTIBLE状态</li>
<li>SO_SNDTIMEO选项对上述的睡眠非常重要</li>
<li>SO_SNDTIMEO被设置，则睡眠时间会安装设置值</li>
<li>SO_SNDTIMEO没有被设置，则在没有收到信号前一只阻塞</li>
<li>睡眠结束，进程从睡眠队列中删除，并标记为TASK_RUNNING</li>
</ul>
<h3 id="prepare-to-wait实现分析"><a href="#prepare-to-wait实现分析" class="headerlink" title="prepare_to_wait实现分析"></a>prepare_to_wait实现分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_to_wait</span><span class="params">(<span class="keyword">wait_queue_head_t</span> *q, <span class="keyword">wait_queue_t</span> *wait, <span class="keyword">int</span> state)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</div><div class="line"></div><div class="line">	wait-&gt;flags &amp;= ~WQ_FLAG_EXCLUSIVE;</div><div class="line">	spin_lock_irqsave(&amp;q-&gt;lock, flags);</div><div class="line">	<span class="keyword">if</span> (list_empty(&amp;wait-&gt;task_list))</div><div class="line">		__add_wait_queue(q, wait);</div><div class="line">	set_current_state(state);</div><div class="line">	spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>prepare_to_wait(sk_sleep(sk), &amp;wait, TASK_INTERRUPTIBLE);</li>
<li>把wait放入q队列中，设置当前进程状态为TASK_INTERRUPTIBLE</li>
<li>TASK_INTERRUPTIBLE 是一种睡眠信号</li>
<li>标记TASK_INTERRUPTIBLE的信号会被唤醒并处理信号</li>
</ul>
<h3 id="阻塞socket唤醒机制"><a href="#阻塞socket唤醒机制" class="headerlink" title="阻塞socket唤醒机制"></a>阻塞socket唤醒机制</h3><p>[root@localhost stp]# stap bt.stp sock_def_wakeup</p>
<blockquote>
<p>WARNING: Missing unwind data for a module, rerun with ‘stap -d e1000’<br>—————-START————————-<br>In process [swapper/2]<br>RIP: ffffffff81558150<br>RSP: ffff88003fd03970  EFLAGS: 00000246<br>RAX: 0000000000004308 RBX: ffff88003a82a6c0 RCX: 0000000000000000<br>RDX: 0000000050000000 RSI: 0000000000ca00c8 RDI: ffff88003a82a6c0<br>RBP: ffff88003fd03988 R08: ffff88003db89708 R09: ffff88003e001800<br>R10: ffffffff815dabca R11: 0000000000000000 R12: ffff88001bfa3700<br>R13: ffff880002db6762 R14: 0000000000000218 R15: ffff880002db675a<br>FS:  0000000000000000(0000) GS:ffff88003fd00000(0000) knlGS:0000000000000000<br>CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b<br>CR2: 00007ffaf3049072 CR3: 000000003b0b7000 CR4: 00000000000406e0<br> 0xffffffff81558150 : sock_def_wakeup+0x0/0x40 [kernel]<br> 0xffffffff815cbc09 : tcp_finish_connect+0xc9/0x120 [kernel]<br> 0xffffffff815cc297 : tcp_rcv_state_process+0x637/0xf20 [kernel]<br> 0xffffffff815d5ffb : tcp_v4_do_rcv+0x17b/0x340 [kernel]<br> 0xffffffff815d76d9 : tcp_v4_rcv+0x799/0x9a0 [kernel]<br> 0xffffffff815b1094 : ip_local_deliver_finish+0xb4/0x1f0 [kernel]<br> 0xffffffff815b1379 : ip_local_deliver+0x59/0xd0 [kernel]<br> 0xffffffff815b0d1a : ip_rcv_finish+0x8a/0x350 [kernel]<br> 0xffffffff815b16a6 : ip_rcv+0x2b6/0x410 [kernel]<br> 0xffffffff815700d2 : <strong>netif_receive_skb_core+0x582/0x800 [kernel]<br> 0xffffffff81570368 : </strong>netif_receive_skb+0x18/0x60 [kernel]<br> 0xffffffff815703f0 : netif_receive_skb_internal+0x40/0xc0 [kernel]<br> 0xffffffff81571578 : napi_gro_receive+0xd8/0x130 [kernel]<br> 0xffffffffa00472fc [e1000]<br>—————-END————————-</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_finish_connect</span><span class="params">(struct sock *sk, struct sk_buff *skb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span></div><div class="line"></div><div class="line">	tcp_set_state(sk, TCP_ESTABLISHED);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (skb != <span class="literal">NULL</span>) &#123;</div><div class="line">		icsk-&gt;icsk_af_ops-&gt;sk_rx_dst_set(sk, skb);</div><div class="line">		security_inet_conn_established(sk, skb);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Make sure socket is routed, for correct metrics.  */</span></div><div class="line">	icsk-&gt;icsk_af_ops-&gt;rebuild_header(sk);</div><div class="line"></div><div class="line">	tcp_init_metrics(sk);</div><div class="line"></div><div class="line">	tcp_init_congestion_control(sk);</div><div class="line"></div><div class="line">	<span class="comment">/* Prevent spurious tcp_cwnd_restart() on first data</span></div><div class="line">	 * packet.</div><div class="line">	 */</div><div class="line">	tp-&gt;lsndtime = tcp_time_stamp;</div><div class="line"></div><div class="line">	tcp_init_buffer_space(sk);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sock_flag(sk, SOCK_KEEPOPEN))</div><div class="line">		inet_csk_reset_keepalive_timer(sk, keepalive_time_when(tp));</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!tp-&gt;rx_opt.snd_wscale)</div><div class="line">		__tcp_fast_path_on(tp, tp-&gt;snd_wnd);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		tp-&gt;pred_flags = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!sock_flag(sk, SOCK_DEAD)) &#123;</div><div class="line">		<span class="comment">/*握手完成唤醒所有进程*/</span></div><div class="line">		sk-&gt;sk_state_change(sk);</div><div class="line">		sk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sock_def_wakeup -&gt;wake_up_interruptible_all </li>
<li>上述过程发声在三次握手完成后，TCP从syn send或者syn rcv切换到establish状态时候发生</li>
<li>tcp_finish_connect-&gt;sk-&gt;sk_state_change[sock_def_wakeup]</li>
<li>此次唤醒是全部唤醒sk上等待队列的进程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;connect&quot;&gt;&lt;a href=&quot;#connect&quot; class=&quot;headerlink&quot; title=&quot;connect()&quot;&gt;&lt;/a&gt;connect()&lt;/h2&gt;&lt;p&gt;内核版本：3.10.0-514.16.1.el7.x86_64&lt;br&gt;下述源码分析均以tcp socket为背景&lt;/p&gt;
&lt;h2 id=&quot;用户态函数&quot;&gt;&lt;a href=&quot;#用户态函数&quot; class=&quot;headerlink&quot; title=&quot;用户态函数&quot;&gt;&lt;/a&gt;用户态函数&lt;/h2&gt;&lt;p&gt;int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);&lt;br&gt;参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;socketfd socket文件描述索引下标&lt;br&gt;addr 要连接的服务端的地址&lt;br&gt;addrlen addr的长度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回值:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-1 失败&lt;br&gt; strerror(errno)可帮助获取失败原因&lt;br&gt; 常见失败原因有：&lt;br&gt; ETIMEOUT Connection timed out服务端一直未回复syn ack，尝试多次syn后返回&lt;br&gt; ECONNREFUSED Connection refused 服务端端口没有开启，回复rst&lt;br&gt; EHOSTUNREACH  No route to host 服务端在同局域网内arp请求获取办不到对方mac&lt;/p&gt;
&lt;p&gt;0 成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用法:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remote_addr&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;remote_addr,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(remote_addr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote_addr.sin_family=AF_INET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote_addr.sin_addr.s_addr=inet_addr(&lt;span class=&quot;string&quot;&gt;&quot;180.97.33.108&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote_addr.sin_port = htons(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connect(fd,(struct sockaddr*)&amp;amp;remote_addr,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(struct sockaddr)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>socket()实现源码分析</title>
    <link href="http://vcpu.me/socket/"/>
    <id>http://vcpu.me/socket/</id>
    <published>2017-06-09T09:22:34.000Z</published>
    <updated>2017-06-22T10:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket"><a href="#socket" class="headerlink" title="socket()"></a>socket()</h1><p>内核版本：3.10.0-514.16.1.el7.x86_64</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;          /* See NOTES */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</div><div class="line">fd=socket(PF_INET,SOCK_STREAM,<span class="number">0</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-接口说明："><a href="#1-接口说明：" class="headerlink" title="(1).接口说明："></a>(1).接口说明：</h2><h3 id="按照顺序可传入如下参数："><a href="#按照顺序可传入如下参数：" class="headerlink" title="按照顺序可传入如下参数："></a>按照顺序可传入如下参数：</h3><ul>
<li>PF_INEAT</li>
<li>SOCK_STREAM,SOCK_DGRAM,SOCK_RAW</li>
<li>IPPROTO_TCP,IPPROTO_UDP,IPPROTO_IP</li>
</ul>
<h3 id="返回值说明"><a href="#返回值说明" class="headerlink" title="返回值说明"></a>返回值说明</h3><ul>
<li>EAFNOSUPPORT 不支持地址类型</li>
<li>EMFILE     进程文件表溢出</li>
<li>ENFILE 核心内存不足无法建立新的socket</li>
<li>EINVAL 参数domain/type/protocol不合法</li>
<li>EACCES 权限不允许</li>
<li>ENOBUFS/ENOMEM 内存不足</li>
<li>EPROTONOSUPPORT domain指定的类型不支持参数type或者protocol</li>
</ul>
<h2 id="2-内核调用栈"><a href="#2-内核调用栈" class="headerlink" title="(2).内核调用栈"></a>(2).内核调用栈</h2><p><img src="/myimages/socket.png" alt="socket"></p>
<h2 id="3-结构体说明"><a href="#3-结构体说明" class="headerlink" title="(3).结构体说明"></a>(3).结构体说明</h2><blockquote>
<p>struct socket</p>
<blockquote>
<p>面向用户态的结构体<br>基于虚拟文件系统创建<br>创建socket时最先创建的结构体</p>
</blockquote>
<p>struct sock </p>
<blockquote>
<p>网络层socket</p>
</blockquote>
<p>struct inet_sock</p>
<blockquote>
<p>INET域socket表示<br>提供INET域的一些属性，TTL、 组播、 地址 、端口</p>
</blockquote>
<p>struct raw_socket、struct udp—sock、 struct inet_connection_sock </p>
<blockquote>
<p>是对struct inet_sock的扩展<br>struct raw_socket要处理ICMP<br>struct udp_sock udp协议socket<br>struct inet_connection_sock面向连接socket<br>struct tcp_sock TCP协议socket ，对inet_connection_sock扩展，增加了滑动窗口等拥塞控制属性<br>struct inet_timewait_sock网络层超时控制使用<br>struct tcp_timewait_sock TCP协议超时控制使用</p>
</blockquote>
</blockquote>
<h2 id="4-struct-socket创建源码分析"><a href="#4-struct-socket创建源码分析" class="headerlink" title="(4).struct socket创建源码分析"></a>(4).struct socket创建源码分析</h2><h3 id="4-1-sock-alloc函数"><a href="#4-1-sock-alloc函数" class="headerlink" title="(4.1).sock_alloc函数"></a>(4.1).sock_alloc函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> struct socket *<span class="title">sock_alloc</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></div><div class="line"></div><div class="line">	inode = new_inode_pseudo(sock_mnt-&gt;mnt_sb);</div><div class="line">	<span class="keyword">if</span> (!inode)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	sock = SOCKET_I(inode);</div><div class="line"></div><div class="line">	kmemcheck_annotate_bitfield(sock, type);</div><div class="line">	inode-&gt;i_ino = get_next_ino();</div><div class="line">	inode-&gt;i_mode = S_IFSOCK | S_IRWXUGO;</div><div class="line">	inode-&gt;i_uid = current_fsuid();</div><div class="line">	inode-&gt;i_gid = current_fsgid();</div><div class="line">	inode-&gt;i_op = &amp;sockfs_inode_ops;</div><div class="line"></div><div class="line">	this_cpu_add(sockets_in_use, <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> sock;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>一起申请两块内存struct socket和struct inode</li>
<li>两块内存用struct socket_alloc联系起来</li>
<li>inode是linux用来刻画一个存放在内存中的文件的</li>
<li>socket是一种网络文件类型，可以通过文件描述符使用read和write等文件操作函数操作socket</li>
<li>有了inode就支持了虚拟文件系统的操作</li>
</ul>
<h3 id="4-2-sock-alloc-gt-new-inode-pseudo-gt-alloc-inode"><a href="#4-2-sock-alloc-gt-new-inode-pseudo-gt-alloc-inode" class="headerlink" title="(4.2).sock_alloc-&gt;new_inode_pseudo-&gt;alloc_inode"></a>(4.2).sock_alloc-&gt;new_inode_pseudo-&gt;alloc_inode</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function">struct inode *<span class="title">new_inode_pseudo</span><span class="params">(struct super_block *sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span> = <span class="title">alloc_inode</span>(<span class="title">sb</span>);</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (inode) &#123;</div><div class="line">		spin_lock(&amp;inode-&gt;i_lock);</div><div class="line">		inode-&gt;i_state = <span class="number">0</span>;</div><div class="line">		spin_unlock(&amp;inode-&gt;i_lock);</div><div class="line">		INIT_LIST_HEAD(&amp;inode-&gt;i_sb_list);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> inode;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> struct inode *<span class="title">alloc_inode</span><span class="params">(struct super_block *sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>;</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sb-&gt;s_op-&gt;alloc_inode)</div><div class="line">		inode = sb-&gt;s_op-&gt;alloc_inode(sb);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		inode = kmem_cache_alloc(inode_cachep, GFP_KERNEL);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!inode)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(inode_init_always(sb, inode))) &#123;</div><div class="line">		<span class="keyword">if</span> (inode-&gt;i_sb-&gt;s_op-&gt;destroy_inode)</div><div class="line">			inode-&gt;i_sb-&gt;s_op-&gt;destroy_inode(inode);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			kmem_cache_free(inode_cachep, inode);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> inode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>alloc_inode获取内存有两种方式 1.通过自己alloc_inode分配 2.从高速缓存中分配</li>
</ul>
<h3 id="4-3-alloc-inode-gt-sock-alloc-inode"><a href="#4-3-alloc-inode-gt-sock-alloc-inode" class="headerlink" title="(4.3).alloc_inode -&gt; sock_alloc_inode"></a>(4.3).alloc_inode -&gt; sock_alloc_inode</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> struct inode *<span class="title">sock_alloc_inode</span><span class="params">(struct super_block *sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_alloc</span> *<span class="title">ei</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">socket_wq</span> *<span class="title">wq</span>;</span></div><div class="line"></div><div class="line">	ei = kmem_cache_alloc(sock_inode_cachep, GFP_KERNEL);</div><div class="line">	<span class="keyword">if</span> (!ei)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	wq = kmalloc(<span class="keyword">sizeof</span>(*wq), GFP_KERNEL);</div><div class="line">	<span class="keyword">if</span> (!wq) &#123;</div><div class="line">		kmem_cache_free(sock_inode_cachep, ei);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">	init_waitqueue_head(&amp;wq-&gt;wait);</div><div class="line">	wq-&gt;fasync_list = <span class="literal">NULL</span>;</div><div class="line">	RCU_INIT_POINTER(ei-&gt;socket.wq, wq);</div><div class="line"></div><div class="line">	ei-&gt;socket.state = SS_UNCONNECTED;</div><div class="line">	ei-&gt;socket.flags = <span class="number">0</span>;</div><div class="line">	ei-&gt;socket.ops = <span class="literal">NULL</span>;</div><div class="line">	ei-&gt;socket.sk = <span class="literal">NULL</span>;</div><div class="line">	ei-&gt;socket.file = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &amp;ei-&gt;vfs_inode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>socket结构体最终会调用上述函数申请内存</li>
<li>该函数会在sock_init中被注册和挂载到系统上</li>
</ul>
<h3 id="4-4-sock-init-中sock-allok-inode挂载过程"><a href="#4-4-sock-init-中sock-allok-inode挂载过程" class="headerlink" title="(4.4).sock_init 中sock_allok_inode挂载过程"></a>(4.4).sock_init 中sock_allok_inode挂载过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">err = register_filesystem(&amp;sock_fs_type);</div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		<span class="keyword">goto</span> out_fs;</div><div class="line">	sock_mnt = kern_mount(&amp;sock_fs_type);</div><div class="line">	<span class="keyword">if</span> (IS_ERR(sock_mnt)) &#123;</div><div class="line">		err = PTR_ERR(sock_mnt);</div><div class="line">		<span class="keyword">goto</span> out_mount;</div><div class="line">	...</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_system_type</span> <span class="title">sock_fs_type</span> = &#123;</span></div><div class="line">	.name =		<span class="string">"sockfs"</span>,</div><div class="line">	.mount =	sockfs_mount,</div><div class="line">	.kill_sb =	kill_anon_super,</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">static</span> struct dentry *<span class="title">sockfs_mount</span><span class="params">(struct file_system_type *fs_type,</span></span></div><div class="line">			 <span class="keyword">int</span> flags, <span class="keyword">const</span> <span class="keyword">char</span> *dev_name, <span class="keyword">void</span> *data)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> mount_pseudo(fs_type, <span class="string">"socket:"</span>, &amp;sockfs_ops,</div><div class="line">		&amp;sockfs_dentry_operations, SOCKFS_MAGIC);</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">super_operations</span> <span class="title">sockfs_ops</span> = &#123;</span></div><div class="line">	.alloc_inode	= sock_alloc_inode,</div><div class="line">	.destroy_inode	= sock_destroy_inode,</div><div class="line">	.statfs		= simple_statfs,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>sock_init -&gt; register mount -&gt; sock_fs_type-&gt;sockfs_mount-&gt;sockfs_ops-&gt;sock_alloc_node</li>
</ul>
<h3 id="4-5-pf-gt-create-即TCP／IP协议族的创建函数inet-create初始化步骤"><a href="#4-5-pf-gt-create-即TCP／IP协议族的创建函数inet-create初始化步骤" class="headerlink" title="(4.5).pf-&gt;create 即TCP／IP协议族的创建函数inet_create初始化步骤"></a>(4.5).pf-&gt;create 即TCP／IP协议族的创建函数inet_create初始化步骤</h3><h4 id="4-5-1-PF-INET协议族的create函数inet-create会被组册"><a href="#4-5-1-PF-INET协议族的create函数inet-create会被组册" class="headerlink" title="(4.5.1).PF_INET协议族的create函数inet_create会被组册"></a>(4.5.1).PF_INET协议族的create函数inet_create会被组册</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">void</span>)sock_register(&amp;inet_family_ops);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">net_proto_family</span> <span class="title">inet_family_ops</span> = &#123;</span></div><div class="line">	.family = PF_INET,</div><div class="line">	.create = inet_create,</div><div class="line">	.owner	= THIS_MODULE,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="4-5-2-注册过程"><a href="#4-5-2-注册过程" class="headerlink" title="(4.5.2).注册过程"></a>(4.5.2).注册过程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_register</span><span class="params">(<span class="keyword">const</span> struct net_proto_family *ops)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ops-&gt;family &gt;= NPROTO) &#123;</div><div class="line">		printk(KERN_CRIT <span class="string">"protocol %d &gt;= NPROTO(%d)\n"</span>, ops-&gt;family,</div><div class="line">		       NPROTO);</div><div class="line">		<span class="keyword">return</span> -ENOBUFS;</div><div class="line">	&#125;</div><div class="line">	spin_lock(&amp;net_family_lock);</div><div class="line">	<span class="keyword">if</span> (rcu_dereference_protected(net_families[ops-&gt;family],</div><div class="line">				      lockdep_is_held(&amp;net_family_lock)))</div><div class="line">		err = -EEXIST;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		rcu_assign_pointer(net_families[ops-&gt;family], ops);</div><div class="line">		err = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	spin_unlock(&amp;net_family_lock);</div><div class="line">	printk(KERN_INFO <span class="string">"NET: Registered protocol family %d\n"</span>, ops-&gt;family);</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>协议族选项ops会根基协议族类型PF_INET被放置到net_families系统全局变量中</li>
</ul>
<h4 id="4-5-3-sock-create使用过程"><a href="#4-5-3-sock-create使用过程" class="headerlink" title="(4.5.3).__sock_create使用过程"></a>(4.5.3).__sock_create使用过程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">socket.c/__sock_create</div><div class="line">...</div><div class="line">rcu_read_lock();</div><div class="line">	pf = rcu_dereference(net_families[family]);</div><div class="line">	err = -EAFNOSUPPORT;</div><div class="line">	<span class="keyword">if</span> (!pf)</div><div class="line">		<span class="keyword">goto</span> out_release;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * We will call the -&gt;create function, that possibly is in a loadable</div><div class="line">	 * module, so we have to bump that loadable module refcnt first.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (!try_module_get(pf-&gt;owner))</div><div class="line">		<span class="keyword">goto</span> out_release;</div><div class="line"></div><div class="line">	<span class="comment">/* Now protected by module ref count */</span></div><div class="line">	rcu_read_unlock();</div><div class="line"></div><div class="line">	err = pf-&gt;create(net, sock, protocol, kern);</div><div class="line">	<span class="keyword">if</span> (err &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">goto</span> out_module_put;</div></pre></td></tr></table></figure>
<ul>
<li>根据socket传输过来的协议族PF_INET查找全局变量net_families获取ops</li>
<li>通过ops-&gt;create调用inet_create根据具体协议创建网络层socket struct sock</li>
</ul>
<h3 id="4-6-inet-create都干了什么？"><a href="#4-6-inet-create都干了什么？" class="headerlink" title="(4.6).inet_create都干了什么？"></a>(4.6).inet_create都干了什么？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inet_create</span><span class="params">(struct net *net, struct socket *sock, <span class="keyword">int</span> protocol,</span></span></div><div class="line">		       <span class="keyword">int</span> kern)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">proto</span> *<span class="title">answer_prot</span>;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> answer_flags;</div><div class="line">	<span class="keyword">int</span> try_loading_module = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (protocol &lt; <span class="number">0</span> || protocol &gt;= IPPROTO_MAX)</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line"></div><div class="line">	sock-&gt;state = SS_UNCONNECTED;<span class="comment">//步骤1:设置socket状态SS_UNCONNECTED</span></div><div class="line"></div><div class="line">	<span class="comment">/* Look for the requested type/protocol pair. */</span></div><div class="line">lookup_protocol:</div><div class="line">	err = -ESOCKTNOSUPPORT;</div><div class="line">	rcu_read_lock();／／步骤<span class="number">2</span>:根据socket协议找到inet处理函数 connect、bind、accept、listen、等</div><div class="line">	list_for_each_entry_rcu(answer, &amp;inetsw[sock-&gt;type], <span class="built_in">list</span>) &#123;</div><div class="line"></div><div class="line">		err = <span class="number">0</span>;</div><div class="line">		<span class="comment">/* Check the non-wild match. */</span></div><div class="line">		<span class="keyword">if</span> (protocol == answer-&gt;protocol) &#123;</div><div class="line">			<span class="keyword">if</span> (protocol != IPPROTO_IP)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">/* Check for the two wild cases. */</span></div><div class="line">			<span class="keyword">if</span> (IPPROTO_IP == protocol) &#123;</div><div class="line">				protocol = answer-&gt;protocol;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (IPPROTO_IP == answer-&gt;protocol)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		err = -EPROTONOSUPPORT;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (unlikely(err)) &#123;</div><div class="line">		<span class="keyword">if</span> (try_loading_module &lt; <span class="number">2</span>) &#123;</div><div class="line">			rcu_read_unlock();</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Be more specific, e.g. net-pf-2-proto-132-type-1</div><div class="line">			 * (net-pf-PF_INET-proto-IPPROTO_SCTP-type-SOCK_STREAM)</div><div class="line">			 */</div><div class="line">			<span class="keyword">if</span> (++try_loading_module == <span class="number">1</span>)</div><div class="line">				request_module(<span class="string">"net-pf-%d-proto-%d-type-%d"</span>,</div><div class="line">					       PF_INET, protocol, sock-&gt;type);</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Fall back to generic, e.g. net-pf-2-proto-132</div><div class="line">			 * (net-pf-PF_INET-proto-IPPROTO_SCTP)</div><div class="line">			 */</div><div class="line">			<span class="keyword">else</span></div><div class="line">				request_module(<span class="string">"net-pf-%d-proto-%d"</span>,</div><div class="line">					       PF_INET, protocol);</div><div class="line">			<span class="keyword">goto</span> lookup_protocol;</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			<span class="keyword">goto</span> out_rcu_unlock;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	err = -EPERM;</div><div class="line">	<span class="keyword">if</span> (sock-&gt;type == SOCK_RAW &amp;&amp; !kern &amp;&amp;</div><div class="line">	    !ns_capable(net-&gt;user_ns, CAP_NET_RAW))</div><div class="line">		<span class="keyword">goto</span> out_rcu_unlock;</div><div class="line">／／步骤<span class="number">3</span>: 把协协议的inet操作集合赋值给socket结构的ops</div><div class="line">	sock-&gt;ops = answer-&gt;ops;</div><div class="line">	answer_prot = answer-&gt;prot;</div><div class="line">	answer_flags = answer-&gt;flags;</div><div class="line">	rcu_read_unlock();</div><div class="line"></div><div class="line">	WARN_ON(answer_prot-&gt;slab == <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">	err = -ENOBUFS;</div><div class="line">	／／步骤<span class="number">4</span>:申请<span class="class"><span class="keyword">struct</span> <span class="title">sock</span>结构体，并切把协议操作集合赋值给<span class="title">sock</span>结构体</span></div><div class="line">	／／<span class="title">sk</span>-&gt;<span class="title">sk_prot</span> = <span class="title">sk</span>-&gt;<span class="title">sk_prot_creator</span> =协议操作集合;</div><div class="line">	sk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot);</div><div class="line">	<span class="keyword">if</span> (sk == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line"></div><div class="line">	err = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (INET_PROTOSW_REUSE &amp; answer_flags)</div><div class="line">		sk-&gt;sk_reuse = SK_CAN_REUSE;</div><div class="line">／／步骤<span class="number">5</span>：inet_sock进行相关初始化</div><div class="line">	inet = inet_sk(sk);</div><div class="line">	inet-&gt;is_icsk = (INET_PROTOSW_ICSK &amp; answer_flags) != <span class="number">0</span>;</div><div class="line"></div><div class="line">	inet-&gt;nodefrag = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (SOCK_RAW == sock-&gt;type) &#123;</div><div class="line">		inet-&gt;inet_num = protocol;</div><div class="line">		<span class="keyword">if</span> (IPPROTO_RAW == protocol)</div><div class="line">			inet-&gt;hdrincl = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (net-&gt;sysctl_ip_no_pmtu_disc)</div><div class="line">		inet-&gt;pmtudisc = IP_PMTUDISC_DONT;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		inet-&gt;pmtudisc = IP_PMTUDISC_WANT;</div><div class="line"></div><div class="line">	inet-&gt;inet_id = <span class="number">0</span>;</div><div class="line"></div><div class="line">	sock_init_data(sock, sk);</div><div class="line"></div><div class="line">	sk-&gt;sk_destruct	   = inet_sock_destruct;</div><div class="line">	sk-&gt;sk_protocol	   = protocol;</div><div class="line">	sk-&gt;sk_backlog_rcv = sk-&gt;sk_prot-&gt;backlog_rcv;</div><div class="line"></div><div class="line">	inet-&gt;uc_ttl	= <span class="number">-1</span>;</div><div class="line">	inet-&gt;mc_loop	= <span class="number">1</span>;</div><div class="line">	inet-&gt;mc_ttl	= <span class="number">1</span>;</div><div class="line">	inet-&gt;mc_all	= <span class="number">1</span>;</div><div class="line">	inet-&gt;mc_index	= <span class="number">0</span>;</div><div class="line">	inet-&gt;mc_list	= <span class="literal">NULL</span>;</div><div class="line">	inet-&gt;rcv_tos	= <span class="number">0</span>;</div><div class="line"></div><div class="line">	sk_refcnt_debug_inc(sk);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (inet-&gt;inet_num) &#123;</div><div class="line">		<span class="comment">/* It assumes that any protocol which allows</span></div><div class="line">		 * the user to assign a number at socket</div><div class="line">		 * creation time automatically</div><div class="line">		 * shares.</div><div class="line">		 */</div><div class="line">		inet-&gt;inet_sport = htons(inet-&gt;inet_num);</div><div class="line">		<span class="comment">/* Add to protocol hash chains. */</span></div><div class="line">		sk-&gt;sk_prot-&gt;hash(sk);</div><div class="line">	&#125;</div><div class="line">／／步骤<span class="number">6</span>:调用协议层初始化函数tcp_v4_init_sock()进行始化</div><div class="line">	<span class="keyword">if</span> (sk-&gt;sk_prot-&gt;init) &#123;</div><div class="line">		err = sk-&gt;sk_prot-&gt;init(sk);</div><div class="line">		<span class="keyword">if</span> (err)</div><div class="line">			sk_common_release(sk);</div><div class="line">	&#125;</div><div class="line">out:</div><div class="line">	<span class="keyword">return</span> err;</div><div class="line">out_rcu_unlock:</div><div class="line">	rcu_read_unlock();</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>设置socket状态SS_UNCONNECTED</li>
<li>根据协议类型找到具体的协议类型操作集合，例如协议处理函数tcp_proc和inet层处理函数集合inet_stream_ops</li>
<li>socket-&gt;ops 获得协议操作集合inet_stream_ops</li>
<li>申请sock，并把tcp_proc赋值给它 sk-&gt;sk_prot = sk-&gt;sk_prot_creator=tcp_proc</li>
<li>把申请的sock和inet_sock进行初始化</li>
<li>sk-&gt;sk_prot-&gt;init(sk) 调用tcp_proc深度初始化TCP相关信息</li>
</ul>
<p>尽管流程主要干了上述的事情，仍需要深入探究的问题是：<br>a. inet_protosw inet_protosw初始化过程如何？<br>b. inet_sock和sock是什么关系？<br>c. 从inet_protosw获取的prot和ops哪些结构体上会记录使用？</p>
<h4 id="4-6-1-inet-protosw初始化过程如何？"><a href="#4-6-1-inet-protosw初始化过程如何？" class="headerlink" title="(4.6.1).inet_protosw初始化过程如何？"></a>(4.6.1).inet_protosw初始化过程如何？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> <span class="title">inetsw_array</span>[] =</span></div><div class="line">&#123;</div><div class="line">	&#123;</div><div class="line">		.type =       SOCK_STREAM,</div><div class="line">		.protocol =   IPPROTO_TCP,</div><div class="line">		.prot =       &amp;tcp_prot,</div><div class="line">		.ops =        &amp;inet_stream_ops,</div><div class="line">		.flags =      INET_PROTOSW_PERMANENT |</div><div class="line">			      INET_PROTOSW_ICSK,</div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		.type =       SOCK_DGRAM,</div><div class="line">		.protocol =   IPPROTO_UDP,</div><div class="line">		.prot =       &amp;udp_prot,</div><div class="line">		.ops =        &amp;inet_dgram_ops,</div><div class="line">		.flags =      INET_PROTOSW_PERMANENT,</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       &#123;</div><div class="line">		.type =       SOCK_DGRAM,</div><div class="line">		.protocol =   IPPROTO_ICMP,</div><div class="line">		.prot =       &amp;ping_prot,</div><div class="line">		.ops =        &amp;inet_dgram_ops,</div><div class="line">		.flags =      INET_PROTOSW_REUSE,</div><div class="line">       &#125;,</div><div class="line">       &#123;</div><div class="line">	       .type =       SOCK_RAW,</div><div class="line">	       .protocol =   IPPROTO_IP,	<span class="comment">/* wild card */</span></div><div class="line">	       .prot =       &amp;raw_prot,</div><div class="line">	       .ops =        &amp;inet_sockraw_ops,</div><div class="line">	       .flags =      INET_PROTOSW_REUSE,</div><div class="line">       &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//inet_init</span></div><div class="line">	<span class="keyword">for</span> (q = inetsw_array; q &lt; &amp;inetsw_array[INETSW_ARRAY_LEN]; ++q)</div><div class="line">		inet_register_protosw(q);</div><div class="line">		</div><div class="line"><span class="comment">//inet_protosw放入全局inetsw管理</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_register_protosw</span><span class="params">(struct inet_protosw *p)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">lh</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_protosw</span> *<span class="title">answer</span>;</span></div><div class="line">	<span class="keyword">int</span> protocol = p-&gt;protocol;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">last_perm</span>;</span></div><div class="line"></div><div class="line">	spin_lock_bh(&amp;inetsw_lock);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (p-&gt;type &gt;= SOCK_MAX)</div><div class="line">		<span class="keyword">goto</span> out_illegal;</div><div class="line"></div><div class="line">	<span class="comment">/* If we are trying to override a permanent protocol, bail. */</span></div><div class="line">	answer = <span class="literal">NULL</span>;</div><div class="line">	last_perm = &amp;inetsw[p-&gt;type];</div><div class="line">	list_for_each(lh, &amp;inetsw[p-&gt;type]) &#123;</div><div class="line">		answer = list_entry(lh, struct inet_protosw, <span class="built_in">list</span>);</div><div class="line"></div><div class="line">		<span class="comment">/* Check only the non-wild match. */</span></div><div class="line">		<span class="keyword">if</span> (INET_PROTOSW_PERMANENT &amp; answer-&gt;flags) &#123;</div><div class="line">			<span class="keyword">if</span> (protocol == answer-&gt;protocol)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			last_perm = lh;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		answer = <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (answer)</div><div class="line">		<span class="keyword">goto</span> out_permanent;</div><div class="line">	<span class="comment">/* Add the new entry after the last permanent entry if any, so that</span></div><div class="line">	 * the new entry does not override a permanent entry when matched with</div><div class="line">	 * a wild-card protocol. But it is allowed to override any existing</div><div class="line">	 * non-permanent entry.  This means that when we remove this entry, the</div><div class="line">	 * system automatically returns to the old behavior.</div><div class="line">	 */</div><div class="line">	list_add_rcu(&amp;p-&gt;<span class="built_in">list</span>, last_perm);</div><div class="line">out:</div><div class="line">	spin_unlock_bh(&amp;inetsw_lock);</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">out_permanent:</div><div class="line">	pr_err(<span class="string">"Attempt to override permanent protocol %d\n"</span>, protocol);</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">out_illegal:</div><div class="line">	pr_err(<span class="string">"Ignoring attempt to register invalid socket type %d\n"</span>,</div><div class="line">	       p-&gt;type);</div><div class="line">	<span class="keyword">goto</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>inet_init 会把inet_protosw方式inet_sw中</li>
<li>inet_protosw很重要，其含有协议的具体操作函数tcp_close,tcp_v4_connect,tcp_recvmsg等</li>
<li>inet_protosw，内还包含inet层操作函数 inet_bind,inet_accept,inet_bind,inet_listen等</li>
</ul>
<h4 id="4-6-2-inet-sock和sock是什么关系？"><a href="#4-6-2-inet-sock和sock是什么关系？" class="headerlink" title="(4.6.2). inet_sock和sock是什么关系？"></a>(4.6.2). inet_sock和sock是什么关系？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function">struct sock *<span class="title">sk_alloc</span><span class="params">(struct net *net, <span class="keyword">int</span> family, <span class="keyword">gfp_t</span> priority,</span></span></div><div class="line">		      struct proto *prot)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></div><div class="line"></div><div class="line">	sk = sk_prot_alloc(prot, priority | __GFP_ZERO, family);</div><div class="line">	<span class="keyword">if</span> (sk) &#123;</div><div class="line">		sk-&gt;sk_family = family;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * See comment in struct sock definition to understand</div><div class="line">		 * why we need sk_prot_creator -acme</div><div class="line">		 */</div><div class="line">		sk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;</div><div class="line">		sock_lock_init(sk);</div><div class="line">		sock_net_set(sk, get_net(net));</div><div class="line">		atomic_set(&amp;sk-&gt;sk_wmem_alloc, <span class="number">1</span>);</div><div class="line"></div><div class="line">		sock_update_classid(sk);</div><div class="line">		sock_update_netprioidx(sk);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sk;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> struct sock *<span class="title">sk_prot_alloc</span><span class="params">(struct proto *prot, <span class="keyword">gfp_t</span> priority,</span></span></div><div class="line">		<span class="keyword">int</span> family)</div><div class="line">&#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab</span>;</span></div><div class="line"></div><div class="line">	slab = prot-&gt;slab;</div><div class="line">	<span class="keyword">if</span> (slab != <span class="literal">NULL</span>) &#123;</div><div class="line">		sk = kmem_cache_alloc(slab, priority &amp; ~__GFP_ZERO);</div><div class="line">		<span class="keyword">if</span> (!sk)</div><div class="line">			<span class="keyword">return</span> sk;</div><div class="line">		<span class="keyword">if</span> (priority &amp; __GFP_ZERO) &#123;</div><div class="line">			<span class="keyword">if</span> (prot-&gt;clear_sk)</div><div class="line">				prot-&gt;clear_sk(sk, prot-&gt;obj_size);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				sk_prot_clear_nulls(sk, prot-&gt;obj_size);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span></div><div class="line">		sk = kmalloc(prot-&gt;obj_size, priority);<span class="comment">//申请内存大小为prot的objsize</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (sk != <span class="literal">NULL</span>) &#123;</div><div class="line">		kmemcheck_annotate_bitfield(sk, flags);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (security_sk_alloc(sk, family, priority))</div><div class="line">			<span class="keyword">goto</span> out_free;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!try_module_get(prot-&gt;owner))</div><div class="line">			<span class="keyword">goto</span> out_free_sec;</div><div class="line">		sk_tx_queue_clear(sk);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> sk;</div><div class="line"></div><div class="line">out_free_sec:</div><div class="line">	security_sk_free(sk);</div><div class="line">out_free:</div><div class="line">	<span class="keyword">if</span> (slab != <span class="literal">NULL</span>)</div><div class="line">		kmem_cache_free(slab, sk);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		kfree(sk);</div><div class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>从上述sk_alloc  -&gt; sk_prot_alloc -&gt; obj_size</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proto</span> <span class="title">tcp_prot</span> = &#123;</span></div><div class="line">	.name			= <span class="string">"TCP"</span>,</div><div class="line">	.owner			= THIS_MODULE,</div><div class="line">	.close			= tcp_close,</div><div class="line">	.connect		= tcp_v4_connect,</div><div class="line">	.disconnect		= tcp_disconnect,</div><div class="line">	.accept			= inet_csk_accept,</div><div class="line">	.ioctl			= tcp_ioctl,</div><div class="line">	.init			= tcp_v4_init_sock,</div><div class="line">	.destroy		= tcp_v4_destroy_sock,</div><div class="line">	.shutdown		= tcp_shutdown,</div><div class="line">	.setsockopt		= tcp_setsockopt,</div><div class="line">	.getsockopt		= tcp_getsockopt,</div><div class="line">	.recvmsg		= tcp_recvmsg,</div><div class="line">	.sendmsg		= tcp_sendmsg,</div><div class="line">	.sendpage		= tcp_sendpage,</div><div class="line">	.backlog_rcv		= tcp_v4_do_rcv,</div><div class="line">	.release_cb		= tcp_release_cb,</div><div class="line">	.hash			= inet_hash,</div><div class="line">	.unhash			= inet_unhash,</div><div class="line">	.get_port		= inet_csk_get_port,</div><div class="line">	.enter_memory_pressure	= tcp_enter_memory_pressure,</div><div class="line">	.stream_memory_free	= tcp_stream_memory_free,</div><div class="line">	.sockets_allocated	= &amp;tcp_sockets_allocated,</div><div class="line">	.orphan_count		= &amp;tcp_orphan_count,</div><div class="line">	.memory_allocated	= &amp;tcp_memory_allocated,</div><div class="line">	.memory_pressure	= &amp;tcp_memory_pressure,</div><div class="line">	.sysctl_wmem		= sysctl_tcp_wmem,</div><div class="line">	.sysctl_rmem		= sysctl_tcp_rmem,</div><div class="line">	.max_header		= MAX_TCP_HEADER,</div><div class="line">	.obj_size		= <span class="keyword">sizeof</span>(struct tcp_sock),</div><div class="line">	.slab_flags		= SLAB_DESTROY_BY_RCU,</div><div class="line">	.twsk_prot		= &amp;tcp_timewait_sock_ops,</div><div class="line">	.rsk_prot		= &amp;tcp_request_sock_ops,</div><div class="line">	.h.hashinfo		= &amp;tcp_hashinfo,</div><div class="line">	.no_autobind		= <span class="literal">true</span>,</div><div class="line">#ifdef CONFIG_COMPAT</div><div class="line">	.compat_setsockopt	= compat_tcp_setsockopt,</div><div class="line">	.compat_getsockopt	= compat_tcp_getsockopt,</div><div class="line">#endif</div><div class="line">#ifdef CONFIG_MEMCG_KMEM</div><div class="line">	.init_cgroup		= tcp_init_cgroup,</div><div class="line">	.destroy_cgroup		= tcp_destroy_cgroup,</div><div class="line">	.proto_cgroup		= tcp_proto_cgroup,</div><div class="line">#endif</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>struct tcp_sock 包含strcut inet_sock 包含 struct sock</li>
<li>上述结构体为互相包含的关系</li>
<li>实际上在申请sock时候，申请内存大小为tcp_sock大小，也就是说三个结构体共同诞生了</li>
</ul>
<h4 id="4-6-3-从inet-protosw获取的prot和ops哪些结构体上会记录使用？"><a href="#4-6-3-从inet-protosw获取的prot和ops哪些结构体上会记录使用？" class="headerlink" title="(4.6.3). 从inet_protosw获取的prot和ops哪些结构体上会记录使用？"></a>(4.6.3). 从inet_protosw获取的prot和ops哪些结构体上会记录使用？</h4><blockquote>
<p>struct socket会在inet_create函数中获取到ops<br>    sock-&gt;ops = answer-&gt;ops;<br>struct sock在sk_allloc函数中获取pro<br>  sk-&gt;sk_prot = sk-&gt;sk_prot_creator = prot;</p>
</blockquote>
<h2 id="5-socket与文件系统"><a href="#5-socket与文件系统" class="headerlink" title="(5).socket与文件系统"></a>(5).socket与文件系统</h2><p>socket与文件系统关联通过sock_map_fd完成</p>
<p>其步骤如下：</p>
<blockquote>
<p>1:获取fd get_unused_fd_flags</p>
<blockquote>
<p>该函数从当前进程管理的files获取可用的fd</p>
</blockquote>
<p>2:申请file sock_alloc_file</p>
<blockquote>
<p>将struct socket放到file的private_data管理 file-&gt;private_data = sock</p>
</blockquote>
<p>3:将file根据当前fd安装到current-&gt;files中</p>
<blockquote>
<p>files有一个指针fdt<br>fdt-&gt;fd是一个类型为file指针的数组，数组下标为fd<br>rcu_assign_pointer(fdt-&gt;fd[fd], file); 将file安装fd为数组下标放到current-&gt;files管理</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;socket&quot;&gt;&lt;a href=&quot;#socket&quot; class=&quot;headerlink&quot; title=&quot;socket()&quot;&gt;&lt;/a&gt;socket()&lt;/h1&gt;&lt;p&gt;内核版本：3.10.0-514.16.1.el7.x86_64&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;          /* See NOTES */&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; domain, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; type, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; protocol)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fd=socket(PF_INET,SOCK_STREAM,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="socket" scheme="http://vcpu.me/categories/socket/"/>
    
    
      <category term="tcp/ip" scheme="http://vcpu.me/tags/tcp-ip/"/>
    
      <category term="kernel3.10.0-514.16.1" scheme="http://vcpu.me/tags/kernel3-10-0-514-16-1/"/>
    
      <category term="socket" scheme="http://vcpu.me/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>systemtap使用调试记录（一）</title>
    <link href="http://vcpu.me/systemtap%E4%BD%BF%E7%94%A8%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vcpu.me/systemtap使用调试记录（一）/</id>
    <published>2017-06-05T10:15:52.000Z</published>
    <updated>2017-06-05T10:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="systemtap使用调试记录（一）"><a href="#systemtap使用调试记录（一）" class="headerlink" title="systemtap使用调试记录（一）"></a>systemtap使用调试记录（一）</h1><h2 id="一、调试环境介绍"><a href="#一、调试环境介绍" class="headerlink" title="一、调试环境介绍"></a>一、调试环境介绍</h2><pre><code>Linux 3.10.0-514.16.1.el7.x86_64 
kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm 同版本的开发头文件
kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm
kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm 同版本调试数据包
linux-3.10.0-514.16.1.el7.tar.xz 同版本的源码
</code></pre><p><a href="https://centos.pkgs.org/7/centos-updates-x86_64/kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm.html" target="_blank" rel="external"><em>kernel开发头文件下载地址</em></a><br><a href="http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm" target="_blank" rel="external"><em>kernel调试包下载地址</em></a><br><a href="http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm" target="_blank" rel="external"><em>kernel调试common包下载地址</em></a><br><a href="https://wiki.centos.org/zh/HowTos/I_need_the_Kernel_Source#head-963cd44439b8c10fa507fa0c90725029c060108a" target="_blank" rel="external">根据当前虚拟机获取内核代码的方法</a></p>
<a id="more"></a>
<h2 id="二、centos7安装方法"><a href="#二、centos7安装方法" class="headerlink" title="二、centos7安装方法"></a>二、centos7安装方法</h2><pre><code>yum install *.rpm  安装上述3个（debugifo,devel,debuginfo-common）rpm包
yum install systemtap
stap -ve &apos;probe begin { log(&quot;hello world&quot;) exit() }&apos;
</code></pre><p>测试正常结果如下：    </p>
<blockquote>
<p>[root@localhost qinlong]# stap -ve ‘probe begin { log(“hello world”) exit() }’<br>Pass 1: parsed user script and 120 library scripts using 227352virt/40488res/3260shr/37400data kb, in 260usr/30sys/338real ms.<br>Pass 2: analyzed script: 1 probe, 2 functions, 0 embeds, 0 globals using 228540virt/41804res/3420shr/38588data kb, in 10usr/0sys/6real ms.<br>Pass 3: translated to C into “/tmp/stap5CqHmN/stap_f7a5084b8a638f5ce64a31271684ef1f_1133_src.c” using 228672virt/42408res/3996shr/38720data kb, in 0usr/0sys/0real ms.<br>Pass 4: compiled C into “stap_f7a5084b8a638f5ce64a31271684ef1f_1133.ko” in 1000usr/330sys/1247real ms.<br>Pass 5: starting run.<br>hello world<br>Pass 5: run completed in 10usr/40sys/362real ms.</p>
</blockquote>
<h2 id="三、通用案例"><a href="#三、通用案例" class="headerlink" title="三、通用案例"></a>三、通用案例</h2><h3 id="1-函数调用栈打印"><a href="#1-函数调用栈打印" class="headerlink" title="1.函数调用栈打印"></a>1.函数调用栈打印</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# cat bt.stp</div><div class="line">	probe kernel.function(@1)&#123;</div><div class="line">	    print(&quot;----------------START-------------------------\n&quot;)</div><div class="line">	    printf(&quot;In process [%s]\n&quot;, execname())</div><div class="line">	    print_regs()</div><div class="line">	    print_backtrace()</div><div class="line">	    print(&quot;----------------END-------------------------\n&quot;)</div><div class="line">	    exit()</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>打印内核函数的调用栈</p>
<blockquote>
<p>[root@localhost stp]# stap bt.stp tcp_sendmsg<br>—————-START————————-<br>In process [sshd]<br>RIP: ffffffff815c1ee0<br>RSP: ffff88003d217d28  EFLAGS: 00000202<br>RAX: ffffffff81aa20a0 RBX: ffff88003d217e38 RCX: 0000000000000024<br>RDX: ffff88003d217da8 RSI: ffff88003b3b87c0 RDI: ffff88003d217e38<br>RBP: ffff88003d217d50 R08: 0000000000000000 R09: 0000000000000000<br>R10: ffff88003d217da8 R11: 0000000000000000 R12: ffff88003d217e38<br>R13: 0000000000000001 R14: ffff88003d217e28 R15: ffff8800274d3480<br>FS:  00007f03e5514840(0000) GS:ffff88003fd00000(0000) knlGS:0000000000000000<br>CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033<br>CR2: 00007f19c6dc8000 CR3: 0000000035a5c000 CR4: 00000000000406e0<br> 0xffffffff815c1ee0 : tcp_sendmsg+0x0/0xc40 [kernel]<br> 0xffffffff815ed254 : inet_sendmsg+0x64/0xb0 [kernel]<br> 0xffffffff81554e07 : sock_aio_write+0x157/0x180 [kernel]<br> 0xffffffff811fdf3d : do_sync_write+0x8d/0xd0 [kernel]<br> 0xffffffff811fe8a5 : vfs_write+0x1b5/0x1e0 [kernel]<br> 0xffffffff811ff2cf : sys_write+0x7f/0xe0 [kernel]<br> 0xffffffff81697189 : system_call_fastpath+0x16/0x1b [kernel]<br>—————-END————————-</p>
</blockquote>
<h3 id="2-函数的调用过程"><a href="#2-函数的调用过程" class="headerlink" title="2.函数的调用过程"></a>2.函数的调用过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost stp]# cat socket-trace.stp</div><div class="line">probe kernel.function(&quot;*@net/socket.c&quot;).call&#123;</div><div class="line">	printf(&quot;%s -&gt; %s\n&quot;,thread_indent(1),ppfunc())</div><div class="line">&#125;</div><div class="line">probe kernel.function(&quot;*@net/socket.c&quot;).return&#123;</div><div class="line">	printf(&quot;%s&lt;-%s\n&quot;,thread_indent(-1),ppfunc())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>thread_indent(1)     打印程序名称（线程id）<br>ppfunc() 打印出执行函数符号</p>
<p>kernel.function(“<em>@net/socket.c”).call<br>调用net/socket.c 文件中函数时候会触发函数体执行打印动作<br>kernel.function(“</em>@net/socket.c”).return<br>调用net/socket.c文件中函数执行完成返回后会触发函数体打印动作</p>
<blockquote>
<p>[root@localhost stp]# stap socket-trace.stp<br>  0 dndX11(3295): -&gt; SyS_recvmsg<br>  0 dndX11(3295): -&gt; <strong>sys_recvmsg<br>  0 dndX11(3295): -&gt; sockfd_lookup_light<br>  0 dndX11(3295):&lt;-sockfd_lookup<em>light<br>  1 dndX11(3295): -&gt; </em></strong>sys_recvmsg<br>  3 dndX11(3295): -&gt; sock_recvmsg<br>  7 dndX11(3295):&lt;-sock_recvmsg<br>  8 dndX11(3295):&lt;-<strong>_sys_recvmsg<br>  9 dndX11(3295):&lt;-</strong>sys_recvmsg<br> 10 dndX11(3295):&lt;-SyS_recvmsg<br>25274 dndX11(3295): -&gt; SyS_recvmsg<br>25279 dndX11(3295): -&gt; <strong>sys_recvmsg<br>25281 dndX11(3295): -&gt; sockfd_lookup_light<br>25284 dndX11(3295):&lt;-sockfd_lookup<em>light<br>25285 dndX11(3295): -&gt; </em></strong>sys_recvmsg<br>25288 dndX11(3295): -&gt; sock_recvmsg<br>25291 dndX11(3295):&lt;-sock_recvmsgx</p>
</blockquote>
<h3 id="3-打印协议栈函数中某一行数据"><a href="#3-打印协议栈函数中某一行数据" class="headerlink" title="3.打印协议栈函数中某一行数据"></a>3.打印协议栈函数中某一行数据</h3><p>/home/qinlong/rpmbuild/SOURCES/linux-3.10.0-514.16.1.el7/net/ipv4/tcp.c<br>局部源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1065 int tcp_sendmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,</div><div class="line">1066                 size_t size)</div><div class="line">1067 &#123;</div><div class="line">1068         struct iovec *iov;</div><div class="line">1069         struct tcp_sock *tp = tcp_sk(sk);</div><div class="line">1070         struct sk_buff *skb;</div><div class="line">1071         int iovlen, flags, err, copied = 0;</div><div class="line">1072         int mss_now = 0, size_goal, copied_syn = 0, offset = 0;</div><div class="line">1073         bool sg;</div><div class="line">1074         long timeo;</div><div class="line">1075</div><div class="line">1076         lock_sock(sk);</div><div class="line">1077</div><div class="line">1078         flags = msg-&gt;msg_flags;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# stap -L &apos;kernel.statement(&quot;*@net/ipv4/tcp.c:1078&quot;)&apos;</div><div class="line">kernel.statement(&quot;tcp_sendmsg@net/ipv4/tcp.c:1078&quot;) $iocb:struct kiocb* $sk:struct sock* $msg:struct msghdr* $size:size_t $copied:int $mss_now:int $size_goal:int $copied_syn:int $offset:int $timeo:long int</div></pre></td></tr></table></figure>
<p>执行上述函数，可确代码具体的函数局部变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$iocb:struct kiocb* </div><div class="line">$sk:struct sock* </div><div class="line">$msg:struct msghdr* </div><div class="line">$size:size_t </div><div class="line">$copied:int</div><div class="line">$mss_now:int </div><div class="line">$size_goal:int </div><div class="line">$copied_syn:int </div><div class="line">$offset:int </div><div class="line">$timeo:long int</div></pre></td></tr></table></figure></p>
<p>根据以上变量打印出size值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# stap -e &apos;probe kernel.statement(&quot;*@net/ipv4/tcp.c:1078&quot;) &#123;printf(&quot;size %d \n&quot;,$size)&#125;&apos;</div><div class="line">size 36</div><div class="line">size 44</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;systemtap使用调试记录（一）&quot;&gt;&lt;a href=&quot;#systemtap使用调试记录（一）&quot; class=&quot;headerlink&quot; title=&quot;systemtap使用调试记录（一）&quot;&gt;&lt;/a&gt;systemtap使用调试记录（一）&lt;/h1&gt;&lt;h2 id=&quot;一、调试环境介绍&quot;&gt;&lt;a href=&quot;#一、调试环境介绍&quot; class=&quot;headerlink&quot; title=&quot;一、调试环境介绍&quot;&gt;&lt;/a&gt;一、调试环境介绍&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Linux 3.10.0-514.16.1.el7.x86_64 
kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm 同版本的开发头文件
kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm
kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm 同版本调试数据包
linux-3.10.0-514.16.1.el7.tar.xz 同版本的源码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://centos.pkgs.org/7/centos-updates-x86_64/kernel-devel-3.10.0-514.16.1.el7.x86_64.rpm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;kernel开发头文件下载地址&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-3.10.0-514.16.1.el7.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;kernel调试包下载地址&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://debuginfo.centos.org/7/x86_64/kernel-debuginfo-common-x86_64-3.10.0-514.16.1.el7.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;kernel调试common包下载地址&lt;/em&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://wiki.centos.org/zh/HowTos/I_need_the_Kernel_Source#head-963cd44439b8c10fa507fa0c90725029c060108a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;根据当前虚拟机获取内核代码的方法&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux kernel" scheme="http://vcpu.me/categories/linux-kernel/"/>
    
    
      <category term="systemtap" scheme="http://vcpu.me/tags/systemtap/"/>
    
  </entry>
  
</feed>
